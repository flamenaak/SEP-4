
FirstTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  000026ba  0000274e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000066a  00800162  00800162  000027b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000027b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000027e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a0  00000000  00000000  00002820  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005849  00000000  00000000  00002cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001273  00000000  00000000  00008509  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000306c  00000000  00000000  0000977c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f18  00000000  00000000  0000c7e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019a4  00000000  00000000  0000d700  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000571d  00000000  00000000  0000f0a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005c8  00000000  00000000  000147c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__vector_13>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 a9 04 	jmp	0x952	; 0x952 <__vector_16>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__vector_20>
      54:	0c 94 90 08 	jmp	0x1120	; 0x1120 <__vector_21>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <__vector_28>
      74:	0c 94 16 09 	jmp	0x122c	; 0x122c <__vector_29>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	ea eb       	ldi	r30, 0xBA	; 186
      90:	f6 e2       	ldi	r31, 0x26	; 38
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a2 36       	cpi	r26, 0x62	; 98
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	27 e0       	ldi	r18, 0x07	; 7
      a0:	a2 e6       	ldi	r26, 0x62	; 98
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	ac 3c       	cpi	r26, 0xCC	; 204
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 57 04 	call	0x8ae	; 0x8ae <main>
      b2:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <obstacles_task>:
{

}
//-----------------------------------------
void comReceiver_task(void *pvParameters)
{
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	00 d0       	rcall	.+0      	; 0xc0 <obstacles_task+0x6>
      c0:	00 d0       	rcall	.+0      	; 0xc2 <obstacles_task+0x8>
      c2:	cd b7       	in	r28, 0x3d	; 61
      c4:	de b7       	in	r29, 0x3e	; 62
      c6:	0f 2e       	mov	r0, r31
      c8:	f5 ef       	ldi	r31, 0xF5	; 245
      ca:	6f 2e       	mov	r6, r31
      cc:	f1 e0       	ldi	r31, 0x01	; 1
      ce:	7f 2e       	mov	r7, r31
      d0:	f0 2d       	mov	r31, r0
      d2:	0f 2e       	mov	r0, r31
      d4:	f3 e1       	ldi	r31, 0x13	; 19
      d6:	af 2e       	mov	r10, r31
      d8:	f3 e0       	ldi	r31, 0x03	; 3
      da:	bf 2e       	mov	r11, r31
      dc:	f0 2d       	mov	r31, r0
      de:	33 24       	eor	r3, r3
      e0:	33 94       	inc	r3
      e2:	21 2c       	mov	r2, r1
      e4:	0f 2e       	mov	r0, r31
      e6:	f9 ef       	ldi	r31, 0xF9	; 249
      e8:	8f 2e       	mov	r8, r31
      ea:	f1 e0       	ldi	r31, 0x01	; 1
      ec:	9f 2e       	mov	r9, r31
      ee:	f0 2d       	mov	r31, r0
      f0:	0f 2e       	mov	r0, r31
      f2:	f1 e1       	ldi	r31, 0x11	; 17
      f4:	cf 2e       	mov	r12, r31
      f6:	f3 e0       	ldi	r31, 0x03	; 3
      f8:	df 2e       	mov	r13, r31
      fa:	f0 2d       	mov	r31, r0
      fc:	19 82       	std	Y+1, r1	; 0x01
      fe:	1a 82       	std	Y+2, r1	; 0x02
     100:	d3 01       	movw	r26, r6
     102:	8d 91       	ld	r24, X+
     104:	9c 91       	ld	r25, X
     106:	11 97       	sbiw	r26, 0x01	; 1
     108:	9c 01       	movw	r18, r24
     10a:	22 0f       	add	r18, r18
     10c:	33 1f       	adc	r19, r19
     10e:	88 0f       	add	r24, r24
     110:	99 1f       	adc	r25, r25
     112:	88 0f       	add	r24, r24
     114:	99 1f       	adc	r25, r25
     116:	88 0f       	add	r24, r24
     118:	99 1f       	adc	r25, r25
     11a:	82 0f       	add	r24, r18
     11c:	93 1f       	adc	r25, r19
     11e:	12 96       	adiw	r26, 0x02	; 2
     120:	ed 91       	ld	r30, X+
     122:	fc 91       	ld	r31, X
     124:	13 97       	sbiw	r26, 0x03	; 3
     126:	8e 0f       	add	r24, r30
     128:	9f 1f       	adc	r25, r31
     12a:	fc 01       	movw	r30, r24
     12c:	ee 59       	subi	r30, 0x9E	; 158
     12e:	fe 4f       	sbci	r31, 0xFE	; 254
     130:	80 81       	ld	r24, Z
     132:	81 11       	cpse	r24, r1
     134:	96 c0       	rjmp	.+300    	; 0x262 <obstacles_task+0x1a8>
     136:	0f 2e       	mov	r0, r31
     138:	f3 e6       	ldi	r31, 0x63	; 99
     13a:	ef 2e       	mov	r14, r31
     13c:	f1 e0       	ldi	r31, 0x01	; 1
     13e:	ff 2e       	mov	r15, r31
     140:	f0 2d       	mov	r31, r0
     142:	4b ef       	ldi	r20, 0xFB	; 251
     144:	51 e0       	ldi	r21, 0x01	; 1
     146:	b7 01       	movw	r22, r14
     148:	0e c0       	rjmp	.+28     	; 0x166 <obstacles_task+0xac>
     14a:	8d 91       	ld	r24, X+
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	81 93       	st	Z+, r24
     150:	91 93       	st	Z+, r25
     152:	e2 17       	cp	r30, r18
     154:	f3 07       	cpc	r31, r19
     156:	c9 f7       	brne	.-14     	; 0x14a <obstacles_task+0x90>
     158:	66 5f       	subi	r22, 0xF6	; 246
     15a:	7f 4f       	sbci	r23, 0xFF	; 255
     15c:	4c 5e       	subi	r20, 0xEC	; 236
     15e:	5f 4f       	sbci	r21, 0xFF	; 255
     160:	4a 15       	cp	r20, r10
     162:	5b 05       	cpc	r21, r11
     164:	31 f0       	breq	.+12     	; 0x172 <obstacles_task+0xb8>
     166:	9a 01       	movw	r18, r20
     168:	2e 5e       	subi	r18, 0xEE	; 238
     16a:	3f 4f       	sbci	r19, 0xFF	; 255
     16c:	fa 01       	movw	r30, r20
     16e:	db 01       	movw	r26, r22
     170:	ec cf       	rjmp	.-40     	; 0x14a <obstacles_task+0x90>
     172:	ed e0       	ldi	r30, 0x0D	; 13
     174:	f2 e0       	ldi	r31, 0x02	; 2
     176:	43 2c       	mov	r4, r3
     178:	52 2c       	mov	r5, r2
     17a:	00 e0       	ldi	r16, 0x00	; 0
     17c:	10 e0       	ldi	r17, 0x00	; 0
     17e:	fc 83       	std	Y+4, r31	; 0x04
     180:	eb 83       	std	Y+3, r30	; 0x03
     182:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <rand>
     186:	81 70       	andi	r24, 0x01	; 1
     188:	90 78       	andi	r25, 0x80	; 128
     18a:	99 23       	and	r25, r25
     18c:	24 f4       	brge	.+8      	; 0x196 <obstacles_task+0xdc>
     18e:	01 97       	sbiw	r24, 0x01	; 1
     190:	8e 6f       	ori	r24, 0xFE	; 254
     192:	9f 6f       	ori	r25, 0xFF	; 255
     194:	01 96       	adiw	r24, 0x01	; 1
     196:	d4 01       	movw	r26, r8
     198:	8d 93       	st	X+, r24
     19a:	9c 93       	st	X, r25
     19c:	02 30       	cpi	r16, 0x02	; 2
     19e:	11 05       	cpc	r17, r1
     1a0:	2c f0       	brlt	.+10     	; 0x1ac <obstacles_task+0xf2>
     1a2:	bd e0       	ldi	r27, 0x0D	; 13
     1a4:	4b 16       	cp	r4, r27
     1a6:	51 04       	cpc	r5, r1
     1a8:	d9 f4       	brne	.+54     	; 0x1e0 <obstacles_task+0x126>
     1aa:	60 c0       	rjmp	.+192    	; 0x26c <obstacles_task+0x1b2>
     1ac:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <rand>
     1b0:	81 70       	andi	r24, 0x01	; 1
     1b2:	90 78       	andi	r25, 0x80	; 128
     1b4:	99 23       	and	r25, r25
     1b6:	24 f4       	brge	.+8      	; 0x1c0 <obstacles_task+0x106>
     1b8:	01 97       	sbiw	r24, 0x01	; 1
     1ba:	8e 6f       	ori	r24, 0xFE	; 254
     1bc:	9f 6f       	ori	r25, 0xFF	; 255
     1be:	01 96       	adiw	r24, 0x01	; 1
     1c0:	eb 81       	ldd	r30, Y+3	; 0x03
     1c2:	fc 81       	ldd	r31, Y+4	; 0x04
     1c4:	91 83       	std	Z+1, r25	; 0x01
     1c6:	80 83       	st	Z, r24
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	11 f4       	brne	.+4      	; 0x1d0 <obstacles_task+0x116>
     1cc:	0f 5f       	subi	r16, 0xFF	; 255
     1ce:	1f 4f       	sbci	r17, 0xFF	; 255
     1d0:	c2 01       	movw	r24, r4
     1d2:	83 70       	andi	r24, 0x03	; 3
     1d4:	99 27       	eor	r25, r25
     1d6:	89 2b       	or	r24, r25
     1d8:	39 f4       	brne	.+14     	; 0x1e8 <obstacles_task+0x12e>
     1da:	09 81       	ldd	r16, Y+1	; 0x01
     1dc:	1a 81       	ldd	r17, Y+2	; 0x02
     1de:	04 c0       	rjmp	.+8      	; 0x1e8 <obstacles_task+0x12e>
     1e0:	ab 81       	ldd	r26, Y+3	; 0x03
     1e2:	bc 81       	ldd	r27, Y+4	; 0x04
     1e4:	1d 92       	st	X+, r1
     1e6:	1c 92       	st	X, r1
     1e8:	bf ef       	ldi	r27, 0xFF	; 255
     1ea:	4b 1a       	sub	r4, r27
     1ec:	5b 0a       	sbc	r5, r27
     1ee:	eb 81       	ldd	r30, Y+3	; 0x03
     1f0:	fc 81       	ldd	r31, Y+4	; 0x04
     1f2:	74 96       	adiw	r30, 0x14	; 20
     1f4:	fc 83       	std	Y+4, r31	; 0x04
     1f6:	eb 83       	std	Y+3, r30	; 0x03
     1f8:	fe e0       	ldi	r31, 0x0E	; 14
     1fa:	4f 16       	cp	r4, r31
     1fc:	51 04       	cpc	r5, r1
     1fe:	09 f6       	brne	.-126    	; 0x182 <obstacles_task+0xc8>
     200:	a4 01       	movw	r20, r8
     202:	0e c0       	rjmp	.+28     	; 0x220 <obstacles_task+0x166>
     204:	80 81       	ld	r24, Z
     206:	32 96       	adiw	r30, 0x02	; 2
     208:	8d 93       	st	X+, r24
     20a:	e2 17       	cp	r30, r18
     20c:	f3 07       	cpc	r31, r19
     20e:	d1 f7       	brne	.-12     	; 0x204 <obstacles_task+0x14a>
     210:	4c 5e       	subi	r20, 0xEC	; 236
     212:	5f 4f       	sbci	r21, 0xFF	; 255
     214:	8a e0       	ldi	r24, 0x0A	; 10
     216:	e8 0e       	add	r14, r24
     218:	f1 1c       	adc	r15, r1
     21a:	4c 15       	cp	r20, r12
     21c:	5d 05       	cpc	r21, r13
     21e:	31 f0       	breq	.+12     	; 0x22c <obstacles_task+0x172>
     220:	9a 01       	movw	r18, r20
     222:	2e 5e       	subi	r18, 0xEE	; 238
     224:	3f 4f       	sbci	r19, 0xFF	; 255
     226:	d7 01       	movw	r26, r14
     228:	fa 01       	movw	r30, r20
     22a:	ec cf       	rjmp	.-40     	; 0x204 <obstacles_task+0x14a>
     22c:	d3 01       	movw	r26, r6
     22e:	8d 91       	ld	r24, X+
     230:	9c 91       	ld	r25, X
     232:	11 97       	sbiw	r26, 0x01	; 1
     234:	fc 01       	movw	r30, r24
     236:	ee 0f       	add	r30, r30
     238:	ff 1f       	adc	r31, r31
     23a:	88 0f       	add	r24, r24
     23c:	99 1f       	adc	r25, r25
     23e:	88 0f       	add	r24, r24
     240:	99 1f       	adc	r25, r25
     242:	88 0f       	add	r24, r24
     244:	99 1f       	adc	r25, r25
     246:	e8 0f       	add	r30, r24
     248:	f9 1f       	adc	r31, r25
     24a:	12 96       	adiw	r26, 0x02	; 2
     24c:	8d 91       	ld	r24, X+
     24e:	9c 91       	ld	r25, X
     250:	13 97       	sbiw	r26, 0x03	; 3
     252:	e8 0f       	add	r30, r24
     254:	f9 1f       	adc	r31, r25
     256:	ee 0f       	add	r30, r30
     258:	ff 1f       	adc	r31, r31
     25a:	e7 50       	subi	r30, 0x07	; 7
     25c:	fe 4f       	sbci	r31, 0xFE	; 254
     25e:	30 82       	st	Z, r3
     260:	21 82       	std	Z+1, r2	; 0x01
     262:	88 ee       	ldi	r24, 0xE8	; 232
     264:	93 e0       	ldi	r25, 0x03	; 3
     266:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <vTaskDelay>
     26a:	4a cf       	rjmp	.-364    	; 0x100 <obstacles_task+0x46>
     26c:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <rand>
     270:	81 70       	andi	r24, 0x01	; 1
     272:	90 78       	andi	r25, 0x80	; 128
     274:	99 23       	and	r25, r25
     276:	24 f4       	brge	.+8      	; 0x280 <obstacles_task+0x1c6>
     278:	01 97       	sbiw	r24, 0x01	; 1
     27a:	8e 6f       	ori	r24, 0xFE	; 254
     27c:	9f 6f       	ori	r25, 0xFF	; 255
     27e:	01 96       	adiw	r24, 0x01	; 1
     280:	eb 81       	ldd	r30, Y+3	; 0x03
     282:	fc 81       	ldd	r31, Y+4	; 0x04
     284:	91 83       	std	Z+1, r25	; 0x01
     286:	80 83       	st	Z, r24
     288:	01 97       	sbiw	r24, 0x01	; 1
     28a:	09 f0       	breq	.+2      	; 0x28e <obstacles_task+0x1d4>
     28c:	b9 cf       	rjmp	.-142    	; 0x200 <obstacles_task+0x146>
     28e:	9e cf       	rjmp	.-196    	; 0x1cc <obstacles_task+0x112>

00000290 <joystickSampler_task>:
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	00 d0       	rcall	.+0      	; 0x296 <joystickSampler_task+0x6>
     296:	00 d0       	rcall	.+0      	; 0x298 <joystickSampler_task+0x8>
     298:	00 d0       	rcall	.+0      	; 0x29a <joystickSampler_task+0xa>
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
     29e:	05 ef       	ldi	r16, 0xF5	; 245
     2a0:	11 e0       	ldi	r17, 0x01	; 1
     2a2:	68 94       	set
     2a4:	aa 24       	eor	r10, r10
     2a6:	a1 f8       	bld	r10, 1
     2a8:	b1 2c       	mov	r11, r1
     2aa:	cc 24       	eor	r12, r12
     2ac:	c3 94       	inc	r12
     2ae:	d1 2c       	mov	r13, r1
     2b0:	0f 2e       	mov	r0, r31
     2b2:	f3 e0       	ldi	r31, 0x03	; 3
     2b4:	ef 2e       	mov	r14, r31
     2b6:	f1 2c       	mov	r15, r1
     2b8:	f0 2d       	mov	r31, r0
     2ba:	f8 01       	movw	r30, r16
     2bc:	80 81       	ld	r24, Z
     2be:	91 81       	ldd	r25, Z+1	; 0x01
     2c0:	9c 83       	std	Y+4, r25	; 0x04
     2c2:	8b 83       	std	Y+3, r24	; 0x03
     2c4:	82 81       	ldd	r24, Z+2	; 0x02
     2c6:	93 81       	ldd	r25, Z+3	; 0x03
     2c8:	9e 83       	std	Y+6, r25	; 0x06
     2ca:	8d 83       	std	Y+5, r24	; 0x05
     2cc:	30 99       	sbic	0x06, 0	; 6
     2ce:	0e c0       	rjmp	.+28     	; 0x2ec <joystickSampler_task+0x5c>
     2d0:	1a 82       	std	Y+2, r1	; 0x02
     2d2:	19 82       	std	Y+1, r1	; 0x01
     2d4:	20 e0       	ldi	r18, 0x00	; 0
     2d6:	4f ef       	ldi	r20, 0xFF	; 255
     2d8:	5f ef       	ldi	r21, 0xFF	; 255
     2da:	be 01       	movw	r22, r28
     2dc:	6f 5f       	subi	r22, 0xFF	; 255
     2de:	7f 4f       	sbci	r23, 0xFF	; 255
     2e0:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <inputQueue>
     2e4:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <inputQueue+0x1>
     2e8:	0e 94 94 0a 	call	0x1528	; 0x1528 <xQueueGenericSend>
     2ec:	31 99       	sbic	0x06, 1	; 6
     2ee:	0e c0       	rjmp	.+28     	; 0x30c <joystickSampler_task+0x7c>
     2f0:	ba 82       	std	Y+2, r11	; 0x02
     2f2:	a9 82       	std	Y+1, r10	; 0x01
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	4f ef       	ldi	r20, 0xFF	; 255
     2f8:	5f ef       	ldi	r21, 0xFF	; 255
     2fa:	be 01       	movw	r22, r28
     2fc:	6f 5f       	subi	r22, 0xFF	; 255
     2fe:	7f 4f       	sbci	r23, 0xFF	; 255
     300:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <inputQueue>
     304:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <inputQueue+0x1>
     308:	0e 94 94 0a 	call	0x1528	; 0x1528 <xQueueGenericSend>
     30c:	36 99       	sbic	0x06, 6	; 6
     30e:	0e c0       	rjmp	.+28     	; 0x32c <joystickSampler_task+0x9c>
     310:	da 82       	std	Y+2, r13	; 0x02
     312:	c9 82       	std	Y+1, r12	; 0x01
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	4f ef       	ldi	r20, 0xFF	; 255
     318:	5f ef       	ldi	r21, 0xFF	; 255
     31a:	be 01       	movw	r22, r28
     31c:	6f 5f       	subi	r22, 0xFF	; 255
     31e:	7f 4f       	sbci	r23, 0xFF	; 255
     320:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <inputQueue>
     324:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <inputQueue+0x1>
     328:	0e 94 94 0a 	call	0x1528	; 0x1528 <xQueueGenericSend>
     32c:	37 99       	sbic	0x06, 7	; 6
     32e:	0e c0       	rjmp	.+28     	; 0x34c <joystickSampler_task+0xbc>
     330:	fa 82       	std	Y+2, r15	; 0x02
     332:	e9 82       	std	Y+1, r14	; 0x01
     334:	20 e0       	ldi	r18, 0x00	; 0
     336:	4f ef       	ldi	r20, 0xFF	; 255
     338:	5f ef       	ldi	r21, 0xFF	; 255
     33a:	be 01       	movw	r22, r28
     33c:	6f 5f       	subi	r22, 0xFF	; 255
     33e:	7f 4f       	sbci	r23, 0xFF	; 255
     340:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <inputQueue>
     344:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <inputQueue+0x1>
     348:	0e 94 94 0a 	call	0x1528	; 0x1528 <xQueueGenericSend>
     34c:	84 e6       	ldi	r24, 0x64	; 100
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <vTaskDelay>
     354:	b2 cf       	rjmp	.-156    	; 0x2ba <joystickSampler_task+0x2a>

00000356 <update>:
     356:	cf 92       	push	r12
     358:	df 92       	push	r13
     35a:	ef 92       	push	r14
     35c:	ff 92       	push	r15
     35e:	0f 93       	push	r16
     360:	1f 93       	push	r17
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	c1 e1       	ldi	r28, 0x11	; 17
     368:	d3 e0       	ldi	r29, 0x03	; 3
     36a:	49 ef       	ldi	r20, 0xF9	; 249
     36c:	51 e0       	ldi	r21, 0x01	; 1
     36e:	01 e1       	ldi	r16, 0x11	; 17
     370:	13 e0       	ldi	r17, 0x03	; 3
     372:	c1 2c       	mov	r12, r1
     374:	d1 2c       	mov	r13, r1
     376:	61 e0       	ldi	r22, 0x01	; 1
     378:	70 e0       	ldi	r23, 0x00	; 0
     37a:	de 01       	movw	r26, r28
     37c:	19 82       	std	Y+1, r1	; 0x01
     37e:	18 82       	st	Y, r1
     380:	fa 01       	movw	r30, r20
     382:	8c 2d       	mov	r24, r12
     384:	9d 2d       	mov	r25, r13
     386:	21 91       	ld	r18, Z+
     388:	31 91       	ld	r19, Z+
     38a:	21 30       	cpi	r18, 0x01	; 1
     38c:	31 05       	cpc	r19, r1
     38e:	79 f4       	brne	.+30     	; 0x3ae <update+0x58>
     390:	ed 90       	ld	r14, X+
     392:	fc 90       	ld	r15, X
     394:	11 97       	sbiw	r26, 0x01	; 1
     396:	9b 01       	movw	r18, r22
     398:	08 2e       	mov	r0, r24
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <update+0x4a>
     39c:	22 0f       	add	r18, r18
     39e:	33 1f       	adc	r19, r19
     3a0:	0a 94       	dec	r0
     3a2:	e2 f7       	brpl	.-8      	; 0x39c <update+0x46>
     3a4:	2e 29       	or	r18, r14
     3a6:	3f 29       	or	r19, r15
     3a8:	11 96       	adiw	r26, 0x01	; 1
     3aa:	3c 93       	st	X, r19
     3ac:	2e 93       	st	-X, r18
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	8a 30       	cpi	r24, 0x0A	; 10
     3b2:	91 05       	cpc	r25, r1
     3b4:	41 f7       	brne	.-48     	; 0x386 <update+0x30>
     3b6:	22 96       	adiw	r28, 0x02	; 2
     3b8:	4c 5e       	subi	r20, 0xEC	; 236
     3ba:	5f 4f       	sbci	r21, 0xFF	; 255
     3bc:	40 17       	cp	r20, r16
     3be:	51 07       	cpc	r21, r17
     3c0:	e1 f6       	brne	.-72     	; 0x37a <update+0x24>
     3c2:	df 91       	pop	r29
     3c4:	cf 91       	pop	r28
     3c6:	1f 91       	pop	r17
     3c8:	0f 91       	pop	r16
     3ca:	ff 90       	pop	r15
     3cc:	ef 90       	pop	r14
     3ce:	df 90       	pop	r13
     3d0:	cf 90       	pop	r12
     3d2:	08 95       	ret

000003d4 <moveCar>:
     3d4:	81 30       	cpi	r24, 0x01	; 1
     3d6:	91 05       	cpc	r25, r1
     3d8:	09 f4       	brne	.+2      	; 0x3dc <moveCar+0x8>
     3da:	62 c0       	rjmp	.+196    	; 0x4a0 <__FUSE_REGION_LENGTH__+0xa0>
     3dc:	40 f0       	brcs	.+16     	; 0x3ee <moveCar+0x1a>
     3de:	82 30       	cpi	r24, 0x02	; 2
     3e0:	91 05       	cpc	r25, r1
     3e2:	09 f4       	brne	.+2      	; 0x3e6 <moveCar+0x12>
     3e4:	ba c0       	rjmp	.+372    	; 0x55a <__FUSE_REGION_LENGTH__+0x15a>
     3e6:	03 97       	sbiw	r24, 0x03	; 3
     3e8:	09 f4       	brne	.+2      	; 0x3ec <moveCar+0x18>
     3ea:	14 c1       	rjmp	.+552    	; 0x614 <__FUSE_REGION_LENGTH__+0x214>
     3ec:	08 95       	ret
     3ee:	db 01       	movw	r26, r22
     3f0:	12 96       	adiw	r26, 0x02	; 2
     3f2:	2d 91       	ld	r18, X+
     3f4:	3c 91       	ld	r19, X
     3f6:	13 97       	sbiw	r26, 0x03	; 3
     3f8:	c9 01       	movw	r24, r18
     3fa:	01 96       	adiw	r24, 0x01	; 1
     3fc:	8a 30       	cpi	r24, 0x0A	; 10
     3fe:	91 05       	cpc	r25, r1
     400:	08 f0       	brcs	.+2      	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
     402:	63 c1       	rjmp	.+710    	; 0x6ca <__FUSE_REGION_LENGTH__+0x2ca>
     404:	4d 91       	ld	r20, X+
     406:	5c 91       	ld	r21, X
     408:	da 01       	movw	r26, r20
     40a:	aa 0f       	add	r26, r26
     40c:	bb 1f       	adc	r27, r27
     40e:	fa 01       	movw	r30, r20
     410:	ee 0f       	add	r30, r30
     412:	ff 1f       	adc	r31, r31
     414:	ee 0f       	add	r30, r30
     416:	ff 1f       	adc	r31, r31
     418:	ee 0f       	add	r30, r30
     41a:	ff 1f       	adc	r31, r31
     41c:	ea 0f       	add	r30, r26
     41e:	fb 1f       	adc	r31, r27
     420:	e8 0f       	add	r30, r24
     422:	f9 1f       	adc	r31, r25
     424:	ee 0f       	add	r30, r30
     426:	ff 1f       	adc	r31, r31
     428:	e7 50       	subi	r30, 0x07	; 7
     42a:	fe 4f       	sbci	r31, 0xFE	; 254
     42c:	80 81       	ld	r24, Z
     42e:	91 81       	ldd	r25, Z+1	; 0x01
     430:	89 2b       	or	r24, r25
     432:	09 f0       	breq	.+2      	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
     434:	4a c1       	rjmp	.+660    	; 0x6ca <__FUSE_REGION_LENGTH__+0x2ca>
     436:	fd 01       	movw	r30, r26
     438:	44 0f       	add	r20, r20
     43a:	55 1f       	adc	r21, r21
     43c:	44 0f       	add	r20, r20
     43e:	55 1f       	adc	r21, r21
     440:	44 0f       	add	r20, r20
     442:	55 1f       	adc	r21, r21
     444:	e4 0f       	add	r30, r20
     446:	f5 1f       	adc	r31, r21
     448:	e2 0f       	add	r30, r18
     44a:	f3 1f       	adc	r31, r19
     44c:	ee 0f       	add	r30, r30
     44e:	ff 1f       	adc	r31, r31
     450:	e7 50       	subi	r30, 0x07	; 7
     452:	fe 4f       	sbci	r31, 0xFE	; 254
     454:	11 82       	std	Z+1, r1	; 0x01
     456:	10 82       	st	Z, r1
     458:	fb 01       	movw	r30, r22
     45a:	20 81       	ld	r18, Z
     45c:	31 81       	ldd	r19, Z+1	; 0x01
     45e:	82 81       	ldd	r24, Z+2	; 0x02
     460:	93 81       	ldd	r25, Z+3	; 0x03
     462:	01 96       	adiw	r24, 0x01	; 1
     464:	93 83       	std	Z+3, r25	; 0x03
     466:	82 83       	std	Z+2, r24	; 0x02
     468:	f9 01       	movw	r30, r18
     46a:	ee 0f       	add	r30, r30
     46c:	ff 1f       	adc	r31, r31
     46e:	22 0f       	add	r18, r18
     470:	33 1f       	adc	r19, r19
     472:	22 0f       	add	r18, r18
     474:	33 1f       	adc	r19, r19
     476:	22 0f       	add	r18, r18
     478:	33 1f       	adc	r19, r19
     47a:	e2 0f       	add	r30, r18
     47c:	f3 1f       	adc	r31, r19
     47e:	e8 0f       	add	r30, r24
     480:	f9 1f       	adc	r31, r25
     482:	ee 0f       	add	r30, r30
     484:	ff 1f       	adc	r31, r31
     486:	e7 50       	subi	r30, 0x07	; 7
     488:	fe 4f       	sbci	r31, 0xFE	; 254
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	91 83       	std	Z+1, r25	; 0x01
     490:	80 83       	st	Z, r24
     492:	0e 94 ab 01 	call	0x356	; 0x356 <update>
     496:	88 ec       	ldi	r24, 0xC8	; 200
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <vTaskDelay>
     49e:	08 95       	ret
     4a0:	db 01       	movw	r26, r22
     4a2:	12 96       	adiw	r26, 0x02	; 2
     4a4:	2d 91       	ld	r18, X+
     4a6:	3c 91       	ld	r19, X
     4a8:	13 97       	sbiw	r26, 0x03	; 3
     4aa:	21 15       	cp	r18, r1
     4ac:	31 05       	cpc	r19, r1
     4ae:	09 f4       	brne	.+2      	; 0x4b2 <__FUSE_REGION_LENGTH__+0xb2>
     4b0:	0c c1       	rjmp	.+536    	; 0x6ca <__FUSE_REGION_LENGTH__+0x2ca>
     4b2:	4d 91       	ld	r20, X+
     4b4:	5c 91       	ld	r21, X
     4b6:	11 97       	sbiw	r26, 0x01	; 1
     4b8:	fa 01       	movw	r30, r20
     4ba:	ee 0f       	add	r30, r30
     4bc:	ff 1f       	adc	r31, r31
     4be:	ca 01       	movw	r24, r20
     4c0:	88 0f       	add	r24, r24
     4c2:	99 1f       	adc	r25, r25
     4c4:	88 0f       	add	r24, r24
     4c6:	99 1f       	adc	r25, r25
     4c8:	88 0f       	add	r24, r24
     4ca:	99 1f       	adc	r25, r25
     4cc:	e8 0f       	add	r30, r24
     4ce:	f9 1f       	adc	r31, r25
     4d0:	e2 0f       	add	r30, r18
     4d2:	f3 1f       	adc	r31, r19
     4d4:	ee 0f       	add	r30, r30
     4d6:	ff 1f       	adc	r31, r31
     4d8:	e9 50       	subi	r30, 0x09	; 9
     4da:	fe 4f       	sbci	r31, 0xFE	; 254
     4dc:	80 81       	ld	r24, Z
     4de:	91 81       	ldd	r25, Z+1	; 0x01
     4e0:	89 2b       	or	r24, r25
     4e2:	09 f0       	breq	.+2      	; 0x4e6 <__FUSE_REGION_LENGTH__+0xe6>
     4e4:	f2 c0       	rjmp	.+484    	; 0x6ca <__FUSE_REGION_LENGTH__+0x2ca>
     4e6:	fa 01       	movw	r30, r20
     4e8:	ee 0f       	add	r30, r30
     4ea:	ff 1f       	adc	r31, r31
     4ec:	44 0f       	add	r20, r20
     4ee:	55 1f       	adc	r21, r21
     4f0:	44 0f       	add	r20, r20
     4f2:	55 1f       	adc	r21, r21
     4f4:	44 0f       	add	r20, r20
     4f6:	55 1f       	adc	r21, r21
     4f8:	e4 0f       	add	r30, r20
     4fa:	f5 1f       	adc	r31, r21
     4fc:	e2 0f       	add	r30, r18
     4fe:	f3 1f       	adc	r31, r19
     500:	ee 0f       	add	r30, r30
     502:	ff 1f       	adc	r31, r31
     504:	e7 50       	subi	r30, 0x07	; 7
     506:	fe 4f       	sbci	r31, 0xFE	; 254
     508:	11 82       	std	Z+1, r1	; 0x01
     50a:	10 82       	st	Z, r1
     50c:	12 96       	adiw	r26, 0x02	; 2
     50e:	8d 91       	ld	r24, X+
     510:	9c 91       	ld	r25, X
     512:	13 97       	sbiw	r26, 0x03	; 3
     514:	01 97       	sbiw	r24, 0x01	; 1
     516:	13 96       	adiw	r26, 0x03	; 3
     518:	9c 93       	st	X, r25
     51a:	8e 93       	st	-X, r24
     51c:	12 97       	sbiw	r26, 0x02	; 2
     51e:	2d 91       	ld	r18, X+
     520:	3c 91       	ld	r19, X
     522:	f9 01       	movw	r30, r18
     524:	ee 0f       	add	r30, r30
     526:	ff 1f       	adc	r31, r31
     528:	22 0f       	add	r18, r18
     52a:	33 1f       	adc	r19, r19
     52c:	22 0f       	add	r18, r18
     52e:	33 1f       	adc	r19, r19
     530:	22 0f       	add	r18, r18
     532:	33 1f       	adc	r19, r19
     534:	e2 0f       	add	r30, r18
     536:	f3 1f       	adc	r31, r19
     538:	e8 0f       	add	r30, r24
     53a:	f9 1f       	adc	r31, r25
     53c:	ee 0f       	add	r30, r30
     53e:	ff 1f       	adc	r31, r31
     540:	e7 50       	subi	r30, 0x07	; 7
     542:	fe 4f       	sbci	r31, 0xFE	; 254
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	91 83       	std	Z+1, r25	; 0x01
     54a:	80 83       	st	Z, r24
     54c:	0e 94 ab 01 	call	0x356	; 0x356 <update>
     550:	88 ec       	ldi	r24, 0xC8	; 200
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <vTaskDelay>
     558:	08 95       	ret
     55a:	fb 01       	movw	r30, r22
     55c:	20 81       	ld	r18, Z
     55e:	31 81       	ldd	r19, Z+1	; 0x01
     560:	c9 01       	movw	r24, r18
     562:	01 96       	adiw	r24, 0x01	; 1
     564:	8e 30       	cpi	r24, 0x0E	; 14
     566:	91 05       	cpc	r25, r1
     568:	08 f0       	brcs	.+2      	; 0x56c <__FUSE_REGION_LENGTH__+0x16c>
     56a:	af c0       	rjmp	.+350    	; 0x6ca <__FUSE_REGION_LENGTH__+0x2ca>
     56c:	42 81       	ldd	r20, Z+2	; 0x02
     56e:	53 81       	ldd	r21, Z+3	; 0x03
     570:	fc 01       	movw	r30, r24
     572:	ee 0f       	add	r30, r30
     574:	ff 1f       	adc	r31, r31
     576:	88 0f       	add	r24, r24
     578:	99 1f       	adc	r25, r25
     57a:	88 0f       	add	r24, r24
     57c:	99 1f       	adc	r25, r25
     57e:	88 0f       	add	r24, r24
     580:	99 1f       	adc	r25, r25
     582:	e8 0f       	add	r30, r24
     584:	f9 1f       	adc	r31, r25
     586:	e4 0f       	add	r30, r20
     588:	f5 1f       	adc	r31, r21
     58a:	ee 0f       	add	r30, r30
     58c:	ff 1f       	adc	r31, r31
     58e:	e7 50       	subi	r30, 0x07	; 7
     590:	fe 4f       	sbci	r31, 0xFE	; 254
     592:	80 81       	ld	r24, Z
     594:	91 81       	ldd	r25, Z+1	; 0x01
     596:	89 2b       	or	r24, r25
     598:	09 f0       	breq	.+2      	; 0x59c <__FUSE_REGION_LENGTH__+0x19c>
     59a:	97 c0       	rjmp	.+302    	; 0x6ca <__FUSE_REGION_LENGTH__+0x2ca>
     59c:	c9 01       	movw	r24, r18
     59e:	88 0f       	add	r24, r24
     5a0:	99 1f       	adc	r25, r25
     5a2:	22 0f       	add	r18, r18
     5a4:	33 1f       	adc	r19, r19
     5a6:	22 0f       	add	r18, r18
     5a8:	33 1f       	adc	r19, r19
     5aa:	22 0f       	add	r18, r18
     5ac:	33 1f       	adc	r19, r19
     5ae:	28 0f       	add	r18, r24
     5b0:	39 1f       	adc	r19, r25
     5b2:	f9 01       	movw	r30, r18
     5b4:	e4 0f       	add	r30, r20
     5b6:	f5 1f       	adc	r31, r21
     5b8:	ee 0f       	add	r30, r30
     5ba:	ff 1f       	adc	r31, r31
     5bc:	e7 50       	subi	r30, 0x07	; 7
     5be:	fe 4f       	sbci	r31, 0xFE	; 254
     5c0:	11 82       	std	Z+1, r1	; 0x01
     5c2:	10 82       	st	Z, r1
     5c4:	db 01       	movw	r26, r22
     5c6:	8d 91       	ld	r24, X+
     5c8:	9c 91       	ld	r25, X
     5ca:	11 97       	sbiw	r26, 0x01	; 1
     5cc:	01 96       	adiw	r24, 0x01	; 1
     5ce:	11 96       	adiw	r26, 0x01	; 1
     5d0:	9c 93       	st	X, r25
     5d2:	8e 93       	st	-X, r24
     5d4:	12 96       	adiw	r26, 0x02	; 2
     5d6:	ed 91       	ld	r30, X+
     5d8:	fc 91       	ld	r31, X
     5da:	13 97       	sbiw	r26, 0x03	; 3
     5dc:	9c 01       	movw	r18, r24
     5de:	22 0f       	add	r18, r18
     5e0:	33 1f       	adc	r19, r19
     5e2:	88 0f       	add	r24, r24
     5e4:	99 1f       	adc	r25, r25
     5e6:	88 0f       	add	r24, r24
     5e8:	99 1f       	adc	r25, r25
     5ea:	88 0f       	add	r24, r24
     5ec:	99 1f       	adc	r25, r25
     5ee:	82 0f       	add	r24, r18
     5f0:	93 1f       	adc	r25, r19
     5f2:	e8 0f       	add	r30, r24
     5f4:	f9 1f       	adc	r31, r25
     5f6:	ee 0f       	add	r30, r30
     5f8:	ff 1f       	adc	r31, r31
     5fa:	e7 50       	subi	r30, 0x07	; 7
     5fc:	fe 4f       	sbci	r31, 0xFE	; 254
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	91 83       	std	Z+1, r25	; 0x01
     604:	80 83       	st	Z, r24
     606:	0e 94 ab 01 	call	0x356	; 0x356 <update>
     60a:	88 ec       	ldi	r24, 0xC8	; 200
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <vTaskDelay>
     612:	08 95       	ret
     614:	fb 01       	movw	r30, r22
     616:	20 81       	ld	r18, Z
     618:	31 81       	ldd	r19, Z+1	; 0x01
     61a:	21 15       	cp	r18, r1
     61c:	31 05       	cpc	r19, r1
     61e:	09 f4       	brne	.+2      	; 0x622 <__FUSE_REGION_LENGTH__+0x222>
     620:	54 c0       	rjmp	.+168    	; 0x6ca <__FUSE_REGION_LENGTH__+0x2ca>
     622:	42 81       	ldd	r20, Z+2	; 0x02
     624:	53 81       	ldd	r21, Z+3	; 0x03
     626:	c9 01       	movw	r24, r18
     628:	01 97       	sbiw	r24, 0x01	; 1
     62a:	fc 01       	movw	r30, r24
     62c:	ee 0f       	add	r30, r30
     62e:	ff 1f       	adc	r31, r31
     630:	88 0f       	add	r24, r24
     632:	99 1f       	adc	r25, r25
     634:	88 0f       	add	r24, r24
     636:	99 1f       	adc	r25, r25
     638:	88 0f       	add	r24, r24
     63a:	99 1f       	adc	r25, r25
     63c:	e8 0f       	add	r30, r24
     63e:	f9 1f       	adc	r31, r25
     640:	e4 0f       	add	r30, r20
     642:	f5 1f       	adc	r31, r21
     644:	ee 0f       	add	r30, r30
     646:	ff 1f       	adc	r31, r31
     648:	e7 50       	subi	r30, 0x07	; 7
     64a:	fe 4f       	sbci	r31, 0xFE	; 254
     64c:	80 81       	ld	r24, Z
     64e:	91 81       	ldd	r25, Z+1	; 0x01
     650:	89 2b       	or	r24, r25
     652:	d9 f5       	brne	.+118    	; 0x6ca <__FUSE_REGION_LENGTH__+0x2ca>
     654:	c9 01       	movw	r24, r18
     656:	88 0f       	add	r24, r24
     658:	99 1f       	adc	r25, r25
     65a:	22 0f       	add	r18, r18
     65c:	33 1f       	adc	r19, r19
     65e:	22 0f       	add	r18, r18
     660:	33 1f       	adc	r19, r19
     662:	22 0f       	add	r18, r18
     664:	33 1f       	adc	r19, r19
     666:	28 0f       	add	r18, r24
     668:	39 1f       	adc	r19, r25
     66a:	f9 01       	movw	r30, r18
     66c:	e4 0f       	add	r30, r20
     66e:	f5 1f       	adc	r31, r21
     670:	ee 0f       	add	r30, r30
     672:	ff 1f       	adc	r31, r31
     674:	e7 50       	subi	r30, 0x07	; 7
     676:	fe 4f       	sbci	r31, 0xFE	; 254
     678:	11 82       	std	Z+1, r1	; 0x01
     67a:	10 82       	st	Z, r1
     67c:	db 01       	movw	r26, r22
     67e:	8d 91       	ld	r24, X+
     680:	9c 91       	ld	r25, X
     682:	11 97       	sbiw	r26, 0x01	; 1
     684:	01 97       	sbiw	r24, 0x01	; 1
     686:	11 96       	adiw	r26, 0x01	; 1
     688:	9c 93       	st	X, r25
     68a:	8e 93       	st	-X, r24
     68c:	12 96       	adiw	r26, 0x02	; 2
     68e:	ed 91       	ld	r30, X+
     690:	fc 91       	ld	r31, X
     692:	13 97       	sbiw	r26, 0x03	; 3
     694:	9c 01       	movw	r18, r24
     696:	22 0f       	add	r18, r18
     698:	33 1f       	adc	r19, r19
     69a:	88 0f       	add	r24, r24
     69c:	99 1f       	adc	r25, r25
     69e:	88 0f       	add	r24, r24
     6a0:	99 1f       	adc	r25, r25
     6a2:	88 0f       	add	r24, r24
     6a4:	99 1f       	adc	r25, r25
     6a6:	82 0f       	add	r24, r18
     6a8:	93 1f       	adc	r25, r19
     6aa:	e8 0f       	add	r30, r24
     6ac:	f9 1f       	adc	r31, r25
     6ae:	ee 0f       	add	r30, r30
     6b0:	ff 1f       	adc	r31, r31
     6b2:	e7 50       	subi	r30, 0x07	; 7
     6b4:	fe 4f       	sbci	r31, 0xFE	; 254
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	91 83       	std	Z+1, r25	; 0x01
     6bc:	80 83       	st	Z, r24
     6be:	0e 94 ab 01 	call	0x356	; 0x356 <update>
     6c2:	88 ec       	ldi	r24, 0xC8	; 200
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <vTaskDelay>
     6ca:	08 95       	ret

000006cc <gameLogic_task>:
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	00 d0       	rcall	.+0      	; 0x6d2 <gameLogic_task+0x6>
     6d2:	00 d0       	rcall	.+0      	; 0x6d4 <gameLogic_task+0x8>
     6d4:	00 d0       	rcall	.+0      	; 0x6d6 <gameLogic_task+0xa>
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
     6da:	05 ef       	ldi	r16, 0xF5	; 245
     6dc:	11 e0       	ldi	r17, 0x01	; 1
     6de:	0f 2e       	mov	r0, r31
     6e0:	f1 ef       	ldi	r31, 0xF1	; 241
     6e2:	ef 2e       	mov	r14, r31
     6e4:	f1 e0       	ldi	r31, 0x01	; 1
     6e6:	ff 2e       	mov	r15, r31
     6e8:	f0 2d       	mov	r31, r0
     6ea:	20 e0       	ldi	r18, 0x00	; 0
     6ec:	4f ef       	ldi	r20, 0xFF	; 255
     6ee:	5f ef       	ldi	r21, 0xFF	; 255
     6f0:	be 01       	movw	r22, r28
     6f2:	6f 5f       	subi	r22, 0xFF	; 255
     6f4:	7f 4f       	sbci	r23, 0xFF	; 255
     6f6:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <inputQueue>
     6fa:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <inputQueue+0x1>
     6fe:	0e 94 89 0b 	call	0x1712	; 0x1712 <xQueueGenericReceive>
     702:	88 23       	and	r24, r24
     704:	39 f1       	breq	.+78     	; 0x754 <gameLogic_task+0x88>
     706:	8b 81       	ldd	r24, Y+3	; 0x03
     708:	9c 81       	ldd	r25, Y+4	; 0x04
     70a:	f8 01       	movw	r30, r16
     70c:	20 81       	ld	r18, Z
     70e:	31 81       	ldd	r19, Z+1	; 0x01
     710:	82 17       	cp	r24, r18
     712:	93 07       	cpc	r25, r19
     714:	69 f4       	brne	.+26     	; 0x730 <gameLogic_task+0x64>
     716:	4d 81       	ldd	r20, Y+5	; 0x05
     718:	5e 81       	ldd	r21, Y+6	; 0x06
     71a:	22 81       	ldd	r18, Z+2	; 0x02
     71c:	33 81       	ldd	r19, Z+3	; 0x03
     71e:	42 17       	cp	r20, r18
     720:	53 07       	cpc	r21, r19
     722:	31 f4       	brne	.+12     	; 0x730 <gameLogic_task+0x64>
     724:	b8 01       	movw	r22, r16
     726:	89 81       	ldd	r24, Y+1	; 0x01
     728:	9a 81       	ldd	r25, Y+2	; 0x02
     72a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <moveCar>
     72e:	12 c0       	rjmp	.+36     	; 0x754 <gameLogic_task+0x88>
     730:	f7 01       	movw	r30, r14
     732:	20 81       	ld	r18, Z
     734:	31 81       	ldd	r19, Z+1	; 0x01
     736:	82 17       	cp	r24, r18
     738:	93 07       	cpc	r25, r19
     73a:	61 f4       	brne	.+24     	; 0x754 <gameLogic_task+0x88>
     73c:	2d 81       	ldd	r18, Y+5	; 0x05
     73e:	3e 81       	ldd	r19, Y+6	; 0x06
     740:	82 81       	ldd	r24, Z+2	; 0x02
     742:	93 81       	ldd	r25, Z+3	; 0x03
     744:	28 17       	cp	r18, r24
     746:	39 07       	cpc	r19, r25
     748:	29 f4       	brne	.+10     	; 0x754 <gameLogic_task+0x88>
     74a:	b7 01       	movw	r22, r14
     74c:	89 81       	ldd	r24, Y+1	; 0x01
     74e:	9a 81       	ldd	r25, Y+2	; 0x02
     750:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <moveCar>
     754:	86 e4       	ldi	r24, 0x46	; 70
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <vTaskDelay>
     75c:	c6 cf       	rjmp	.-116    	; 0x6ea <gameLogic_task+0x1e>

0000075e <displayUpdater_task>:
     75e:	0e 94 ab 01 	call	0x356	; 0x356 <update>
     762:	8c e3       	ldi	r24, 0x3C	; 60
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <vTaskDelay>
     76a:	f9 cf       	rjmp	.-14     	; 0x75e <displayUpdater_task>

0000076c <startup_task>:
     76c:	e9 ef       	ldi	r30, 0xF9	; 249
     76e:	f1 e0       	ldi	r31, 0x01	; 1
     770:	21 e1       	ldi	r18, 0x11	; 17
     772:	33 e0       	ldi	r19, 0x03	; 3
     774:	09 c0       	rjmp	.+18     	; 0x788 <startup_task+0x1c>
     776:	11 92       	st	Z+, r1
     778:	11 92       	st	Z+, r1
     77a:	e8 17       	cp	r30, r24
     77c:	f9 07       	cpc	r31, r25
     77e:	d9 f7       	brne	.-10     	; 0x776 <startup_task+0xa>
     780:	fc 01       	movw	r30, r24
     782:	28 17       	cp	r18, r24
     784:	39 07       	cpc	r19, r25
     786:	19 f0       	breq	.+6      	; 0x78e <startup_task+0x22>
     788:	cf 01       	movw	r24, r30
     78a:	44 96       	adiw	r24, 0x14	; 20
     78c:	f4 cf       	rjmp	.-24     	; 0x776 <startup_task+0xa>
     78e:	e5 ef       	ldi	r30, 0xF5	; 245
     790:	f1 e0       	ldi	r31, 0x01	; 1
     792:	86 e0       	ldi	r24, 0x06	; 6
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	91 83       	std	Z+1, r25	; 0x01
     798:	80 83       	st	Z, r24
     79a:	89 e0       	ldi	r24, 0x09	; 9
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	93 83       	std	Z+3, r25	; 0x03
     7a0:	82 83       	std	Z+2, r24	; 0x02
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <myMatrix+0x8b>
     7aa:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <myMatrix+0x8a>
     7ae:	0e 94 ab 01 	call	0x356	; 0x356 <update>
     7b2:	61 e0       	ldi	r22, 0x01	; 1
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <vTaskSetApplicationTaskTag>
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	0e 94 35 0b 	call	0x166a	; 0x166a <xQueueCreateMutex>
     7c4:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <xMutex+0x1>
     7c8:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <xMutex>
     7cc:	e1 2c       	mov	r14, r1
     7ce:	f1 2c       	mov	r15, r1
     7d0:	04 e0       	ldi	r16, 0x04	; 4
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	45 e5       	ldi	r20, 0x55	; 85
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	6e e0       	ldi	r22, 0x0E	; 14
     7dc:	71 e0       	ldi	r23, 0x01	; 1
     7de:	8d e5       	ldi	r24, 0x5D	; 93
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	0e 94 b8 0c 	call	0x1970	; 0x1970 <xTaskCreate>
     7e6:	06 e0       	ldi	r16, 0x06	; 6
     7e8:	20 e0       	ldi	r18, 0x00	; 0
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	45 e5       	ldi	r20, 0x55	; 85
     7ee:	50 e0       	ldi	r21, 0x00	; 0
     7f0:	68 e1       	ldi	r22, 0x18	; 24
     7f2:	71 e0       	ldi	r23, 0x01	; 1
     7f4:	8f ea       	ldi	r24, 0xAF	; 175
     7f6:	93 e0       	ldi	r25, 0x03	; 3
     7f8:	0e 94 b8 0c 	call	0x1970	; 0x1970 <xTaskCreate>
     7fc:	03 e0       	ldi	r16, 0x03	; 3
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	45 e5       	ldi	r20, 0x55	; 85
     804:	50 e0       	ldi	r21, 0x00	; 0
     806:	68 e2       	ldi	r22, 0x28	; 40
     808:	71 e0       	ldi	r23, 0x01	; 1
     80a:	86 e6       	ldi	r24, 0x66	; 102
     80c:	93 e0       	ldi	r25, 0x03	; 3
     80e:	0e 94 b8 0c 	call	0x1970	; 0x1970 <xTaskCreate>
     812:	02 e0       	ldi	r16, 0x02	; 2
     814:	20 e0       	ldi	r18, 0x00	; 0
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	45 e5       	ldi	r20, 0x55	; 85
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	63 e3       	ldi	r22, 0x33	; 51
     81e:	71 e0       	ldi	r23, 0x01	; 1
     820:	88 e4       	ldi	r24, 0x48	; 72
     822:	91 e0       	ldi	r25, 0x01	; 1
     824:	0e 94 b8 0c 	call	0x1970	; 0x1970 <xTaskCreate>
     828:	6f e0       	ldi	r22, 0x0F	; 15
     82a:	84 e4       	ldi	r24, 0x44	; 68
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <com_send_bytes>
     832:	ff cf       	rjmp	.-2      	; 0x832 <startup_task+0xc6>

00000834 <prepare_shiftregister>:

// Prepare shift register setting SER = 1
void prepare_shiftregister()
{
	// Set SER to 1
	PORTD |= _BV(PORTD2);
     834:	5a 9a       	sbi	0x0b, 2	; 11
     836:	08 95       	ret

00000838 <clock_shift_register_and_prepare_for_next_col>:

// clock shift-register
void clock_shift_register_and_prepare_for_next_col()
{
	// one SCK pulse
	PORTD |= _BV(PORTD5);
     838:	5d 9a       	sbi	0x0b, 5	; 11
	PORTD &= ~_BV(PORTD5);
     83a:	5d 98       	cbi	0x0b, 5	; 11
	
	// one RCK pulse
	PORTD |= _BV(PORTD4);
     83c:	5c 9a       	sbi	0x0b, 4	; 11
	PORTD &= ~_BV(PORTD4);
     83e:	5c 98       	cbi	0x0b, 4	; 11
	
	// Set SER to 0 - for next column
	PORTD &= ~_BV(PORTD2);
     840:	5a 98       	cbi	0x0b, 2	; 11
     842:	08 95       	ret

00000844 <load_col_value>:
}

// Load column value for column to show
void load_col_value(uint16_t col_value)
{
	PORTA = ~(col_value & 0xFF);
     844:	80 95       	com	r24
     846:	82 b9       	out	0x02, r24	; 2
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
     848:	85 b1       	in	r24, 0x05	; 5
     84a:	83 60       	ori	r24, 0x03	; 3
     84c:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~((col_value >> 8) & 0x03);
     84e:	85 b1       	in	r24, 0x05	; 5
     850:	93 70       	andi	r25, 0x03	; 3
     852:	90 95       	com	r25
     854:	89 23       	and	r24, r25
     856:	85 b9       	out	0x05, r24	; 5
     858:	08 95       	ret

0000085a <handle_display>:
}

//-----------------------------------------
void handle_display(void)
{
     85a:	cf 93       	push	r28
	static uint8_t col = 0;
	
	if (col == 0)
     85c:	c0 91 62 01 	lds	r28, 0x0162	; 0x800162 <__data_end>
     860:	c1 11       	cpse	r28, r1
     862:	0e c0       	rjmp	.+28     	; 0x880 <handle_display+0x26>
	{
		prepare_shiftregister();
     864:	0e 94 1a 04 	call	0x834	; 0x834 <prepare_shiftregister>
	}
	
	load_col_value(frame_buf[col]);
     868:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <frame_buf>
     86c:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <frame_buf+0x1>
     870:	0e 94 22 04 	call	0x844	; 0x844 <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
     874:	0e 94 1c 04 	call	0x838	; 0x838 <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	col++;
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
     87e:	14 c0       	rjmp	.+40     	; 0x8a8 <handle_display+0x4e>
	if (col == 0)
	{
		prepare_shiftregister();
	}
	
	load_col_value(frame_buf[col]);
     880:	ec 2f       	mov	r30, r28
     882:	f0 e0       	ldi	r31, 0x00	; 0
     884:	ee 0f       	add	r30, r30
     886:	ff 1f       	adc	r31, r31
     888:	ef 5e       	subi	r30, 0xEF	; 239
     88a:	fc 4f       	sbci	r31, 0xFC	; 252
     88c:	80 81       	ld	r24, Z
     88e:	91 81       	ldd	r25, Z+1	; 0x01
     890:	0e 94 22 04 	call	0x844	; 0x844 <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
     894:	0e 94 1c 04 	call	0x838	; 0x838 <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	col++;
     898:	cf 5f       	subi	r28, 0xFF	; 255
	if (col > 13)
     89a:	ce 30       	cpi	r28, 0x0E	; 14
     89c:	18 f4       	brcc	.+6      	; 0x8a4 <handle_display+0x4a>
	load_col_value(frame_buf[col]);
	
	clock_shift_register_and_prepare_for_next_col();
	
	// count column up - prepare for next
	col++;
     89e:	c0 93 62 01 	sts	0x0162, r28	; 0x800162 <__data_end>
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <handle_display+0x4e>
	if (col > 13)
	{
		col = 0;
     8a4:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <__data_end>
	}
}
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <vApplicationIdleHook>:

//-----------------------------------------
void vApplicationIdleHook( void )
{
     8ac:	08 95       	ret

000008ae <main>:
}

//-----------------------------------------
int main(void)
{	
	init_board();
     8ae:	0e 94 db 04 	call	0x9b6	; 0x9b6 <init_board>
	inputQueue = xQueueCreate(20, sizeof(struct input));
     8b2:	40 e0       	ldi	r20, 0x00	; 0
     8b4:	66 e0       	ldi	r22, 0x06	; 6
     8b6:	84 e1       	ldi	r24, 0x14	; 20
     8b8:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <xQueueGenericCreate>
     8bc:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <inputQueue+0x1>
     8c0:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <inputQueue>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
     8c4:	5e 98       	cbi	0x0b, 6	; 11
	
	//Create task to blink gpio
	BaseType_t t1 = xTaskCreate(startup_task, (const char *)"Startup", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
     8c6:	e1 2c       	mov	r14, r1
     8c8:	f1 2c       	mov	r15, r1
     8ca:	00 e0       	ldi	r16, 0x00	; 0
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	45 e5       	ldi	r20, 0x55	; 85
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	64 e5       	ldi	r22, 0x54	; 84
     8d6:	71 e0       	ldi	r23, 0x01	; 1
     8d8:	86 eb       	ldi	r24, 0xB6	; 182
     8da:	93 e0       	ldi	r25, 0x03	; 3
     8dc:	0e 94 b8 0c 	call	0x1970	; 0x1970 <xTaskCreate>

	// Start the display handler timer
	init_display_timer(handle_display);
     8e0:	8d e2       	ldi	r24, 0x2D	; 45
     8e2:	94 e0       	ldi	r25, 0x04	; 4
     8e4:	0e 94 97 04 	call	0x92e	; 0x92e <init_display_timer>
	
	sei();
     8e8:	78 94       	sei
	
	//Start the scheduler
	vTaskStartScheduler();
     8ea:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <vTaskStartScheduler>
	
	//Should never reach here
	while (1)
	{
	}
     8ee:	ff cf       	rjmp	.-2      	; 0x8ee <main+0x40>

000008f0 <_com_call_back>:
	}
}

// ----------------------------------------------------------------------------------------------------------------------
void init_com(QueueHandle_t x_rx_queue) {
	_x_rx_com_queue = x_rx_queue;
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	00 d0       	rcall	.+0      	; 0x8f6 <_com_call_back+0x6>
     8f6:	cd b7       	in	r28, 0x3d	; 61
     8f8:	de b7       	in	r29, 0x3e	; 62
     8fa:	6a 83       	std	Y+2, r22	; 0x02
     8fc:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <_x_rx_com_queue>
     900:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <_x_rx_com_queue+0x1>
     904:	00 97       	sbiw	r24, 0x00	; 0
     906:	71 f0       	breq	.+28     	; 0x924 <__stack+0x25>
     908:	19 82       	std	Y+1, r1	; 0x01
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	ae 01       	movw	r20, r28
     90e:	4f 5f       	subi	r20, 0xFF	; 255
     910:	5f 4f       	sbci	r21, 0xFF	; 255
     912:	be 01       	movw	r22, r28
     914:	6e 5f       	subi	r22, 0xFE	; 254
     916:	7f 4f       	sbci	r23, 0xFF	; 255
     918:	0e 94 4f 0b 	call	0x169e	; 0x169e <xQueueGenericSendFromISR>
     91c:	89 81       	ldd	r24, Y+1	; 0x01
     91e:	81 11       	cpse	r24, r1
     920:	0e 94 a7 06 	call	0xd4e	; 0xd4e <vPortYield>
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	08 95       	ret

0000092e <init_display_timer>:
}

// ----------------------------------------------------------------------------------------------------------------------
void init_display_timer(display_callback_ptr_t cb)
{
	cb_ptr = cb;
     92e:	90 93 76 03 	sts	0x0376, r25	; 0x800376 <cb_ptr+0x1>
     932:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <cb_ptr>
	
	// Setup timer T0 to CTC, ~1309 Hz
	OCR0A = 10;
     936:	8a e0       	ldi	r24, 0x0A	; 10
     938:	87 bd       	out	0x27, r24	; 39
	TCCR0A |= _BV(WGM01); // Mode 2
     93a:	84 b5       	in	r24, 0x24	; 36
     93c:	82 60       	ori	r24, 0x02	; 2
     93e:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= _BV(OCIE0A); // Enable interrupt
     940:	ee e6       	ldi	r30, 0x6E	; 110
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	80 81       	ld	r24, Z
     946:	82 60       	ori	r24, 0x02	; 2
     948:	80 83       	st	Z, r24
	TCCR0B |= _BV(CS00) | _BV(CS02); // Prescaler 1024 - and start timer
     94a:	85 b5       	in	r24, 0x25	; 37
     94c:	85 60       	ori	r24, 0x05	; 5
     94e:	85 bd       	out	0x25, r24	; 37
     950:	08 95       	ret

00000952 <__vector_16>:
}

// ----------------------------------------------------------------------------------------------------------------------
//ISR for display timer
ISR(TIMER0_COMPA_vect)
{
     952:	1f 92       	push	r1
     954:	0f 92       	push	r0
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	0f 92       	push	r0
     95a:	11 24       	eor	r1, r1
     95c:	2f 93       	push	r18
     95e:	3f 93       	push	r19
     960:	4f 93       	push	r20
     962:	5f 93       	push	r21
     964:	6f 93       	push	r22
     966:	7f 93       	push	r23
     968:	8f 93       	push	r24
     96a:	9f 93       	push	r25
     96c:	af 93       	push	r26
     96e:	bf 93       	push	r27
     970:	ef 93       	push	r30
     972:	ff 93       	push	r31
	if (cb_ptr)
     974:	e0 91 75 03 	lds	r30, 0x0375	; 0x800375 <cb_ptr>
     978:	f0 91 76 03 	lds	r31, 0x0376	; 0x800376 <cb_ptr+0x1>
     97c:	30 97       	sbiw	r30, 0x00	; 0
     97e:	09 f0       	breq	.+2      	; 0x982 <__vector_16+0x30>
	{
		cb_ptr();
     980:	09 95       	icall
	}
}
     982:	ff 91       	pop	r31
     984:	ef 91       	pop	r30
     986:	bf 91       	pop	r27
     988:	af 91       	pop	r26
     98a:	9f 91       	pop	r25
     98c:	8f 91       	pop	r24
     98e:	7f 91       	pop	r23
     990:	6f 91       	pop	r22
     992:	5f 91       	pop	r21
     994:	4f 91       	pop	r20
     996:	3f 91       	pop	r19
     998:	2f 91       	pop	r18
     99a:	0f 90       	pop	r0
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	0f 90       	pop	r0
     9a0:	1f 90       	pop	r1
     9a2:	18 95       	reti

000009a4 <com_send_bytes>:

// ----------------------------------------------------------------------------------------------------------------------
void com_send_bytes(uint8_t *bytes, uint8_t len) {
     9a4:	46 2f       	mov	r20, r22
	serial_send_bytes(_com_serial_instance, bytes, len);
     9a6:	bc 01       	movw	r22, r24
     9a8:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <_com_serial_instance>
     9ac:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <_com_serial_instance+0x1>
     9b0:	0e 94 0f 08 	call	0x101e	; 0x101e <serial_send_bytes>
     9b4:	08 95       	ret

000009b6 <init_board>:
}

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
     9b6:	8f 92       	push	r8
     9b8:	9f 92       	push	r9
     9ba:	af 92       	push	r10
     9bc:	bf 92       	push	r11
     9be:	cf 92       	push	r12
     9c0:	df 92       	push	r13
     9c2:	ef 92       	push	r14
     9c4:	0f 93       	push	r16
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
     9c6:	82 e5       	ldi	r24, 0x52	; 82
     9c8:	93 e0       	ldi	r25, 0x03	; 3
     9ca:	0e 94 34 05 	call	0xa68	; 0xa68 <buffer_init>
	buffer_init(&_com_tx_buffer);
     9ce:	8f e2       	ldi	r24, 0x2F	; 47
     9d0:	93 e0       	ldi	r25, 0x03	; 3
     9d2:	0e 94 34 05 	call	0xa68	; 0xa68 <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
     9d6:	0f 2e       	mov	r0, r31
     9d8:	f8 e7       	ldi	r31, 0x78	; 120
     9da:	8f 2e       	mov	r8, r31
     9dc:	f4 e0       	ldi	r31, 0x04	; 4
     9de:	9f 2e       	mov	r9, r31
     9e0:	f0 2d       	mov	r31, r0
     9e2:	0f 2e       	mov	r0, r31
     9e4:	ff e2       	ldi	r31, 0x2F	; 47
     9e6:	af 2e       	mov	r10, r31
     9e8:	f3 e0       	ldi	r31, 0x03	; 3
     9ea:	bf 2e       	mov	r11, r31
     9ec:	f0 2d       	mov	r31, r0
     9ee:	0f 2e       	mov	r0, r31
     9f0:	f2 e5       	ldi	r31, 0x52	; 82
     9f2:	cf 2e       	mov	r12, r31
     9f4:	f3 e0       	ldi	r31, 0x03	; 3
     9f6:	df 2e       	mov	r13, r31
     9f8:	f0 2d       	mov	r31, r0
     9fa:	e1 2c       	mov	r14, r1
     9fc:	00 e0       	ldi	r16, 0x00	; 0
     9fe:	23 e0       	ldi	r18, 0x03	; 3
     a00:	40 e0       	ldi	r20, 0x00	; 0
     a02:	52 ec       	ldi	r21, 0xC2	; 194
     a04:	61 e0       	ldi	r22, 0x01	; 1
     a06:	70 e0       	ldi	r23, 0x00	; 0
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	0e 94 95 07 	call	0xf2a	; 0xf2a <serial_new_instance>
     a0e:	90 93 7a 03 	sts	0x037A, r25	; 0x80037a <_com_serial_instance+0x1>
     a12:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <_com_serial_instance>
	
	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
     a16:	88 b1       	in	r24, 0x08	; 8
     a18:	83 6c       	ori	r24, 0xC3	; 195
     a1a:	88 b9       	out	0x08, r24	; 8
	PORTD |= _BV(PORTD3);
     a1c:	5b 9a       	sbi	0x0b, 3	; 11
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
     a1e:	8a b1       	in	r24, 0x0a	; 10
     a20:	84 67       	ori	r24, 0x74	; 116
     a22:	8a b9       	out	0x0a, r24	; 10
	// G (enable output) high
	PORTD |= _BV(PORTD6);
     a24:	5e 9a       	sbi	0x0b, 6	; 11
	
	// Column pins to output
	DDRA |= 0xFF;
     a26:	81 b1       	in	r24, 0x01	; 1
     a28:	8f ef       	ldi	r24, 0xFF	; 255
     a2a:	81 b9       	out	0x01, r24	; 1
	DDRB |= _BV(DDB0) | _BV(DDB1);
     a2c:	84 b1       	in	r24, 0x04	; 4
     a2e:	83 60       	ori	r24, 0x03	; 3
     a30:	84 b9       	out	0x04, r24	; 4
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
     a32:	84 b1       	in	r24, 0x04	; 4
     a34:	8c 63       	ori	r24, 0x3C	; 60
     a36:	84 b9       	out	0x04, r24	; 4
}
     a38:	0f 91       	pop	r16
     a3a:	ef 90       	pop	r14
     a3c:	df 90       	pop	r13
     a3e:	cf 90       	pop	r12
     a40:	bf 90       	pop	r11
     a42:	af 90       	pop	r10
     a44:	9f 90       	pop	r9
     a46:	8f 90       	pop	r8
     a48:	08 95       	ret

00000a4a <switch_in>:
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
		PORTB &= 0b11000011;
     a4a:	95 b1       	in	r25, 0x05	; 5
     a4c:	93 7c       	andi	r25, 0xC3	; 195
     a4e:	95 b9       	out	0x05, r25	; 5
		PORTB |= task_no << 2;
     a50:	25 b1       	in	r18, 0x05	; 5
     a52:	34 e0       	ldi	r19, 0x04	; 4
     a54:	83 9f       	mul	r24, r19
     a56:	c0 01       	movw	r24, r0
     a58:	11 24       	eor	r1, r1
     a5a:	82 2b       	or	r24, r18
     a5c:	85 b9       	out	0x05, r24	; 5
     a5e:	08 95       	ret

00000a60 <switch_out>:
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
		PORTB &= 0b11000011;
     a60:	85 b1       	in	r24, 0x05	; 5
     a62:	83 7c       	andi	r24, 0xC3	; 195
     a64:	85 b9       	out	0x05, r24	; 5
     a66:	08 95       	ret

00000a68 <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
     a68:	fc 01       	movw	r30, r24
	buffer->in_i = 0;
     a6a:	10 a2       	std	Z+32, r1	; 0x20
	buffer->out_i = 0;
     a6c:	11 a2       	std	Z+33, r1	; 0x21
	buffer->no_in_buffer = 0;
     a6e:	12 a2       	std	Z+34, r1	; 0x22
     a70:	08 95       	ret

00000a72 <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
     a72:	fc 01       	movw	r30, r24
	if (buffer->no_in_buffer > 0) {
     a74:	82 a1       	ldd	r24, Z+34	; 0x22
     a76:	88 23       	and	r24, r24
     a78:	d9 f0       	breq	.+54     	; 0xab0 <buffer_get_item+0x3e>
		*item = buffer->storage[buffer->out_i];
     a7a:	81 a1       	ldd	r24, Z+33	; 0x21
     a7c:	df 01       	movw	r26, r30
     a7e:	a8 0f       	add	r26, r24
     a80:	b1 1d       	adc	r27, r1
     a82:	8c 91       	ld	r24, X
     a84:	db 01       	movw	r26, r22
     a86:	8c 93       	st	X, r24
		buffer->out_i = INCREMENT(buffer->out_i);
     a88:	21 a1       	ldd	r18, Z+33	; 0x21
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	2f 5f       	subi	r18, 0xFF	; 255
     a8e:	3f 4f       	sbci	r19, 0xFF	; 255
     a90:	2f 71       	andi	r18, 0x1F	; 31
     a92:	30 78       	andi	r19, 0x80	; 128
     a94:	33 23       	and	r19, r19
     a96:	34 f4       	brge	.+12     	; 0xaa4 <buffer_get_item+0x32>
     a98:	21 50       	subi	r18, 0x01	; 1
     a9a:	31 09       	sbc	r19, r1
     a9c:	20 6e       	ori	r18, 0xE0	; 224
     a9e:	3f 6f       	ori	r19, 0xFF	; 255
     aa0:	2f 5f       	subi	r18, 0xFF	; 255
     aa2:	3f 4f       	sbci	r19, 0xFF	; 255
     aa4:	21 a3       	std	Z+33, r18	; 0x21
		buffer->no_in_buffer--;
     aa6:	82 a1       	ldd	r24, Z+34	; 0x22
     aa8:	81 50       	subi	r24, 0x01	; 1
     aaa:	82 a3       	std	Z+34, r24	; 0x22
		return BUFFER_OK;
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	08 95       	ret
	}
	return BUFFER_EMPTY;
     ab0:	81 e0       	ldi	r24, 0x01	; 1
}
     ab2:	08 95       	ret

00000ab4 <buffer_put_item>:
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
	if (buffer->no_in_buffer<BUFFER_SIZE) {
     ab4:	fc 01       	movw	r30, r24
     ab6:	42 a1       	ldd	r20, Z+34	; 0x22
     ab8:	40 32       	cpi	r20, 0x20	; 32
     aba:	b8 f4       	brcc	.+46     	; 0xaea <buffer_put_item+0x36>
		buffer->storage[buffer->in_i] = item;
     abc:	20 a1       	ldd	r18, Z+32	; 0x20
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	e2 0f       	add	r30, r18
     ac2:	f3 1f       	adc	r31, r19
     ac4:	60 83       	st	Z, r22
		buffer->in_i = INCREMENT(buffer->in_i);
     ac6:	2f 5f       	subi	r18, 0xFF	; 255
     ac8:	3f 4f       	sbci	r19, 0xFF	; 255
     aca:	2f 71       	andi	r18, 0x1F	; 31
     acc:	30 78       	andi	r19, 0x80	; 128
     ace:	33 23       	and	r19, r19
     ad0:	34 f4       	brge	.+12     	; 0xade <buffer_put_item+0x2a>
     ad2:	21 50       	subi	r18, 0x01	; 1
     ad4:	31 09       	sbc	r19, r1
     ad6:	20 6e       	ori	r18, 0xE0	; 224
     ad8:	3f 6f       	ori	r19, 0xFF	; 255
     ada:	2f 5f       	subi	r18, 0xFF	; 255
     adc:	3f 4f       	sbci	r19, 0xFF	; 255
     ade:	fc 01       	movw	r30, r24
     ae0:	20 a3       	std	Z+32, r18	; 0x20
		buffer->no_in_buffer++;
     ae2:	4f 5f       	subi	r20, 0xFF	; 255
     ae4:	42 a3       	std	Z+34, r20	; 0x22
		return BUFFER_OK;
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	08 95       	ret
	}
	return BUFFER_FULL;
     aea:	82 e0       	ldi	r24, 0x02	; 2
}
     aec:	08 95       	ret

00000aee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     aee:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     af0:	03 96       	adiw	r24, 0x03	; 3
     af2:	92 83       	std	Z+2, r25	; 0x02
     af4:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     af6:	2f ef       	ldi	r18, 0xFF	; 255
     af8:	3f ef       	ldi	r19, 0xFF	; 255
     afa:	34 83       	std	Z+4, r19	; 0x04
     afc:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     afe:	96 83       	std	Z+6, r25	; 0x06
     b00:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     b02:	90 87       	std	Z+8, r25	; 0x08
     b04:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     b06:	10 82       	st	Z, r1
     b08:	08 95       	ret

00000b0a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     b0a:	fc 01       	movw	r30, r24
     b0c:	11 86       	std	Z+9, r1	; 0x09
     b0e:	10 86       	std	Z+8, r1	; 0x08
     b10:	08 95       	ret

00000b12 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	9c 01       	movw	r18, r24
     b18:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     b1a:	dc 01       	movw	r26, r24
     b1c:	11 96       	adiw	r26, 0x01	; 1
     b1e:	cd 91       	ld	r28, X+
     b20:	dc 91       	ld	r29, X
     b22:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     b24:	d3 83       	std	Z+3, r29	; 0x03
     b26:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     b28:	8c 81       	ldd	r24, Y+4	; 0x04
     b2a:	9d 81       	ldd	r25, Y+5	; 0x05
     b2c:	95 83       	std	Z+5, r25	; 0x05
     b2e:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     b30:	8c 81       	ldd	r24, Y+4	; 0x04
     b32:	9d 81       	ldd	r25, Y+5	; 0x05
     b34:	dc 01       	movw	r26, r24
     b36:	13 96       	adiw	r26, 0x03	; 3
     b38:	7c 93       	st	X, r23
     b3a:	6e 93       	st	-X, r22
     b3c:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     b3e:	7d 83       	std	Y+5, r23	; 0x05
     b40:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     b42:	31 87       	std	Z+9, r19	; 0x09
     b44:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     b46:	f9 01       	movw	r30, r18
     b48:	80 81       	ld	r24, Z
     b4a:	8f 5f       	subi	r24, 0xFF	; 255
     b4c:	80 83       	st	Z, r24
}
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	08 95       	ret

00000b54 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     b5a:	48 81       	ld	r20, Y
     b5c:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     b5e:	4f 3f       	cpi	r20, 0xFF	; 255
     b60:	2f ef       	ldi	r18, 0xFF	; 255
     b62:	52 07       	cpc	r21, r18
     b64:	21 f4       	brne	.+8      	; 0xb6e <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     b66:	fc 01       	movw	r30, r24
     b68:	a7 81       	ldd	r26, Z+7	; 0x07
     b6a:	b0 85       	ldd	r27, Z+8	; 0x08
     b6c:	0d c0       	rjmp	.+26     	; 0xb88 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     b6e:	dc 01       	movw	r26, r24
     b70:	13 96       	adiw	r26, 0x03	; 3
     b72:	01 c0       	rjmp	.+2      	; 0xb76 <vListInsert+0x22>
     b74:	df 01       	movw	r26, r30
     b76:	12 96       	adiw	r26, 0x02	; 2
     b78:	ed 91       	ld	r30, X+
     b7a:	fc 91       	ld	r31, X
     b7c:	13 97       	sbiw	r26, 0x03	; 3
     b7e:	20 81       	ld	r18, Z
     b80:	31 81       	ldd	r19, Z+1	; 0x01
     b82:	42 17       	cp	r20, r18
     b84:	53 07       	cpc	r21, r19
     b86:	b0 f7       	brcc	.-20     	; 0xb74 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     b88:	12 96       	adiw	r26, 0x02	; 2
     b8a:	ed 91       	ld	r30, X+
     b8c:	fc 91       	ld	r31, X
     b8e:	13 97       	sbiw	r26, 0x03	; 3
     b90:	fb 83       	std	Y+3, r31	; 0x03
     b92:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     b94:	d5 83       	std	Z+5, r29	; 0x05
     b96:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     b98:	bd 83       	std	Y+5, r27	; 0x05
     b9a:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     b9c:	13 96       	adiw	r26, 0x03	; 3
     b9e:	dc 93       	st	X, r29
     ba0:	ce 93       	st	-X, r28
     ba2:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     ba4:	99 87       	std	Y+9, r25	; 0x09
     ba6:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     ba8:	fc 01       	movw	r30, r24
     baa:	20 81       	ld	r18, Z
     bac:	2f 5f       	subi	r18, 0xFF	; 255
     bae:	20 83       	st	Z, r18
}
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	08 95       	ret

00000bb6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     bbc:	a0 85       	ldd	r26, Z+8	; 0x08
     bbe:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     bc0:	c2 81       	ldd	r28, Z+2	; 0x02
     bc2:	d3 81       	ldd	r29, Z+3	; 0x03
     bc4:	84 81       	ldd	r24, Z+4	; 0x04
     bc6:	95 81       	ldd	r25, Z+5	; 0x05
     bc8:	9d 83       	std	Y+5, r25	; 0x05
     bca:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     bcc:	c4 81       	ldd	r28, Z+4	; 0x04
     bce:	d5 81       	ldd	r29, Z+5	; 0x05
     bd0:	82 81       	ldd	r24, Z+2	; 0x02
     bd2:	93 81       	ldd	r25, Z+3	; 0x03
     bd4:	9b 83       	std	Y+3, r25	; 0x03
     bd6:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     bd8:	11 96       	adiw	r26, 0x01	; 1
     bda:	cd 91       	ld	r28, X+
     bdc:	dc 91       	ld	r29, X
     bde:	12 97       	sbiw	r26, 0x02	; 2
     be0:	ce 17       	cp	r28, r30
     be2:	df 07       	cpc	r29, r31
     be4:	31 f4       	brne	.+12     	; 0xbf2 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     be6:	8c 81       	ldd	r24, Y+4	; 0x04
     be8:	9d 81       	ldd	r25, Y+5	; 0x05
     bea:	12 96       	adiw	r26, 0x02	; 2
     bec:	9c 93       	st	X, r25
     bee:	8e 93       	st	-X, r24
     bf0:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     bf2:	11 86       	std	Z+9, r1	; 0x09
     bf4:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     bf6:	8c 91       	ld	r24, X
     bf8:	81 50       	subi	r24, 0x01	; 1
     bfa:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	08 95       	ret

00000c02 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     c02:	31 e1       	ldi	r19, 0x11	; 17
     c04:	fc 01       	movw	r30, r24
     c06:	30 83       	st	Z, r19
     c08:	31 97       	sbiw	r30, 0x01	; 1
     c0a:	22 e2       	ldi	r18, 0x22	; 34
     c0c:	20 83       	st	Z, r18
     c0e:	31 97       	sbiw	r30, 0x01	; 1
     c10:	a3 e3       	ldi	r26, 0x33	; 51
     c12:	a0 83       	st	Z, r26
     c14:	31 97       	sbiw	r30, 0x01	; 1
     c16:	60 83       	st	Z, r22
     c18:	31 97       	sbiw	r30, 0x01	; 1
     c1a:	70 83       	st	Z, r23
     c1c:	31 97       	sbiw	r30, 0x01	; 1
     c1e:	10 82       	st	Z, r1
     c20:	31 97       	sbiw	r30, 0x01	; 1
     c22:	60 e8       	ldi	r22, 0x80	; 128
     c24:	60 83       	st	Z, r22
     c26:	31 97       	sbiw	r30, 0x01	; 1
     c28:	10 82       	st	Z, r1
     c2a:	31 97       	sbiw	r30, 0x01	; 1
     c2c:	62 e0       	ldi	r22, 0x02	; 2
     c2e:	60 83       	st	Z, r22
     c30:	31 97       	sbiw	r30, 0x01	; 1
     c32:	63 e0       	ldi	r22, 0x03	; 3
     c34:	60 83       	st	Z, r22
     c36:	31 97       	sbiw	r30, 0x01	; 1
     c38:	64 e0       	ldi	r22, 0x04	; 4
     c3a:	60 83       	st	Z, r22
     c3c:	31 97       	sbiw	r30, 0x01	; 1
     c3e:	65 e0       	ldi	r22, 0x05	; 5
     c40:	60 83       	st	Z, r22
     c42:	31 97       	sbiw	r30, 0x01	; 1
     c44:	66 e0       	ldi	r22, 0x06	; 6
     c46:	60 83       	st	Z, r22
     c48:	31 97       	sbiw	r30, 0x01	; 1
     c4a:	67 e0       	ldi	r22, 0x07	; 7
     c4c:	60 83       	st	Z, r22
     c4e:	31 97       	sbiw	r30, 0x01	; 1
     c50:	68 e0       	ldi	r22, 0x08	; 8
     c52:	60 83       	st	Z, r22
     c54:	31 97       	sbiw	r30, 0x01	; 1
     c56:	69 e0       	ldi	r22, 0x09	; 9
     c58:	60 83       	st	Z, r22
     c5a:	31 97       	sbiw	r30, 0x01	; 1
     c5c:	60 e1       	ldi	r22, 0x10	; 16
     c5e:	60 83       	st	Z, r22
     c60:	31 97       	sbiw	r30, 0x01	; 1
     c62:	30 83       	st	Z, r19
     c64:	31 97       	sbiw	r30, 0x01	; 1
     c66:	32 e1       	ldi	r19, 0x12	; 18
     c68:	30 83       	st	Z, r19
     c6a:	31 97       	sbiw	r30, 0x01	; 1
     c6c:	33 e1       	ldi	r19, 0x13	; 19
     c6e:	30 83       	st	Z, r19
     c70:	31 97       	sbiw	r30, 0x01	; 1
     c72:	34 e1       	ldi	r19, 0x14	; 20
     c74:	30 83       	st	Z, r19
     c76:	31 97       	sbiw	r30, 0x01	; 1
     c78:	35 e1       	ldi	r19, 0x15	; 21
     c7a:	30 83       	st	Z, r19
     c7c:	31 97       	sbiw	r30, 0x01	; 1
     c7e:	36 e1       	ldi	r19, 0x16	; 22
     c80:	30 83       	st	Z, r19
     c82:	31 97       	sbiw	r30, 0x01	; 1
     c84:	37 e1       	ldi	r19, 0x17	; 23
     c86:	30 83       	st	Z, r19
     c88:	31 97       	sbiw	r30, 0x01	; 1
     c8a:	38 e1       	ldi	r19, 0x18	; 24
     c8c:	30 83       	st	Z, r19
     c8e:	31 97       	sbiw	r30, 0x01	; 1
     c90:	39 e1       	ldi	r19, 0x19	; 25
     c92:	30 83       	st	Z, r19
     c94:	31 97       	sbiw	r30, 0x01	; 1
     c96:	30 e2       	ldi	r19, 0x20	; 32
     c98:	30 83       	st	Z, r19
     c9a:	31 97       	sbiw	r30, 0x01	; 1
     c9c:	31 e2       	ldi	r19, 0x21	; 33
     c9e:	30 83       	st	Z, r19
     ca0:	31 97       	sbiw	r30, 0x01	; 1
     ca2:	20 83       	st	Z, r18
     ca4:	31 97       	sbiw	r30, 0x01	; 1
     ca6:	23 e2       	ldi	r18, 0x23	; 35
     ca8:	20 83       	st	Z, r18
     caa:	31 97       	sbiw	r30, 0x01	; 1
     cac:	40 83       	st	Z, r20
     cae:	31 97       	sbiw	r30, 0x01	; 1
     cb0:	50 83       	st	Z, r21
     cb2:	31 97       	sbiw	r30, 0x01	; 1
     cb4:	26 e2       	ldi	r18, 0x26	; 38
     cb6:	20 83       	st	Z, r18
     cb8:	31 97       	sbiw	r30, 0x01	; 1
     cba:	27 e2       	ldi	r18, 0x27	; 39
     cbc:	20 83       	st	Z, r18
     cbe:	31 97       	sbiw	r30, 0x01	; 1
     cc0:	28 e2       	ldi	r18, 0x28	; 40
     cc2:	20 83       	st	Z, r18
     cc4:	31 97       	sbiw	r30, 0x01	; 1
     cc6:	29 e2       	ldi	r18, 0x29	; 41
     cc8:	20 83       	st	Z, r18
     cca:	31 97       	sbiw	r30, 0x01	; 1
     ccc:	20 e3       	ldi	r18, 0x30	; 48
     cce:	20 83       	st	Z, r18
     cd0:	31 97       	sbiw	r30, 0x01	; 1
     cd2:	21 e3       	ldi	r18, 0x31	; 49
     cd4:	20 83       	st	Z, r18
     cd6:	86 97       	sbiw	r24, 0x26	; 38
     cd8:	08 95       	ret

00000cda <xPortStartScheduler>:
     cda:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     cde:	85 ee       	ldi	r24, 0xE5	; 229
     ce0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     ce4:	8b e0       	ldi	r24, 0x0B	; 11
     ce6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     cea:	ef e6       	ldi	r30, 0x6F	; 111
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	82 60       	ori	r24, 0x02	; 2
     cf2:	80 83       	st	Z, r24
     cf4:	a0 91 c6 07 	lds	r26, 0x07C6	; 0x8007c6 <pxCurrentTCB>
     cf8:	b0 91 c7 07 	lds	r27, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
     cfc:	cd 91       	ld	r28, X+
     cfe:	cd bf       	out	0x3d, r28	; 61
     d00:	dd 91       	ld	r29, X+
     d02:	de bf       	out	0x3e, r29	; 62
     d04:	ff 91       	pop	r31
     d06:	ef 91       	pop	r30
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	bf 91       	pop	r27
     d0e:	af 91       	pop	r26
     d10:	9f 91       	pop	r25
     d12:	8f 91       	pop	r24
     d14:	7f 91       	pop	r23
     d16:	6f 91       	pop	r22
     d18:	5f 91       	pop	r21
     d1a:	4f 91       	pop	r20
     d1c:	3f 91       	pop	r19
     d1e:	2f 91       	pop	r18
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	ff 90       	pop	r15
     d26:	ef 90       	pop	r14
     d28:	df 90       	pop	r13
     d2a:	cf 90       	pop	r12
     d2c:	bf 90       	pop	r11
     d2e:	af 90       	pop	r10
     d30:	9f 90       	pop	r9
     d32:	8f 90       	pop	r8
     d34:	7f 90       	pop	r7
     d36:	6f 90       	pop	r6
     d38:	5f 90       	pop	r5
     d3a:	4f 90       	pop	r4
     d3c:	3f 90       	pop	r3
     d3e:	2f 90       	pop	r2
     d40:	1f 90       	pop	r1
     d42:	0f 90       	pop	r0
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	0f 90       	pop	r0
     d48:	08 95       	ret
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	08 95       	ret

00000d4e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     d4e:	0f 92       	push	r0
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	0f 92       	push	r0
     d56:	1f 92       	push	r1
     d58:	11 24       	eor	r1, r1
     d5a:	2f 92       	push	r2
     d5c:	3f 92       	push	r3
     d5e:	4f 92       	push	r4
     d60:	5f 92       	push	r5
     d62:	6f 92       	push	r6
     d64:	7f 92       	push	r7
     d66:	8f 92       	push	r8
     d68:	9f 92       	push	r9
     d6a:	af 92       	push	r10
     d6c:	bf 92       	push	r11
     d6e:	cf 92       	push	r12
     d70:	df 92       	push	r13
     d72:	ef 92       	push	r14
     d74:	ff 92       	push	r15
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	2f 93       	push	r18
     d7c:	3f 93       	push	r19
     d7e:	4f 93       	push	r20
     d80:	5f 93       	push	r21
     d82:	6f 93       	push	r22
     d84:	7f 93       	push	r23
     d86:	8f 93       	push	r24
     d88:	9f 93       	push	r25
     d8a:	af 93       	push	r26
     d8c:	bf 93       	push	r27
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	ef 93       	push	r30
     d94:	ff 93       	push	r31
     d96:	a0 91 c6 07 	lds	r26, 0x07C6	; 0x8007c6 <pxCurrentTCB>
     d9a:	b0 91 c7 07 	lds	r27, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
     d9e:	0d b6       	in	r0, 0x3d	; 61
     da0:	0d 92       	st	X+, r0
     da2:	0e b6       	in	r0, 0x3e	; 62
     da4:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     da6:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     daa:	a0 91 c6 07 	lds	r26, 0x07C6	; 0x8007c6 <pxCurrentTCB>
     dae:	b0 91 c7 07 	lds	r27, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
     db2:	cd 91       	ld	r28, X+
     db4:	cd bf       	out	0x3d, r28	; 61
     db6:	dd 91       	ld	r29, X+
     db8:	de bf       	out	0x3e, r29	; 62
     dba:	ff 91       	pop	r31
     dbc:	ef 91       	pop	r30
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	bf 91       	pop	r27
     dc4:	af 91       	pop	r26
     dc6:	9f 91       	pop	r25
     dc8:	8f 91       	pop	r24
     dca:	7f 91       	pop	r23
     dcc:	6f 91       	pop	r22
     dce:	5f 91       	pop	r21
     dd0:	4f 91       	pop	r20
     dd2:	3f 91       	pop	r19
     dd4:	2f 91       	pop	r18
     dd6:	1f 91       	pop	r17
     dd8:	0f 91       	pop	r16
     dda:	ff 90       	pop	r15
     ddc:	ef 90       	pop	r14
     dde:	df 90       	pop	r13
     de0:	cf 90       	pop	r12
     de2:	bf 90       	pop	r11
     de4:	af 90       	pop	r10
     de6:	9f 90       	pop	r9
     de8:	8f 90       	pop	r8
     dea:	7f 90       	pop	r7
     dec:	6f 90       	pop	r6
     dee:	5f 90       	pop	r5
     df0:	4f 90       	pop	r4
     df2:	3f 90       	pop	r3
     df4:	2f 90       	pop	r2
     df6:	1f 90       	pop	r1
     df8:	0f 90       	pop	r0
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	0f 90       	pop	r0

	asm volatile ( "ret" );
     dfe:	08 95       	ret

00000e00 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     e00:	0f 92       	push	r0
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	0f 92       	push	r0
     e08:	1f 92       	push	r1
     e0a:	11 24       	eor	r1, r1
     e0c:	2f 92       	push	r2
     e0e:	3f 92       	push	r3
     e10:	4f 92       	push	r4
     e12:	5f 92       	push	r5
     e14:	6f 92       	push	r6
     e16:	7f 92       	push	r7
     e18:	8f 92       	push	r8
     e1a:	9f 92       	push	r9
     e1c:	af 92       	push	r10
     e1e:	bf 92       	push	r11
     e20:	cf 92       	push	r12
     e22:	df 92       	push	r13
     e24:	ef 92       	push	r14
     e26:	ff 92       	push	r15
     e28:	0f 93       	push	r16
     e2a:	1f 93       	push	r17
     e2c:	2f 93       	push	r18
     e2e:	3f 93       	push	r19
     e30:	4f 93       	push	r20
     e32:	5f 93       	push	r21
     e34:	6f 93       	push	r22
     e36:	7f 93       	push	r23
     e38:	8f 93       	push	r24
     e3a:	9f 93       	push	r25
     e3c:	af 93       	push	r26
     e3e:	bf 93       	push	r27
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	ef 93       	push	r30
     e46:	ff 93       	push	r31
     e48:	a0 91 c6 07 	lds	r26, 0x07C6	; 0x8007c6 <pxCurrentTCB>
     e4c:	b0 91 c7 07 	lds	r27, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
     e50:	0d b6       	in	r0, 0x3d	; 61
     e52:	0d 92       	st	X+, r0
     e54:	0e b6       	in	r0, 0x3e	; 62
     e56:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     e58:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <xTaskIncrementTick>
     e5c:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     e5e:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     e62:	a0 91 c6 07 	lds	r26, 0x07C6	; 0x8007c6 <pxCurrentTCB>
     e66:	b0 91 c7 07 	lds	r27, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
     e6a:	cd 91       	ld	r28, X+
     e6c:	cd bf       	out	0x3d, r28	; 61
     e6e:	dd 91       	ld	r29, X+
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	bf 91       	pop	r27
     e7c:	af 91       	pop	r26
     e7e:	9f 91       	pop	r25
     e80:	8f 91       	pop	r24
     e82:	7f 91       	pop	r23
     e84:	6f 91       	pop	r22
     e86:	5f 91       	pop	r21
     e88:	4f 91       	pop	r20
     e8a:	3f 91       	pop	r19
     e8c:	2f 91       	pop	r18
     e8e:	1f 91       	pop	r17
     e90:	0f 91       	pop	r16
     e92:	ff 90       	pop	r15
     e94:	ef 90       	pop	r14
     e96:	df 90       	pop	r13
     e98:	cf 90       	pop	r12
     e9a:	bf 90       	pop	r11
     e9c:	af 90       	pop	r10
     e9e:	9f 90       	pop	r9
     ea0:	8f 90       	pop	r8
     ea2:	7f 90       	pop	r7
     ea4:	6f 90       	pop	r6
     ea6:	5f 90       	pop	r5
     ea8:	4f 90       	pop	r4
     eaa:	3f 90       	pop	r3
     eac:	2f 90       	pop	r2
     eae:	1f 90       	pop	r1
     eb0:	0f 90       	pop	r0
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	0f 90       	pop	r0

	asm volatile ( "ret" );
     eb6:	08 95       	ret

00000eb8 <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
     eb8:	0e 94 00 07 	call	0xe00	; 0xe00 <vPortYieldFromTick>
		asm volatile ( "reti" );
     ebc:	18 95       	reti

00000ebe <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
     ec4:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     ec8:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <pucAlignedHeap.1965>
     ecc:	90 91 7c 03 	lds	r25, 0x037C	; 0x80037c <pucAlignedHeap.1965+0x1>
     ed0:	89 2b       	or	r24, r25
     ed2:	31 f4       	brne	.+12     	; 0xee0 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     ed4:	80 e8       	ldi	r24, 0x80	; 128
     ed6:	93 e0       	ldi	r25, 0x03	; 3
     ed8:	90 93 7c 03 	sts	0x037C, r25	; 0x80037c <pucAlignedHeap.1965+0x1>
     edc:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <pucAlignedHeap.1965>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     ee0:	20 91 7d 03 	lds	r18, 0x037D	; 0x80037d <xNextFreeByte>
     ee4:	30 91 7e 03 	lds	r19, 0x037E	; 0x80037e <xNextFreeByte+0x1>
     ee8:	ce 01       	movw	r24, r28
     eea:	82 0f       	add	r24, r18
     eec:	93 1f       	adc	r25, r19
     eee:	87 3e       	cpi	r24, 0xE7	; 231
     ef0:	43 e0       	ldi	r20, 0x03	; 3
     ef2:	94 07       	cpc	r25, r20
     ef4:	70 f4       	brcc	.+28     	; 0xf12 <pvPortMalloc+0x54>
     ef6:	28 17       	cp	r18, r24
     ef8:	39 07       	cpc	r19, r25
     efa:	70 f4       	brcc	.+28     	; 0xf18 <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     efc:	c0 91 7b 03 	lds	r28, 0x037B	; 0x80037b <pucAlignedHeap.1965>
     f00:	d0 91 7c 03 	lds	r29, 0x037C	; 0x80037c <pucAlignedHeap.1965+0x1>
     f04:	c2 0f       	add	r28, r18
     f06:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
     f08:	90 93 7e 03 	sts	0x037E, r25	; 0x80037e <xNextFreeByte+0x1>
     f0c:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <xNextFreeByte>
     f10:	05 c0       	rjmp	.+10     	; 0xf1c <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     f12:	c0 e0       	ldi	r28, 0x00	; 0
     f14:	d0 e0       	ldi	r29, 0x00	; 0
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <pvPortMalloc+0x5e>
     f18:	c0 e0       	ldi	r28, 0x00	; 0
     f1a:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     f1c:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     f20:	ce 01       	movw	r24, r28
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	08 95       	ret

00000f28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     f28:	08 95       	ret

00000f2a <serial_new_instance>:
			_serial_tx_int_on(handle->ser_UDR);
			return BUFFER_OK;
		}
	}
	return BUFFER_FULL;
}
     f2a:	4f 92       	push	r4
     f2c:	5f 92       	push	r5
     f2e:	6f 92       	push	r6
     f30:	7f 92       	push	r7
     f32:	8f 92       	push	r8
     f34:	9f 92       	push	r9
     f36:	af 92       	push	r10
     f38:	bf 92       	push	r11
     f3a:	cf 92       	push	r12
     f3c:	df 92       	push	r13
     f3e:	ff 92       	push	r15
     f40:	0f 93       	push	r16
     f42:	1f 93       	push	r17
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	f8 2e       	mov	r15, r24
     f4e:	2a 01       	movw	r4, r20
     f50:	3b 01       	movw	r6, r22
     f52:	88 e0       	ldi	r24, 0x08	; 8
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 81 11 	call	0x2302	; 0x2302 <malloc>
     f5a:	8c 01       	movw	r16, r24
     f5c:	8f 2d       	mov	r24, r15
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	fc 01       	movw	r30, r24
     f66:	e9 59       	subi	r30, 0x99	; 153
     f68:	f8 4f       	sbci	r31, 0xF8	; 248
     f6a:	11 83       	std	Z+1, r17	; 0x01
     f6c:	00 83       	st	Z, r16
     f6e:	fc 01       	movw	r30, r24
     f70:	e6 5f       	subi	r30, 0xF6	; 246
     f72:	fe 4f       	sbci	r31, 0xFE	; 254
     f74:	80 81       	ld	r24, Z
     f76:	91 81       	ldd	r25, Z+1	; 0x01
     f78:	d8 01       	movw	r26, r16
     f7a:	11 96       	adiw	r26, 0x01	; 1
     f7c:	9c 93       	st	X, r25
     f7e:	8e 93       	st	-X, r24
     f80:	13 96       	adiw	r26, 0x03	; 3
     f82:	bc 92       	st	X, r11
     f84:	ae 92       	st	-X, r10
     f86:	12 97       	sbiw	r26, 0x02	; 2
     f88:	15 96       	adiw	r26, 0x05	; 5
     f8a:	dc 92       	st	X, r13
     f8c:	ce 92       	st	-X, r12
     f8e:	14 97       	sbiw	r26, 0x04	; 4
     f90:	17 96       	adiw	r26, 0x07	; 7
     f92:	9c 92       	st	X, r9
     f94:	8e 92       	st	-X, r8
     f96:	16 97       	sbiw	r26, 0x06	; 6
     f98:	ff b6       	in	r15, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	ed 91       	ld	r30, X+
     f9e:	fc 91       	ld	r31, X
     fa0:	11 97       	sbiw	r26, 0x01	; 1
     fa2:	36 97       	sbiw	r30, 0x06	; 6
     fa4:	80 81       	ld	r24, Z
     fa6:	82 60       	ori	r24, 0x02	; 2
     fa8:	80 83       	st	Z, r24
     faa:	cd 90       	ld	r12, X+
     fac:	dc 90       	ld	r13, X
     fae:	d3 01       	movw	r26, r6
     fb0:	c2 01       	movw	r24, r4
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	aa 1f       	adc	r26, r26
     fb8:	bb 1f       	adc	r27, r27
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	aa 1f       	adc	r26, r26
     fc0:	bb 1f       	adc	r27, r27
     fc2:	9c 01       	movw	r18, r24
     fc4:	ad 01       	movw	r20, r26
     fc6:	22 0f       	add	r18, r18
     fc8:	33 1f       	adc	r19, r19
     fca:	44 1f       	adc	r20, r20
     fcc:	55 1f       	adc	r21, r21
     fce:	60 e0       	ldi	r22, 0x00	; 0
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	81 ee       	ldi	r24, 0xE1	; 225
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	0e 94 5f 11 	call	0x22be	; 0x22be <__udivmodsi4>
     fda:	21 50       	subi	r18, 0x01	; 1
     fdc:	f6 01       	movw	r30, r12
     fde:	32 97       	sbiw	r30, 0x02	; 2
     fe0:	20 83       	st	Z, r18
     fe2:	d8 01       	movw	r26, r16
     fe4:	ed 91       	ld	r30, X+
     fe6:	fc 91       	ld	r31, X
     fe8:	11 97       	sbiw	r26, 0x01	; 1
     fea:	35 97       	sbiw	r30, 0x05	; 5
     fec:	88 e9       	ldi	r24, 0x98	; 152
     fee:	80 83       	st	Z, r24
     ff0:	ed 91       	ld	r30, X+
     ff2:	fc 91       	ld	r31, X
     ff4:	34 97       	sbiw	r30, 0x04	; 4
     ff6:	86 e0       	ldi	r24, 0x06	; 6
     ff8:	80 83       	st	Z, r24
     ffa:	ff be       	out	0x3f, r15	; 63
     ffc:	c8 01       	movw	r24, r16
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	1f 91       	pop	r17
    1004:	0f 91       	pop	r16
    1006:	ff 90       	pop	r15
    1008:	df 90       	pop	r13
    100a:	cf 90       	pop	r12
    100c:	bf 90       	pop	r11
    100e:	af 90       	pop	r10
    1010:	9f 90       	pop	r9
    1012:	8f 90       	pop	r8
    1014:	7f 90       	pop	r7
    1016:	6f 90       	pop	r6
    1018:	5f 90       	pop	r5
    101a:	4f 90       	pop	r4
    101c:	08 95       	ret

0000101e <serial_send_bytes>:

/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
    101e:	ef 92       	push	r14
    1020:	ff 92       	push	r15
    1022:	0f 93       	push	r16
    1024:	1f 93       	push	r17
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
    102a:	fc 01       	movw	r30, r24
    102c:	a2 81       	ldd	r26, Z+2	; 0x02
    102e:	b3 81       	ldd	r27, Z+3	; 0x03
    1030:	10 97       	sbiw	r26, 0x00	; 0
    1032:	79 f0       	breq	.+30     	; 0x1052 <serial_send_bytes+0x34>
    1034:	e4 2f       	mov	r30, r20
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	92 96       	adiw	r26, 0x22	; 34
    103a:	5c 91       	ld	r21, X
    103c:	20 e2       	ldi	r18, 0x20	; 32
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	25 1b       	sub	r18, r21
    1042:	31 09       	sbc	r19, r1
    1044:	2e 17       	cp	r18, r30
    1046:	3f 07       	cpc	r19, r31
    1048:	1c f1       	brlt	.+70     	; 0x1090 <serial_send_bytes+0x72>
    104a:	7c 01       	movw	r14, r24
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    104c:	41 11       	cpse	r20, r1
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <serial_send_bytes+0x3a>
    1050:	16 c0       	rjmp	.+44     	; 0x107e <serial_send_bytes+0x60>

/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
    1052:	42 30       	cpi	r20, 0x02	; 2
    1054:	f8 f4       	brcc	.+62     	; 0x1094 <serial_send_bytes+0x76>
    1056:	f9 cf       	rjmp	.-14     	; 0x104a <serial_send_bytes+0x2c>
    1058:	eb 01       	movw	r28, r22
    105a:	41 50       	subi	r20, 0x01	; 1
    105c:	04 2f       	mov	r16, r20
    105e:	10 e0       	ldi	r17, 0x00	; 0
    1060:	0f 5f       	subi	r16, 0xFF	; 255
    1062:	1f 4f       	sbci	r17, 0xFF	; 255
    1064:	06 0f       	add	r16, r22
    1066:	17 1f       	adc	r17, r23
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
    1068:	69 91       	ld	r22, Y+
    106a:	d7 01       	movw	r26, r14
    106c:	12 96       	adiw	r26, 0x02	; 2
    106e:	8d 91       	ld	r24, X+
    1070:	9c 91       	ld	r25, X
    1072:	13 97       	sbiw	r26, 0x03	; 3
    1074:	0e 94 5a 05 	call	0xab4	; 0xab4 <buffer_put_item>
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    1078:	c0 17       	cp	r28, r16
    107a:	d1 07       	cpc	r29, r17
    107c:	a9 f7       	brne	.-22     	; 0x1068 <serial_send_bytes+0x4a>
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
    107e:	d7 01       	movw	r26, r14
    1080:	ed 91       	ld	r30, X+
    1082:	fc 91       	ld	r31, X
SREG = _sreg;


/*-----------------------------------------------------------*/
static void _serial_tx_int_on(volatile uint8_t *UDR_reg) {
	*(UDR_reg  - UCSRB_off) |= serTX_INT_ENABLE;
    1084:	35 97       	sbiw	r30, 0x05	; 5
    1086:	80 81       	ld	r24, Z
    1088:	80 62       	ori	r24, 0x20	; 32
    108a:	80 83       	st	Z, r24
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	03 c0       	rjmp	.+6      	; 0x1096 <serial_send_bytes+0x78>
/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
		return BUFFER_FULL;
    1090:	82 e0       	ldi	r24, 0x02	; 2
    1092:	01 c0       	rjmp	.+2      	; 0x1096 <serial_send_bytes+0x78>
    1094:	82 e0       	ldi	r24, 0x02	; 2
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
}
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	1f 91       	pop	r17
    109c:	0f 91       	pop	r16
    109e:	ff 90       	pop	r15
    10a0:	ef 90       	pop	r14
    10a2:	08 95       	ret

000010a4 <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    10a4:	1f 92       	push	r1
    10a6:	0f 92       	push	r0
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	0f 92       	push	r0
    10ac:	11 24       	eor	r1, r1
    10ae:	2f 93       	push	r18
    10b0:	3f 93       	push	r19
    10b2:	4f 93       	push	r20
    10b4:	5f 93       	push	r21
    10b6:	6f 93       	push	r22
    10b8:	7f 93       	push	r23
    10ba:	8f 93       	push	r24
    10bc:	9f 93       	push	r25
    10be:	af 93       	push	r26
    10c0:	bf 93       	push	r27
    10c2:	cf 93       	push	r28
    10c4:	ef 93       	push	r30
    10c6:	ff 93       	push	r31
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    10c8:	e0 91 67 07 	lds	r30, 0x0767	; 0x800767 <_ser_handle>
    10cc:	f0 91 68 07 	lds	r31, 0x0768	; 0x800768 <_ser_handle+0x1>
    10d0:	30 97       	sbiw	r30, 0x00	; 0
    10d2:	a1 f0       	breq	.+40     	; 0x10fc <__vector_20+0x58>
		item = UDR0;
    10d4:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    10d8:	6c 2f       	mov	r22, r28
    10da:	84 81       	ldd	r24, Z+4	; 0x04
    10dc:	95 81       	ldd	r25, Z+5	; 0x05
    10de:	0e 94 5a 05 	call	0xab4	; 0xab4 <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    10e2:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <_ser_handle>
    10e6:	90 91 68 07 	lds	r25, 0x0768	; 0x800768 <_ser_handle+0x1>
    10ea:	dc 01       	movw	r26, r24
    10ec:	16 96       	adiw	r26, 0x06	; 6
    10ee:	ed 91       	ld	r30, X+
    10f0:	fc 91       	ld	r31, X
    10f2:	17 97       	sbiw	r26, 0x07	; 7
    10f4:	30 97       	sbiw	r30, 0x00	; 0
    10f6:	11 f0       	breq	.+4      	; 0x10fc <__vector_20+0x58>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    10f8:	6c 2f       	mov	r22, r28
    10fa:	09 95       	icall
		}
	}
}
    10fc:	ff 91       	pop	r31
    10fe:	ef 91       	pop	r30
    1100:	cf 91       	pop	r28
    1102:	bf 91       	pop	r27
    1104:	af 91       	pop	r26
    1106:	9f 91       	pop	r25
    1108:	8f 91       	pop	r24
    110a:	7f 91       	pop	r23
    110c:	6f 91       	pop	r22
    110e:	5f 91       	pop	r21
    1110:	4f 91       	pop	r20
    1112:	3f 91       	pop	r19
    1114:	2f 91       	pop	r18
    1116:	0f 90       	pop	r0
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	0f 90       	pop	r0
    111c:	1f 90       	pop	r1
    111e:	18 95       	reti

00001120 <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    1120:	1f 92       	push	r1
    1122:	0f 92       	push	r0
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	0f 92       	push	r0
    1128:	11 24       	eor	r1, r1
    112a:	2f 93       	push	r18
    112c:	3f 93       	push	r19
    112e:	4f 93       	push	r20
    1130:	5f 93       	push	r21
    1132:	6f 93       	push	r22
    1134:	7f 93       	push	r23
    1136:	8f 93       	push	r24
    1138:	9f 93       	push	r25
    113a:	af 93       	push	r26
    113c:	bf 93       	push	r27
    113e:	ef 93       	push	r30
    1140:	ff 93       	push	r31
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	1f 92       	push	r1
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    114c:	e0 91 67 07 	lds	r30, 0x0767	; 0x800767 <_ser_handle>
    1150:	f0 91 68 07 	lds	r31, 0x0768	; 0x800768 <_ser_handle+0x1>
    1154:	30 97       	sbiw	r30, 0x00	; 0
    1156:	99 f0       	breq	.+38     	; 0x117e <__vector_21+0x5e>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    1158:	be 01       	movw	r22, r28
    115a:	6f 5f       	subi	r22, 0xFF	; 255
    115c:	7f 4f       	sbci	r23, 0xFF	; 255
    115e:	82 81       	ldd	r24, Z+2	; 0x02
    1160:	93 81       	ldd	r25, Z+3	; 0x03
    1162:	0e 94 39 05 	call	0xa72	; 0xa72 <buffer_get_item>
    1166:	81 11       	cpse	r24, r1
    1168:	04 c0       	rjmp	.+8      	; 0x1172 <__vector_21+0x52>
			UDR0 = item;
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1170:	0b c0       	rjmp	.+22     	; 0x1188 <__vector_21+0x68>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    1172:	e1 ec       	ldi	r30, 0xC1	; 193
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	8f 7d       	andi	r24, 0xDF	; 223
    117a:	80 83       	st	Z, r24
    117c:	05 c0       	rjmp	.+10     	; 0x1188 <__vector_21+0x68>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    117e:	e1 ec       	ldi	r30, 0xC1	; 193
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	8f 7d       	andi	r24, 0xDF	; 223
    1186:	80 83       	st	Z, r24
	}
}
    1188:	0f 90       	pop	r0
    118a:	df 91       	pop	r29
    118c:	cf 91       	pop	r28
    118e:	ff 91       	pop	r31
    1190:	ef 91       	pop	r30
    1192:	bf 91       	pop	r27
    1194:	af 91       	pop	r26
    1196:	9f 91       	pop	r25
    1198:	8f 91       	pop	r24
    119a:	7f 91       	pop	r23
    119c:	6f 91       	pop	r22
    119e:	5f 91       	pop	r21
    11a0:	4f 91       	pop	r20
    11a2:	3f 91       	pop	r19
    11a4:	2f 91       	pop	r18
    11a6:	0f 90       	pop	r0
    11a8:	0f be       	out	0x3f, r0	; 63
    11aa:	0f 90       	pop	r0
    11ac:	1f 90       	pop	r1
    11ae:	18 95       	reti

000011b0 <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    11b0:	1f 92       	push	r1
    11b2:	0f 92       	push	r0
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	0f 92       	push	r0
    11b8:	11 24       	eor	r1, r1
    11ba:	2f 93       	push	r18
    11bc:	3f 93       	push	r19
    11be:	4f 93       	push	r20
    11c0:	5f 93       	push	r21
    11c2:	6f 93       	push	r22
    11c4:	7f 93       	push	r23
    11c6:	8f 93       	push	r24
    11c8:	9f 93       	push	r25
    11ca:	af 93       	push	r26
    11cc:	bf 93       	push	r27
    11ce:	cf 93       	push	r28
    11d0:	ef 93       	push	r30
    11d2:	ff 93       	push	r31
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    11d4:	e0 91 69 07 	lds	r30, 0x0769	; 0x800769 <_ser_handle+0x2>
    11d8:	f0 91 6a 07 	lds	r31, 0x076A	; 0x80076a <_ser_handle+0x3>
    11dc:	30 97       	sbiw	r30, 0x00	; 0
    11de:	a1 f0       	breq	.+40     	; 0x1208 <__vector_28+0x58>
		item = UDR1;
    11e0:	c0 91 ce 00 	lds	r28, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    11e4:	6c 2f       	mov	r22, r28
    11e6:	84 81       	ldd	r24, Z+4	; 0x04
    11e8:	95 81       	ldd	r25, Z+5	; 0x05
    11ea:	0e 94 5a 05 	call	0xab4	; 0xab4 <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    11ee:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <_ser_handle+0x2>
    11f2:	90 91 6a 07 	lds	r25, 0x076A	; 0x80076a <_ser_handle+0x3>
    11f6:	dc 01       	movw	r26, r24
    11f8:	16 96       	adiw	r26, 0x06	; 6
    11fa:	ed 91       	ld	r30, X+
    11fc:	fc 91       	ld	r31, X
    11fe:	17 97       	sbiw	r26, 0x07	; 7
    1200:	30 97       	sbiw	r30, 0x00	; 0
    1202:	11 f0       	breq	.+4      	; 0x1208 <__vector_28+0x58>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    1204:	6c 2f       	mov	r22, r28
    1206:	09 95       	icall
		}
	}
}
    1208:	ff 91       	pop	r31
    120a:	ef 91       	pop	r30
    120c:	cf 91       	pop	r28
    120e:	bf 91       	pop	r27
    1210:	af 91       	pop	r26
    1212:	9f 91       	pop	r25
    1214:	8f 91       	pop	r24
    1216:	7f 91       	pop	r23
    1218:	6f 91       	pop	r22
    121a:	5f 91       	pop	r21
    121c:	4f 91       	pop	r20
    121e:	3f 91       	pop	r19
    1220:	2f 91       	pop	r18
    1222:	0f 90       	pop	r0
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	0f 90       	pop	r0
    1228:	1f 90       	pop	r1
    122a:	18 95       	reti

0000122c <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    122c:	1f 92       	push	r1
    122e:	0f 92       	push	r0
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	0f 92       	push	r0
    1234:	11 24       	eor	r1, r1
    1236:	2f 93       	push	r18
    1238:	3f 93       	push	r19
    123a:	4f 93       	push	r20
    123c:	5f 93       	push	r21
    123e:	6f 93       	push	r22
    1240:	7f 93       	push	r23
    1242:	8f 93       	push	r24
    1244:	9f 93       	push	r25
    1246:	af 93       	push	r26
    1248:	bf 93       	push	r27
    124a:	ef 93       	push	r30
    124c:	ff 93       	push	r31
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	1f 92       	push	r1
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    1258:	e0 91 69 07 	lds	r30, 0x0769	; 0x800769 <_ser_handle+0x2>
    125c:	f0 91 6a 07 	lds	r31, 0x076A	; 0x80076a <_ser_handle+0x3>
    1260:	30 97       	sbiw	r30, 0x00	; 0
    1262:	99 f0       	breq	.+38     	; 0x128a <__vector_29+0x5e>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    1264:	be 01       	movw	r22, r28
    1266:	6f 5f       	subi	r22, 0xFF	; 255
    1268:	7f 4f       	sbci	r23, 0xFF	; 255
    126a:	82 81       	ldd	r24, Z+2	; 0x02
    126c:	93 81       	ldd	r25, Z+3	; 0x03
    126e:	0e 94 39 05 	call	0xa72	; 0xa72 <buffer_get_item>
    1272:	81 11       	cpse	r24, r1
    1274:	04 c0       	rjmp	.+8      	; 0x127e <__vector_29+0x52>
			UDR1 = item;
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    127c:	0b c0       	rjmp	.+22     	; 0x1294 <__vector_29+0x68>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    127e:	e9 ec       	ldi	r30, 0xC9	; 201
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	8f 7d       	andi	r24, 0xDF	; 223
    1286:	80 83       	st	Z, r24
    1288:	05 c0       	rjmp	.+10     	; 0x1294 <__vector_29+0x68>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    128a:	e9 ec       	ldi	r30, 0xC9	; 201
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	8f 7d       	andi	r24, 0xDF	; 223
    1292:	80 83       	st	Z, r24
	}
}
    1294:	0f 90       	pop	r0
    1296:	df 91       	pop	r29
    1298:	cf 91       	pop	r28
    129a:	ff 91       	pop	r31
    129c:	ef 91       	pop	r30
    129e:	bf 91       	pop	r27
    12a0:	af 91       	pop	r26
    12a2:	9f 91       	pop	r25
    12a4:	8f 91       	pop	r24
    12a6:	7f 91       	pop	r23
    12a8:	6f 91       	pop	r22
    12aa:	5f 91       	pop	r21
    12ac:	4f 91       	pop	r20
    12ae:	3f 91       	pop	r19
    12b0:	2f 91       	pop	r18
    12b2:	0f 90       	pop	r0
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	0f 90       	pop	r0
    12b8:	1f 90       	pop	r1
    12ba:	18 95       	reti

000012bc <prvCopyDataToQueue>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	ec 01       	movw	r28, r24
    12c6:	04 2f       	mov	r16, r20
    12c8:	1a 8d       	ldd	r17, Y+26	; 0x1a
    12ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    12cc:	81 11       	cpse	r24, r1
    12ce:	0c c0       	rjmp	.+24     	; 0x12e8 <prvCopyDataToQueue+0x2c>
    12d0:	88 81       	ld	r24, Y
    12d2:	99 81       	ldd	r25, Y+1	; 0x01
    12d4:	89 2b       	or	r24, r25
    12d6:	09 f0       	breq	.+2      	; 0x12da <prvCopyDataToQueue+0x1e>
    12d8:	44 c0       	rjmp	.+136    	; 0x1362 <prvCopyDataToQueue+0xa6>
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	9b 81       	ldd	r25, Y+3	; 0x03
    12de:	0e 94 0d 11 	call	0x221a	; 0x221a <xTaskPriorityDisinherit>
    12e2:	1b 82       	std	Y+3, r1	; 0x03
    12e4:	1a 82       	std	Y+2, r1	; 0x02
    12e6:	44 c0       	rjmp	.+136    	; 0x1370 <prvCopyDataToQueue+0xb4>
    12e8:	41 11       	cpse	r20, r1
    12ea:	18 c0       	rjmp	.+48     	; 0x131c <prvCopyDataToQueue+0x60>
    12ec:	48 2f       	mov	r20, r24
    12ee:	50 e0       	ldi	r21, 0x00	; 0
    12f0:	8c 81       	ldd	r24, Y+4	; 0x04
    12f2:	9d 81       	ldd	r25, Y+5	; 0x05
    12f4:	0e 94 0a 13 	call	0x2614	; 0x2614 <memcpy>
    12f8:	2c 8d       	ldd	r18, Y+28	; 0x1c
    12fa:	8c 81       	ldd	r24, Y+4	; 0x04
    12fc:	9d 81       	ldd	r25, Y+5	; 0x05
    12fe:	82 0f       	add	r24, r18
    1300:	91 1d       	adc	r25, r1
    1302:	9d 83       	std	Y+5, r25	; 0x05
    1304:	8c 83       	std	Y+4, r24	; 0x04
    1306:	2a 81       	ldd	r18, Y+2	; 0x02
    1308:	3b 81       	ldd	r19, Y+3	; 0x03
    130a:	82 17       	cp	r24, r18
    130c:	93 07       	cpc	r25, r19
    130e:	58 f1       	brcs	.+86     	; 0x1366 <prvCopyDataToQueue+0xaa>
    1310:	88 81       	ld	r24, Y
    1312:	99 81       	ldd	r25, Y+1	; 0x01
    1314:	9d 83       	std	Y+5, r25	; 0x05
    1316:	8c 83       	std	Y+4, r24	; 0x04
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	2a c0       	rjmp	.+84     	; 0x1370 <prvCopyDataToQueue+0xb4>
    131c:	48 2f       	mov	r20, r24
    131e:	50 e0       	ldi	r21, 0x00	; 0
    1320:	8e 81       	ldd	r24, Y+6	; 0x06
    1322:	9f 81       	ldd	r25, Y+7	; 0x07
    1324:	0e 94 0a 13 	call	0x2614	; 0x2614 <memcpy>
    1328:	8c 8d       	ldd	r24, Y+28	; 0x1c
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	91 95       	neg	r25
    132e:	81 95       	neg	r24
    1330:	91 09       	sbc	r25, r1
    1332:	2e 81       	ldd	r18, Y+6	; 0x06
    1334:	3f 81       	ldd	r19, Y+7	; 0x07
    1336:	28 0f       	add	r18, r24
    1338:	39 1f       	adc	r19, r25
    133a:	3f 83       	std	Y+7, r19	; 0x07
    133c:	2e 83       	std	Y+6, r18	; 0x06
    133e:	48 81       	ld	r20, Y
    1340:	59 81       	ldd	r21, Y+1	; 0x01
    1342:	24 17       	cp	r18, r20
    1344:	35 07       	cpc	r19, r21
    1346:	30 f4       	brcc	.+12     	; 0x1354 <prvCopyDataToQueue+0x98>
    1348:	2a 81       	ldd	r18, Y+2	; 0x02
    134a:	3b 81       	ldd	r19, Y+3	; 0x03
    134c:	82 0f       	add	r24, r18
    134e:	93 1f       	adc	r25, r19
    1350:	9f 83       	std	Y+7, r25	; 0x07
    1352:	8e 83       	std	Y+6, r24	; 0x06
    1354:	02 30       	cpi	r16, 0x02	; 2
    1356:	49 f4       	brne	.+18     	; 0x136a <prvCopyDataToQueue+0xae>
    1358:	11 23       	and	r17, r17
    135a:	49 f0       	breq	.+18     	; 0x136e <prvCopyDataToQueue+0xb2>
    135c:	11 50       	subi	r17, 0x01	; 1
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	07 c0       	rjmp	.+14     	; 0x1370 <prvCopyDataToQueue+0xb4>
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	05 c0       	rjmp	.+10     	; 0x1370 <prvCopyDataToQueue+0xb4>
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	03 c0       	rjmp	.+6      	; 0x1370 <prvCopyDataToQueue+0xb4>
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	01 c0       	rjmp	.+2      	; 0x1370 <prvCopyDataToQueue+0xb4>
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	1f 5f       	subi	r17, 0xFF	; 255
    1372:	1a 8f       	std	Y+26, r17	; 0x1a
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	1f 91       	pop	r17
    137a:	0f 91       	pop	r16
    137c:	08 95       	ret

0000137e <prvCopyDataFromQueue>:
    137e:	fc 01       	movw	r30, r24
    1380:	44 8d       	ldd	r20, Z+28	; 0x1c
    1382:	44 23       	and	r20, r20
    1384:	a9 f0       	breq	.+42     	; 0x13b0 <prvCopyDataFromQueue+0x32>
    1386:	50 e0       	ldi	r21, 0x00	; 0
    1388:	26 81       	ldd	r18, Z+6	; 0x06
    138a:	37 81       	ldd	r19, Z+7	; 0x07
    138c:	24 0f       	add	r18, r20
    138e:	35 1f       	adc	r19, r21
    1390:	37 83       	std	Z+7, r19	; 0x07
    1392:	26 83       	std	Z+6, r18	; 0x06
    1394:	82 81       	ldd	r24, Z+2	; 0x02
    1396:	93 81       	ldd	r25, Z+3	; 0x03
    1398:	28 17       	cp	r18, r24
    139a:	39 07       	cpc	r19, r25
    139c:	20 f0       	brcs	.+8      	; 0x13a6 <prvCopyDataFromQueue+0x28>
    139e:	80 81       	ld	r24, Z
    13a0:	91 81       	ldd	r25, Z+1	; 0x01
    13a2:	97 83       	std	Z+7, r25	; 0x07
    13a4:	86 83       	std	Z+6, r24	; 0x06
    13a6:	cb 01       	movw	r24, r22
    13a8:	66 81       	ldd	r22, Z+6	; 0x06
    13aa:	77 81       	ldd	r23, Z+7	; 0x07
    13ac:	0e 94 0a 13 	call	0x2614	; 0x2614 <memcpy>
    13b0:	08 95       	ret

000013b2 <prvUnlockQueue>:
    13b2:	ef 92       	push	r14
    13b4:	ff 92       	push	r15
    13b6:	0f 93       	push	r16
    13b8:	1f 93       	push	r17
    13ba:	cf 93       	push	r28
    13bc:	8c 01       	movw	r16, r24
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	0f 92       	push	r0
    13c4:	fc 01       	movw	r30, r24
    13c6:	c6 8d       	ldd	r28, Z+30	; 0x1e
    13c8:	1c 16       	cp	r1, r28
    13ca:	ac f4       	brge	.+42     	; 0x13f6 <prvUnlockQueue+0x44>
    13cc:	81 89       	ldd	r24, Z+17	; 0x11
    13ce:	81 11       	cpse	r24, r1
    13d0:	06 c0       	rjmp	.+12     	; 0x13de <prvUnlockQueue+0x2c>
    13d2:	11 c0       	rjmp	.+34     	; 0x13f6 <prvUnlockQueue+0x44>
    13d4:	f8 01       	movw	r30, r16
    13d6:	91 89       	ldd	r25, Z+17	; 0x11
    13d8:	91 11       	cpse	r25, r1
    13da:	05 c0       	rjmp	.+10     	; 0x13e6 <prvUnlockQueue+0x34>
    13dc:	0c c0       	rjmp	.+24     	; 0x13f6 <prvUnlockQueue+0x44>
    13de:	78 01       	movw	r14, r16
    13e0:	f1 e1       	ldi	r31, 0x11	; 17
    13e2:	ef 0e       	add	r14, r31
    13e4:	f1 1c       	adc	r15, r1
    13e6:	c7 01       	movw	r24, r14
    13e8:	0e 94 22 10 	call	0x2044	; 0x2044 <xTaskRemoveFromEventList>
    13ec:	81 11       	cpse	r24, r1
    13ee:	0e 94 a7 10 	call	0x214e	; 0x214e <vTaskMissedYield>
    13f2:	c1 50       	subi	r28, 0x01	; 1
    13f4:	79 f7       	brne	.-34     	; 0x13d4 <prvUnlockQueue+0x22>
    13f6:	8f ef       	ldi	r24, 0xFF	; 255
    13f8:	f8 01       	movw	r30, r16
    13fa:	86 8f       	std	Z+30, r24	; 0x1e
    13fc:	0f 90       	pop	r0
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	f8 94       	cli
    1404:	0f 92       	push	r0
    1406:	c5 8d       	ldd	r28, Z+29	; 0x1d
    1408:	1c 16       	cp	r1, r28
    140a:	ac f4       	brge	.+42     	; 0x1436 <prvUnlockQueue+0x84>
    140c:	80 85       	ldd	r24, Z+8	; 0x08
    140e:	81 11       	cpse	r24, r1
    1410:	06 c0       	rjmp	.+12     	; 0x141e <prvUnlockQueue+0x6c>
    1412:	11 c0       	rjmp	.+34     	; 0x1436 <prvUnlockQueue+0x84>
    1414:	f8 01       	movw	r30, r16
    1416:	90 85       	ldd	r25, Z+8	; 0x08
    1418:	91 11       	cpse	r25, r1
    141a:	05 c0       	rjmp	.+10     	; 0x1426 <prvUnlockQueue+0x74>
    141c:	0c c0       	rjmp	.+24     	; 0x1436 <prvUnlockQueue+0x84>
    141e:	78 01       	movw	r14, r16
    1420:	f8 e0       	ldi	r31, 0x08	; 8
    1422:	ef 0e       	add	r14, r31
    1424:	f1 1c       	adc	r15, r1
    1426:	c7 01       	movw	r24, r14
    1428:	0e 94 22 10 	call	0x2044	; 0x2044 <xTaskRemoveFromEventList>
    142c:	81 11       	cpse	r24, r1
    142e:	0e 94 a7 10 	call	0x214e	; 0x214e <vTaskMissedYield>
    1432:	c1 50       	subi	r28, 0x01	; 1
    1434:	79 f7       	brne	.-34     	; 0x1414 <prvUnlockQueue+0x62>
    1436:	8f ef       	ldi	r24, 0xFF	; 255
    1438:	f8 01       	movw	r30, r16
    143a:	85 8f       	std	Z+29, r24	; 0x1d
    143c:	0f 90       	pop	r0
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cf 91       	pop	r28
    1442:	1f 91       	pop	r17
    1444:	0f 91       	pop	r16
    1446:	ff 90       	pop	r15
    1448:	ef 90       	pop	r14
    144a:	08 95       	ret

0000144c <xQueueGenericReset>:
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	ec 01       	movw	r28, r24
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	f8 94       	cli
    1456:	0f 92       	push	r0
    1458:	48 81       	ld	r20, Y
    145a:	59 81       	ldd	r21, Y+1	; 0x01
    145c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1462:	72 9f       	mul	r23, r18
    1464:	c0 01       	movw	r24, r0
    1466:	73 9f       	mul	r23, r19
    1468:	90 0d       	add	r25, r0
    146a:	11 24       	eor	r1, r1
    146c:	fa 01       	movw	r30, r20
    146e:	e8 0f       	add	r30, r24
    1470:	f9 1f       	adc	r31, r25
    1472:	fb 83       	std	Y+3, r31	; 0x03
    1474:	ea 83       	std	Y+2, r30	; 0x02
    1476:	1a 8e       	std	Y+26, r1	; 0x1a
    1478:	5d 83       	std	Y+5, r21	; 0x05
    147a:	4c 83       	std	Y+4, r20	; 0x04
    147c:	82 1b       	sub	r24, r18
    147e:	93 0b       	sbc	r25, r19
    1480:	84 0f       	add	r24, r20
    1482:	95 1f       	adc	r25, r21
    1484:	9f 83       	std	Y+7, r25	; 0x07
    1486:	8e 83       	std	Y+6, r24	; 0x06
    1488:	8f ef       	ldi	r24, 0xFF	; 255
    148a:	8d 8f       	std	Y+29, r24	; 0x1d
    148c:	8e 8f       	std	Y+30, r24	; 0x1e
    148e:	61 11       	cpse	r22, r1
    1490:	0c c0       	rjmp	.+24     	; 0x14aa <xQueueGenericReset+0x5e>
    1492:	88 85       	ldd	r24, Y+8	; 0x08
    1494:	88 23       	and	r24, r24
    1496:	89 f0       	breq	.+34     	; 0x14ba <xQueueGenericReset+0x6e>
    1498:	ce 01       	movw	r24, r28
    149a:	08 96       	adiw	r24, 0x08	; 8
    149c:	0e 94 22 10 	call	0x2044	; 0x2044 <xTaskRemoveFromEventList>
    14a0:	88 23       	and	r24, r24
    14a2:	59 f0       	breq	.+22     	; 0x14ba <xQueueGenericReset+0x6e>
    14a4:	0e 94 a7 06 	call	0xd4e	; 0xd4e <vPortYield>
    14a8:	08 c0       	rjmp	.+16     	; 0x14ba <xQueueGenericReset+0x6e>
    14aa:	ce 01       	movw	r24, r28
    14ac:	08 96       	adiw	r24, 0x08	; 8
    14ae:	0e 94 77 05 	call	0xaee	; 0xaee <vListInitialise>
    14b2:	ce 01       	movw	r24, r28
    14b4:	41 96       	adiw	r24, 0x11	; 17
    14b6:	0e 94 77 05 	call	0xaee	; 0xaee <vListInitialise>
    14ba:	0f 90       	pop	r0
    14bc:	0f be       	out	0x3f, r0	; 63
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	08 95       	ret

000014c6 <xQueueGenericCreate>:
    14c6:	ff 92       	push	r15
    14c8:	0f 93       	push	r16
    14ca:	1f 93       	push	r17
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	08 2f       	mov	r16, r24
    14d2:	16 2f       	mov	r17, r22
    14d4:	f4 2e       	mov	r15, r20
    14d6:	66 23       	and	r22, r22
    14d8:	c9 f0       	breq	.+50     	; 0x150c <xQueueGenericCreate+0x46>
    14da:	86 9f       	mul	r24, r22
    14dc:	c0 01       	movw	r24, r0
    14de:	11 24       	eor	r1, r1
    14e0:	81 96       	adiw	r24, 0x21	; 33
    14e2:	0e 94 5f 07 	call	0xebe	; 0xebe <pvPortMalloc>
    14e6:	ec 01       	movw	r28, r24
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	49 f4       	brne	.+18     	; 0x14fe <xQueueGenericCreate+0x38>
    14ec:	16 c0       	rjmp	.+44     	; 0x151a <xQueueGenericCreate+0x54>
    14ee:	0b 8f       	std	Y+27, r16	; 0x1b
    14f0:	1c 8f       	std	Y+28, r17	; 0x1c
    14f2:	61 e0       	ldi	r22, 0x01	; 1
    14f4:	ce 01       	movw	r24, r28
    14f6:	0e 94 26 0a 	call	0x144c	; 0x144c <xQueueGenericReset>
    14fa:	f8 a2       	std	Y+32, r15	; 0x20
    14fc:	0e c0       	rjmp	.+28     	; 0x151a <xQueueGenericCreate+0x54>
    14fe:	81 96       	adiw	r24, 0x21	; 33
    1500:	99 83       	std	Y+1, r25	; 0x01
    1502:	88 83       	st	Y, r24
    1504:	f4 cf       	rjmp	.-24     	; 0x14ee <xQueueGenericCreate+0x28>
    1506:	d9 83       	std	Y+1, r29	; 0x01
    1508:	c8 83       	st	Y, r28
    150a:	f1 cf       	rjmp	.-30     	; 0x14ee <xQueueGenericCreate+0x28>
    150c:	81 e2       	ldi	r24, 0x21	; 33
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	0e 94 5f 07 	call	0xebe	; 0xebe <pvPortMalloc>
    1514:	ec 01       	movw	r28, r24
    1516:	89 2b       	or	r24, r25
    1518:	b1 f7       	brne	.-20     	; 0x1506 <xQueueGenericCreate+0x40>
    151a:	ce 01       	movw	r24, r28
    151c:	df 91       	pop	r29
    151e:	cf 91       	pop	r28
    1520:	1f 91       	pop	r17
    1522:	0f 91       	pop	r16
    1524:	ff 90       	pop	r15
    1526:	08 95       	ret

00001528 <xQueueGenericSend>:
    1528:	9f 92       	push	r9
    152a:	af 92       	push	r10
    152c:	bf 92       	push	r11
    152e:	cf 92       	push	r12
    1530:	df 92       	push	r13
    1532:	ef 92       	push	r14
    1534:	ff 92       	push	r15
    1536:	0f 93       	push	r16
    1538:	1f 93       	push	r17
    153a:	cf 93       	push	r28
    153c:	df 93       	push	r29
    153e:	00 d0       	rcall	.+0      	; 0x1540 <xQueueGenericSend+0x18>
    1540:	00 d0       	rcall	.+0      	; 0x1542 <xQueueGenericSend+0x1a>
    1542:	1f 92       	push	r1
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	8c 01       	movw	r16, r24
    154a:	6b 01       	movw	r12, r22
    154c:	5d 83       	std	Y+5, r21	; 0x05
    154e:	4c 83       	std	Y+4, r20	; 0x04
    1550:	a2 2e       	mov	r10, r18
    1552:	b1 2c       	mov	r11, r1
    1554:	99 24       	eor	r9, r9
    1556:	93 94       	inc	r9
    1558:	7c 01       	movw	r14, r24
    155a:	88 e0       	ldi	r24, 0x08	; 8
    155c:	e8 0e       	add	r14, r24
    155e:	f1 1c       	adc	r15, r1
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	f8 94       	cli
    1564:	0f 92       	push	r0
    1566:	f8 01       	movw	r30, r16
    1568:	32 8d       	ldd	r19, Z+26	; 0x1a
    156a:	93 8d       	ldd	r25, Z+27	; 0x1b
    156c:	39 17       	cp	r19, r25
    156e:	18 f0       	brcs	.+6      	; 0x1576 <xQueueGenericSend+0x4e>
    1570:	f2 e0       	ldi	r31, 0x02	; 2
    1572:	af 12       	cpse	r10, r31
    1574:	19 c0       	rjmp	.+50     	; 0x15a8 <xQueueGenericSend+0x80>
    1576:	4a 2d       	mov	r20, r10
    1578:	b6 01       	movw	r22, r12
    157a:	c8 01       	movw	r24, r16
    157c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <prvCopyDataToQueue>
    1580:	f8 01       	movw	r30, r16
    1582:	91 89       	ldd	r25, Z+17	; 0x11
    1584:	99 23       	and	r25, r25
    1586:	49 f0       	breq	.+18     	; 0x159a <xQueueGenericSend+0x72>
    1588:	c8 01       	movw	r24, r16
    158a:	41 96       	adiw	r24, 0x11	; 17
    158c:	0e 94 22 10 	call	0x2044	; 0x2044 <xTaskRemoveFromEventList>
    1590:	88 23       	and	r24, r24
    1592:	31 f0       	breq	.+12     	; 0x15a0 <xQueueGenericSend+0x78>
    1594:	0e 94 a7 06 	call	0xd4e	; 0xd4e <vPortYield>
    1598:	03 c0       	rjmp	.+6      	; 0x15a0 <xQueueGenericSend+0x78>
    159a:	81 11       	cpse	r24, r1
    159c:	0e 94 a7 06 	call	0xd4e	; 0xd4e <vPortYield>
    15a0:	0f 90       	pop	r0
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	50 c0       	rjmp	.+160    	; 0x1648 <xQueueGenericSend+0x120>
    15a8:	ec 81       	ldd	r30, Y+4	; 0x04
    15aa:	fd 81       	ldd	r31, Y+5	; 0x05
    15ac:	ef 2b       	or	r30, r31
    15ae:	21 f4       	brne	.+8      	; 0x15b8 <xQueueGenericSend+0x90>
    15b0:	0f 90       	pop	r0
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	48 c0       	rjmp	.+144    	; 0x1648 <xQueueGenericSend+0x120>
    15b8:	b1 10       	cpse	r11, r1
    15ba:	05 c0       	rjmp	.+10     	; 0x15c6 <xQueueGenericSend+0x9e>
    15bc:	ce 01       	movw	r24, r28
    15be:	01 96       	adiw	r24, 0x01	; 1
    15c0:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <vTaskSetTimeOutState>
    15c4:	b9 2c       	mov	r11, r9
    15c6:	0f 90       	pop	r0
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <vTaskSuspendAll>
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	f8 94       	cli
    15d2:	0f 92       	push	r0
    15d4:	f8 01       	movw	r30, r16
    15d6:	85 8d       	ldd	r24, Z+29	; 0x1d
    15d8:	8f 3f       	cpi	r24, 0xFF	; 255
    15da:	09 f4       	brne	.+2      	; 0x15de <xQueueGenericSend+0xb6>
    15dc:	15 8e       	std	Z+29, r1	; 0x1d
    15de:	f8 01       	movw	r30, r16
    15e0:	86 8d       	ldd	r24, Z+30	; 0x1e
    15e2:	8f 3f       	cpi	r24, 0xFF	; 255
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <xQueueGenericSend+0xc0>
    15e6:	16 8e       	std	Z+30, r1	; 0x1e
    15e8:	0f 90       	pop	r0
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	be 01       	movw	r22, r28
    15ee:	6c 5f       	subi	r22, 0xFC	; 252
    15f0:	7f 4f       	sbci	r23, 0xFF	; 255
    15f2:	ce 01       	movw	r24, r28
    15f4:	01 96       	adiw	r24, 0x01	; 1
    15f6:	0e 94 75 10 	call	0x20ea	; 0x20ea <xTaskCheckForTimeOut>
    15fa:	81 11       	cpse	r24, r1
    15fc:	1f c0       	rjmp	.+62     	; 0x163c <xQueueGenericSend+0x114>
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	f8 94       	cli
    1602:	0f 92       	push	r0
    1604:	f8 01       	movw	r30, r16
    1606:	92 8d       	ldd	r25, Z+26	; 0x1a
    1608:	0f 90       	pop	r0
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	83 8d       	ldd	r24, Z+27	; 0x1b
    160e:	98 13       	cpse	r25, r24
    1610:	0f c0       	rjmp	.+30     	; 0x1630 <xQueueGenericSend+0x108>
    1612:	6c 81       	ldd	r22, Y+4	; 0x04
    1614:	7d 81       	ldd	r23, Y+5	; 0x05
    1616:	c7 01       	movw	r24, r14
    1618:	0e 94 0f 10 	call	0x201e	; 0x201e <vTaskPlaceOnEventList>
    161c:	c8 01       	movw	r24, r16
    161e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <prvUnlockQueue>
    1622:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <xTaskResumeAll>
    1626:	81 11       	cpse	r24, r1
    1628:	9b cf       	rjmp	.-202    	; 0x1560 <xQueueGenericSend+0x38>
    162a:	0e 94 a7 06 	call	0xd4e	; 0xd4e <vPortYield>
    162e:	98 cf       	rjmp	.-208    	; 0x1560 <xQueueGenericSend+0x38>
    1630:	c8 01       	movw	r24, r16
    1632:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <prvUnlockQueue>
    1636:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <xTaskResumeAll>
    163a:	92 cf       	rjmp	.-220    	; 0x1560 <xQueueGenericSend+0x38>
    163c:	c8 01       	movw	r24, r16
    163e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <prvUnlockQueue>
    1642:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <xTaskResumeAll>
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	1f 91       	pop	r17
    1658:	0f 91       	pop	r16
    165a:	ff 90       	pop	r15
    165c:	ef 90       	pop	r14
    165e:	df 90       	pop	r13
    1660:	cf 90       	pop	r12
    1662:	bf 90       	pop	r11
    1664:	af 90       	pop	r10
    1666:	9f 90       	pop	r9
    1668:	08 95       	ret

0000166a <xQueueCreateMutex>:
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	48 2f       	mov	r20, r24
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <xQueueGenericCreate>
    1678:	ec 01       	movw	r28, r24
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	61 f0       	breq	.+24     	; 0x1696 <xQueueCreateMutex+0x2c>
    167e:	1b 82       	std	Y+3, r1	; 0x03
    1680:	1a 82       	std	Y+2, r1	; 0x02
    1682:	19 82       	std	Y+1, r1	; 0x01
    1684:	18 82       	st	Y, r1
    1686:	1e 82       	std	Y+6, r1	; 0x06
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	40 e0       	ldi	r20, 0x00	; 0
    168c:	50 e0       	ldi	r21, 0x00	; 0
    168e:	60 e0       	ldi	r22, 0x00	; 0
    1690:	70 e0       	ldi	r23, 0x00	; 0
    1692:	0e 94 94 0a 	call	0x1528	; 0x1528 <xQueueGenericSend>
    1696:	ce 01       	movw	r24, r28
    1698:	df 91       	pop	r29
    169a:	cf 91       	pop	r28
    169c:	08 95       	ret

0000169e <xQueueGenericSendFromISR>:
    169e:	ef 92       	push	r14
    16a0:	ff 92       	push	r15
    16a2:	0f 93       	push	r16
    16a4:	1f 93       	push	r17
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
    16aa:	8a 01       	movw	r16, r20
    16ac:	fc 01       	movw	r30, r24
    16ae:	52 8d       	ldd	r21, Z+26	; 0x1a
    16b0:	33 8d       	ldd	r19, Z+27	; 0x1b
    16b2:	53 17       	cp	r21, r19
    16b4:	10 f0       	brcs	.+4      	; 0x16ba <xQueueGenericSendFromISR+0x1c>
    16b6:	22 30       	cpi	r18, 0x02	; 2
    16b8:	f1 f4       	brne	.+60     	; 0x16f6 <xQueueGenericSendFromISR+0x58>
    16ba:	42 2f       	mov	r20, r18
    16bc:	78 01       	movw	r14, r16
    16be:	ec 01       	movw	r28, r24
    16c0:	1e 8d       	ldd	r17, Y+30	; 0x1e
    16c2:	0e 94 5e 09 	call	0x12bc	; 0x12bc <prvCopyDataToQueue>
    16c6:	1f 3f       	cpi	r17, 0xFF	; 255
    16c8:	81 f4       	brne	.+32     	; 0x16ea <xQueueGenericSendFromISR+0x4c>
    16ca:	89 89       	ldd	r24, Y+17	; 0x11
    16cc:	88 23       	and	r24, r24
    16ce:	a9 f0       	breq	.+42     	; 0x16fa <xQueueGenericSendFromISR+0x5c>
    16d0:	ce 01       	movw	r24, r28
    16d2:	41 96       	adiw	r24, 0x11	; 17
    16d4:	0e 94 22 10 	call	0x2044	; 0x2044 <xTaskRemoveFromEventList>
    16d8:	88 23       	and	r24, r24
    16da:	89 f0       	breq	.+34     	; 0x16fe <xQueueGenericSendFromISR+0x60>
    16dc:	e1 14       	cp	r14, r1
    16de:	f1 04       	cpc	r15, r1
    16e0:	81 f0       	breq	.+32     	; 0x1702 <xQueueGenericSendFromISR+0x64>
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	f7 01       	movw	r30, r14
    16e6:	80 83       	st	Z, r24
    16e8:	0d c0       	rjmp	.+26     	; 0x1704 <xQueueGenericSendFromISR+0x66>
    16ea:	ff 24       	eor	r15, r15
    16ec:	f3 94       	inc	r15
    16ee:	f1 0e       	add	r15, r17
    16f0:	fe 8e       	std	Y+30, r15	; 0x1e
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	07 c0       	rjmp	.+14     	; 0x1704 <xQueueGenericSendFromISR+0x66>
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	05 c0       	rjmp	.+10     	; 0x1704 <xQueueGenericSendFromISR+0x66>
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	03 c0       	rjmp	.+6      	; 0x1704 <xQueueGenericSendFromISR+0x66>
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	01 c0       	rjmp	.+2      	; 0x1704 <xQueueGenericSendFromISR+0x66>
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	1f 91       	pop	r17
    170a:	0f 91       	pop	r16
    170c:	ff 90       	pop	r15
    170e:	ef 90       	pop	r14
    1710:	08 95       	ret

00001712 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    1712:	8f 92       	push	r8
    1714:	9f 92       	push	r9
    1716:	af 92       	push	r10
    1718:	bf 92       	push	r11
    171a:	cf 92       	push	r12
    171c:	df 92       	push	r13
    171e:	ef 92       	push	r14
    1720:	ff 92       	push	r15
    1722:	0f 93       	push	r16
    1724:	1f 93       	push	r17
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
    172a:	00 d0       	rcall	.+0      	; 0x172c <xQueueGenericReceive+0x1a>
    172c:	00 d0       	rcall	.+0      	; 0x172e <xQueueGenericReceive+0x1c>
    172e:	1f 92       	push	r1
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	8c 01       	movw	r16, r24
    1736:	5b 01       	movw	r10, r22
    1738:	5d 83       	std	Y+5, r21	; 0x05
    173a:	4c 83       	std	Y+4, r20	; 0x04
    173c:	82 2e       	mov	r8, r18
BaseType_t xEntryTimeSet = pdFALSE;
    173e:	e1 2c       	mov	r14, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    1740:	99 24       	eor	r9, r9
    1742:	93 94       	inc	r9
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1744:	6c 01       	movw	r12, r24
    1746:	81 e1       	ldi	r24, 0x11	; 17
    1748:	c8 0e       	add	r12, r24
    174a:	d1 1c       	adc	r13, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	f8 94       	cli
    1750:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1752:	f8 01       	movw	r30, r16
    1754:	f2 8c       	ldd	r15, Z+26	; 0x1a

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1756:	ff 20       	and	r15, r15
    1758:	91 f1       	breq	.+100    	; 0x17be <xQueueGenericReceive+0xac>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    175a:	c6 80       	ldd	r12, Z+6	; 0x06
    175c:	d7 80       	ldd	r13, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    175e:	b5 01       	movw	r22, r10
    1760:	c8 01       	movw	r24, r16
    1762:	0e 94 bf 09 	call	0x137e	; 0x137e <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    1766:	81 10       	cpse	r8, r1
    1768:	19 c0       	rjmp	.+50     	; 0x179c <xQueueGenericReceive+0x8a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    176a:	fa 94       	dec	r15
    176c:	f8 01       	movw	r30, r16
    176e:	f2 8e       	std	Z+26, r15	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1770:	80 81       	ld	r24, Z
    1772:	91 81       	ldd	r25, Z+1	; 0x01
    1774:	89 2b       	or	r24, r25
    1776:	29 f4       	brne	.+10     	; 0x1782 <xQueueGenericReceive+0x70>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    1778:	0e 94 4d 11 	call	0x229a	; 0x229a <pvTaskIncrementMutexHeldCount>
    177c:	f8 01       	movw	r30, r16
    177e:	93 83       	std	Z+3, r25	; 0x03
    1780:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1782:	f8 01       	movw	r30, r16
    1784:	80 85       	ldd	r24, Z+8	; 0x08
    1786:	88 23       	and	r24, r24
    1788:	b1 f0       	breq	.+44     	; 0x17b6 <xQueueGenericReceive+0xa4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    178a:	c8 01       	movw	r24, r16
    178c:	08 96       	adiw	r24, 0x08	; 8
    178e:	0e 94 22 10 	call	0x2044	; 0x2044 <xTaskRemoveFromEventList>
    1792:	88 23       	and	r24, r24
    1794:	81 f0       	breq	.+32     	; 0x17b6 <xQueueGenericReceive+0xa4>
						{
							queueYIELD_IF_USING_PREEMPTION();
    1796:	0e 94 a7 06 	call	0xd4e	; 0xd4e <vPortYield>
    179a:	0d c0       	rjmp	.+26     	; 0x17b6 <xQueueGenericReceive+0xa4>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    179c:	f8 01       	movw	r30, r16
    179e:	d7 82       	std	Z+7, r13	; 0x07
    17a0:	c6 82       	std	Z+6, r12	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    17a2:	81 89       	ldd	r24, Z+17	; 0x11
    17a4:	88 23       	and	r24, r24
    17a6:	39 f0       	breq	.+14     	; 0x17b6 <xQueueGenericReceive+0xa4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    17a8:	c8 01       	movw	r24, r16
    17aa:	41 96       	adiw	r24, 0x11	; 17
    17ac:	0e 94 22 10 	call	0x2044	; 0x2044 <xTaskRemoveFromEventList>
    17b0:	81 11       	cpse	r24, r1
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    17b2:	0e 94 a7 06 	call	0xd4e	; 0xd4e <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    17b6:	0f 90       	pop	r0
    17b8:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	64 c0       	rjmp	.+200    	; 0x1886 <xQueueGenericReceive+0x174>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    17be:	4c 81       	ldd	r20, Y+4	; 0x04
    17c0:	5d 81       	ldd	r21, Y+5	; 0x05
    17c2:	45 2b       	or	r20, r21
    17c4:	21 f4       	brne	.+8      	; 0x17ce <xQueueGenericReceive+0xbc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    17c6:	0f 90       	pop	r0
    17c8:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	5c c0       	rjmp	.+184    	; 0x1886 <xQueueGenericReceive+0x174>
				}
				else if( xEntryTimeSet == pdFALSE )
    17ce:	e1 10       	cpse	r14, r1
    17d0:	05 c0       	rjmp	.+10     	; 0x17dc <xQueueGenericReceive+0xca>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    17d2:	ce 01       	movw	r24, r28
    17d4:	01 96       	adiw	r24, 0x01	; 1
    17d6:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    17da:	e9 2c       	mov	r14, r9
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    17dc:	0f 90       	pop	r0
    17de:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    17e0:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	0f 92       	push	r0
    17ea:	f8 01       	movw	r30, r16
    17ec:	85 8d       	ldd	r24, Z+29	; 0x1d
    17ee:	8f 3f       	cpi	r24, 0xFF	; 255
    17f0:	09 f4       	brne	.+2      	; 0x17f4 <xQueueGenericReceive+0xe2>
    17f2:	15 8e       	std	Z+29, r1	; 0x1d
    17f4:	f8 01       	movw	r30, r16
    17f6:	96 8d       	ldd	r25, Z+30	; 0x1e
    17f8:	9f 3f       	cpi	r25, 0xFF	; 255
    17fa:	09 f4       	brne	.+2      	; 0x17fe <xQueueGenericReceive+0xec>
    17fc:	16 8e       	std	Z+30, r1	; 0x1e
    17fe:	0f 90       	pop	r0
    1800:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1802:	be 01       	movw	r22, r28
    1804:	6c 5f       	subi	r22, 0xFC	; 252
    1806:	7f 4f       	sbci	r23, 0xFF	; 255
    1808:	ce 01       	movw	r24, r28
    180a:	01 96       	adiw	r24, 0x01	; 1
    180c:	0e 94 75 10 	call	0x20ea	; 0x20ea <xTaskCheckForTimeOut>
    1810:	81 11       	cpse	r24, r1
    1812:	2b c0       	rjmp	.+86     	; 0x186a <xQueueGenericReceive+0x158>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	f8 94       	cli
    1818:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    181a:	f8 01       	movw	r30, r16
    181c:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    181e:	0f 90       	pop	r0
    1820:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1822:	81 11       	cpse	r24, r1
    1824:	1c c0       	rjmp	.+56     	; 0x185e <xQueueGenericReceive+0x14c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1826:	80 81       	ld	r24, Z
    1828:	91 81       	ldd	r25, Z+1	; 0x01
    182a:	89 2b       	or	r24, r25
    182c:	49 f4       	brne	.+18     	; 0x1840 <xQueueGenericReceive+0x12e>
					{
						taskENTER_CRITICAL();
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    1834:	82 81       	ldd	r24, Z+2	; 0x02
    1836:	93 81       	ldd	r25, Z+3	; 0x03
    1838:	0e 94 ab 10 	call	0x2156	; 0x2156 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    183c:	0f 90       	pop	r0
    183e:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1840:	6c 81       	ldd	r22, Y+4	; 0x04
    1842:	7d 81       	ldd	r23, Y+5	; 0x05
    1844:	c6 01       	movw	r24, r12
    1846:	0e 94 0f 10 	call	0x201e	; 0x201e <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    184a:	c8 01       	movw	r24, r16
    184c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1850:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <xTaskResumeAll>
    1854:	81 11       	cpse	r24, r1
    1856:	7a cf       	rjmp	.-268    	; 0x174c <xQueueGenericReceive+0x3a>
				{
					portYIELD_WITHIN_API();
    1858:	0e 94 a7 06 	call	0xd4e	; 0xd4e <vPortYield>
    185c:	77 cf       	rjmp	.-274    	; 0x174c <xQueueGenericReceive+0x3a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    185e:	c8 01       	movw	r24, r16
    1860:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1864:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <xTaskResumeAll>
    1868:	71 cf       	rjmp	.-286    	; 0x174c <xQueueGenericReceive+0x3a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    186a:	c8 01       	movw	r24, r16
    186c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1870:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <xTaskResumeAll>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    187a:	f8 01       	movw	r30, r16
    187c:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    187e:	0f 90       	pop	r0
    1880:	0f be       	out	0x3f, r0	; 63
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1882:	81 11       	cpse	r24, r1
    1884:	63 cf       	rjmp	.-314    	; 0x174c <xQueueGenericReceive+0x3a>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	1f 91       	pop	r17
    1896:	0f 91       	pop	r16
    1898:	ff 90       	pop	r15
    189a:	ef 90       	pop	r14
    189c:	df 90       	pop	r13
    189e:	cf 90       	pop	r12
    18a0:	bf 90       	pop	r11
    18a2:	af 90       	pop	r10
    18a4:	9f 90       	pop	r9
    18a6:	8f 90       	pop	r8
    18a8:	08 95       	ret

000018aa <prvResetNextTaskUnblockTime>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
    18aa:	e0 91 8e 07 	lds	r30, 0x078E	; 0x80078e <pxDelayedTaskList>
    18ae:	f0 91 8f 07 	lds	r31, 0x078F	; 0x80078f <pxDelayedTaskList+0x1>
    18b2:	80 81       	ld	r24, Z
    18b4:	81 11       	cpse	r24, r1
    18b6:	07 c0       	rjmp	.+14     	; 0x18c6 <prvResetNextTaskUnblockTime+0x1c>
    18b8:	8f ef       	ldi	r24, 0xFF	; 255
    18ba:	9f ef       	ldi	r25, 0xFF	; 255
    18bc:	90 93 6f 07 	sts	0x076F, r25	; 0x80076f <xNextTaskUnblockTime+0x1>
    18c0:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <xNextTaskUnblockTime>
    18c4:	08 95       	ret
    18c6:	e0 91 8e 07 	lds	r30, 0x078E	; 0x80078e <pxDelayedTaskList>
    18ca:	f0 91 8f 07 	lds	r31, 0x078F	; 0x80078f <pxDelayedTaskList+0x1>
    18ce:	05 80       	ldd	r0, Z+5	; 0x05
    18d0:	f6 81       	ldd	r31, Z+6	; 0x06
    18d2:	e0 2d       	mov	r30, r0
    18d4:	06 80       	ldd	r0, Z+6	; 0x06
    18d6:	f7 81       	ldd	r31, Z+7	; 0x07
    18d8:	e0 2d       	mov	r30, r0
    18da:	82 81       	ldd	r24, Z+2	; 0x02
    18dc:	93 81       	ldd	r25, Z+3	; 0x03
    18de:	90 93 6f 07 	sts	0x076F, r25	; 0x80076f <xNextTaskUnblockTime+0x1>
    18e2:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <xNextTaskUnblockTime>
    18e6:	08 95       	ret

000018e8 <prvAddCurrentTaskToDelayedList>:
    18e8:	0f 93       	push	r16
    18ea:	1f 93       	push	r17
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	ec 01       	movw	r28, r24
    18f2:	00 91 76 07 	lds	r16, 0x0776	; 0x800776 <xTickCount>
    18f6:	10 91 77 07 	lds	r17, 0x0777	; 0x800777 <xTickCount+0x1>
    18fa:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    18fe:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    1902:	02 96       	adiw	r24, 0x02	; 2
    1904:	0e 94 db 05 	call	0xbb6	; 0xbb6 <uxListRemove>
    1908:	c0 0f       	add	r28, r16
    190a:	d1 1f       	adc	r29, r17
    190c:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    1910:	f0 91 c7 07 	lds	r31, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    1914:	d3 83       	std	Z+3, r29	; 0x03
    1916:	c2 83       	std	Z+2, r28	; 0x02
    1918:	c0 17       	cp	r28, r16
    191a:	d1 07       	cpc	r29, r17
    191c:	68 f4       	brcc	.+26     	; 0x1938 <prvAddCurrentTaskToDelayedList+0x50>
    191e:	60 91 c6 07 	lds	r22, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    1922:	70 91 c7 07 	lds	r23, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    1926:	80 91 8c 07 	lds	r24, 0x078C	; 0x80078c <pxOverflowDelayedTaskList>
    192a:	90 91 8d 07 	lds	r25, 0x078D	; 0x80078d <pxOverflowDelayedTaskList+0x1>
    192e:	6e 5f       	subi	r22, 0xFE	; 254
    1930:	7f 4f       	sbci	r23, 0xFF	; 255
    1932:	0e 94 aa 05 	call	0xb54	; 0xb54 <vListInsert>
    1936:	17 c0       	rjmp	.+46     	; 0x1966 <prvAddCurrentTaskToDelayedList+0x7e>
    1938:	60 91 c6 07 	lds	r22, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    193c:	70 91 c7 07 	lds	r23, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    1940:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <pxDelayedTaskList>
    1944:	90 91 8f 07 	lds	r25, 0x078F	; 0x80078f <pxDelayedTaskList+0x1>
    1948:	6e 5f       	subi	r22, 0xFE	; 254
    194a:	7f 4f       	sbci	r23, 0xFF	; 255
    194c:	0e 94 aa 05 	call	0xb54	; 0xb54 <vListInsert>
    1950:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <xNextTaskUnblockTime>
    1954:	90 91 6f 07 	lds	r25, 0x076F	; 0x80076f <xNextTaskUnblockTime+0x1>
    1958:	c8 17       	cp	r28, r24
    195a:	d9 07       	cpc	r29, r25
    195c:	20 f4       	brcc	.+8      	; 0x1966 <prvAddCurrentTaskToDelayedList+0x7e>
    195e:	d0 93 6f 07 	sts	0x076F, r29	; 0x80076f <xNextTaskUnblockTime+0x1>
    1962:	c0 93 6e 07 	sts	0x076E, r28	; 0x80076e <xNextTaskUnblockTime>
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	1f 91       	pop	r17
    196c:	0f 91       	pop	r16
    196e:	08 95       	ret

00001970 <xTaskCreate>:
    1970:	4f 92       	push	r4
    1972:	5f 92       	push	r5
    1974:	6f 92       	push	r6
    1976:	7f 92       	push	r7
    1978:	8f 92       	push	r8
    197a:	9f 92       	push	r9
    197c:	af 92       	push	r10
    197e:	bf 92       	push	r11
    1980:	cf 92       	push	r12
    1982:	df 92       	push	r13
    1984:	ef 92       	push	r14
    1986:	ff 92       	push	r15
    1988:	0f 93       	push	r16
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	4c 01       	movw	r8, r24
    1990:	eb 01       	movw	r28, r22
    1992:	6a 01       	movw	r12, r20
    1994:	29 01       	movw	r4, r18
    1996:	ca 01       	movw	r24, r20
    1998:	0e 94 5f 07 	call	0xebe	; 0xebe <pvPortMalloc>
    199c:	5c 01       	movw	r10, r24
    199e:	89 2b       	or	r24, r25
    19a0:	09 f4       	brne	.+2      	; 0x19a4 <xTaskCreate+0x34>
    19a2:	ec c0       	rjmp	.+472    	; 0x1b7c <xTaskCreate+0x20c>
    19a4:	8c e2       	ldi	r24, 0x2C	; 44
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	0e 94 5f 07 	call	0xebe	; 0xebe <pvPortMalloc>
    19ac:	3c 01       	movw	r6, r24
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	b9 f0       	breq	.+46     	; 0x19e0 <xTaskCreate+0x70>
    19b2:	fc 01       	movw	r30, r24
    19b4:	b0 8e       	std	Z+24, r11	; 0x18
    19b6:	a7 8a       	std	Z+23, r10	; 0x17
    19b8:	a6 01       	movw	r20, r12
    19ba:	65 ea       	ldi	r22, 0xA5	; 165
    19bc:	70 e0       	ldi	r23, 0x00	; 0
    19be:	c5 01       	movw	r24, r10
    19c0:	0e 94 13 13 	call	0x2626	; 0x2626 <memset>
    19c4:	f1 e0       	ldi	r31, 0x01	; 1
    19c6:	cf 1a       	sub	r12, r31
    19c8:	d1 08       	sbc	r13, r1
    19ca:	f3 01       	movw	r30, r6
    19cc:	87 89       	ldd	r24, Z+23	; 0x17
    19ce:	90 8d       	ldd	r25, Z+24	; 0x18
    19d0:	c8 0e       	add	r12, r24
    19d2:	d9 1e       	adc	r13, r25
    19d4:	88 81       	ld	r24, Y
    19d6:	81 8f       	std	Z+25, r24	; 0x19
    19d8:	88 81       	ld	r24, Y
    19da:	81 11       	cpse	r24, r1
    19dc:	05 c0       	rjmp	.+10     	; 0x19e8 <xTaskCreate+0x78>
    19de:	14 c0       	rjmp	.+40     	; 0x1a08 <xTaskCreate+0x98>
    19e0:	c5 01       	movw	r24, r10
    19e2:	0e 94 94 07 	call	0xf28	; 0xf28 <vPortFree>
    19e6:	ca c0       	rjmp	.+404    	; 0x1b7c <xTaskCreate+0x20c>
    19e8:	d3 01       	movw	r26, r6
    19ea:	5a 96       	adiw	r26, 0x1a	; 26
    19ec:	fe 01       	movw	r30, r28
    19ee:	31 96       	adiw	r30, 0x01	; 1
    19f0:	9e 01       	movw	r18, r28
    19f2:	28 5f       	subi	r18, 0xF8	; 248
    19f4:	3f 4f       	sbci	r19, 0xFF	; 255
    19f6:	ef 01       	movw	r28, r30
    19f8:	81 91       	ld	r24, Z+
    19fa:	8d 93       	st	X+, r24
    19fc:	88 81       	ld	r24, Y
    19fe:	88 23       	and	r24, r24
    1a00:	19 f0       	breq	.+6      	; 0x1a08 <xTaskCreate+0x98>
    1a02:	e2 17       	cp	r30, r18
    1a04:	f3 07       	cpc	r31, r19
    1a06:	b9 f7       	brne	.-18     	; 0x19f6 <xTaskCreate+0x86>
    1a08:	f3 01       	movw	r30, r6
    1a0a:	10 a2       	std	Z+32, r1	; 0x20
    1a0c:	04 30       	cpi	r16, 0x04	; 4
    1a0e:	08 f0       	brcs	.+2      	; 0x1a12 <xTaskCreate+0xa2>
    1a10:	03 e0       	ldi	r16, 0x03	; 3
    1a12:	f3 01       	movw	r30, r6
    1a14:	06 8b       	std	Z+22, r16	; 0x16
    1a16:	03 a3       	std	Z+35, r16	; 0x23
    1a18:	14 a2       	std	Z+36, r1	; 0x24
    1a1a:	e3 01       	movw	r28, r6
    1a1c:	22 96       	adiw	r28, 0x02	; 2
    1a1e:	ce 01       	movw	r24, r28
    1a20:	0e 94 85 05 	call	0xb0a	; 0xb0a <vListInitialiseItem>
    1a24:	c3 01       	movw	r24, r6
    1a26:	0c 96       	adiw	r24, 0x0c	; 12
    1a28:	0e 94 85 05 	call	0xb0a	; 0xb0a <vListInitialiseItem>
    1a2c:	f3 01       	movw	r30, r6
    1a2e:	71 86       	std	Z+9, r7	; 0x09
    1a30:	60 86       	std	Z+8, r6	; 0x08
    1a32:	84 e0       	ldi	r24, 0x04	; 4
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	80 1b       	sub	r24, r16
    1a38:	91 09       	sbc	r25, r1
    1a3a:	95 87       	std	Z+13, r25	; 0x0d
    1a3c:	84 87       	std	Z+12, r24	; 0x0c
    1a3e:	73 8a       	std	Z+19, r7	; 0x13
    1a40:	62 8a       	std	Z+18, r6	; 0x12
    1a42:	16 a2       	std	Z+38, r1	; 0x26
    1a44:	15 a2       	std	Z+37, r1	; 0x25
    1a46:	17 a2       	std	Z+39, r1	; 0x27
    1a48:	10 a6       	std	Z+40, r1	; 0x28
    1a4a:	11 a6       	std	Z+41, r1	; 0x29
    1a4c:	12 a6       	std	Z+42, r1	; 0x2a
    1a4e:	13 a6       	std	Z+43, r1	; 0x2b
    1a50:	a2 01       	movw	r20, r4
    1a52:	b4 01       	movw	r22, r8
    1a54:	c6 01       	movw	r24, r12
    1a56:	0e 94 01 06 	call	0xc02	; 0xc02 <pxPortInitialiseStack>
    1a5a:	f3 01       	movw	r30, r6
    1a5c:	91 83       	std	Z+1, r25	; 0x01
    1a5e:	80 83       	st	Z, r24
    1a60:	e1 14       	cp	r14, r1
    1a62:	f1 04       	cpc	r15, r1
    1a64:	19 f0       	breq	.+6      	; 0x1a6c <xTaskCreate+0xfc>
    1a66:	f7 01       	movw	r30, r14
    1a68:	71 82       	std	Z+1, r7	; 0x01
    1a6a:	60 82       	st	Z, r6
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	f8 94       	cli
    1a70:	0f 92       	push	r0
    1a72:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <uxCurrentNumberOfTasks>
    1a76:	8f 5f       	subi	r24, 0xFF	; 255
    1a78:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <uxCurrentNumberOfTasks>
    1a7c:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    1a80:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    1a84:	89 2b       	or	r24, r25
    1a86:	a9 f5       	brne	.+106    	; 0x1af2 <xTaskCreate+0x182>
    1a88:	70 92 c7 07 	sts	0x07C7, r7	; 0x8007c7 <pxCurrentTCB+0x1>
    1a8c:	60 92 c6 07 	sts	0x07C6, r6	; 0x8007c6 <pxCurrentTCB>
    1a90:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <uxCurrentNumberOfTasks>
    1a94:	81 30       	cpi	r24, 0x01	; 1
    1a96:	f1 f5       	brne	.+124    	; 0x1b14 <xTaskCreate+0x1a4>
    1a98:	82 ea       	ldi	r24, 0xA2	; 162
    1a9a:	97 e0       	ldi	r25, 0x07	; 7
    1a9c:	0e 94 77 05 	call	0xaee	; 0xaee <vListInitialise>
    1aa0:	8b ea       	ldi	r24, 0xAB	; 171
    1aa2:	97 e0       	ldi	r25, 0x07	; 7
    1aa4:	0e 94 77 05 	call	0xaee	; 0xaee <vListInitialise>
    1aa8:	84 eb       	ldi	r24, 0xB4	; 180
    1aaa:	97 e0       	ldi	r25, 0x07	; 7
    1aac:	0e 94 77 05 	call	0xaee	; 0xaee <vListInitialise>
    1ab0:	8d eb       	ldi	r24, 0xBD	; 189
    1ab2:	97 e0       	ldi	r25, 0x07	; 7
    1ab4:	0e 94 77 05 	call	0xaee	; 0xaee <vListInitialise>
    1ab8:	89 e9       	ldi	r24, 0x99	; 153
    1aba:	97 e0       	ldi	r25, 0x07	; 7
    1abc:	0e 94 77 05 	call	0xaee	; 0xaee <vListInitialise>
    1ac0:	80 e9       	ldi	r24, 0x90	; 144
    1ac2:	97 e0       	ldi	r25, 0x07	; 7
    1ac4:	0e 94 77 05 	call	0xaee	; 0xaee <vListInitialise>
    1ac8:	83 e8       	ldi	r24, 0x83	; 131
    1aca:	97 e0       	ldi	r25, 0x07	; 7
    1acc:	0e 94 77 05 	call	0xaee	; 0xaee <vListInitialise>
    1ad0:	8a e7       	ldi	r24, 0x7A	; 122
    1ad2:	97 e0       	ldi	r25, 0x07	; 7
    1ad4:	0e 94 77 05 	call	0xaee	; 0xaee <vListInitialise>
    1ad8:	89 e9       	ldi	r24, 0x99	; 153
    1ada:	97 e0       	ldi	r25, 0x07	; 7
    1adc:	90 93 8f 07 	sts	0x078F, r25	; 0x80078f <pxDelayedTaskList+0x1>
    1ae0:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <pxDelayedTaskList>
    1ae4:	80 e9       	ldi	r24, 0x90	; 144
    1ae6:	97 e0       	ldi	r25, 0x07	; 7
    1ae8:	90 93 8d 07 	sts	0x078D, r25	; 0x80078d <pxOverflowDelayedTaskList+0x1>
    1aec:	80 93 8c 07 	sts	0x078C, r24	; 0x80078c <pxOverflowDelayedTaskList>
    1af0:	11 c0       	rjmp	.+34     	; 0x1b14 <xTaskCreate+0x1a4>
    1af2:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <xSchedulerRunning>
    1af6:	81 11       	cpse	r24, r1
    1af8:	0d c0       	rjmp	.+26     	; 0x1b14 <xTaskCreate+0x1a4>
    1afa:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    1afe:	f0 91 c7 07 	lds	r31, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    1b02:	96 89       	ldd	r25, Z+22	; 0x16
    1b04:	f3 01       	movw	r30, r6
    1b06:	86 89       	ldd	r24, Z+22	; 0x16
    1b08:	89 17       	cp	r24, r25
    1b0a:	20 f0       	brcs	.+8      	; 0x1b14 <xTaskCreate+0x1a4>
    1b0c:	70 92 c7 07 	sts	0x07C7, r7	; 0x8007c7 <pxCurrentTCB+0x1>
    1b10:	60 92 c6 07 	sts	0x07C6, r6	; 0x8007c6 <pxCurrentTCB>
    1b14:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <uxTaskNumber>
    1b18:	8f 5f       	subi	r24, 0xFF	; 255
    1b1a:	80 93 70 07 	sts	0x0770, r24	; 0x800770 <uxTaskNumber>
    1b1e:	f3 01       	movw	r30, r6
    1b20:	81 a3       	std	Z+33, r24	; 0x21
    1b22:	86 89       	ldd	r24, Z+22	; 0x16
    1b24:	90 91 75 07 	lds	r25, 0x0775	; 0x800775 <uxTopReadyPriority>
    1b28:	98 17       	cp	r25, r24
    1b2a:	10 f4       	brcc	.+4      	; 0x1b30 <xTaskCreate+0x1c0>
    1b2c:	80 93 75 07 	sts	0x0775, r24	; 0x800775 <uxTopReadyPriority>
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	9c 01       	movw	r18, r24
    1b34:	22 0f       	add	r18, r18
    1b36:	33 1f       	adc	r19, r19
    1b38:	22 0f       	add	r18, r18
    1b3a:	33 1f       	adc	r19, r19
    1b3c:	22 0f       	add	r18, r18
    1b3e:	33 1f       	adc	r19, r19
    1b40:	82 0f       	add	r24, r18
    1b42:	93 1f       	adc	r25, r19
    1b44:	be 01       	movw	r22, r28
    1b46:	8e 55       	subi	r24, 0x5E	; 94
    1b48:	98 4f       	sbci	r25, 0xF8	; 248
    1b4a:	0e 94 89 05 	call	0xb12	; 0xb12 <vListInsertEnd>
    1b4e:	0f 90       	pop	r0
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <xSchedulerRunning>
    1b56:	88 23       	and	r24, r24
    1b58:	69 f0       	breq	.+26     	; 0x1b74 <xTaskCreate+0x204>
    1b5a:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    1b5e:	f0 91 c7 07 	lds	r31, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    1b62:	96 89       	ldd	r25, Z+22	; 0x16
    1b64:	f3 01       	movw	r30, r6
    1b66:	86 89       	ldd	r24, Z+22	; 0x16
    1b68:	98 17       	cp	r25, r24
    1b6a:	30 f4       	brcc	.+12     	; 0x1b78 <xTaskCreate+0x208>
    1b6c:	0e 94 a7 06 	call	0xd4e	; 0xd4e <vPortYield>
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	05 c0       	rjmp	.+10     	; 0x1b7e <xTaskCreate+0x20e>
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	03 c0       	rjmp	.+6      	; 0x1b7e <xTaskCreate+0x20e>
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	01 c0       	rjmp	.+2      	; 0x1b7e <xTaskCreate+0x20e>
    1b7c:	8f ef       	ldi	r24, 0xFF	; 255
    1b7e:	df 91       	pop	r29
    1b80:	cf 91       	pop	r28
    1b82:	0f 91       	pop	r16
    1b84:	ff 90       	pop	r15
    1b86:	ef 90       	pop	r14
    1b88:	df 90       	pop	r13
    1b8a:	cf 90       	pop	r12
    1b8c:	bf 90       	pop	r11
    1b8e:	af 90       	pop	r10
    1b90:	9f 90       	pop	r9
    1b92:	8f 90       	pop	r8
    1b94:	7f 90       	pop	r7
    1b96:	6f 90       	pop	r6
    1b98:	5f 90       	pop	r5
    1b9a:	4f 90       	pop	r4
    1b9c:	08 95       	ret

00001b9e <vTaskStartScheduler>:
    1b9e:	ef 92       	push	r14
    1ba0:	ff 92       	push	r15
    1ba2:	0f 93       	push	r16
    1ba4:	0f 2e       	mov	r0, r31
    1ba6:	fc e6       	ldi	r31, 0x6C	; 108
    1ba8:	ef 2e       	mov	r14, r31
    1baa:	f7 e0       	ldi	r31, 0x07	; 7
    1bac:	ff 2e       	mov	r15, r31
    1bae:	f0 2d       	mov	r31, r0
    1bb0:	00 e0       	ldi	r16, 0x00	; 0
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	45 e5       	ldi	r20, 0x55	; 85
    1bb8:	50 e0       	ldi	r21, 0x00	; 0
    1bba:	6c e5       	ldi	r22, 0x5C	; 92
    1bbc:	71 e0       	ldi	r23, 0x01	; 1
    1bbe:	8d e4       	ldi	r24, 0x4D	; 77
    1bc0:	9f e0       	ldi	r25, 0x0F	; 15
    1bc2:	0e 94 b8 0c 	call	0x1970	; 0x1970 <xTaskCreate>
    1bc6:	81 30       	cpi	r24, 0x01	; 1
    1bc8:	81 f4       	brne	.+32     	; 0x1bea <vTaskStartScheduler+0x4c>
    1bca:	f8 94       	cli
    1bcc:	8f ef       	ldi	r24, 0xFF	; 255
    1bce:	9f ef       	ldi	r25, 0xFF	; 255
    1bd0:	90 93 6f 07 	sts	0x076F, r25	; 0x80076f <xNextTaskUnblockTime+0x1>
    1bd4:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <xNextTaskUnblockTime>
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <xSchedulerRunning>
    1bde:	10 92 77 07 	sts	0x0777, r1	; 0x800777 <xTickCount+0x1>
    1be2:	10 92 76 07 	sts	0x0776, r1	; 0x800776 <xTickCount>
    1be6:	0e 94 6d 06 	call	0xcda	; 0xcda <xPortStartScheduler>
    1bea:	0f 91       	pop	r16
    1bec:	ff 90       	pop	r15
    1bee:	ef 90       	pop	r14
    1bf0:	08 95       	ret

00001bf2 <vTaskSuspendAll>:
    1bf2:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <uxSchedulerSuspended>
    1bf6:	8f 5f       	subi	r24, 0xFF	; 255
    1bf8:	80 93 6b 07 	sts	0x076B, r24	; 0x80076b <uxSchedulerSuspended>
    1bfc:	08 95       	ret

00001bfe <xTaskIncrementTick>:
    1bfe:	cf 92       	push	r12
    1c00:	df 92       	push	r13
    1c02:	ef 92       	push	r14
    1c04:	ff 92       	push	r15
    1c06:	0f 93       	push	r16
    1c08:	1f 93       	push	r17
    1c0a:	cf 93       	push	r28
    1c0c:	df 93       	push	r29
    1c0e:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <uxSchedulerSuspended>
    1c12:	81 11       	cpse	r24, r1
    1c14:	99 c0       	rjmp	.+306    	; 0x1d48 <xTaskIncrementTick+0x14a>
    1c16:	e0 90 76 07 	lds	r14, 0x0776	; 0x800776 <xTickCount>
    1c1a:	f0 90 77 07 	lds	r15, 0x0777	; 0x800777 <xTickCount+0x1>
    1c1e:	8f ef       	ldi	r24, 0xFF	; 255
    1c20:	e8 1a       	sub	r14, r24
    1c22:	f8 0a       	sbc	r15, r24
    1c24:	f0 92 77 07 	sts	0x0777, r15	; 0x800777 <xTickCount+0x1>
    1c28:	e0 92 76 07 	sts	0x0776, r14	; 0x800776 <xTickCount>
    1c2c:	e1 14       	cp	r14, r1
    1c2e:	f1 04       	cpc	r15, r1
    1c30:	b9 f4       	brne	.+46     	; 0x1c60 <xTaskIncrementTick+0x62>
    1c32:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <pxDelayedTaskList>
    1c36:	90 91 8f 07 	lds	r25, 0x078F	; 0x80078f <pxDelayedTaskList+0x1>
    1c3a:	20 91 8c 07 	lds	r18, 0x078C	; 0x80078c <pxOverflowDelayedTaskList>
    1c3e:	30 91 8d 07 	lds	r19, 0x078D	; 0x80078d <pxOverflowDelayedTaskList+0x1>
    1c42:	30 93 8f 07 	sts	0x078F, r19	; 0x80078f <pxDelayedTaskList+0x1>
    1c46:	20 93 8e 07 	sts	0x078E, r18	; 0x80078e <pxDelayedTaskList>
    1c4a:	90 93 8d 07 	sts	0x078D, r25	; 0x80078d <pxOverflowDelayedTaskList+0x1>
    1c4e:	80 93 8c 07 	sts	0x078C, r24	; 0x80078c <pxOverflowDelayedTaskList>
    1c52:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <xNumOfOverflows>
    1c56:	8f 5f       	subi	r24, 0xFF	; 255
    1c58:	80 93 71 07 	sts	0x0771, r24	; 0x800771 <xNumOfOverflows>
    1c5c:	0e 94 55 0c 	call	0x18aa	; 0x18aa <prvResetNextTaskUnblockTime>
    1c60:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <xNextTaskUnblockTime>
    1c64:	90 91 6f 07 	lds	r25, 0x076F	; 0x80076f <xNextTaskUnblockTime+0x1>
    1c68:	e8 16       	cp	r14, r24
    1c6a:	f9 06       	cpc	r15, r25
    1c6c:	10 f4       	brcc	.+4      	; 0x1c72 <xTaskIncrementTick+0x74>
    1c6e:	d1 2c       	mov	r13, r1
    1c70:	53 c0       	rjmp	.+166    	; 0x1d18 <xTaskIncrementTick+0x11a>
    1c72:	d1 2c       	mov	r13, r1
    1c74:	cc 24       	eor	r12, r12
    1c76:	c3 94       	inc	r12
    1c78:	e0 91 8e 07 	lds	r30, 0x078E	; 0x80078e <pxDelayedTaskList>
    1c7c:	f0 91 8f 07 	lds	r31, 0x078F	; 0x80078f <pxDelayedTaskList+0x1>
    1c80:	90 81       	ld	r25, Z
    1c82:	91 11       	cpse	r25, r1
    1c84:	07 c0       	rjmp	.+14     	; 0x1c94 <xTaskIncrementTick+0x96>
    1c86:	8f ef       	ldi	r24, 0xFF	; 255
    1c88:	9f ef       	ldi	r25, 0xFF	; 255
    1c8a:	90 93 6f 07 	sts	0x076F, r25	; 0x80076f <xNextTaskUnblockTime+0x1>
    1c8e:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <xNextTaskUnblockTime>
    1c92:	42 c0       	rjmp	.+132    	; 0x1d18 <xTaskIncrementTick+0x11a>
    1c94:	e0 91 8e 07 	lds	r30, 0x078E	; 0x80078e <pxDelayedTaskList>
    1c98:	f0 91 8f 07 	lds	r31, 0x078F	; 0x80078f <pxDelayedTaskList+0x1>
    1c9c:	05 80       	ldd	r0, Z+5	; 0x05
    1c9e:	f6 81       	ldd	r31, Z+6	; 0x06
    1ca0:	e0 2d       	mov	r30, r0
    1ca2:	c6 81       	ldd	r28, Z+6	; 0x06
    1ca4:	d7 81       	ldd	r29, Z+7	; 0x07
    1ca6:	2a 81       	ldd	r18, Y+2	; 0x02
    1ca8:	3b 81       	ldd	r19, Y+3	; 0x03
    1caa:	e2 16       	cp	r14, r18
    1cac:	f3 06       	cpc	r15, r19
    1cae:	28 f4       	brcc	.+10     	; 0x1cba <xTaskIncrementTick+0xbc>
    1cb0:	30 93 6f 07 	sts	0x076F, r19	; 0x80076f <xNextTaskUnblockTime+0x1>
    1cb4:	20 93 6e 07 	sts	0x076E, r18	; 0x80076e <xNextTaskUnblockTime>
    1cb8:	2f c0       	rjmp	.+94     	; 0x1d18 <xTaskIncrementTick+0x11a>
    1cba:	8e 01       	movw	r16, r28
    1cbc:	0e 5f       	subi	r16, 0xFE	; 254
    1cbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc0:	c8 01       	movw	r24, r16
    1cc2:	0e 94 db 05 	call	0xbb6	; 0xbb6 <uxListRemove>
    1cc6:	8c 89       	ldd	r24, Y+20	; 0x14
    1cc8:	9d 89       	ldd	r25, Y+21	; 0x15
    1cca:	89 2b       	or	r24, r25
    1ccc:	21 f0       	breq	.+8      	; 0x1cd6 <xTaskIncrementTick+0xd8>
    1cce:	ce 01       	movw	r24, r28
    1cd0:	0c 96       	adiw	r24, 0x0c	; 12
    1cd2:	0e 94 db 05 	call	0xbb6	; 0xbb6 <uxListRemove>
    1cd6:	2e 89       	ldd	r18, Y+22	; 0x16
    1cd8:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <uxTopReadyPriority>
    1cdc:	82 17       	cp	r24, r18
    1cde:	10 f4       	brcc	.+4      	; 0x1ce4 <xTaskIncrementTick+0xe6>
    1ce0:	20 93 75 07 	sts	0x0775, r18	; 0x800775 <uxTopReadyPriority>
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	c9 01       	movw	r24, r18
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	88 0f       	add	r24, r24
    1cee:	99 1f       	adc	r25, r25
    1cf0:	88 0f       	add	r24, r24
    1cf2:	99 1f       	adc	r25, r25
    1cf4:	82 0f       	add	r24, r18
    1cf6:	93 1f       	adc	r25, r19
    1cf8:	b8 01       	movw	r22, r16
    1cfa:	8e 55       	subi	r24, 0x5E	; 94
    1cfc:	98 4f       	sbci	r25, 0xF8	; 248
    1cfe:	0e 94 89 05 	call	0xb12	; 0xb12 <vListInsertEnd>
    1d02:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    1d06:	f0 91 c7 07 	lds	r31, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    1d0a:	9e 89       	ldd	r25, Y+22	; 0x16
    1d0c:	86 89       	ldd	r24, Z+22	; 0x16
    1d0e:	98 17       	cp	r25, r24
    1d10:	08 f4       	brcc	.+2      	; 0x1d14 <xTaskIncrementTick+0x116>
    1d12:	b2 cf       	rjmp	.-156    	; 0x1c78 <xTaskIncrementTick+0x7a>
    1d14:	dc 2c       	mov	r13, r12
    1d16:	b0 cf       	rjmp	.-160    	; 0x1c78 <xTaskIncrementTick+0x7a>
    1d18:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    1d1c:	f0 91 c7 07 	lds	r31, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    1d20:	86 89       	ldd	r24, Z+22	; 0x16
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	fc 01       	movw	r30, r24
    1d26:	ee 0f       	add	r30, r30
    1d28:	ff 1f       	adc	r31, r31
    1d2a:	ee 0f       	add	r30, r30
    1d2c:	ff 1f       	adc	r31, r31
    1d2e:	ee 0f       	add	r30, r30
    1d30:	ff 1f       	adc	r31, r31
    1d32:	8e 0f       	add	r24, r30
    1d34:	9f 1f       	adc	r25, r31
    1d36:	fc 01       	movw	r30, r24
    1d38:	ee 55       	subi	r30, 0x5E	; 94
    1d3a:	f8 4f       	sbci	r31, 0xF8	; 248
    1d3c:	80 81       	ld	r24, Z
    1d3e:	82 30       	cpi	r24, 0x02	; 2
    1d40:	48 f0       	brcs	.+18     	; 0x1d54 <xTaskIncrementTick+0x156>
    1d42:	dd 24       	eor	r13, r13
    1d44:	d3 94       	inc	r13
    1d46:	06 c0       	rjmp	.+12     	; 0x1d54 <xTaskIncrementTick+0x156>
    1d48:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <uxPendedTicks>
    1d4c:	8f 5f       	subi	r24, 0xFF	; 255
    1d4e:	80 93 73 07 	sts	0x0773, r24	; 0x800773 <uxPendedTicks>
    1d52:	d1 2c       	mov	r13, r1
    1d54:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <xYieldPending>
    1d58:	88 23       	and	r24, r24
    1d5a:	11 f0       	breq	.+4      	; 0x1d60 <xTaskIncrementTick+0x162>
    1d5c:	dd 24       	eor	r13, r13
    1d5e:	d3 94       	inc	r13
    1d60:	8d 2d       	mov	r24, r13
    1d62:	df 91       	pop	r29
    1d64:	cf 91       	pop	r28
    1d66:	1f 91       	pop	r17
    1d68:	0f 91       	pop	r16
    1d6a:	ff 90       	pop	r15
    1d6c:	ef 90       	pop	r14
    1d6e:	df 90       	pop	r13
    1d70:	cf 90       	pop	r12
    1d72:	08 95       	ret

00001d74 <xTaskResumeAll>:
    1d74:	df 92       	push	r13
    1d76:	ef 92       	push	r14
    1d78:	ff 92       	push	r15
    1d7a:	0f 93       	push	r16
    1d7c:	1f 93       	push	r17
    1d7e:	cf 93       	push	r28
    1d80:	df 93       	push	r29
    1d82:	0f b6       	in	r0, 0x3f	; 63
    1d84:	f8 94       	cli
    1d86:	0f 92       	push	r0
    1d88:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <uxSchedulerSuspended>
    1d8c:	81 50       	subi	r24, 0x01	; 1
    1d8e:	80 93 6b 07 	sts	0x076B, r24	; 0x80076b <uxSchedulerSuspended>
    1d92:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <uxSchedulerSuspended>
    1d96:	81 11       	cpse	r24, r1
    1d98:	5f c0       	rjmp	.+190    	; 0x1e58 <xTaskResumeAll+0xe4>
    1d9a:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <uxCurrentNumberOfTasks>
    1d9e:	81 11       	cpse	r24, r1
    1da0:	33 c0       	rjmp	.+102    	; 0x1e08 <xTaskResumeAll+0x94>
    1da2:	5d c0       	rjmp	.+186    	; 0x1e5e <xTaskResumeAll+0xea>
    1da4:	d7 01       	movw	r26, r14
    1da6:	15 96       	adiw	r26, 0x05	; 5
    1da8:	ed 91       	ld	r30, X+
    1daa:	fc 91       	ld	r31, X
    1dac:	16 97       	sbiw	r26, 0x06	; 6
    1dae:	c6 81       	ldd	r28, Z+6	; 0x06
    1db0:	d7 81       	ldd	r29, Z+7	; 0x07
    1db2:	ce 01       	movw	r24, r28
    1db4:	0c 96       	adiw	r24, 0x0c	; 12
    1db6:	0e 94 db 05 	call	0xbb6	; 0xbb6 <uxListRemove>
    1dba:	8e 01       	movw	r16, r28
    1dbc:	0e 5f       	subi	r16, 0xFE	; 254
    1dbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc0:	c8 01       	movw	r24, r16
    1dc2:	0e 94 db 05 	call	0xbb6	; 0xbb6 <uxListRemove>
    1dc6:	2e 89       	ldd	r18, Y+22	; 0x16
    1dc8:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <uxTopReadyPriority>
    1dcc:	82 17       	cp	r24, r18
    1dce:	10 f4       	brcc	.+4      	; 0x1dd4 <xTaskResumeAll+0x60>
    1dd0:	20 93 75 07 	sts	0x0775, r18	; 0x800775 <uxTopReadyPriority>
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	c9 01       	movw	r24, r18
    1dd8:	88 0f       	add	r24, r24
    1dda:	99 1f       	adc	r25, r25
    1ddc:	88 0f       	add	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	82 0f       	add	r24, r18
    1de6:	93 1f       	adc	r25, r19
    1de8:	b8 01       	movw	r22, r16
    1dea:	8e 55       	subi	r24, 0x5E	; 94
    1dec:	98 4f       	sbci	r25, 0xF8	; 248
    1dee:	0e 94 89 05 	call	0xb12	; 0xb12 <vListInsertEnd>
    1df2:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    1df6:	f0 91 c7 07 	lds	r31, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    1dfa:	9e 89       	ldd	r25, Y+22	; 0x16
    1dfc:	86 89       	ldd	r24, Z+22	; 0x16
    1dfe:	98 17       	cp	r25, r24
    1e00:	68 f0       	brcs	.+26     	; 0x1e1c <xTaskResumeAll+0xa8>
    1e02:	d0 92 72 07 	sts	0x0772, r13	; 0x800772 <xYieldPending>
    1e06:	0a c0       	rjmp	.+20     	; 0x1e1c <xTaskResumeAll+0xa8>
    1e08:	c0 e0       	ldi	r28, 0x00	; 0
    1e0a:	d0 e0       	ldi	r29, 0x00	; 0
    1e0c:	0f 2e       	mov	r0, r31
    1e0e:	f3 e8       	ldi	r31, 0x83	; 131
    1e10:	ef 2e       	mov	r14, r31
    1e12:	f7 e0       	ldi	r31, 0x07	; 7
    1e14:	ff 2e       	mov	r15, r31
    1e16:	f0 2d       	mov	r31, r0
    1e18:	dd 24       	eor	r13, r13
    1e1a:	d3 94       	inc	r13
    1e1c:	f7 01       	movw	r30, r14
    1e1e:	80 81       	ld	r24, Z
    1e20:	81 11       	cpse	r24, r1
    1e22:	c0 cf       	rjmp	.-128    	; 0x1da4 <xTaskResumeAll+0x30>
    1e24:	cd 2b       	or	r28, r29
    1e26:	11 f0       	breq	.+4      	; 0x1e2c <xTaskResumeAll+0xb8>
    1e28:	0e 94 55 0c 	call	0x18aa	; 0x18aa <prvResetNextTaskUnblockTime>
    1e2c:	c0 91 73 07 	lds	r28, 0x0773	; 0x800773 <uxPendedTicks>
    1e30:	cc 23       	and	r28, r28
    1e32:	51 f0       	breq	.+20     	; 0x1e48 <xTaskResumeAll+0xd4>
    1e34:	d1 e0       	ldi	r29, 0x01	; 1
    1e36:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <xTaskIncrementTick>
    1e3a:	81 11       	cpse	r24, r1
    1e3c:	d0 93 72 07 	sts	0x0772, r29	; 0x800772 <xYieldPending>
    1e40:	c1 50       	subi	r28, 0x01	; 1
    1e42:	c9 f7       	brne	.-14     	; 0x1e36 <xTaskResumeAll+0xc2>
    1e44:	10 92 73 07 	sts	0x0773, r1	; 0x800773 <uxPendedTicks>
    1e48:	80 91 72 07 	lds	r24, 0x0772	; 0x800772 <xYieldPending>
    1e4c:	88 23       	and	r24, r24
    1e4e:	31 f0       	breq	.+12     	; 0x1e5c <xTaskResumeAll+0xe8>
    1e50:	0e 94 a7 06 	call	0xd4e	; 0xd4e <vPortYield>
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	03 c0       	rjmp	.+6      	; 0x1e5e <xTaskResumeAll+0xea>
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	01 c0       	rjmp	.+2      	; 0x1e5e <xTaskResumeAll+0xea>
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	0f 90       	pop	r0
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	df 91       	pop	r29
    1e64:	cf 91       	pop	r28
    1e66:	1f 91       	pop	r17
    1e68:	0f 91       	pop	r16
    1e6a:	ff 90       	pop	r15
    1e6c:	ef 90       	pop	r14
    1e6e:	df 90       	pop	r13
    1e70:	08 95       	ret

00001e72 <vTaskDelay>:
    1e72:	cf 93       	push	r28
    1e74:	df 93       	push	r29
    1e76:	ec 01       	movw	r28, r24
    1e78:	89 2b       	or	r24, r25
    1e7a:	51 f0       	breq	.+20     	; 0x1e90 <vTaskDelay+0x1e>
    1e7c:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <vTaskSuspendAll>
    1e80:	60 e0       	ldi	r22, 0x00	; 0
    1e82:	ce 01       	movw	r24, r28
    1e84:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <prvAddCurrentTaskToDelayedList>
    1e88:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <xTaskResumeAll>
    1e8c:	81 11       	cpse	r24, r1
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <vTaskDelay+0x22>
    1e90:	0e 94 a7 06 	call	0xd4e	; 0xd4e <vPortYield>
    1e94:	df 91       	pop	r29
    1e96:	cf 91       	pop	r28
    1e98:	08 95       	ret

00001e9a <prvIdleTask>:
    1e9a:	0a e7       	ldi	r16, 0x7A	; 122
    1e9c:	17 e0       	ldi	r17, 0x07	; 7
    1e9e:	0f 2e       	mov	r0, r31
    1ea0:	f2 ea       	ldi	r31, 0xA2	; 162
    1ea2:	ef 2e       	mov	r14, r31
    1ea4:	f7 e0       	ldi	r31, 0x07	; 7
    1ea6:	ff 2e       	mov	r15, r31
    1ea8:	f0 2d       	mov	r31, r0
    1eaa:	29 c0       	rjmp	.+82     	; 0x1efe <prvIdleTask+0x64>
    1eac:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <vTaskSuspendAll>
    1eb0:	d8 01       	movw	r26, r16
    1eb2:	cc 91       	ld	r28, X
    1eb4:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <xTaskResumeAll>
    1eb8:	cc 23       	and	r28, r28
    1eba:	09 f1       	breq	.+66     	; 0x1efe <prvIdleTask+0x64>
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	0f 92       	push	r0
    1ec2:	d8 01       	movw	r26, r16
    1ec4:	15 96       	adiw	r26, 0x05	; 5
    1ec6:	ed 91       	ld	r30, X+
    1ec8:	fc 91       	ld	r31, X
    1eca:	16 97       	sbiw	r26, 0x06	; 6
    1ecc:	c6 81       	ldd	r28, Z+6	; 0x06
    1ece:	d7 81       	ldd	r29, Z+7	; 0x07
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	02 96       	adiw	r24, 0x02	; 2
    1ed4:	0e 94 db 05 	call	0xbb6	; 0xbb6 <uxListRemove>
    1ed8:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <uxCurrentNumberOfTasks>
    1edc:	81 50       	subi	r24, 0x01	; 1
    1ede:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <uxCurrentNumberOfTasks>
    1ee2:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <uxDeletedTasksWaitingCleanUp>
    1ee6:	81 50       	subi	r24, 0x01	; 1
    1ee8:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <uxDeletedTasksWaitingCleanUp>
    1eec:	0f 90       	pop	r0
    1eee:	0f be       	out	0x3f, r0	; 63
    1ef0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ef2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ef4:	0e 94 94 07 	call	0xf28	; 0xf28 <vPortFree>
    1ef8:	ce 01       	movw	r24, r28
    1efa:	0e 94 94 07 	call	0xf28	; 0xf28 <vPortFree>
    1efe:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <uxDeletedTasksWaitingCleanUp>
    1f02:	81 11       	cpse	r24, r1
    1f04:	d3 cf       	rjmp	.-90     	; 0x1eac <prvIdleTask+0x12>
    1f06:	f7 01       	movw	r30, r14
    1f08:	80 81       	ld	r24, Z
    1f0a:	82 30       	cpi	r24, 0x02	; 2
    1f0c:	10 f0       	brcs	.+4      	; 0x1f12 <prvIdleTask+0x78>
    1f0e:	0e 94 a7 06 	call	0xd4e	; 0xd4e <vPortYield>
    1f12:	0e 94 56 04 	call	0x8ac	; 0x8ac <vApplicationIdleHook>
    1f16:	f3 cf       	rjmp	.-26     	; 0x1efe <prvIdleTask+0x64>

00001f18 <vTaskSetApplicationTaskTag>:
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	21 f4       	brne	.+8      	; 0x1f24 <vTaskSetApplicationTaskTag+0xc>
    1f1c:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    1f20:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    1f24:	0f b6       	in	r0, 0x3f	; 63
    1f26:	f8 94       	cli
    1f28:	0f 92       	push	r0
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	76 a3       	std	Z+38, r23	; 0x26
    1f2e:	65 a3       	std	Z+37, r22	; 0x25
    1f30:	0f 90       	pop	r0
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	08 95       	ret

00001f36 <vTaskSwitchContext>:
    1f36:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <uxSchedulerSuspended>
    1f3a:	88 23       	and	r24, r24
    1f3c:	21 f0       	breq	.+8      	; 0x1f46 <vTaskSwitchContext+0x10>
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	80 93 72 07 	sts	0x0772, r24	; 0x800772 <xYieldPending>
    1f44:	08 95       	ret
    1f46:	10 92 72 07 	sts	0x0772, r1	; 0x800772 <xYieldPending>
    1f4a:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    1f4e:	f0 91 c7 07 	lds	r31, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    1f52:	85 a1       	ldd	r24, Z+37	; 0x25
    1f54:	0e 94 30 05 	call	0xa60	; 0xa60 <switch_out>
    1f58:	20 91 75 07 	lds	r18, 0x0775	; 0x800775 <uxTopReadyPriority>
    1f5c:	82 2f       	mov	r24, r18
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	fc 01       	movw	r30, r24
    1f62:	ee 0f       	add	r30, r30
    1f64:	ff 1f       	adc	r31, r31
    1f66:	ee 0f       	add	r30, r30
    1f68:	ff 1f       	adc	r31, r31
    1f6a:	ee 0f       	add	r30, r30
    1f6c:	ff 1f       	adc	r31, r31
    1f6e:	e8 0f       	add	r30, r24
    1f70:	f9 1f       	adc	r31, r25
    1f72:	ee 55       	subi	r30, 0x5E	; 94
    1f74:	f8 4f       	sbci	r31, 0xF8	; 248
    1f76:	30 81       	ld	r19, Z
    1f78:	31 11       	cpse	r19, r1
    1f7a:	11 c0       	rjmp	.+34     	; 0x1f9e <vTaskSwitchContext+0x68>
    1f7c:	21 50       	subi	r18, 0x01	; 1
    1f7e:	82 2f       	mov	r24, r18
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	fc 01       	movw	r30, r24
    1f84:	ee 0f       	add	r30, r30
    1f86:	ff 1f       	adc	r31, r31
    1f88:	ee 0f       	add	r30, r30
    1f8a:	ff 1f       	adc	r31, r31
    1f8c:	ee 0f       	add	r30, r30
    1f8e:	ff 1f       	adc	r31, r31
    1f90:	e8 0f       	add	r30, r24
    1f92:	f9 1f       	adc	r31, r25
    1f94:	ee 55       	subi	r30, 0x5E	; 94
    1f96:	f8 4f       	sbci	r31, 0xF8	; 248
    1f98:	30 81       	ld	r19, Z
    1f9a:	33 23       	and	r19, r19
    1f9c:	79 f3       	breq	.-34     	; 0x1f7c <vTaskSwitchContext+0x46>
    1f9e:	ac 01       	movw	r20, r24
    1fa0:	44 0f       	add	r20, r20
    1fa2:	55 1f       	adc	r21, r21
    1fa4:	44 0f       	add	r20, r20
    1fa6:	55 1f       	adc	r21, r21
    1fa8:	44 0f       	add	r20, r20
    1faa:	55 1f       	adc	r21, r21
    1fac:	48 0f       	add	r20, r24
    1fae:	59 1f       	adc	r21, r25
    1fb0:	da 01       	movw	r26, r20
    1fb2:	ae 55       	subi	r26, 0x5E	; 94
    1fb4:	b8 4f       	sbci	r27, 0xF8	; 248
    1fb6:	11 96       	adiw	r26, 0x01	; 1
    1fb8:	ed 91       	ld	r30, X+
    1fba:	fc 91       	ld	r31, X
    1fbc:	12 97       	sbiw	r26, 0x02	; 2
    1fbe:	02 80       	ldd	r0, Z+2	; 0x02
    1fc0:	f3 81       	ldd	r31, Z+3	; 0x03
    1fc2:	e0 2d       	mov	r30, r0
    1fc4:	12 96       	adiw	r26, 0x02	; 2
    1fc6:	fc 93       	st	X, r31
    1fc8:	ee 93       	st	-X, r30
    1fca:	11 97       	sbiw	r26, 0x01	; 1
    1fcc:	4b 55       	subi	r20, 0x5B	; 91
    1fce:	58 4f       	sbci	r21, 0xF8	; 248
    1fd0:	e4 17       	cp	r30, r20
    1fd2:	f5 07       	cpc	r31, r21
    1fd4:	29 f4       	brne	.+10     	; 0x1fe0 <vTaskSwitchContext+0xaa>
    1fd6:	42 81       	ldd	r20, Z+2	; 0x02
    1fd8:	53 81       	ldd	r21, Z+3	; 0x03
    1fda:	fd 01       	movw	r30, r26
    1fdc:	52 83       	std	Z+2, r21	; 0x02
    1fde:	41 83       	std	Z+1, r20	; 0x01
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	ee 0f       	add	r30, r30
    1fe4:	ff 1f       	adc	r31, r31
    1fe6:	ee 0f       	add	r30, r30
    1fe8:	ff 1f       	adc	r31, r31
    1fea:	ee 0f       	add	r30, r30
    1fec:	ff 1f       	adc	r31, r31
    1fee:	8e 0f       	add	r24, r30
    1ff0:	9f 1f       	adc	r25, r31
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	ee 55       	subi	r30, 0x5E	; 94
    1ff6:	f8 4f       	sbci	r31, 0xF8	; 248
    1ff8:	01 80       	ldd	r0, Z+1	; 0x01
    1ffa:	f2 81       	ldd	r31, Z+2	; 0x02
    1ffc:	e0 2d       	mov	r30, r0
    1ffe:	86 81       	ldd	r24, Z+6	; 0x06
    2000:	97 81       	ldd	r25, Z+7	; 0x07
    2002:	90 93 c7 07 	sts	0x07C7, r25	; 0x8007c7 <pxCurrentTCB+0x1>
    2006:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <pxCurrentTCB>
    200a:	20 93 75 07 	sts	0x0775, r18	; 0x800775 <uxTopReadyPriority>
    200e:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    2012:	f0 91 c7 07 	lds	r31, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    2016:	85 a1       	ldd	r24, Z+37	; 0x25
    2018:	0e 94 25 05 	call	0xa4a	; 0xa4a <switch_in>
    201c:	08 95       	ret

0000201e <vTaskPlaceOnEventList>:
    201e:	cf 93       	push	r28
    2020:	df 93       	push	r29
    2022:	eb 01       	movw	r28, r22
    2024:	20 91 c6 07 	lds	r18, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    2028:	30 91 c7 07 	lds	r19, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    202c:	b9 01       	movw	r22, r18
    202e:	64 5f       	subi	r22, 0xF4	; 244
    2030:	7f 4f       	sbci	r23, 0xFF	; 255
    2032:	0e 94 aa 05 	call	0xb54	; 0xb54 <vListInsert>
    2036:	61 e0       	ldi	r22, 0x01	; 1
    2038:	ce 01       	movw	r24, r28
    203a:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <prvAddCurrentTaskToDelayedList>
    203e:	df 91       	pop	r29
    2040:	cf 91       	pop	r28
    2042:	08 95       	ret

00002044 <xTaskRemoveFromEventList>:
    2044:	0f 93       	push	r16
    2046:	1f 93       	push	r17
    2048:	cf 93       	push	r28
    204a:	df 93       	push	r29
    204c:	dc 01       	movw	r26, r24
    204e:	15 96       	adiw	r26, 0x05	; 5
    2050:	ed 91       	ld	r30, X+
    2052:	fc 91       	ld	r31, X
    2054:	16 97       	sbiw	r26, 0x06	; 6
    2056:	c6 81       	ldd	r28, Z+6	; 0x06
    2058:	d7 81       	ldd	r29, Z+7	; 0x07
    205a:	8e 01       	movw	r16, r28
    205c:	04 5f       	subi	r16, 0xF4	; 244
    205e:	1f 4f       	sbci	r17, 0xFF	; 255
    2060:	c8 01       	movw	r24, r16
    2062:	0e 94 db 05 	call	0xbb6	; 0xbb6 <uxListRemove>
    2066:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <uxSchedulerSuspended>
    206a:	81 11       	cpse	r24, r1
    206c:	1c c0       	rjmp	.+56     	; 0x20a6 <xTaskRemoveFromEventList+0x62>
    206e:	0a 50       	subi	r16, 0x0A	; 10
    2070:	11 09       	sbc	r17, r1
    2072:	c8 01       	movw	r24, r16
    2074:	0e 94 db 05 	call	0xbb6	; 0xbb6 <uxListRemove>
    2078:	2e 89       	ldd	r18, Y+22	; 0x16
    207a:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <uxTopReadyPriority>
    207e:	82 17       	cp	r24, r18
    2080:	10 f4       	brcc	.+4      	; 0x2086 <xTaskRemoveFromEventList+0x42>
    2082:	20 93 75 07 	sts	0x0775, r18	; 0x800775 <uxTopReadyPriority>
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	c9 01       	movw	r24, r18
    208a:	88 0f       	add	r24, r24
    208c:	99 1f       	adc	r25, r25
    208e:	88 0f       	add	r24, r24
    2090:	99 1f       	adc	r25, r25
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	82 0f       	add	r24, r18
    2098:	93 1f       	adc	r25, r19
    209a:	b8 01       	movw	r22, r16
    209c:	8e 55       	subi	r24, 0x5E	; 94
    209e:	98 4f       	sbci	r25, 0xF8	; 248
    20a0:	0e 94 89 05 	call	0xb12	; 0xb12 <vListInsertEnd>
    20a4:	05 c0       	rjmp	.+10     	; 0x20b0 <xTaskRemoveFromEventList+0x6c>
    20a6:	b8 01       	movw	r22, r16
    20a8:	83 e8       	ldi	r24, 0x83	; 131
    20aa:	97 e0       	ldi	r25, 0x07	; 7
    20ac:	0e 94 89 05 	call	0xb12	; 0xb12 <vListInsertEnd>
    20b0:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    20b4:	f0 91 c7 07 	lds	r31, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    20b8:	9e 89       	ldd	r25, Y+22	; 0x16
    20ba:	86 89       	ldd	r24, Z+22	; 0x16
    20bc:	89 17       	cp	r24, r25
    20be:	20 f4       	brcc	.+8      	; 0x20c8 <xTaskRemoveFromEventList+0x84>
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	80 93 72 07 	sts	0x0772, r24	; 0x800772 <xYieldPending>
    20c6:	01 c0       	rjmp	.+2      	; 0x20ca <xTaskRemoveFromEventList+0x86>
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	df 91       	pop	r29
    20cc:	cf 91       	pop	r28
    20ce:	1f 91       	pop	r17
    20d0:	0f 91       	pop	r16
    20d2:	08 95       	ret

000020d4 <vTaskSetTimeOutState>:
    20d4:	20 91 71 07 	lds	r18, 0x0771	; 0x800771 <xNumOfOverflows>
    20d8:	fc 01       	movw	r30, r24
    20da:	20 83       	st	Z, r18
    20dc:	20 91 76 07 	lds	r18, 0x0776	; 0x800776 <xTickCount>
    20e0:	30 91 77 07 	lds	r19, 0x0777	; 0x800777 <xTickCount+0x1>
    20e4:	32 83       	std	Z+2, r19	; 0x02
    20e6:	21 83       	std	Z+1, r18	; 0x01
    20e8:	08 95       	ret

000020ea <xTaskCheckForTimeOut>:
    20ea:	cf 93       	push	r28
    20ec:	df 93       	push	r29
    20ee:	fc 01       	movw	r30, r24
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	f8 94       	cli
    20f4:	0f 92       	push	r0
    20f6:	20 91 76 07 	lds	r18, 0x0776	; 0x800776 <xTickCount>
    20fa:	30 91 77 07 	lds	r19, 0x0777	; 0x800777 <xTickCount+0x1>
    20fe:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <xNumOfOverflows>
    2102:	90 81       	ld	r25, Z
    2104:	98 17       	cp	r25, r24
    2106:	29 f0       	breq	.+10     	; 0x2112 <xTaskCheckForTimeOut+0x28>
    2108:	81 81       	ldd	r24, Z+1	; 0x01
    210a:	92 81       	ldd	r25, Z+2	; 0x02
    210c:	28 17       	cp	r18, r24
    210e:	39 07       	cpc	r19, r25
    2110:	b0 f4       	brcc	.+44     	; 0x213e <xTaskCheckForTimeOut+0x54>
    2112:	a1 81       	ldd	r26, Z+1	; 0x01
    2114:	b2 81       	ldd	r27, Z+2	; 0x02
    2116:	eb 01       	movw	r28, r22
    2118:	48 81       	ld	r20, Y
    211a:	59 81       	ldd	r21, Y+1	; 0x01
    211c:	c9 01       	movw	r24, r18
    211e:	8a 1b       	sub	r24, r26
    2120:	9b 0b       	sbc	r25, r27
    2122:	84 17       	cp	r24, r20
    2124:	95 07       	cpc	r25, r21
    2126:	68 f4       	brcc	.+26     	; 0x2142 <xTaskCheckForTimeOut+0x58>
    2128:	cf 01       	movw	r24, r30
    212a:	a2 1b       	sub	r26, r18
    212c:	b3 0b       	sbc	r27, r19
    212e:	4a 0f       	add	r20, r26
    2130:	5b 1f       	adc	r21, r27
    2132:	59 83       	std	Y+1, r21	; 0x01
    2134:	48 83       	st	Y, r20
    2136:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <vTaskSetTimeOutState>
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	03 c0       	rjmp	.+6      	; 0x2144 <xTaskCheckForTimeOut+0x5a>
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	01 c0       	rjmp	.+2      	; 0x2144 <xTaskCheckForTimeOut+0x5a>
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	0f 90       	pop	r0
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	df 91       	pop	r29
    214a:	cf 91       	pop	r28
    214c:	08 95       	ret

0000214e <vTaskMissedYield>:
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	80 93 72 07 	sts	0x0772, r24	; 0x800772 <xYieldPending>
    2154:	08 95       	ret

00002156 <vTaskPriorityInherit>:
    2156:	0f 93       	push	r16
    2158:	1f 93       	push	r17
    215a:	cf 93       	push	r28
    215c:	df 93       	push	r29
    215e:	fc 01       	movw	r30, r24
    2160:	89 2b       	or	r24, r25
    2162:	09 f4       	brne	.+2      	; 0x2166 <vTaskPriorityInherit+0x10>
    2164:	55 c0       	rjmp	.+170    	; 0x2210 <vTaskPriorityInherit+0xba>
    2166:	26 89       	ldd	r18, Z+22	; 0x16
    2168:	a0 91 c6 07 	lds	r26, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    216c:	b0 91 c7 07 	lds	r27, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    2170:	56 96       	adiw	r26, 0x16	; 22
    2172:	8c 91       	ld	r24, X
    2174:	28 17       	cp	r18, r24
    2176:	08 f0       	brcs	.+2      	; 0x217a <vTaskPriorityInherit+0x24>
    2178:	4b c0       	rjmp	.+150    	; 0x2210 <vTaskPriorityInherit+0xba>
    217a:	84 85       	ldd	r24, Z+12	; 0x0c
    217c:	95 85       	ldd	r25, Z+13	; 0x0d
    217e:	99 23       	and	r25, r25
    2180:	64 f0       	brlt	.+24     	; 0x219a <vTaskPriorityInherit+0x44>
    2182:	a0 91 c6 07 	lds	r26, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    2186:	b0 91 c7 07 	lds	r27, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    218a:	56 96       	adiw	r26, 0x16	; 22
    218c:	3c 91       	ld	r19, X
    218e:	84 e0       	ldi	r24, 0x04	; 4
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	83 1b       	sub	r24, r19
    2194:	91 09       	sbc	r25, r1
    2196:	95 87       	std	Z+13, r25	; 0x0d
    2198:	84 87       	std	Z+12, r24	; 0x0c
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	c9 01       	movw	r24, r18
    219e:	88 0f       	add	r24, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	88 0f       	add	r24, r24
    21a4:	99 1f       	adc	r25, r25
    21a6:	88 0f       	add	r24, r24
    21a8:	99 1f       	adc	r25, r25
    21aa:	28 0f       	add	r18, r24
    21ac:	39 1f       	adc	r19, r25
    21ae:	2e 55       	subi	r18, 0x5E	; 94
    21b0:	38 4f       	sbci	r19, 0xF8	; 248
    21b2:	82 85       	ldd	r24, Z+10	; 0x0a
    21b4:	93 85       	ldd	r25, Z+11	; 0x0b
    21b6:	82 17       	cp	r24, r18
    21b8:	93 07       	cpc	r25, r19
    21ba:	19 f5       	brne	.+70     	; 0x2202 <vTaskPriorityInherit+0xac>
    21bc:	8f 01       	movw	r16, r30
    21be:	ef 01       	movw	r28, r30
    21c0:	22 96       	adiw	r28, 0x02	; 2
    21c2:	ce 01       	movw	r24, r28
    21c4:	0e 94 db 05 	call	0xbb6	; 0xbb6 <uxListRemove>
    21c8:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    21cc:	f0 91 c7 07 	lds	r31, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    21d0:	26 89       	ldd	r18, Z+22	; 0x16
    21d2:	f8 01       	movw	r30, r16
    21d4:	26 8b       	std	Z+22, r18	; 0x16
    21d6:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <uxTopReadyPriority>
    21da:	82 17       	cp	r24, r18
    21dc:	10 f4       	brcc	.+4      	; 0x21e2 <vTaskPriorityInherit+0x8c>
    21de:	20 93 75 07 	sts	0x0775, r18	; 0x800775 <uxTopReadyPriority>
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	c9 01       	movw	r24, r18
    21e6:	88 0f       	add	r24, r24
    21e8:	99 1f       	adc	r25, r25
    21ea:	88 0f       	add	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	82 0f       	add	r24, r18
    21f4:	93 1f       	adc	r25, r19
    21f6:	be 01       	movw	r22, r28
    21f8:	8e 55       	subi	r24, 0x5E	; 94
    21fa:	98 4f       	sbci	r25, 0xF8	; 248
    21fc:	0e 94 89 05 	call	0xb12	; 0xb12 <vListInsertEnd>
    2200:	07 c0       	rjmp	.+14     	; 0x2210 <vTaskPriorityInherit+0xba>
    2202:	a0 91 c6 07 	lds	r26, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    2206:	b0 91 c7 07 	lds	r27, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    220a:	56 96       	adiw	r26, 0x16	; 22
    220c:	8c 91       	ld	r24, X
    220e:	86 8b       	std	Z+22, r24	; 0x16
    2210:	df 91       	pop	r29
    2212:	cf 91       	pop	r28
    2214:	1f 91       	pop	r17
    2216:	0f 91       	pop	r16
    2218:	08 95       	ret

0000221a <xTaskPriorityDisinherit>:
    221a:	0f 93       	push	r16
    221c:	1f 93       	push	r17
    221e:	cf 93       	push	r28
    2220:	df 93       	push	r29
    2222:	fc 01       	movw	r30, r24
    2224:	89 2b       	or	r24, r25
    2226:	79 f1       	breq	.+94     	; 0x2286 <xTaskPriorityDisinherit+0x6c>
    2228:	84 a1       	ldd	r24, Z+36	; 0x24
    222a:	81 50       	subi	r24, 0x01	; 1
    222c:	84 a3       	std	Z+36, r24	; 0x24
    222e:	26 89       	ldd	r18, Z+22	; 0x16
    2230:	93 a1       	ldd	r25, Z+35	; 0x23
    2232:	29 17       	cp	r18, r25
    2234:	51 f1       	breq	.+84     	; 0x228a <xTaskPriorityDisinherit+0x70>
    2236:	81 11       	cpse	r24, r1
    2238:	2a c0       	rjmp	.+84     	; 0x228e <xTaskPriorityDisinherit+0x74>
    223a:	ef 01       	movw	r28, r30
    223c:	8f 01       	movw	r16, r30
    223e:	0e 5f       	subi	r16, 0xFE	; 254
    2240:	1f 4f       	sbci	r17, 0xFF	; 255
    2242:	c8 01       	movw	r24, r16
    2244:	0e 94 db 05 	call	0xbb6	; 0xbb6 <uxListRemove>
    2248:	2b a1       	ldd	r18, Y+35	; 0x23
    224a:	2e 8b       	std	Y+22, r18	; 0x16
    224c:	44 e0       	ldi	r20, 0x04	; 4
    224e:	50 e0       	ldi	r21, 0x00	; 0
    2250:	42 1b       	sub	r20, r18
    2252:	51 09       	sbc	r21, r1
    2254:	5d 87       	std	Y+13, r21	; 0x0d
    2256:	4c 87       	std	Y+12, r20	; 0x0c
    2258:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <uxTopReadyPriority>
    225c:	82 17       	cp	r24, r18
    225e:	10 f4       	brcc	.+4      	; 0x2264 <xTaskPriorityDisinherit+0x4a>
    2260:	20 93 75 07 	sts	0x0775, r18	; 0x800775 <uxTopReadyPriority>
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	c9 01       	movw	r24, r18
    2268:	88 0f       	add	r24, r24
    226a:	99 1f       	adc	r25, r25
    226c:	88 0f       	add	r24, r24
    226e:	99 1f       	adc	r25, r25
    2270:	88 0f       	add	r24, r24
    2272:	99 1f       	adc	r25, r25
    2274:	82 0f       	add	r24, r18
    2276:	93 1f       	adc	r25, r19
    2278:	b8 01       	movw	r22, r16
    227a:	8e 55       	subi	r24, 0x5E	; 94
    227c:	98 4f       	sbci	r25, 0xF8	; 248
    227e:	0e 94 89 05 	call	0xb12	; 0xb12 <vListInsertEnd>
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	05 c0       	rjmp	.+10     	; 0x2290 <xTaskPriorityDisinherit+0x76>
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	03 c0       	rjmp	.+6      	; 0x2290 <xTaskPriorityDisinherit+0x76>
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	01 c0       	rjmp	.+2      	; 0x2290 <xTaskPriorityDisinherit+0x76>
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	df 91       	pop	r29
    2292:	cf 91       	pop	r28
    2294:	1f 91       	pop	r17
    2296:	0f 91       	pop	r16
    2298:	08 95       	ret

0000229a <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    229a:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    229e:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    22a2:	89 2b       	or	r24, r25
    22a4:	39 f0       	breq	.+14     	; 0x22b4 <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    22a6:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    22aa:	f0 91 c7 07 	lds	r31, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
    22ae:	84 a1       	ldd	r24, Z+36	; 0x24
    22b0:	8f 5f       	subi	r24, 0xFF	; 255
    22b2:	84 a3       	std	Z+36, r24	; 0x24
		}

		return pxCurrentTCB;
    22b4:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <pxCurrentTCB>
    22b8:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <pxCurrentTCB+0x1>
	}
    22bc:	08 95       	ret

000022be <__udivmodsi4>:
    22be:	a1 e2       	ldi	r26, 0x21	; 33
    22c0:	1a 2e       	mov	r1, r26
    22c2:	aa 1b       	sub	r26, r26
    22c4:	bb 1b       	sub	r27, r27
    22c6:	fd 01       	movw	r30, r26
    22c8:	0d c0       	rjmp	.+26     	; 0x22e4 <__udivmodsi4_ep>

000022ca <__udivmodsi4_loop>:
    22ca:	aa 1f       	adc	r26, r26
    22cc:	bb 1f       	adc	r27, r27
    22ce:	ee 1f       	adc	r30, r30
    22d0:	ff 1f       	adc	r31, r31
    22d2:	a2 17       	cp	r26, r18
    22d4:	b3 07       	cpc	r27, r19
    22d6:	e4 07       	cpc	r30, r20
    22d8:	f5 07       	cpc	r31, r21
    22da:	20 f0       	brcs	.+8      	; 0x22e4 <__udivmodsi4_ep>
    22dc:	a2 1b       	sub	r26, r18
    22de:	b3 0b       	sbc	r27, r19
    22e0:	e4 0b       	sbc	r30, r20
    22e2:	f5 0b       	sbc	r31, r21

000022e4 <__udivmodsi4_ep>:
    22e4:	66 1f       	adc	r22, r22
    22e6:	77 1f       	adc	r23, r23
    22e8:	88 1f       	adc	r24, r24
    22ea:	99 1f       	adc	r25, r25
    22ec:	1a 94       	dec	r1
    22ee:	69 f7       	brne	.-38     	; 0x22ca <__udivmodsi4_loop>
    22f0:	60 95       	com	r22
    22f2:	70 95       	com	r23
    22f4:	80 95       	com	r24
    22f6:	90 95       	com	r25
    22f8:	9b 01       	movw	r18, r22
    22fa:	ac 01       	movw	r20, r24
    22fc:	bd 01       	movw	r22, r26
    22fe:	cf 01       	movw	r24, r30
    2300:	08 95       	ret

00002302 <malloc>:
    2302:	cf 93       	push	r28
    2304:	df 93       	push	r29
    2306:	82 30       	cpi	r24, 0x02	; 2
    2308:	91 05       	cpc	r25, r1
    230a:	10 f4       	brcc	.+4      	; 0x2310 <malloc+0xe>
    230c:	82 e0       	ldi	r24, 0x02	; 2
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	e0 91 ca 07 	lds	r30, 0x07CA	; 0x8007ca <__flp>
    2314:	f0 91 cb 07 	lds	r31, 0x07CB	; 0x8007cb <__flp+0x1>
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	c0 e0       	ldi	r28, 0x00	; 0
    231e:	d0 e0       	ldi	r29, 0x00	; 0
    2320:	30 97       	sbiw	r30, 0x00	; 0
    2322:	11 f1       	breq	.+68     	; 0x2368 <malloc+0x66>
    2324:	40 81       	ld	r20, Z
    2326:	51 81       	ldd	r21, Z+1	; 0x01
    2328:	48 17       	cp	r20, r24
    232a:	59 07       	cpc	r21, r25
    232c:	c0 f0       	brcs	.+48     	; 0x235e <malloc+0x5c>
    232e:	48 17       	cp	r20, r24
    2330:	59 07       	cpc	r21, r25
    2332:	61 f4       	brne	.+24     	; 0x234c <malloc+0x4a>
    2334:	82 81       	ldd	r24, Z+2	; 0x02
    2336:	93 81       	ldd	r25, Z+3	; 0x03
    2338:	20 97       	sbiw	r28, 0x00	; 0
    233a:	19 f0       	breq	.+6      	; 0x2342 <malloc+0x40>
    233c:	9b 83       	std	Y+3, r25	; 0x03
    233e:	8a 83       	std	Y+2, r24	; 0x02
    2340:	2b c0       	rjmp	.+86     	; 0x2398 <malloc+0x96>
    2342:	90 93 cb 07 	sts	0x07CB, r25	; 0x8007cb <__flp+0x1>
    2346:	80 93 ca 07 	sts	0x07CA, r24	; 0x8007ca <__flp>
    234a:	26 c0       	rjmp	.+76     	; 0x2398 <malloc+0x96>
    234c:	21 15       	cp	r18, r1
    234e:	31 05       	cpc	r19, r1
    2350:	19 f0       	breq	.+6      	; 0x2358 <malloc+0x56>
    2352:	42 17       	cp	r20, r18
    2354:	53 07       	cpc	r21, r19
    2356:	18 f4       	brcc	.+6      	; 0x235e <malloc+0x5c>
    2358:	9a 01       	movw	r18, r20
    235a:	be 01       	movw	r22, r28
    235c:	df 01       	movw	r26, r30
    235e:	ef 01       	movw	r28, r30
    2360:	02 80       	ldd	r0, Z+2	; 0x02
    2362:	f3 81       	ldd	r31, Z+3	; 0x03
    2364:	e0 2d       	mov	r30, r0
    2366:	dc cf       	rjmp	.-72     	; 0x2320 <malloc+0x1e>
    2368:	21 15       	cp	r18, r1
    236a:	31 05       	cpc	r19, r1
    236c:	09 f1       	breq	.+66     	; 0x23b0 <malloc+0xae>
    236e:	28 1b       	sub	r18, r24
    2370:	39 0b       	sbc	r19, r25
    2372:	24 30       	cpi	r18, 0x04	; 4
    2374:	31 05       	cpc	r19, r1
    2376:	90 f4       	brcc	.+36     	; 0x239c <malloc+0x9a>
    2378:	12 96       	adiw	r26, 0x02	; 2
    237a:	8d 91       	ld	r24, X+
    237c:	9c 91       	ld	r25, X
    237e:	13 97       	sbiw	r26, 0x03	; 3
    2380:	61 15       	cp	r22, r1
    2382:	71 05       	cpc	r23, r1
    2384:	21 f0       	breq	.+8      	; 0x238e <malloc+0x8c>
    2386:	fb 01       	movw	r30, r22
    2388:	93 83       	std	Z+3, r25	; 0x03
    238a:	82 83       	std	Z+2, r24	; 0x02
    238c:	04 c0       	rjmp	.+8      	; 0x2396 <malloc+0x94>
    238e:	90 93 cb 07 	sts	0x07CB, r25	; 0x8007cb <__flp+0x1>
    2392:	80 93 ca 07 	sts	0x07CA, r24	; 0x8007ca <__flp>
    2396:	fd 01       	movw	r30, r26
    2398:	32 96       	adiw	r30, 0x02	; 2
    239a:	44 c0       	rjmp	.+136    	; 0x2424 <malloc+0x122>
    239c:	fd 01       	movw	r30, r26
    239e:	e2 0f       	add	r30, r18
    23a0:	f3 1f       	adc	r31, r19
    23a2:	81 93       	st	Z+, r24
    23a4:	91 93       	st	Z+, r25
    23a6:	22 50       	subi	r18, 0x02	; 2
    23a8:	31 09       	sbc	r19, r1
    23aa:	2d 93       	st	X+, r18
    23ac:	3c 93       	st	X, r19
    23ae:	3a c0       	rjmp	.+116    	; 0x2424 <malloc+0x122>
    23b0:	20 91 c8 07 	lds	r18, 0x07C8	; 0x8007c8 <__brkval>
    23b4:	30 91 c9 07 	lds	r19, 0x07C9	; 0x8007c9 <__brkval+0x1>
    23b8:	23 2b       	or	r18, r19
    23ba:	41 f4       	brne	.+16     	; 0x23cc <malloc+0xca>
    23bc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    23c0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    23c4:	30 93 c9 07 	sts	0x07C9, r19	; 0x8007c9 <__brkval+0x1>
    23c8:	20 93 c8 07 	sts	0x07C8, r18	; 0x8007c8 <__brkval>
    23cc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    23d0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    23d4:	21 15       	cp	r18, r1
    23d6:	31 05       	cpc	r19, r1
    23d8:	41 f4       	brne	.+16     	; 0x23ea <malloc+0xe8>
    23da:	2d b7       	in	r18, 0x3d	; 61
    23dc:	3e b7       	in	r19, 0x3e	; 62
    23de:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    23e2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    23e6:	24 1b       	sub	r18, r20
    23e8:	35 0b       	sbc	r19, r21
    23ea:	e0 91 c8 07 	lds	r30, 0x07C8	; 0x8007c8 <__brkval>
    23ee:	f0 91 c9 07 	lds	r31, 0x07C9	; 0x8007c9 <__brkval+0x1>
    23f2:	e2 17       	cp	r30, r18
    23f4:	f3 07       	cpc	r31, r19
    23f6:	a0 f4       	brcc	.+40     	; 0x2420 <malloc+0x11e>
    23f8:	2e 1b       	sub	r18, r30
    23fa:	3f 0b       	sbc	r19, r31
    23fc:	28 17       	cp	r18, r24
    23fe:	39 07       	cpc	r19, r25
    2400:	78 f0       	brcs	.+30     	; 0x2420 <malloc+0x11e>
    2402:	ac 01       	movw	r20, r24
    2404:	4e 5f       	subi	r20, 0xFE	; 254
    2406:	5f 4f       	sbci	r21, 0xFF	; 255
    2408:	24 17       	cp	r18, r20
    240a:	35 07       	cpc	r19, r21
    240c:	48 f0       	brcs	.+18     	; 0x2420 <malloc+0x11e>
    240e:	4e 0f       	add	r20, r30
    2410:	5f 1f       	adc	r21, r31
    2412:	50 93 c9 07 	sts	0x07C9, r21	; 0x8007c9 <__brkval+0x1>
    2416:	40 93 c8 07 	sts	0x07C8, r20	; 0x8007c8 <__brkval>
    241a:	81 93       	st	Z+, r24
    241c:	91 93       	st	Z+, r25
    241e:	02 c0       	rjmp	.+4      	; 0x2424 <malloc+0x122>
    2420:	e0 e0       	ldi	r30, 0x00	; 0
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	cf 01       	movw	r24, r30
    2426:	df 91       	pop	r29
    2428:	cf 91       	pop	r28
    242a:	08 95       	ret

0000242c <free>:
    242c:	0f 93       	push	r16
    242e:	1f 93       	push	r17
    2430:	cf 93       	push	r28
    2432:	df 93       	push	r29
    2434:	00 97       	sbiw	r24, 0x00	; 0
    2436:	09 f4       	brne	.+2      	; 0x243a <free+0xe>
    2438:	8c c0       	rjmp	.+280    	; 0x2552 <free+0x126>
    243a:	fc 01       	movw	r30, r24
    243c:	32 97       	sbiw	r30, 0x02	; 2
    243e:	13 82       	std	Z+3, r1	; 0x03
    2440:	12 82       	std	Z+2, r1	; 0x02
    2442:	00 91 ca 07 	lds	r16, 0x07CA	; 0x8007ca <__flp>
    2446:	10 91 cb 07 	lds	r17, 0x07CB	; 0x8007cb <__flp+0x1>
    244a:	01 15       	cp	r16, r1
    244c:	11 05       	cpc	r17, r1
    244e:	81 f4       	brne	.+32     	; 0x2470 <free+0x44>
    2450:	20 81       	ld	r18, Z
    2452:	31 81       	ldd	r19, Z+1	; 0x01
    2454:	82 0f       	add	r24, r18
    2456:	93 1f       	adc	r25, r19
    2458:	20 91 c8 07 	lds	r18, 0x07C8	; 0x8007c8 <__brkval>
    245c:	30 91 c9 07 	lds	r19, 0x07C9	; 0x8007c9 <__brkval+0x1>
    2460:	28 17       	cp	r18, r24
    2462:	39 07       	cpc	r19, r25
    2464:	79 f5       	brne	.+94     	; 0x24c4 <free+0x98>
    2466:	f0 93 c9 07 	sts	0x07C9, r31	; 0x8007c9 <__brkval+0x1>
    246a:	e0 93 c8 07 	sts	0x07C8, r30	; 0x8007c8 <__brkval>
    246e:	71 c0       	rjmp	.+226    	; 0x2552 <free+0x126>
    2470:	d8 01       	movw	r26, r16
    2472:	40 e0       	ldi	r20, 0x00	; 0
    2474:	50 e0       	ldi	r21, 0x00	; 0
    2476:	ae 17       	cp	r26, r30
    2478:	bf 07       	cpc	r27, r31
    247a:	50 f4       	brcc	.+20     	; 0x2490 <free+0x64>
    247c:	12 96       	adiw	r26, 0x02	; 2
    247e:	2d 91       	ld	r18, X+
    2480:	3c 91       	ld	r19, X
    2482:	13 97       	sbiw	r26, 0x03	; 3
    2484:	ad 01       	movw	r20, r26
    2486:	21 15       	cp	r18, r1
    2488:	31 05       	cpc	r19, r1
    248a:	09 f1       	breq	.+66     	; 0x24ce <free+0xa2>
    248c:	d9 01       	movw	r26, r18
    248e:	f3 cf       	rjmp	.-26     	; 0x2476 <free+0x4a>
    2490:	9d 01       	movw	r18, r26
    2492:	da 01       	movw	r26, r20
    2494:	33 83       	std	Z+3, r19	; 0x03
    2496:	22 83       	std	Z+2, r18	; 0x02
    2498:	60 81       	ld	r22, Z
    249a:	71 81       	ldd	r23, Z+1	; 0x01
    249c:	86 0f       	add	r24, r22
    249e:	97 1f       	adc	r25, r23
    24a0:	82 17       	cp	r24, r18
    24a2:	93 07       	cpc	r25, r19
    24a4:	69 f4       	brne	.+26     	; 0x24c0 <free+0x94>
    24a6:	ec 01       	movw	r28, r24
    24a8:	28 81       	ld	r18, Y
    24aa:	39 81       	ldd	r19, Y+1	; 0x01
    24ac:	26 0f       	add	r18, r22
    24ae:	37 1f       	adc	r19, r23
    24b0:	2e 5f       	subi	r18, 0xFE	; 254
    24b2:	3f 4f       	sbci	r19, 0xFF	; 255
    24b4:	31 83       	std	Z+1, r19	; 0x01
    24b6:	20 83       	st	Z, r18
    24b8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ba:	9b 81       	ldd	r25, Y+3	; 0x03
    24bc:	93 83       	std	Z+3, r25	; 0x03
    24be:	82 83       	std	Z+2, r24	; 0x02
    24c0:	45 2b       	or	r20, r21
    24c2:	29 f4       	brne	.+10     	; 0x24ce <free+0xa2>
    24c4:	f0 93 cb 07 	sts	0x07CB, r31	; 0x8007cb <__flp+0x1>
    24c8:	e0 93 ca 07 	sts	0x07CA, r30	; 0x8007ca <__flp>
    24cc:	42 c0       	rjmp	.+132    	; 0x2552 <free+0x126>
    24ce:	13 96       	adiw	r26, 0x03	; 3
    24d0:	fc 93       	st	X, r31
    24d2:	ee 93       	st	-X, r30
    24d4:	12 97       	sbiw	r26, 0x02	; 2
    24d6:	ed 01       	movw	r28, r26
    24d8:	49 91       	ld	r20, Y+
    24da:	59 91       	ld	r21, Y+
    24dc:	9e 01       	movw	r18, r28
    24de:	24 0f       	add	r18, r20
    24e0:	35 1f       	adc	r19, r21
    24e2:	e2 17       	cp	r30, r18
    24e4:	f3 07       	cpc	r31, r19
    24e6:	71 f4       	brne	.+28     	; 0x2504 <free+0xd8>
    24e8:	80 81       	ld	r24, Z
    24ea:	91 81       	ldd	r25, Z+1	; 0x01
    24ec:	84 0f       	add	r24, r20
    24ee:	95 1f       	adc	r25, r21
    24f0:	02 96       	adiw	r24, 0x02	; 2
    24f2:	11 96       	adiw	r26, 0x01	; 1
    24f4:	9c 93       	st	X, r25
    24f6:	8e 93       	st	-X, r24
    24f8:	82 81       	ldd	r24, Z+2	; 0x02
    24fa:	93 81       	ldd	r25, Z+3	; 0x03
    24fc:	13 96       	adiw	r26, 0x03	; 3
    24fe:	9c 93       	st	X, r25
    2500:	8e 93       	st	-X, r24
    2502:	12 97       	sbiw	r26, 0x02	; 2
    2504:	e0 e0       	ldi	r30, 0x00	; 0
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	d8 01       	movw	r26, r16
    250a:	12 96       	adiw	r26, 0x02	; 2
    250c:	8d 91       	ld	r24, X+
    250e:	9c 91       	ld	r25, X
    2510:	13 97       	sbiw	r26, 0x03	; 3
    2512:	00 97       	sbiw	r24, 0x00	; 0
    2514:	19 f0       	breq	.+6      	; 0x251c <free+0xf0>
    2516:	f8 01       	movw	r30, r16
    2518:	8c 01       	movw	r16, r24
    251a:	f6 cf       	rjmp	.-20     	; 0x2508 <free+0xdc>
    251c:	8d 91       	ld	r24, X+
    251e:	9c 91       	ld	r25, X
    2520:	98 01       	movw	r18, r16
    2522:	2e 5f       	subi	r18, 0xFE	; 254
    2524:	3f 4f       	sbci	r19, 0xFF	; 255
    2526:	82 0f       	add	r24, r18
    2528:	93 1f       	adc	r25, r19
    252a:	20 91 c8 07 	lds	r18, 0x07C8	; 0x8007c8 <__brkval>
    252e:	30 91 c9 07 	lds	r19, 0x07C9	; 0x8007c9 <__brkval+0x1>
    2532:	28 17       	cp	r18, r24
    2534:	39 07       	cpc	r19, r25
    2536:	69 f4       	brne	.+26     	; 0x2552 <free+0x126>
    2538:	30 97       	sbiw	r30, 0x00	; 0
    253a:	29 f4       	brne	.+10     	; 0x2546 <free+0x11a>
    253c:	10 92 cb 07 	sts	0x07CB, r1	; 0x8007cb <__flp+0x1>
    2540:	10 92 ca 07 	sts	0x07CA, r1	; 0x8007ca <__flp>
    2544:	02 c0       	rjmp	.+4      	; 0x254a <free+0x11e>
    2546:	13 82       	std	Z+3, r1	; 0x03
    2548:	12 82       	std	Z+2, r1	; 0x02
    254a:	10 93 c9 07 	sts	0x07C9, r17	; 0x8007c9 <__brkval+0x1>
    254e:	00 93 c8 07 	sts	0x07C8, r16	; 0x8007c8 <__brkval>
    2552:	df 91       	pop	r29
    2554:	cf 91       	pop	r28
    2556:	1f 91       	pop	r17
    2558:	0f 91       	pop	r16
    255a:	08 95       	ret

0000255c <do_rand>:
    255c:	8f 92       	push	r8
    255e:	9f 92       	push	r9
    2560:	af 92       	push	r10
    2562:	bf 92       	push	r11
    2564:	cf 92       	push	r12
    2566:	df 92       	push	r13
    2568:	ef 92       	push	r14
    256a:	ff 92       	push	r15
    256c:	cf 93       	push	r28
    256e:	df 93       	push	r29
    2570:	ec 01       	movw	r28, r24
    2572:	68 81       	ld	r22, Y
    2574:	79 81       	ldd	r23, Y+1	; 0x01
    2576:	8a 81       	ldd	r24, Y+2	; 0x02
    2578:	9b 81       	ldd	r25, Y+3	; 0x03
    257a:	61 15       	cp	r22, r1
    257c:	71 05       	cpc	r23, r1
    257e:	81 05       	cpc	r24, r1
    2580:	91 05       	cpc	r25, r1
    2582:	21 f4       	brne	.+8      	; 0x258c <do_rand+0x30>
    2584:	64 e2       	ldi	r22, 0x24	; 36
    2586:	79 ed       	ldi	r23, 0xD9	; 217
    2588:	8b e5       	ldi	r24, 0x5B	; 91
    258a:	97 e0       	ldi	r25, 0x07	; 7
    258c:	2d e1       	ldi	r18, 0x1D	; 29
    258e:	33 ef       	ldi	r19, 0xF3	; 243
    2590:	41 e0       	ldi	r20, 0x01	; 1
    2592:	50 e0       	ldi	r21, 0x00	; 0
    2594:	0e 94 1a 13 	call	0x2634	; 0x2634 <__divmodsi4>
    2598:	49 01       	movw	r8, r18
    259a:	5a 01       	movw	r10, r20
    259c:	9b 01       	movw	r18, r22
    259e:	ac 01       	movw	r20, r24
    25a0:	a7 ea       	ldi	r26, 0xA7	; 167
    25a2:	b1 e4       	ldi	r27, 0x41	; 65
    25a4:	0e 94 39 13 	call	0x2672	; 0x2672 <__muluhisi3>
    25a8:	6b 01       	movw	r12, r22
    25aa:	7c 01       	movw	r14, r24
    25ac:	ac ee       	ldi	r26, 0xEC	; 236
    25ae:	b4 ef       	ldi	r27, 0xF4	; 244
    25b0:	a5 01       	movw	r20, r10
    25b2:	94 01       	movw	r18, r8
    25b4:	0e 94 47 13 	call	0x268e	; 0x268e <__mulohisi3>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	8c 0d       	add	r24, r12
    25be:	9d 1d       	adc	r25, r13
    25c0:	ae 1d       	adc	r26, r14
    25c2:	bf 1d       	adc	r27, r15
    25c4:	b7 ff       	sbrs	r27, 7
    25c6:	03 c0       	rjmp	.+6      	; 0x25ce <do_rand+0x72>
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	a1 09       	sbc	r26, r1
    25cc:	b0 48       	sbci	r27, 0x80	; 128
    25ce:	88 83       	st	Y, r24
    25d0:	99 83       	std	Y+1, r25	; 0x01
    25d2:	aa 83       	std	Y+2, r26	; 0x02
    25d4:	bb 83       	std	Y+3, r27	; 0x03
    25d6:	9f 77       	andi	r25, 0x7F	; 127
    25d8:	df 91       	pop	r29
    25da:	cf 91       	pop	r28
    25dc:	ff 90       	pop	r15
    25de:	ef 90       	pop	r14
    25e0:	df 90       	pop	r13
    25e2:	cf 90       	pop	r12
    25e4:	bf 90       	pop	r11
    25e6:	af 90       	pop	r10
    25e8:	9f 90       	pop	r9
    25ea:	8f 90       	pop	r8
    25ec:	08 95       	ret

000025ee <rand_r>:
    25ee:	0e 94 ae 12 	call	0x255c	; 0x255c <do_rand>
    25f2:	08 95       	ret

000025f4 <rand>:
    25f4:	86 e0       	ldi	r24, 0x06	; 6
    25f6:	91 e0       	ldi	r25, 0x01	; 1
    25f8:	0e 94 ae 12 	call	0x255c	; 0x255c <do_rand>
    25fc:	08 95       	ret

000025fe <srand>:
    25fe:	a0 e0       	ldi	r26, 0x00	; 0
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    2606:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    260a:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    260e:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    2612:	08 95       	ret

00002614 <memcpy>:
    2614:	fb 01       	movw	r30, r22
    2616:	dc 01       	movw	r26, r24
    2618:	02 c0       	rjmp	.+4      	; 0x261e <memcpy+0xa>
    261a:	01 90       	ld	r0, Z+
    261c:	0d 92       	st	X+, r0
    261e:	41 50       	subi	r20, 0x01	; 1
    2620:	50 40       	sbci	r21, 0x00	; 0
    2622:	d8 f7       	brcc	.-10     	; 0x261a <memcpy+0x6>
    2624:	08 95       	ret

00002626 <memset>:
    2626:	dc 01       	movw	r26, r24
    2628:	01 c0       	rjmp	.+2      	; 0x262c <memset+0x6>
    262a:	6d 93       	st	X+, r22
    262c:	41 50       	subi	r20, 0x01	; 1
    262e:	50 40       	sbci	r21, 0x00	; 0
    2630:	e0 f7       	brcc	.-8      	; 0x262a <memset+0x4>
    2632:	08 95       	ret

00002634 <__divmodsi4>:
    2634:	05 2e       	mov	r0, r21
    2636:	97 fb       	bst	r25, 7
    2638:	1e f4       	brtc	.+6      	; 0x2640 <__divmodsi4+0xc>
    263a:	00 94       	com	r0
    263c:	0e 94 31 13 	call	0x2662	; 0x2662 <__negsi2>
    2640:	57 fd       	sbrc	r21, 7
    2642:	07 d0       	rcall	.+14     	; 0x2652 <__divmodsi4_neg2>
    2644:	0e 94 5f 11 	call	0x22be	; 0x22be <__udivmodsi4>
    2648:	07 fc       	sbrc	r0, 7
    264a:	03 d0       	rcall	.+6      	; 0x2652 <__divmodsi4_neg2>
    264c:	4e f4       	brtc	.+18     	; 0x2660 <__divmodsi4_exit>
    264e:	0c 94 31 13 	jmp	0x2662	; 0x2662 <__negsi2>

00002652 <__divmodsi4_neg2>:
    2652:	50 95       	com	r21
    2654:	40 95       	com	r20
    2656:	30 95       	com	r19
    2658:	21 95       	neg	r18
    265a:	3f 4f       	sbci	r19, 0xFF	; 255
    265c:	4f 4f       	sbci	r20, 0xFF	; 255
    265e:	5f 4f       	sbci	r21, 0xFF	; 255

00002660 <__divmodsi4_exit>:
    2660:	08 95       	ret

00002662 <__negsi2>:
    2662:	90 95       	com	r25
    2664:	80 95       	com	r24
    2666:	70 95       	com	r23
    2668:	61 95       	neg	r22
    266a:	7f 4f       	sbci	r23, 0xFF	; 255
    266c:	8f 4f       	sbci	r24, 0xFF	; 255
    266e:	9f 4f       	sbci	r25, 0xFF	; 255
    2670:	08 95       	ret

00002672 <__muluhisi3>:
    2672:	0e 94 4c 13 	call	0x2698	; 0x2698 <__umulhisi3>
    2676:	a5 9f       	mul	r26, r21
    2678:	90 0d       	add	r25, r0
    267a:	b4 9f       	mul	r27, r20
    267c:	90 0d       	add	r25, r0
    267e:	a4 9f       	mul	r26, r20
    2680:	80 0d       	add	r24, r0
    2682:	91 1d       	adc	r25, r1
    2684:	11 24       	eor	r1, r1
    2686:	08 95       	ret

00002688 <__mulshisi3>:
    2688:	b7 ff       	sbrs	r27, 7
    268a:	0c 94 39 13 	jmp	0x2672	; 0x2672 <__muluhisi3>

0000268e <__mulohisi3>:
    268e:	0e 94 39 13 	call	0x2672	; 0x2672 <__muluhisi3>
    2692:	82 1b       	sub	r24, r18
    2694:	93 0b       	sbc	r25, r19
    2696:	08 95       	ret

00002698 <__umulhisi3>:
    2698:	a2 9f       	mul	r26, r18
    269a:	b0 01       	movw	r22, r0
    269c:	b3 9f       	mul	r27, r19
    269e:	c0 01       	movw	r24, r0
    26a0:	a3 9f       	mul	r26, r19
    26a2:	70 0d       	add	r23, r0
    26a4:	81 1d       	adc	r24, r1
    26a6:	11 24       	eor	r1, r1
    26a8:	91 1d       	adc	r25, r1
    26aa:	b2 9f       	mul	r27, r18
    26ac:	70 0d       	add	r23, r0
    26ae:	81 1d       	adc	r24, r1
    26b0:	11 24       	eor	r1, r1
    26b2:	91 1d       	adc	r25, r1
    26b4:	08 95       	ret

000026b6 <_exit>:
    26b6:	f8 94       	cli

000026b8 <__stop_program>:
    26b8:	ff cf       	rjmp	.-2      	; 0x26b8 <__stop_program>
