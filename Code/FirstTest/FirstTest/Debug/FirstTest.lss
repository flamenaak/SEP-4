
FirstTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  00002660  000026f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002660  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000666  00800162  00800162  00002756  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002756  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002788  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a0  00000000  00000000  000027c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000582b  00000000  00000000  00002c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001273  00000000  00000000  00008493  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003030  00000000  00000000  00009706  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f18  00000000  00000000  0000c738  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019a4  00000000  00000000  0000d650  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000571d  00000000  00000000  0000eff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005c8  00000000  00000000  00014711  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__vector_13>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 7c 04 	jmp	0x8f8	; 0x8f8 <__vector_16>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 25 08 	jmp	0x104a	; 0x104a <__vector_20>
      54:	0c 94 63 08 	jmp	0x10c6	; 0x10c6 <__vector_21>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <__vector_28>
      74:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <__vector_29>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e0 e6       	ldi	r30, 0x60	; 96
      90:	f6 e2       	ldi	r31, 0x26	; 38
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a2 36       	cpi	r26, 0x62	; 98
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	27 e0       	ldi	r18, 0x07	; 7
      a0:	a2 e6       	ldi	r26, 0x62	; 98
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a8 3c       	cpi	r26, 0xC8	; 200
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 2a 04 	call	0x854	; 0x854 <main>
      b2:	0c 94 2e 13 	jmp	0x265c	; 0x265c <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <obstacles_task>:
{

}
//-----------------------------------------
void comReceiver_task(void *pvParameters)
{
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	00 d0       	rcall	.+0      	; 0xc0 <obstacles_task+0x6>
      c0:	00 d0       	rcall	.+0      	; 0xc2 <obstacles_task+0x8>
      c2:	cd b7       	in	r28, 0x3d	; 61
      c4:	de b7       	in	r29, 0x3e	; 62
      c6:	0f 2e       	mov	r0, r31
      c8:	f1 ef       	ldi	r31, 0xF1	; 241
      ca:	6f 2e       	mov	r6, r31
      cc:	f1 e0       	ldi	r31, 0x01	; 1
      ce:	7f 2e       	mov	r7, r31
      d0:	f0 2d       	mov	r31, r0
      d2:	0f 2e       	mov	r0, r31
      d4:	ff e0       	ldi	r31, 0x0F	; 15
      d6:	af 2e       	mov	r10, r31
      d8:	f3 e0       	ldi	r31, 0x03	; 3
      da:	bf 2e       	mov	r11, r31
      dc:	f0 2d       	mov	r31, r0
      de:	33 24       	eor	r3, r3
      e0:	33 94       	inc	r3
      e2:	21 2c       	mov	r2, r1
      e4:	0f 2e       	mov	r0, r31
      e6:	f5 ef       	ldi	r31, 0xF5	; 245
      e8:	8f 2e       	mov	r8, r31
      ea:	f1 e0       	ldi	r31, 0x01	; 1
      ec:	9f 2e       	mov	r9, r31
      ee:	f0 2d       	mov	r31, r0
      f0:	0f 2e       	mov	r0, r31
      f2:	fd e0       	ldi	r31, 0x0D	; 13
      f4:	cf 2e       	mov	r12, r31
      f6:	f3 e0       	ldi	r31, 0x03	; 3
      f8:	df 2e       	mov	r13, r31
      fa:	f0 2d       	mov	r31, r0
      fc:	19 82       	std	Y+1, r1	; 0x01
      fe:	1a 82       	std	Y+2, r1	; 0x02
     100:	d3 01       	movw	r26, r6
     102:	8d 91       	ld	r24, X+
     104:	9c 91       	ld	r25, X
     106:	11 97       	sbiw	r26, 0x01	; 1
     108:	9c 01       	movw	r18, r24
     10a:	22 0f       	add	r18, r18
     10c:	33 1f       	adc	r19, r19
     10e:	88 0f       	add	r24, r24
     110:	99 1f       	adc	r25, r25
     112:	88 0f       	add	r24, r24
     114:	99 1f       	adc	r25, r25
     116:	88 0f       	add	r24, r24
     118:	99 1f       	adc	r25, r25
     11a:	82 0f       	add	r24, r18
     11c:	93 1f       	adc	r25, r19
     11e:	12 96       	adiw	r26, 0x02	; 2
     120:	ed 91       	ld	r30, X+
     122:	fc 91       	ld	r31, X
     124:	13 97       	sbiw	r26, 0x03	; 3
     126:	8e 0f       	add	r24, r30
     128:	9f 1f       	adc	r25, r31
     12a:	fc 01       	movw	r30, r24
     12c:	ee 59       	subi	r30, 0x9E	; 158
     12e:	fe 4f       	sbci	r31, 0xFE	; 254
     130:	80 81       	ld	r24, Z
     132:	81 11       	cpse	r24, r1
     134:	96 c0       	rjmp	.+300    	; 0x262 <obstacles_task+0x1a8>
     136:	0f 2e       	mov	r0, r31
     138:	f3 e6       	ldi	r31, 0x63	; 99
     13a:	ef 2e       	mov	r14, r31
     13c:	f1 e0       	ldi	r31, 0x01	; 1
     13e:	ff 2e       	mov	r15, r31
     140:	f0 2d       	mov	r31, r0
     142:	47 ef       	ldi	r20, 0xF7	; 247
     144:	51 e0       	ldi	r21, 0x01	; 1
     146:	b7 01       	movw	r22, r14
     148:	0e c0       	rjmp	.+28     	; 0x166 <obstacles_task+0xac>
     14a:	8d 91       	ld	r24, X+
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	81 93       	st	Z+, r24
     150:	91 93       	st	Z+, r25
     152:	e2 17       	cp	r30, r18
     154:	f3 07       	cpc	r31, r19
     156:	c9 f7       	brne	.-14     	; 0x14a <obstacles_task+0x90>
     158:	66 5f       	subi	r22, 0xF6	; 246
     15a:	7f 4f       	sbci	r23, 0xFF	; 255
     15c:	4c 5e       	subi	r20, 0xEC	; 236
     15e:	5f 4f       	sbci	r21, 0xFF	; 255
     160:	4a 15       	cp	r20, r10
     162:	5b 05       	cpc	r21, r11
     164:	31 f0       	breq	.+12     	; 0x172 <obstacles_task+0xb8>
     166:	9a 01       	movw	r18, r20
     168:	2e 5e       	subi	r18, 0xEE	; 238
     16a:	3f 4f       	sbci	r19, 0xFF	; 255
     16c:	fa 01       	movw	r30, r20
     16e:	db 01       	movw	r26, r22
     170:	ec cf       	rjmp	.-40     	; 0x14a <obstacles_task+0x90>
     172:	e9 e0       	ldi	r30, 0x09	; 9
     174:	f2 e0       	ldi	r31, 0x02	; 2
     176:	43 2c       	mov	r4, r3
     178:	52 2c       	mov	r5, r2
     17a:	00 e0       	ldi	r16, 0x00	; 0
     17c:	10 e0       	ldi	r17, 0x00	; 0
     17e:	fc 83       	std	Y+4, r31	; 0x04
     180:	eb 83       	std	Y+3, r30	; 0x03
     182:	0e 94 cd 12 	call	0x259a	; 0x259a <rand>
     186:	81 70       	andi	r24, 0x01	; 1
     188:	90 78       	andi	r25, 0x80	; 128
     18a:	99 23       	and	r25, r25
     18c:	24 f4       	brge	.+8      	; 0x196 <obstacles_task+0xdc>
     18e:	01 97       	sbiw	r24, 0x01	; 1
     190:	8e 6f       	ori	r24, 0xFE	; 254
     192:	9f 6f       	ori	r25, 0xFF	; 255
     194:	01 96       	adiw	r24, 0x01	; 1
     196:	d4 01       	movw	r26, r8
     198:	8d 93       	st	X+, r24
     19a:	9c 93       	st	X, r25
     19c:	02 30       	cpi	r16, 0x02	; 2
     19e:	11 05       	cpc	r17, r1
     1a0:	2c f0       	brlt	.+10     	; 0x1ac <obstacles_task+0xf2>
     1a2:	bd e0       	ldi	r27, 0x0D	; 13
     1a4:	4b 16       	cp	r4, r27
     1a6:	51 04       	cpc	r5, r1
     1a8:	d9 f4       	brne	.+54     	; 0x1e0 <obstacles_task+0x126>
     1aa:	60 c0       	rjmp	.+192    	; 0x26c <obstacles_task+0x1b2>
     1ac:	0e 94 cd 12 	call	0x259a	; 0x259a <rand>
     1b0:	81 70       	andi	r24, 0x01	; 1
     1b2:	90 78       	andi	r25, 0x80	; 128
     1b4:	99 23       	and	r25, r25
     1b6:	24 f4       	brge	.+8      	; 0x1c0 <obstacles_task+0x106>
     1b8:	01 97       	sbiw	r24, 0x01	; 1
     1ba:	8e 6f       	ori	r24, 0xFE	; 254
     1bc:	9f 6f       	ori	r25, 0xFF	; 255
     1be:	01 96       	adiw	r24, 0x01	; 1
     1c0:	eb 81       	ldd	r30, Y+3	; 0x03
     1c2:	fc 81       	ldd	r31, Y+4	; 0x04
     1c4:	91 83       	std	Z+1, r25	; 0x01
     1c6:	80 83       	st	Z, r24
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	11 f4       	brne	.+4      	; 0x1d0 <obstacles_task+0x116>
     1cc:	0f 5f       	subi	r16, 0xFF	; 255
     1ce:	1f 4f       	sbci	r17, 0xFF	; 255
     1d0:	c2 01       	movw	r24, r4
     1d2:	83 70       	andi	r24, 0x03	; 3
     1d4:	99 27       	eor	r25, r25
     1d6:	89 2b       	or	r24, r25
     1d8:	39 f4       	brne	.+14     	; 0x1e8 <obstacles_task+0x12e>
     1da:	09 81       	ldd	r16, Y+1	; 0x01
     1dc:	1a 81       	ldd	r17, Y+2	; 0x02
     1de:	04 c0       	rjmp	.+8      	; 0x1e8 <obstacles_task+0x12e>
     1e0:	ab 81       	ldd	r26, Y+3	; 0x03
     1e2:	bc 81       	ldd	r27, Y+4	; 0x04
     1e4:	1d 92       	st	X+, r1
     1e6:	1c 92       	st	X, r1
     1e8:	bf ef       	ldi	r27, 0xFF	; 255
     1ea:	4b 1a       	sub	r4, r27
     1ec:	5b 0a       	sbc	r5, r27
     1ee:	eb 81       	ldd	r30, Y+3	; 0x03
     1f0:	fc 81       	ldd	r31, Y+4	; 0x04
     1f2:	74 96       	adiw	r30, 0x14	; 20
     1f4:	fc 83       	std	Y+4, r31	; 0x04
     1f6:	eb 83       	std	Y+3, r30	; 0x03
     1f8:	fe e0       	ldi	r31, 0x0E	; 14
     1fa:	4f 16       	cp	r4, r31
     1fc:	51 04       	cpc	r5, r1
     1fe:	09 f6       	brne	.-126    	; 0x182 <obstacles_task+0xc8>
     200:	a4 01       	movw	r20, r8
     202:	0e c0       	rjmp	.+28     	; 0x220 <obstacles_task+0x166>
     204:	80 81       	ld	r24, Z
     206:	32 96       	adiw	r30, 0x02	; 2
     208:	8d 93       	st	X+, r24
     20a:	e2 17       	cp	r30, r18
     20c:	f3 07       	cpc	r31, r19
     20e:	d1 f7       	brne	.-12     	; 0x204 <obstacles_task+0x14a>
     210:	4c 5e       	subi	r20, 0xEC	; 236
     212:	5f 4f       	sbci	r21, 0xFF	; 255
     214:	8a e0       	ldi	r24, 0x0A	; 10
     216:	e8 0e       	add	r14, r24
     218:	f1 1c       	adc	r15, r1
     21a:	4c 15       	cp	r20, r12
     21c:	5d 05       	cpc	r21, r13
     21e:	31 f0       	breq	.+12     	; 0x22c <obstacles_task+0x172>
     220:	9a 01       	movw	r18, r20
     222:	2e 5e       	subi	r18, 0xEE	; 238
     224:	3f 4f       	sbci	r19, 0xFF	; 255
     226:	d7 01       	movw	r26, r14
     228:	fa 01       	movw	r30, r20
     22a:	ec cf       	rjmp	.-40     	; 0x204 <obstacles_task+0x14a>
     22c:	d3 01       	movw	r26, r6
     22e:	8d 91       	ld	r24, X+
     230:	9c 91       	ld	r25, X
     232:	11 97       	sbiw	r26, 0x01	; 1
     234:	fc 01       	movw	r30, r24
     236:	ee 0f       	add	r30, r30
     238:	ff 1f       	adc	r31, r31
     23a:	88 0f       	add	r24, r24
     23c:	99 1f       	adc	r25, r25
     23e:	88 0f       	add	r24, r24
     240:	99 1f       	adc	r25, r25
     242:	88 0f       	add	r24, r24
     244:	99 1f       	adc	r25, r25
     246:	e8 0f       	add	r30, r24
     248:	f9 1f       	adc	r31, r25
     24a:	12 96       	adiw	r26, 0x02	; 2
     24c:	8d 91       	ld	r24, X+
     24e:	9c 91       	ld	r25, X
     250:	13 97       	sbiw	r26, 0x03	; 3
     252:	e8 0f       	add	r30, r24
     254:	f9 1f       	adc	r31, r25
     256:	ee 0f       	add	r30, r30
     258:	ff 1f       	adc	r31, r31
     25a:	eb 50       	subi	r30, 0x0B	; 11
     25c:	fe 4f       	sbci	r31, 0xFE	; 254
     25e:	30 82       	st	Z, r3
     260:	21 82       	std	Z+1, r2	; 0x01
     262:	88 ee       	ldi	r24, 0xE8	; 232
     264:	93 e0       	ldi	r25, 0x03	; 3
     266:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <vTaskDelay>
     26a:	4a cf       	rjmp	.-364    	; 0x100 <obstacles_task+0x46>
     26c:	0e 94 cd 12 	call	0x259a	; 0x259a <rand>
     270:	81 70       	andi	r24, 0x01	; 1
     272:	90 78       	andi	r25, 0x80	; 128
     274:	99 23       	and	r25, r25
     276:	24 f4       	brge	.+8      	; 0x280 <obstacles_task+0x1c6>
     278:	01 97       	sbiw	r24, 0x01	; 1
     27a:	8e 6f       	ori	r24, 0xFE	; 254
     27c:	9f 6f       	ori	r25, 0xFF	; 255
     27e:	01 96       	adiw	r24, 0x01	; 1
     280:	eb 81       	ldd	r30, Y+3	; 0x03
     282:	fc 81       	ldd	r31, Y+4	; 0x04
     284:	91 83       	std	Z+1, r25	; 0x01
     286:	80 83       	st	Z, r24
     288:	01 97       	sbiw	r24, 0x01	; 1
     28a:	09 f0       	breq	.+2      	; 0x28e <obstacles_task+0x1d4>
     28c:	b9 cf       	rjmp	.-142    	; 0x200 <obstacles_task+0x146>
     28e:	9e cf       	rjmp	.-196    	; 0x1cc <obstacles_task+0x112>

00000290 <joystickSampler_task>:
     290:	cf 93       	push	r28
     292:	df 93       	push	r29
     294:	00 d0       	rcall	.+0      	; 0x296 <joystickSampler_task+0x6>
     296:	00 d0       	rcall	.+0      	; 0x298 <joystickSampler_task+0x8>
     298:	00 d0       	rcall	.+0      	; 0x29a <joystickSampler_task+0xa>
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
     29e:	e1 ef       	ldi	r30, 0xF1	; 241
     2a0:	f1 e0       	ldi	r31, 0x01	; 1
     2a2:	80 81       	ld	r24, Z
     2a4:	91 81       	ldd	r25, Z+1	; 0x01
     2a6:	9c 83       	std	Y+4, r25	; 0x04
     2a8:	8b 83       	std	Y+3, r24	; 0x03
     2aa:	82 81       	ldd	r24, Z+2	; 0x02
     2ac:	93 81       	ldd	r25, Z+3	; 0x03
     2ae:	9e 83       	std	Y+6, r25	; 0x06
     2b0:	8d 83       	std	Y+5, r24	; 0x05
     2b2:	68 94       	set
     2b4:	cc 24       	eor	r12, r12
     2b6:	c1 f8       	bld	r12, 1
     2b8:	d1 2c       	mov	r13, r1
     2ba:	ee 24       	eor	r14, r14
     2bc:	e3 94       	inc	r14
     2be:	f1 2c       	mov	r15, r1
     2c0:	03 e0       	ldi	r16, 0x03	; 3
     2c2:	10 e0       	ldi	r17, 0x00	; 0
     2c4:	30 99       	sbic	0x06, 0	; 6
     2c6:	0e c0       	rjmp	.+28     	; 0x2e4 <joystickSampler_task+0x54>
     2c8:	1a 82       	std	Y+2, r1	; 0x02
     2ca:	19 82       	std	Y+1, r1	; 0x01
     2cc:	20 e0       	ldi	r18, 0x00	; 0
     2ce:	4f ef       	ldi	r20, 0xFF	; 255
     2d0:	5f ef       	ldi	r21, 0xFF	; 255
     2d2:	be 01       	movw	r22, r28
     2d4:	6f 5f       	subi	r22, 0xFF	; 255
     2d6:	7f 4f       	sbci	r23, 0xFF	; 255
     2d8:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <inputQueue>
     2dc:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <inputQueue+0x1>
     2e0:	0e 94 67 0a 	call	0x14ce	; 0x14ce <xQueueGenericSend>
     2e4:	31 99       	sbic	0x06, 1	; 6
     2e6:	0e c0       	rjmp	.+28     	; 0x304 <joystickSampler_task+0x74>
     2e8:	da 82       	std	Y+2, r13	; 0x02
     2ea:	c9 82       	std	Y+1, r12	; 0x01
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	4f ef       	ldi	r20, 0xFF	; 255
     2f0:	5f ef       	ldi	r21, 0xFF	; 255
     2f2:	be 01       	movw	r22, r28
     2f4:	6f 5f       	subi	r22, 0xFF	; 255
     2f6:	7f 4f       	sbci	r23, 0xFF	; 255
     2f8:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <inputQueue>
     2fc:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <inputQueue+0x1>
     300:	0e 94 67 0a 	call	0x14ce	; 0x14ce <xQueueGenericSend>
     304:	36 99       	sbic	0x06, 6	; 6
     306:	0e c0       	rjmp	.+28     	; 0x324 <joystickSampler_task+0x94>
     308:	fa 82       	std	Y+2, r15	; 0x02
     30a:	e9 82       	std	Y+1, r14	; 0x01
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	4f ef       	ldi	r20, 0xFF	; 255
     310:	5f ef       	ldi	r21, 0xFF	; 255
     312:	be 01       	movw	r22, r28
     314:	6f 5f       	subi	r22, 0xFF	; 255
     316:	7f 4f       	sbci	r23, 0xFF	; 255
     318:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <inputQueue>
     31c:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <inputQueue+0x1>
     320:	0e 94 67 0a 	call	0x14ce	; 0x14ce <xQueueGenericSend>
     324:	37 99       	sbic	0x06, 7	; 6
     326:	0e c0       	rjmp	.+28     	; 0x344 <joystickSampler_task+0xb4>
     328:	1a 83       	std	Y+2, r17	; 0x02
     32a:	09 83       	std	Y+1, r16	; 0x01
     32c:	20 e0       	ldi	r18, 0x00	; 0
     32e:	4f ef       	ldi	r20, 0xFF	; 255
     330:	5f ef       	ldi	r21, 0xFF	; 255
     332:	be 01       	movw	r22, r28
     334:	6f 5f       	subi	r22, 0xFF	; 255
     336:	7f 4f       	sbci	r23, 0xFF	; 255
     338:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <inputQueue>
     33c:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <inputQueue+0x1>
     340:	0e 94 67 0a 	call	0x14ce	; 0x14ce <xQueueGenericSend>
     344:	84 e6       	ldi	r24, 0x64	; 100
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <vTaskDelay>
     34c:	bb cf       	rjmp	.-138    	; 0x2c4 <joystickSampler_task+0x34>

0000034e <update>:
     34e:	cf 92       	push	r12
     350:	df 92       	push	r13
     352:	ef 92       	push	r14
     354:	ff 92       	push	r15
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	cd e0       	ldi	r28, 0x0D	; 13
     360:	d3 e0       	ldi	r29, 0x03	; 3
     362:	45 ef       	ldi	r20, 0xF5	; 245
     364:	51 e0       	ldi	r21, 0x01	; 1
     366:	0d e0       	ldi	r16, 0x0D	; 13
     368:	13 e0       	ldi	r17, 0x03	; 3
     36a:	c1 2c       	mov	r12, r1
     36c:	d1 2c       	mov	r13, r1
     36e:	61 e0       	ldi	r22, 0x01	; 1
     370:	70 e0       	ldi	r23, 0x00	; 0
     372:	de 01       	movw	r26, r28
     374:	19 82       	std	Y+1, r1	; 0x01
     376:	18 82       	st	Y, r1
     378:	fa 01       	movw	r30, r20
     37a:	8c 2d       	mov	r24, r12
     37c:	9d 2d       	mov	r25, r13
     37e:	21 91       	ld	r18, Z+
     380:	31 91       	ld	r19, Z+
     382:	21 30       	cpi	r18, 0x01	; 1
     384:	31 05       	cpc	r19, r1
     386:	79 f4       	brne	.+30     	; 0x3a6 <update+0x58>
     388:	ed 90       	ld	r14, X+
     38a:	fc 90       	ld	r15, X
     38c:	11 97       	sbiw	r26, 0x01	; 1
     38e:	9b 01       	movw	r18, r22
     390:	08 2e       	mov	r0, r24
     392:	02 c0       	rjmp	.+4      	; 0x398 <update+0x4a>
     394:	22 0f       	add	r18, r18
     396:	33 1f       	adc	r19, r19
     398:	0a 94       	dec	r0
     39a:	e2 f7       	brpl	.-8      	; 0x394 <update+0x46>
     39c:	2e 29       	or	r18, r14
     39e:	3f 29       	or	r19, r15
     3a0:	11 96       	adiw	r26, 0x01	; 1
     3a2:	3c 93       	st	X, r19
     3a4:	2e 93       	st	-X, r18
     3a6:	01 96       	adiw	r24, 0x01	; 1
     3a8:	8a 30       	cpi	r24, 0x0A	; 10
     3aa:	91 05       	cpc	r25, r1
     3ac:	41 f7       	brne	.-48     	; 0x37e <update+0x30>
     3ae:	22 96       	adiw	r28, 0x02	; 2
     3b0:	4c 5e       	subi	r20, 0xEC	; 236
     3b2:	5f 4f       	sbci	r21, 0xFF	; 255
     3b4:	40 17       	cp	r20, r16
     3b6:	51 07       	cpc	r21, r17
     3b8:	e1 f6       	brne	.-72     	; 0x372 <update+0x24>
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	1f 91       	pop	r17
     3c0:	0f 91       	pop	r16
     3c2:	ff 90       	pop	r15
     3c4:	ef 90       	pop	r14
     3c6:	df 90       	pop	r13
     3c8:	cf 90       	pop	r12
     3ca:	08 95       	ret

000003cc <moveCar>:
     3cc:	81 30       	cpi	r24, 0x01	; 1
     3ce:	91 05       	cpc	r25, r1
     3d0:	09 f4       	brne	.+2      	; 0x3d4 <moveCar+0x8>
     3d2:	62 c0       	rjmp	.+196    	; 0x498 <__FUSE_REGION_LENGTH__+0x98>
     3d4:	40 f0       	brcs	.+16     	; 0x3e6 <moveCar+0x1a>
     3d6:	82 30       	cpi	r24, 0x02	; 2
     3d8:	91 05       	cpc	r25, r1
     3da:	09 f4       	brne	.+2      	; 0x3de <moveCar+0x12>
     3dc:	ba c0       	rjmp	.+372    	; 0x552 <__FUSE_REGION_LENGTH__+0x152>
     3de:	03 97       	sbiw	r24, 0x03	; 3
     3e0:	09 f4       	brne	.+2      	; 0x3e4 <moveCar+0x18>
     3e2:	14 c1       	rjmp	.+552    	; 0x60c <__FUSE_REGION_LENGTH__+0x20c>
     3e4:	08 95       	ret
     3e6:	db 01       	movw	r26, r22
     3e8:	12 96       	adiw	r26, 0x02	; 2
     3ea:	2d 91       	ld	r18, X+
     3ec:	3c 91       	ld	r19, X
     3ee:	13 97       	sbiw	r26, 0x03	; 3
     3f0:	c9 01       	movw	r24, r18
     3f2:	01 96       	adiw	r24, 0x01	; 1
     3f4:	8a 30       	cpi	r24, 0x0A	; 10
     3f6:	91 05       	cpc	r25, r1
     3f8:	08 f0       	brcs	.+2      	; 0x3fc <moveCar+0x30>
     3fa:	63 c1       	rjmp	.+710    	; 0x6c2 <__FUSE_REGION_LENGTH__+0x2c2>
     3fc:	4d 91       	ld	r20, X+
     3fe:	5c 91       	ld	r21, X
     400:	da 01       	movw	r26, r20
     402:	aa 0f       	add	r26, r26
     404:	bb 1f       	adc	r27, r27
     406:	fa 01       	movw	r30, r20
     408:	ee 0f       	add	r30, r30
     40a:	ff 1f       	adc	r31, r31
     40c:	ee 0f       	add	r30, r30
     40e:	ff 1f       	adc	r31, r31
     410:	ee 0f       	add	r30, r30
     412:	ff 1f       	adc	r31, r31
     414:	ea 0f       	add	r30, r26
     416:	fb 1f       	adc	r31, r27
     418:	e8 0f       	add	r30, r24
     41a:	f9 1f       	adc	r31, r25
     41c:	ee 0f       	add	r30, r30
     41e:	ff 1f       	adc	r31, r31
     420:	eb 50       	subi	r30, 0x0B	; 11
     422:	fe 4f       	sbci	r31, 0xFE	; 254
     424:	80 81       	ld	r24, Z
     426:	91 81       	ldd	r25, Z+1	; 0x01
     428:	89 2b       	or	r24, r25
     42a:	09 f0       	breq	.+2      	; 0x42e <__FUSE_REGION_LENGTH__+0x2e>
     42c:	4a c1       	rjmp	.+660    	; 0x6c2 <__FUSE_REGION_LENGTH__+0x2c2>
     42e:	fd 01       	movw	r30, r26
     430:	44 0f       	add	r20, r20
     432:	55 1f       	adc	r21, r21
     434:	44 0f       	add	r20, r20
     436:	55 1f       	adc	r21, r21
     438:	44 0f       	add	r20, r20
     43a:	55 1f       	adc	r21, r21
     43c:	e4 0f       	add	r30, r20
     43e:	f5 1f       	adc	r31, r21
     440:	e2 0f       	add	r30, r18
     442:	f3 1f       	adc	r31, r19
     444:	ee 0f       	add	r30, r30
     446:	ff 1f       	adc	r31, r31
     448:	eb 50       	subi	r30, 0x0B	; 11
     44a:	fe 4f       	sbci	r31, 0xFE	; 254
     44c:	11 82       	std	Z+1, r1	; 0x01
     44e:	10 82       	st	Z, r1
     450:	fb 01       	movw	r30, r22
     452:	20 81       	ld	r18, Z
     454:	31 81       	ldd	r19, Z+1	; 0x01
     456:	82 81       	ldd	r24, Z+2	; 0x02
     458:	93 81       	ldd	r25, Z+3	; 0x03
     45a:	01 96       	adiw	r24, 0x01	; 1
     45c:	93 83       	std	Z+3, r25	; 0x03
     45e:	82 83       	std	Z+2, r24	; 0x02
     460:	f9 01       	movw	r30, r18
     462:	ee 0f       	add	r30, r30
     464:	ff 1f       	adc	r31, r31
     466:	22 0f       	add	r18, r18
     468:	33 1f       	adc	r19, r19
     46a:	22 0f       	add	r18, r18
     46c:	33 1f       	adc	r19, r19
     46e:	22 0f       	add	r18, r18
     470:	33 1f       	adc	r19, r19
     472:	e2 0f       	add	r30, r18
     474:	f3 1f       	adc	r31, r19
     476:	e8 0f       	add	r30, r24
     478:	f9 1f       	adc	r31, r25
     47a:	ee 0f       	add	r30, r30
     47c:	ff 1f       	adc	r31, r31
     47e:	eb 50       	subi	r30, 0x0B	; 11
     480:	fe 4f       	sbci	r31, 0xFE	; 254
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	91 83       	std	Z+1, r25	; 0x01
     488:	80 83       	st	Z, r24
     48a:	0e 94 a7 01 	call	0x34e	; 0x34e <update>
     48e:	88 ec       	ldi	r24, 0xC8	; 200
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <vTaskDelay>
     496:	08 95       	ret
     498:	db 01       	movw	r26, r22
     49a:	12 96       	adiw	r26, 0x02	; 2
     49c:	2d 91       	ld	r18, X+
     49e:	3c 91       	ld	r19, X
     4a0:	13 97       	sbiw	r26, 0x03	; 3
     4a2:	21 15       	cp	r18, r1
     4a4:	31 05       	cpc	r19, r1
     4a6:	09 f4       	brne	.+2      	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>
     4a8:	0c c1       	rjmp	.+536    	; 0x6c2 <__FUSE_REGION_LENGTH__+0x2c2>
     4aa:	4d 91       	ld	r20, X+
     4ac:	5c 91       	ld	r21, X
     4ae:	11 97       	sbiw	r26, 0x01	; 1
     4b0:	fa 01       	movw	r30, r20
     4b2:	ee 0f       	add	r30, r30
     4b4:	ff 1f       	adc	r31, r31
     4b6:	ca 01       	movw	r24, r20
     4b8:	88 0f       	add	r24, r24
     4ba:	99 1f       	adc	r25, r25
     4bc:	88 0f       	add	r24, r24
     4be:	99 1f       	adc	r25, r25
     4c0:	88 0f       	add	r24, r24
     4c2:	99 1f       	adc	r25, r25
     4c4:	e8 0f       	add	r30, r24
     4c6:	f9 1f       	adc	r31, r25
     4c8:	e2 0f       	add	r30, r18
     4ca:	f3 1f       	adc	r31, r19
     4cc:	ee 0f       	add	r30, r30
     4ce:	ff 1f       	adc	r31, r31
     4d0:	ed 50       	subi	r30, 0x0D	; 13
     4d2:	fe 4f       	sbci	r31, 0xFE	; 254
     4d4:	80 81       	ld	r24, Z
     4d6:	91 81       	ldd	r25, Z+1	; 0x01
     4d8:	89 2b       	or	r24, r25
     4da:	09 f0       	breq	.+2      	; 0x4de <__FUSE_REGION_LENGTH__+0xde>
     4dc:	f2 c0       	rjmp	.+484    	; 0x6c2 <__FUSE_REGION_LENGTH__+0x2c2>
     4de:	fa 01       	movw	r30, r20
     4e0:	ee 0f       	add	r30, r30
     4e2:	ff 1f       	adc	r31, r31
     4e4:	44 0f       	add	r20, r20
     4e6:	55 1f       	adc	r21, r21
     4e8:	44 0f       	add	r20, r20
     4ea:	55 1f       	adc	r21, r21
     4ec:	44 0f       	add	r20, r20
     4ee:	55 1f       	adc	r21, r21
     4f0:	e4 0f       	add	r30, r20
     4f2:	f5 1f       	adc	r31, r21
     4f4:	e2 0f       	add	r30, r18
     4f6:	f3 1f       	adc	r31, r19
     4f8:	ee 0f       	add	r30, r30
     4fa:	ff 1f       	adc	r31, r31
     4fc:	eb 50       	subi	r30, 0x0B	; 11
     4fe:	fe 4f       	sbci	r31, 0xFE	; 254
     500:	11 82       	std	Z+1, r1	; 0x01
     502:	10 82       	st	Z, r1
     504:	12 96       	adiw	r26, 0x02	; 2
     506:	8d 91       	ld	r24, X+
     508:	9c 91       	ld	r25, X
     50a:	13 97       	sbiw	r26, 0x03	; 3
     50c:	01 97       	sbiw	r24, 0x01	; 1
     50e:	13 96       	adiw	r26, 0x03	; 3
     510:	9c 93       	st	X, r25
     512:	8e 93       	st	-X, r24
     514:	12 97       	sbiw	r26, 0x02	; 2
     516:	2d 91       	ld	r18, X+
     518:	3c 91       	ld	r19, X
     51a:	f9 01       	movw	r30, r18
     51c:	ee 0f       	add	r30, r30
     51e:	ff 1f       	adc	r31, r31
     520:	22 0f       	add	r18, r18
     522:	33 1f       	adc	r19, r19
     524:	22 0f       	add	r18, r18
     526:	33 1f       	adc	r19, r19
     528:	22 0f       	add	r18, r18
     52a:	33 1f       	adc	r19, r19
     52c:	e2 0f       	add	r30, r18
     52e:	f3 1f       	adc	r31, r19
     530:	e8 0f       	add	r30, r24
     532:	f9 1f       	adc	r31, r25
     534:	ee 0f       	add	r30, r30
     536:	ff 1f       	adc	r31, r31
     538:	eb 50       	subi	r30, 0x0B	; 11
     53a:	fe 4f       	sbci	r31, 0xFE	; 254
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	91 83       	std	Z+1, r25	; 0x01
     542:	80 83       	st	Z, r24
     544:	0e 94 a7 01 	call	0x34e	; 0x34e <update>
     548:	88 ec       	ldi	r24, 0xC8	; 200
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <vTaskDelay>
     550:	08 95       	ret
     552:	fb 01       	movw	r30, r22
     554:	20 81       	ld	r18, Z
     556:	31 81       	ldd	r19, Z+1	; 0x01
     558:	c9 01       	movw	r24, r18
     55a:	01 96       	adiw	r24, 0x01	; 1
     55c:	8e 30       	cpi	r24, 0x0E	; 14
     55e:	91 05       	cpc	r25, r1
     560:	08 f0       	brcs	.+2      	; 0x564 <__FUSE_REGION_LENGTH__+0x164>
     562:	af c0       	rjmp	.+350    	; 0x6c2 <__FUSE_REGION_LENGTH__+0x2c2>
     564:	42 81       	ldd	r20, Z+2	; 0x02
     566:	53 81       	ldd	r21, Z+3	; 0x03
     568:	fc 01       	movw	r30, r24
     56a:	ee 0f       	add	r30, r30
     56c:	ff 1f       	adc	r31, r31
     56e:	88 0f       	add	r24, r24
     570:	99 1f       	adc	r25, r25
     572:	88 0f       	add	r24, r24
     574:	99 1f       	adc	r25, r25
     576:	88 0f       	add	r24, r24
     578:	99 1f       	adc	r25, r25
     57a:	e8 0f       	add	r30, r24
     57c:	f9 1f       	adc	r31, r25
     57e:	e4 0f       	add	r30, r20
     580:	f5 1f       	adc	r31, r21
     582:	ee 0f       	add	r30, r30
     584:	ff 1f       	adc	r31, r31
     586:	eb 50       	subi	r30, 0x0B	; 11
     588:	fe 4f       	sbci	r31, 0xFE	; 254
     58a:	80 81       	ld	r24, Z
     58c:	91 81       	ldd	r25, Z+1	; 0x01
     58e:	89 2b       	or	r24, r25
     590:	09 f0       	breq	.+2      	; 0x594 <__FUSE_REGION_LENGTH__+0x194>
     592:	97 c0       	rjmp	.+302    	; 0x6c2 <__FUSE_REGION_LENGTH__+0x2c2>
     594:	c9 01       	movw	r24, r18
     596:	88 0f       	add	r24, r24
     598:	99 1f       	adc	r25, r25
     59a:	22 0f       	add	r18, r18
     59c:	33 1f       	adc	r19, r19
     59e:	22 0f       	add	r18, r18
     5a0:	33 1f       	adc	r19, r19
     5a2:	22 0f       	add	r18, r18
     5a4:	33 1f       	adc	r19, r19
     5a6:	28 0f       	add	r18, r24
     5a8:	39 1f       	adc	r19, r25
     5aa:	f9 01       	movw	r30, r18
     5ac:	e4 0f       	add	r30, r20
     5ae:	f5 1f       	adc	r31, r21
     5b0:	ee 0f       	add	r30, r30
     5b2:	ff 1f       	adc	r31, r31
     5b4:	eb 50       	subi	r30, 0x0B	; 11
     5b6:	fe 4f       	sbci	r31, 0xFE	; 254
     5b8:	11 82       	std	Z+1, r1	; 0x01
     5ba:	10 82       	st	Z, r1
     5bc:	db 01       	movw	r26, r22
     5be:	8d 91       	ld	r24, X+
     5c0:	9c 91       	ld	r25, X
     5c2:	11 97       	sbiw	r26, 0x01	; 1
     5c4:	01 96       	adiw	r24, 0x01	; 1
     5c6:	11 96       	adiw	r26, 0x01	; 1
     5c8:	9c 93       	st	X, r25
     5ca:	8e 93       	st	-X, r24
     5cc:	12 96       	adiw	r26, 0x02	; 2
     5ce:	ed 91       	ld	r30, X+
     5d0:	fc 91       	ld	r31, X
     5d2:	13 97       	sbiw	r26, 0x03	; 3
     5d4:	9c 01       	movw	r18, r24
     5d6:	22 0f       	add	r18, r18
     5d8:	33 1f       	adc	r19, r19
     5da:	88 0f       	add	r24, r24
     5dc:	99 1f       	adc	r25, r25
     5de:	88 0f       	add	r24, r24
     5e0:	99 1f       	adc	r25, r25
     5e2:	88 0f       	add	r24, r24
     5e4:	99 1f       	adc	r25, r25
     5e6:	82 0f       	add	r24, r18
     5e8:	93 1f       	adc	r25, r19
     5ea:	e8 0f       	add	r30, r24
     5ec:	f9 1f       	adc	r31, r25
     5ee:	ee 0f       	add	r30, r30
     5f0:	ff 1f       	adc	r31, r31
     5f2:	eb 50       	subi	r30, 0x0B	; 11
     5f4:	fe 4f       	sbci	r31, 0xFE	; 254
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	91 83       	std	Z+1, r25	; 0x01
     5fc:	80 83       	st	Z, r24
     5fe:	0e 94 a7 01 	call	0x34e	; 0x34e <update>
     602:	88 ec       	ldi	r24, 0xC8	; 200
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <vTaskDelay>
     60a:	08 95       	ret
     60c:	fb 01       	movw	r30, r22
     60e:	20 81       	ld	r18, Z
     610:	31 81       	ldd	r19, Z+1	; 0x01
     612:	21 15       	cp	r18, r1
     614:	31 05       	cpc	r19, r1
     616:	09 f4       	brne	.+2      	; 0x61a <__FUSE_REGION_LENGTH__+0x21a>
     618:	54 c0       	rjmp	.+168    	; 0x6c2 <__FUSE_REGION_LENGTH__+0x2c2>
     61a:	42 81       	ldd	r20, Z+2	; 0x02
     61c:	53 81       	ldd	r21, Z+3	; 0x03
     61e:	c9 01       	movw	r24, r18
     620:	01 97       	sbiw	r24, 0x01	; 1
     622:	fc 01       	movw	r30, r24
     624:	ee 0f       	add	r30, r30
     626:	ff 1f       	adc	r31, r31
     628:	88 0f       	add	r24, r24
     62a:	99 1f       	adc	r25, r25
     62c:	88 0f       	add	r24, r24
     62e:	99 1f       	adc	r25, r25
     630:	88 0f       	add	r24, r24
     632:	99 1f       	adc	r25, r25
     634:	e8 0f       	add	r30, r24
     636:	f9 1f       	adc	r31, r25
     638:	e4 0f       	add	r30, r20
     63a:	f5 1f       	adc	r31, r21
     63c:	ee 0f       	add	r30, r30
     63e:	ff 1f       	adc	r31, r31
     640:	eb 50       	subi	r30, 0x0B	; 11
     642:	fe 4f       	sbci	r31, 0xFE	; 254
     644:	80 81       	ld	r24, Z
     646:	91 81       	ldd	r25, Z+1	; 0x01
     648:	89 2b       	or	r24, r25
     64a:	d9 f5       	brne	.+118    	; 0x6c2 <__FUSE_REGION_LENGTH__+0x2c2>
     64c:	c9 01       	movw	r24, r18
     64e:	88 0f       	add	r24, r24
     650:	99 1f       	adc	r25, r25
     652:	22 0f       	add	r18, r18
     654:	33 1f       	adc	r19, r19
     656:	22 0f       	add	r18, r18
     658:	33 1f       	adc	r19, r19
     65a:	22 0f       	add	r18, r18
     65c:	33 1f       	adc	r19, r19
     65e:	28 0f       	add	r18, r24
     660:	39 1f       	adc	r19, r25
     662:	f9 01       	movw	r30, r18
     664:	e4 0f       	add	r30, r20
     666:	f5 1f       	adc	r31, r21
     668:	ee 0f       	add	r30, r30
     66a:	ff 1f       	adc	r31, r31
     66c:	eb 50       	subi	r30, 0x0B	; 11
     66e:	fe 4f       	sbci	r31, 0xFE	; 254
     670:	11 82       	std	Z+1, r1	; 0x01
     672:	10 82       	st	Z, r1
     674:	db 01       	movw	r26, r22
     676:	8d 91       	ld	r24, X+
     678:	9c 91       	ld	r25, X
     67a:	11 97       	sbiw	r26, 0x01	; 1
     67c:	01 97       	sbiw	r24, 0x01	; 1
     67e:	11 96       	adiw	r26, 0x01	; 1
     680:	9c 93       	st	X, r25
     682:	8e 93       	st	-X, r24
     684:	12 96       	adiw	r26, 0x02	; 2
     686:	ed 91       	ld	r30, X+
     688:	fc 91       	ld	r31, X
     68a:	13 97       	sbiw	r26, 0x03	; 3
     68c:	9c 01       	movw	r18, r24
     68e:	22 0f       	add	r18, r18
     690:	33 1f       	adc	r19, r19
     692:	88 0f       	add	r24, r24
     694:	99 1f       	adc	r25, r25
     696:	88 0f       	add	r24, r24
     698:	99 1f       	adc	r25, r25
     69a:	88 0f       	add	r24, r24
     69c:	99 1f       	adc	r25, r25
     69e:	82 0f       	add	r24, r18
     6a0:	93 1f       	adc	r25, r19
     6a2:	e8 0f       	add	r30, r24
     6a4:	f9 1f       	adc	r31, r25
     6a6:	ee 0f       	add	r30, r30
     6a8:	ff 1f       	adc	r31, r31
     6aa:	eb 50       	subi	r30, 0x0B	; 11
     6ac:	fe 4f       	sbci	r31, 0xFE	; 254
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	91 83       	std	Z+1, r25	; 0x01
     6b4:	80 83       	st	Z, r24
     6b6:	0e 94 a7 01 	call	0x34e	; 0x34e <update>
     6ba:	88 ec       	ldi	r24, 0xC8	; 200
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <vTaskDelay>
     6c2:	08 95       	ret

000006c4 <gameLogic_task>:
     6c4:	cf 93       	push	r28
     6c6:	df 93       	push	r29
     6c8:	00 d0       	rcall	.+0      	; 0x6ca <gameLogic_task+0x6>
     6ca:	00 d0       	rcall	.+0      	; 0x6cc <gameLogic_task+0x8>
     6cc:	00 d0       	rcall	.+0      	; 0x6ce <gameLogic_task+0xa>
     6ce:	cd b7       	in	r28, 0x3d	; 61
     6d0:	de b7       	in	r29, 0x3e	; 62
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	4f ef       	ldi	r20, 0xFF	; 255
     6d6:	5f ef       	ldi	r21, 0xFF	; 255
     6d8:	be 01       	movw	r22, r28
     6da:	6f 5f       	subi	r22, 0xFF	; 255
     6dc:	7f 4f       	sbci	r23, 0xFF	; 255
     6de:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <inputQueue>
     6e2:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <inputQueue+0x1>
     6e6:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <xQueueGenericReceive>
     6ea:	88 23       	and	r24, r24
     6ec:	31 f0       	breq	.+12     	; 0x6fa <gameLogic_task+0x36>
     6ee:	61 ef       	ldi	r22, 0xF1	; 241
     6f0:	71 e0       	ldi	r23, 0x01	; 1
     6f2:	89 81       	ldd	r24, Y+1	; 0x01
     6f4:	9a 81       	ldd	r25, Y+2	; 0x02
     6f6:	0e 94 e6 01 	call	0x3cc	; 0x3cc <moveCar>
     6fa:	86 e4       	ldi	r24, 0x46	; 70
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <vTaskDelay>
     702:	e7 cf       	rjmp	.-50     	; 0x6d2 <gameLogic_task+0xe>

00000704 <displayUpdater_task>:
     704:	0e 94 a7 01 	call	0x34e	; 0x34e <update>
     708:	8c e3       	ldi	r24, 0x3C	; 60
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <vTaskDelay>
     710:	f9 cf       	rjmp	.-14     	; 0x704 <displayUpdater_task>

00000712 <startup_task>:
     712:	e5 ef       	ldi	r30, 0xF5	; 245
     714:	f1 e0       	ldi	r31, 0x01	; 1
     716:	2d e0       	ldi	r18, 0x0D	; 13
     718:	33 e0       	ldi	r19, 0x03	; 3
     71a:	09 c0       	rjmp	.+18     	; 0x72e <startup_task+0x1c>
     71c:	11 92       	st	Z+, r1
     71e:	11 92       	st	Z+, r1
     720:	e8 17       	cp	r30, r24
     722:	f9 07       	cpc	r31, r25
     724:	d9 f7       	brne	.-10     	; 0x71c <startup_task+0xa>
     726:	fc 01       	movw	r30, r24
     728:	28 17       	cp	r18, r24
     72a:	39 07       	cpc	r19, r25
     72c:	19 f0       	breq	.+6      	; 0x734 <startup_task+0x22>
     72e:	cf 01       	movw	r24, r30
     730:	44 96       	adiw	r24, 0x14	; 20
     732:	f4 cf       	rjmp	.-24     	; 0x71c <startup_task+0xa>
     734:	e1 ef       	ldi	r30, 0xF1	; 241
     736:	f1 e0       	ldi	r31, 0x01	; 1
     738:	86 e0       	ldi	r24, 0x06	; 6
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	91 83       	std	Z+1, r25	; 0x01
     73e:	80 83       	st	Z, r24
     740:	89 e0       	ldi	r24, 0x09	; 9
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	93 83       	std	Z+3, r25	; 0x03
     746:	82 83       	std	Z+2, r24	; 0x02
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <myMatrix+0x8b>
     750:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <myMatrix+0x8a>
     754:	0e 94 a7 01 	call	0x34e	; 0x34e <update>
     758:	61 e0       	ldi	r22, 0x01	; 1
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <vTaskSetApplicationTaskTag>
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	0e 94 08 0b 	call	0x1610	; 0x1610 <xQueueCreateMutex>
     76a:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <xMutex+0x1>
     76e:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <xMutex>
     772:	e1 2c       	mov	r14, r1
     774:	f1 2c       	mov	r15, r1
     776:	04 e0       	ldi	r16, 0x04	; 4
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	45 e5       	ldi	r20, 0x55	; 85
     77e:	50 e0       	ldi	r21, 0x00	; 0
     780:	6e e0       	ldi	r22, 0x0E	; 14
     782:	71 e0       	ldi	r23, 0x01	; 1
     784:	8d e5       	ldi	r24, 0x5D	; 93
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	0e 94 8b 0c 	call	0x1916	; 0x1916 <xTaskCreate>
     78c:	06 e0       	ldi	r16, 0x06	; 6
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	45 e5       	ldi	r20, 0x55	; 85
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	68 e1       	ldi	r22, 0x18	; 24
     798:	71 e0       	ldi	r23, 0x01	; 1
     79a:	82 e8       	ldi	r24, 0x82	; 130
     79c:	93 e0       	ldi	r25, 0x03	; 3
     79e:	0e 94 8b 0c 	call	0x1916	; 0x1916 <xTaskCreate>
     7a2:	03 e0       	ldi	r16, 0x03	; 3
     7a4:	20 e0       	ldi	r18, 0x00	; 0
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	45 e5       	ldi	r20, 0x55	; 85
     7aa:	50 e0       	ldi	r21, 0x00	; 0
     7ac:	68 e2       	ldi	r22, 0x28	; 40
     7ae:	71 e0       	ldi	r23, 0x01	; 1
     7b0:	82 e6       	ldi	r24, 0x62	; 98
     7b2:	93 e0       	ldi	r25, 0x03	; 3
     7b4:	0e 94 8b 0c 	call	0x1916	; 0x1916 <xTaskCreate>
     7b8:	02 e0       	ldi	r16, 0x02	; 2
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	45 e5       	ldi	r20, 0x55	; 85
     7c0:	50 e0       	ldi	r21, 0x00	; 0
     7c2:	63 e3       	ldi	r22, 0x33	; 51
     7c4:	71 e0       	ldi	r23, 0x01	; 1
     7c6:	88 e4       	ldi	r24, 0x48	; 72
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	0e 94 8b 0c 	call	0x1916	; 0x1916 <xTaskCreate>
     7ce:	6f e0       	ldi	r22, 0x0F	; 15
     7d0:	84 e4       	ldi	r24, 0x44	; 68
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	0e 94 a5 04 	call	0x94a	; 0x94a <com_send_bytes>
     7d8:	ff cf       	rjmp	.-2      	; 0x7d8 <startup_task+0xc6>

000007da <prepare_shiftregister>:

// Prepare shift register setting SER = 1
void prepare_shiftregister()
{
	// Set SER to 1
	PORTD |= _BV(PORTD2);
     7da:	5a 9a       	sbi	0x0b, 2	; 11
     7dc:	08 95       	ret

000007de <clock_shift_register_and_prepare_for_next_col>:

// clock shift-register
void clock_shift_register_and_prepare_for_next_col()
{
	// one SCK pulse
	PORTD |= _BV(PORTD5);
     7de:	5d 9a       	sbi	0x0b, 5	; 11
	PORTD &= ~_BV(PORTD5);
     7e0:	5d 98       	cbi	0x0b, 5	; 11
	
	// one RCK pulse
	PORTD |= _BV(PORTD4);
     7e2:	5c 9a       	sbi	0x0b, 4	; 11
	PORTD &= ~_BV(PORTD4);
     7e4:	5c 98       	cbi	0x0b, 4	; 11
	
	// Set SER to 0 - for next column
	PORTD &= ~_BV(PORTD2);
     7e6:	5a 98       	cbi	0x0b, 2	; 11
     7e8:	08 95       	ret

000007ea <load_col_value>:
}

// Load column value for column to show
void load_col_value(uint16_t col_value)
{
	PORTA = ~(col_value & 0xFF);
     7ea:	80 95       	com	r24
     7ec:	82 b9       	out	0x02, r24	; 2
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
     7ee:	85 b1       	in	r24, 0x05	; 5
     7f0:	83 60       	ori	r24, 0x03	; 3
     7f2:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~((col_value >> 8) & 0x03);
     7f4:	85 b1       	in	r24, 0x05	; 5
     7f6:	93 70       	andi	r25, 0x03	; 3
     7f8:	90 95       	com	r25
     7fa:	89 23       	and	r24, r25
     7fc:	85 b9       	out	0x05, r24	; 5
     7fe:	08 95       	ret

00000800 <handle_display>:
}

//-----------------------------------------
void handle_display(void)
{
     800:	cf 93       	push	r28
	static uint8_t col = 0;
	
	if (col == 0)
     802:	c0 91 62 01 	lds	r28, 0x0162	; 0x800162 <__data_end>
     806:	c1 11       	cpse	r28, r1
     808:	0e c0       	rjmp	.+28     	; 0x826 <handle_display+0x26>
	{
		prepare_shiftregister();
     80a:	0e 94 ed 03 	call	0x7da	; 0x7da <prepare_shiftregister>
	}
	
	load_col_value(frame_buf[col]);
     80e:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <frame_buf>
     812:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <frame_buf+0x1>
     816:	0e 94 f5 03 	call	0x7ea	; 0x7ea <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
     81a:	0e 94 ef 03 	call	0x7de	; 0x7de <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	col++;
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
     824:	14 c0       	rjmp	.+40     	; 0x84e <handle_display+0x4e>
	if (col == 0)
	{
		prepare_shiftregister();
	}
	
	load_col_value(frame_buf[col]);
     826:	ec 2f       	mov	r30, r28
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	ee 0f       	add	r30, r30
     82c:	ff 1f       	adc	r31, r31
     82e:	e3 5f       	subi	r30, 0xF3	; 243
     830:	fc 4f       	sbci	r31, 0xFC	; 252
     832:	80 81       	ld	r24, Z
     834:	91 81       	ldd	r25, Z+1	; 0x01
     836:	0e 94 f5 03 	call	0x7ea	; 0x7ea <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
     83a:	0e 94 ef 03 	call	0x7de	; 0x7de <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	col++;
     83e:	cf 5f       	subi	r28, 0xFF	; 255
	if (col > 13)
     840:	ce 30       	cpi	r28, 0x0E	; 14
     842:	18 f4       	brcc	.+6      	; 0x84a <handle_display+0x4a>
	load_col_value(frame_buf[col]);
	
	clock_shift_register_and_prepare_for_next_col();
	
	// count column up - prepare for next
	col++;
     844:	c0 93 62 01 	sts	0x0162, r28	; 0x800162 <__data_end>
     848:	02 c0       	rjmp	.+4      	; 0x84e <handle_display+0x4e>
	if (col > 13)
	{
		col = 0;
     84a:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <__data_end>
	}
}
     84e:	cf 91       	pop	r28
     850:	08 95       	ret

00000852 <vApplicationIdleHook>:

//-----------------------------------------
void vApplicationIdleHook( void )
{
     852:	08 95       	ret

00000854 <main>:
}

//-----------------------------------------
int main(void)
{	
	init_board();
     854:	0e 94 ae 04 	call	0x95c	; 0x95c <init_board>
	inputQueue = xQueueCreate(20, sizeof(struct input));
     858:	40 e0       	ldi	r20, 0x00	; 0
     85a:	66 e0       	ldi	r22, 0x06	; 6
     85c:	84 e1       	ldi	r24, 0x14	; 20
     85e:	0e 94 36 0a 	call	0x146c	; 0x146c <xQueueGenericCreate>
     862:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <inputQueue+0x1>
     866:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <inputQueue>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
     86a:	5e 98       	cbi	0x0b, 6	; 11
	
	//Create task to blink gpio
	BaseType_t t1 = xTaskCreate(startup_task, (const char *)"Startup", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
     86c:	e1 2c       	mov	r14, r1
     86e:	f1 2c       	mov	r15, r1
     870:	00 e0       	ldi	r16, 0x00	; 0
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	45 e5       	ldi	r20, 0x55	; 85
     878:	50 e0       	ldi	r21, 0x00	; 0
     87a:	64 e5       	ldi	r22, 0x54	; 84
     87c:	71 e0       	ldi	r23, 0x01	; 1
     87e:	89 e8       	ldi	r24, 0x89	; 137
     880:	93 e0       	ldi	r25, 0x03	; 3
     882:	0e 94 8b 0c 	call	0x1916	; 0x1916 <xTaskCreate>

	// Start the display handler timer
	init_display_timer(handle_display);
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	94 e0       	ldi	r25, 0x04	; 4
     88a:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <init_display_timer>
	
	sei();
     88e:	78 94       	sei
	
	//Start the scheduler
	vTaskStartScheduler();
     890:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <vTaskStartScheduler>
	
	//Should never reach here
	while (1)
	{
	}
     894:	ff cf       	rjmp	.-2      	; 0x894 <main+0x40>

00000896 <_com_call_back>:
	}
}

// ----------------------------------------------------------------------------------------------------------------------
void init_com(QueueHandle_t x_rx_queue) {
	_x_rx_com_queue = x_rx_queue;
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	00 d0       	rcall	.+0      	; 0x89c <_com_call_back+0x6>
     89c:	cd b7       	in	r28, 0x3d	; 61
     89e:	de b7       	in	r29, 0x3e	; 62
     8a0:	6a 83       	std	Y+2, r22	; 0x02
     8a2:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <_x_rx_com_queue>
     8a6:	90 91 74 03 	lds	r25, 0x0374	; 0x800374 <_x_rx_com_queue+0x1>
     8aa:	00 97       	sbiw	r24, 0x00	; 0
     8ac:	71 f0       	breq	.+28     	; 0x8ca <_com_call_back+0x34>
     8ae:	19 82       	std	Y+1, r1	; 0x01
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	ae 01       	movw	r20, r28
     8b4:	4f 5f       	subi	r20, 0xFF	; 255
     8b6:	5f 4f       	sbci	r21, 0xFF	; 255
     8b8:	be 01       	movw	r22, r28
     8ba:	6e 5f       	subi	r22, 0xFE	; 254
     8bc:	7f 4f       	sbci	r23, 0xFF	; 255
     8be:	0e 94 22 0b 	call	0x1644	; 0x1644 <xQueueGenericSendFromISR>
     8c2:	89 81       	ldd	r24, Y+1	; 0x01
     8c4:	81 11       	cpse	r24, r1
     8c6:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <vPortYield>
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	08 95       	ret

000008d4 <init_display_timer>:
}

// ----------------------------------------------------------------------------------------------------------------------
void init_display_timer(display_callback_ptr_t cb)
{
	cb_ptr = cb;
     8d4:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <cb_ptr+0x1>
     8d8:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <cb_ptr>
	
	// Setup timer T0 to CTC, ~1309 Hz
	OCR0A = 10;
     8dc:	8a e0       	ldi	r24, 0x0A	; 10
     8de:	87 bd       	out	0x27, r24	; 39
	TCCR0A |= _BV(WGM01); // Mode 2
     8e0:	84 b5       	in	r24, 0x24	; 36
     8e2:	82 60       	ori	r24, 0x02	; 2
     8e4:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= _BV(OCIE0A); // Enable interrupt
     8e6:	ee e6       	ldi	r30, 0x6E	; 110
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	80 81       	ld	r24, Z
     8ec:	82 60       	ori	r24, 0x02	; 2
     8ee:	80 83       	st	Z, r24
	TCCR0B |= _BV(CS00) | _BV(CS02); // Prescaler 1024 - and start timer
     8f0:	85 b5       	in	r24, 0x25	; 37
     8f2:	85 60       	ori	r24, 0x05	; 5
     8f4:	85 bd       	out	0x25, r24	; 37
     8f6:	08 95       	ret

000008f8 <__vector_16>:
}

// ----------------------------------------------------------------------------------------------------------------------
//ISR for display timer
ISR(TIMER0_COMPA_vect)
{
     8f8:	1f 92       	push	r1
     8fa:	0f 92       	push	r0
     8fc:	0f b6       	in	r0, 0x3f	; 63
     8fe:	0f 92       	push	r0
     900:	11 24       	eor	r1, r1
     902:	2f 93       	push	r18
     904:	3f 93       	push	r19
     906:	4f 93       	push	r20
     908:	5f 93       	push	r21
     90a:	6f 93       	push	r22
     90c:	7f 93       	push	r23
     90e:	8f 93       	push	r24
     910:	9f 93       	push	r25
     912:	af 93       	push	r26
     914:	bf 93       	push	r27
     916:	ef 93       	push	r30
     918:	ff 93       	push	r31
	if (cb_ptr)
     91a:	e0 91 71 03 	lds	r30, 0x0371	; 0x800371 <cb_ptr>
     91e:	f0 91 72 03 	lds	r31, 0x0372	; 0x800372 <cb_ptr+0x1>
     922:	30 97       	sbiw	r30, 0x00	; 0
     924:	09 f0       	breq	.+2      	; 0x928 <__stack+0x29>
	{
		cb_ptr();
     926:	09 95       	icall
	}
}
     928:	ff 91       	pop	r31
     92a:	ef 91       	pop	r30
     92c:	bf 91       	pop	r27
     92e:	af 91       	pop	r26
     930:	9f 91       	pop	r25
     932:	8f 91       	pop	r24
     934:	7f 91       	pop	r23
     936:	6f 91       	pop	r22
     938:	5f 91       	pop	r21
     93a:	4f 91       	pop	r20
     93c:	3f 91       	pop	r19
     93e:	2f 91       	pop	r18
     940:	0f 90       	pop	r0
     942:	0f be       	out	0x3f, r0	; 63
     944:	0f 90       	pop	r0
     946:	1f 90       	pop	r1
     948:	18 95       	reti

0000094a <com_send_bytes>:

// ----------------------------------------------------------------------------------------------------------------------
void com_send_bytes(uint8_t *bytes, uint8_t len) {
     94a:	46 2f       	mov	r20, r22
	serial_send_bytes(_com_serial_instance, bytes, len);
     94c:	bc 01       	movw	r22, r24
     94e:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <_com_serial_instance>
     952:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <_com_serial_instance+0x1>
     956:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <serial_send_bytes>
     95a:	08 95       	ret

0000095c <init_board>:
}

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
     95c:	8f 92       	push	r8
     95e:	9f 92       	push	r9
     960:	af 92       	push	r10
     962:	bf 92       	push	r11
     964:	cf 92       	push	r12
     966:	df 92       	push	r13
     968:	ef 92       	push	r14
     96a:	0f 93       	push	r16
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
     96c:	8e e4       	ldi	r24, 0x4E	; 78
     96e:	93 e0       	ldi	r25, 0x03	; 3
     970:	0e 94 07 05 	call	0xa0e	; 0xa0e <buffer_init>
	buffer_init(&_com_tx_buffer);
     974:	8b e2       	ldi	r24, 0x2B	; 43
     976:	93 e0       	ldi	r25, 0x03	; 3
     978:	0e 94 07 05 	call	0xa0e	; 0xa0e <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
     97c:	0f 2e       	mov	r0, r31
     97e:	fb e4       	ldi	r31, 0x4B	; 75
     980:	8f 2e       	mov	r8, r31
     982:	f4 e0       	ldi	r31, 0x04	; 4
     984:	9f 2e       	mov	r9, r31
     986:	f0 2d       	mov	r31, r0
     988:	0f 2e       	mov	r0, r31
     98a:	fb e2       	ldi	r31, 0x2B	; 43
     98c:	af 2e       	mov	r10, r31
     98e:	f3 e0       	ldi	r31, 0x03	; 3
     990:	bf 2e       	mov	r11, r31
     992:	f0 2d       	mov	r31, r0
     994:	0f 2e       	mov	r0, r31
     996:	fe e4       	ldi	r31, 0x4E	; 78
     998:	cf 2e       	mov	r12, r31
     99a:	f3 e0       	ldi	r31, 0x03	; 3
     99c:	df 2e       	mov	r13, r31
     99e:	f0 2d       	mov	r31, r0
     9a0:	e1 2c       	mov	r14, r1
     9a2:	00 e0       	ldi	r16, 0x00	; 0
     9a4:	23 e0       	ldi	r18, 0x03	; 3
     9a6:	40 e0       	ldi	r20, 0x00	; 0
     9a8:	52 ec       	ldi	r21, 0xC2	; 194
     9aa:	61 e0       	ldi	r22, 0x01	; 1
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	0e 94 68 07 	call	0xed0	; 0xed0 <serial_new_instance>
     9b4:	90 93 76 03 	sts	0x0376, r25	; 0x800376 <_com_serial_instance+0x1>
     9b8:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <_com_serial_instance>
	
	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
     9bc:	88 b1       	in	r24, 0x08	; 8
     9be:	83 6c       	ori	r24, 0xC3	; 195
     9c0:	88 b9       	out	0x08, r24	; 8
	PORTD |= _BV(PORTD3);
     9c2:	5b 9a       	sbi	0x0b, 3	; 11
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
     9c4:	8a b1       	in	r24, 0x0a	; 10
     9c6:	84 67       	ori	r24, 0x74	; 116
     9c8:	8a b9       	out	0x0a, r24	; 10
	// G (enable output) high
	PORTD |= _BV(PORTD6);
     9ca:	5e 9a       	sbi	0x0b, 6	; 11
	
	// Column pins to output
	DDRA |= 0xFF;
     9cc:	81 b1       	in	r24, 0x01	; 1
     9ce:	8f ef       	ldi	r24, 0xFF	; 255
     9d0:	81 b9       	out	0x01, r24	; 1
	DDRB |= _BV(DDB0) | _BV(DDB1);
     9d2:	84 b1       	in	r24, 0x04	; 4
     9d4:	83 60       	ori	r24, 0x03	; 3
     9d6:	84 b9       	out	0x04, r24	; 4
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
     9d8:	84 b1       	in	r24, 0x04	; 4
     9da:	8c 63       	ori	r24, 0x3C	; 60
     9dc:	84 b9       	out	0x04, r24	; 4
}
     9de:	0f 91       	pop	r16
     9e0:	ef 90       	pop	r14
     9e2:	df 90       	pop	r13
     9e4:	cf 90       	pop	r12
     9e6:	bf 90       	pop	r11
     9e8:	af 90       	pop	r10
     9ea:	9f 90       	pop	r9
     9ec:	8f 90       	pop	r8
     9ee:	08 95       	ret

000009f0 <switch_in>:
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
		PORTB &= 0b11000011;
     9f0:	95 b1       	in	r25, 0x05	; 5
     9f2:	93 7c       	andi	r25, 0xC3	; 195
     9f4:	95 b9       	out	0x05, r25	; 5
		PORTB |= task_no << 2;
     9f6:	25 b1       	in	r18, 0x05	; 5
     9f8:	34 e0       	ldi	r19, 0x04	; 4
     9fa:	83 9f       	mul	r24, r19
     9fc:	c0 01       	movw	r24, r0
     9fe:	11 24       	eor	r1, r1
     a00:	82 2b       	or	r24, r18
     a02:	85 b9       	out	0x05, r24	; 5
     a04:	08 95       	ret

00000a06 <switch_out>:
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
		PORTB &= 0b11000011;
     a06:	85 b1       	in	r24, 0x05	; 5
     a08:	83 7c       	andi	r24, 0xC3	; 195
     a0a:	85 b9       	out	0x05, r24	; 5
     a0c:	08 95       	ret

00000a0e <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
     a0e:	fc 01       	movw	r30, r24
	buffer->in_i = 0;
     a10:	10 a2       	std	Z+32, r1	; 0x20
	buffer->out_i = 0;
     a12:	11 a2       	std	Z+33, r1	; 0x21
	buffer->no_in_buffer = 0;
     a14:	12 a2       	std	Z+34, r1	; 0x22
     a16:	08 95       	ret

00000a18 <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
     a18:	fc 01       	movw	r30, r24
	if (buffer->no_in_buffer > 0) {
     a1a:	82 a1       	ldd	r24, Z+34	; 0x22
     a1c:	88 23       	and	r24, r24
     a1e:	d9 f0       	breq	.+54     	; 0xa56 <buffer_get_item+0x3e>
		*item = buffer->storage[buffer->out_i];
     a20:	81 a1       	ldd	r24, Z+33	; 0x21
     a22:	df 01       	movw	r26, r30
     a24:	a8 0f       	add	r26, r24
     a26:	b1 1d       	adc	r27, r1
     a28:	8c 91       	ld	r24, X
     a2a:	db 01       	movw	r26, r22
     a2c:	8c 93       	st	X, r24
		buffer->out_i = INCREMENT(buffer->out_i);
     a2e:	21 a1       	ldd	r18, Z+33	; 0x21
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	2f 5f       	subi	r18, 0xFF	; 255
     a34:	3f 4f       	sbci	r19, 0xFF	; 255
     a36:	2f 71       	andi	r18, 0x1F	; 31
     a38:	30 78       	andi	r19, 0x80	; 128
     a3a:	33 23       	and	r19, r19
     a3c:	34 f4       	brge	.+12     	; 0xa4a <buffer_get_item+0x32>
     a3e:	21 50       	subi	r18, 0x01	; 1
     a40:	31 09       	sbc	r19, r1
     a42:	20 6e       	ori	r18, 0xE0	; 224
     a44:	3f 6f       	ori	r19, 0xFF	; 255
     a46:	2f 5f       	subi	r18, 0xFF	; 255
     a48:	3f 4f       	sbci	r19, 0xFF	; 255
     a4a:	21 a3       	std	Z+33, r18	; 0x21
		buffer->no_in_buffer--;
     a4c:	82 a1       	ldd	r24, Z+34	; 0x22
     a4e:	81 50       	subi	r24, 0x01	; 1
     a50:	82 a3       	std	Z+34, r24	; 0x22
		return BUFFER_OK;
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	08 95       	ret
	}
	return BUFFER_EMPTY;
     a56:	81 e0       	ldi	r24, 0x01	; 1
}
     a58:	08 95       	ret

00000a5a <buffer_put_item>:
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
	if (buffer->no_in_buffer<BUFFER_SIZE) {
     a5a:	fc 01       	movw	r30, r24
     a5c:	42 a1       	ldd	r20, Z+34	; 0x22
     a5e:	40 32       	cpi	r20, 0x20	; 32
     a60:	b8 f4       	brcc	.+46     	; 0xa90 <buffer_put_item+0x36>
		buffer->storage[buffer->in_i] = item;
     a62:	20 a1       	ldd	r18, Z+32	; 0x20
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	e2 0f       	add	r30, r18
     a68:	f3 1f       	adc	r31, r19
     a6a:	60 83       	st	Z, r22
		buffer->in_i = INCREMENT(buffer->in_i);
     a6c:	2f 5f       	subi	r18, 0xFF	; 255
     a6e:	3f 4f       	sbci	r19, 0xFF	; 255
     a70:	2f 71       	andi	r18, 0x1F	; 31
     a72:	30 78       	andi	r19, 0x80	; 128
     a74:	33 23       	and	r19, r19
     a76:	34 f4       	brge	.+12     	; 0xa84 <buffer_put_item+0x2a>
     a78:	21 50       	subi	r18, 0x01	; 1
     a7a:	31 09       	sbc	r19, r1
     a7c:	20 6e       	ori	r18, 0xE0	; 224
     a7e:	3f 6f       	ori	r19, 0xFF	; 255
     a80:	2f 5f       	subi	r18, 0xFF	; 255
     a82:	3f 4f       	sbci	r19, 0xFF	; 255
     a84:	fc 01       	movw	r30, r24
     a86:	20 a3       	std	Z+32, r18	; 0x20
		buffer->no_in_buffer++;
     a88:	4f 5f       	subi	r20, 0xFF	; 255
     a8a:	42 a3       	std	Z+34, r20	; 0x22
		return BUFFER_OK;
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 95       	ret
	}
	return BUFFER_FULL;
     a90:	82 e0       	ldi	r24, 0x02	; 2
}
     a92:	08 95       	ret

00000a94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     a94:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a96:	03 96       	adiw	r24, 0x03	; 3
     a98:	92 83       	std	Z+2, r25	; 0x02
     a9a:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     a9c:	2f ef       	ldi	r18, 0xFF	; 255
     a9e:	3f ef       	ldi	r19, 0xFF	; 255
     aa0:	34 83       	std	Z+4, r19	; 0x04
     aa2:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     aa4:	96 83       	std	Z+6, r25	; 0x06
     aa6:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     aa8:	90 87       	std	Z+8, r25	; 0x08
     aaa:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     aac:	10 82       	st	Z, r1
     aae:	08 95       	ret

00000ab0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     ab0:	fc 01       	movw	r30, r24
     ab2:	11 86       	std	Z+9, r1	; 0x09
     ab4:	10 86       	std	Z+8, r1	; 0x08
     ab6:	08 95       	ret

00000ab8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	9c 01       	movw	r18, r24
     abe:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     ac0:	dc 01       	movw	r26, r24
     ac2:	11 96       	adiw	r26, 0x01	; 1
     ac4:	cd 91       	ld	r28, X+
     ac6:	dc 91       	ld	r29, X
     ac8:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     aca:	d3 83       	std	Z+3, r29	; 0x03
     acc:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     ace:	8c 81       	ldd	r24, Y+4	; 0x04
     ad0:	9d 81       	ldd	r25, Y+5	; 0x05
     ad2:	95 83       	std	Z+5, r25	; 0x05
     ad4:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     ad6:	8c 81       	ldd	r24, Y+4	; 0x04
     ad8:	9d 81       	ldd	r25, Y+5	; 0x05
     ada:	dc 01       	movw	r26, r24
     adc:	13 96       	adiw	r26, 0x03	; 3
     ade:	7c 93       	st	X, r23
     ae0:	6e 93       	st	-X, r22
     ae2:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     ae4:	7d 83       	std	Y+5, r23	; 0x05
     ae6:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     ae8:	31 87       	std	Z+9, r19	; 0x09
     aea:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     aec:	f9 01       	movw	r30, r18
     aee:	80 81       	ld	r24, Z
     af0:	8f 5f       	subi	r24, 0xFF	; 255
     af2:	80 83       	st	Z, r24
}
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	08 95       	ret

00000afa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     b00:	48 81       	ld	r20, Y
     b02:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     b04:	4f 3f       	cpi	r20, 0xFF	; 255
     b06:	2f ef       	ldi	r18, 0xFF	; 255
     b08:	52 07       	cpc	r21, r18
     b0a:	21 f4       	brne	.+8      	; 0xb14 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     b0c:	fc 01       	movw	r30, r24
     b0e:	a7 81       	ldd	r26, Z+7	; 0x07
     b10:	b0 85       	ldd	r27, Z+8	; 0x08
     b12:	0d c0       	rjmp	.+26     	; 0xb2e <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     b14:	dc 01       	movw	r26, r24
     b16:	13 96       	adiw	r26, 0x03	; 3
     b18:	01 c0       	rjmp	.+2      	; 0xb1c <vListInsert+0x22>
     b1a:	df 01       	movw	r26, r30
     b1c:	12 96       	adiw	r26, 0x02	; 2
     b1e:	ed 91       	ld	r30, X+
     b20:	fc 91       	ld	r31, X
     b22:	13 97       	sbiw	r26, 0x03	; 3
     b24:	20 81       	ld	r18, Z
     b26:	31 81       	ldd	r19, Z+1	; 0x01
     b28:	42 17       	cp	r20, r18
     b2a:	53 07       	cpc	r21, r19
     b2c:	b0 f7       	brcc	.-20     	; 0xb1a <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     b2e:	12 96       	adiw	r26, 0x02	; 2
     b30:	ed 91       	ld	r30, X+
     b32:	fc 91       	ld	r31, X
     b34:	13 97       	sbiw	r26, 0x03	; 3
     b36:	fb 83       	std	Y+3, r31	; 0x03
     b38:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     b3a:	d5 83       	std	Z+5, r29	; 0x05
     b3c:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     b3e:	bd 83       	std	Y+5, r27	; 0x05
     b40:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	dc 93       	st	X, r29
     b46:	ce 93       	st	-X, r28
     b48:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     b4a:	99 87       	std	Y+9, r25	; 0x09
     b4c:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     b4e:	fc 01       	movw	r30, r24
     b50:	20 81       	ld	r18, Z
     b52:	2f 5f       	subi	r18, 0xFF	; 255
     b54:	20 83       	st	Z, r18
}
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	08 95       	ret

00000b5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     b62:	a0 85       	ldd	r26, Z+8	; 0x08
     b64:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     b66:	c2 81       	ldd	r28, Z+2	; 0x02
     b68:	d3 81       	ldd	r29, Z+3	; 0x03
     b6a:	84 81       	ldd	r24, Z+4	; 0x04
     b6c:	95 81       	ldd	r25, Z+5	; 0x05
     b6e:	9d 83       	std	Y+5, r25	; 0x05
     b70:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     b72:	c4 81       	ldd	r28, Z+4	; 0x04
     b74:	d5 81       	ldd	r29, Z+5	; 0x05
     b76:	82 81       	ldd	r24, Z+2	; 0x02
     b78:	93 81       	ldd	r25, Z+3	; 0x03
     b7a:	9b 83       	std	Y+3, r25	; 0x03
     b7c:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     b7e:	11 96       	adiw	r26, 0x01	; 1
     b80:	cd 91       	ld	r28, X+
     b82:	dc 91       	ld	r29, X
     b84:	12 97       	sbiw	r26, 0x02	; 2
     b86:	ce 17       	cp	r28, r30
     b88:	df 07       	cpc	r29, r31
     b8a:	31 f4       	brne	.+12     	; 0xb98 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     b8c:	8c 81       	ldd	r24, Y+4	; 0x04
     b8e:	9d 81       	ldd	r25, Y+5	; 0x05
     b90:	12 96       	adiw	r26, 0x02	; 2
     b92:	9c 93       	st	X, r25
     b94:	8e 93       	st	-X, r24
     b96:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     b98:	11 86       	std	Z+9, r1	; 0x09
     b9a:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     b9c:	8c 91       	ld	r24, X
     b9e:	81 50       	subi	r24, 0x01	; 1
     ba0:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	08 95       	ret

00000ba8 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     ba8:	31 e1       	ldi	r19, 0x11	; 17
     baa:	fc 01       	movw	r30, r24
     bac:	30 83       	st	Z, r19
     bae:	31 97       	sbiw	r30, 0x01	; 1
     bb0:	22 e2       	ldi	r18, 0x22	; 34
     bb2:	20 83       	st	Z, r18
     bb4:	31 97       	sbiw	r30, 0x01	; 1
     bb6:	a3 e3       	ldi	r26, 0x33	; 51
     bb8:	a0 83       	st	Z, r26
     bba:	31 97       	sbiw	r30, 0x01	; 1
     bbc:	60 83       	st	Z, r22
     bbe:	31 97       	sbiw	r30, 0x01	; 1
     bc0:	70 83       	st	Z, r23
     bc2:	31 97       	sbiw	r30, 0x01	; 1
     bc4:	10 82       	st	Z, r1
     bc6:	31 97       	sbiw	r30, 0x01	; 1
     bc8:	60 e8       	ldi	r22, 0x80	; 128
     bca:	60 83       	st	Z, r22
     bcc:	31 97       	sbiw	r30, 0x01	; 1
     bce:	10 82       	st	Z, r1
     bd0:	31 97       	sbiw	r30, 0x01	; 1
     bd2:	62 e0       	ldi	r22, 0x02	; 2
     bd4:	60 83       	st	Z, r22
     bd6:	31 97       	sbiw	r30, 0x01	; 1
     bd8:	63 e0       	ldi	r22, 0x03	; 3
     bda:	60 83       	st	Z, r22
     bdc:	31 97       	sbiw	r30, 0x01	; 1
     bde:	64 e0       	ldi	r22, 0x04	; 4
     be0:	60 83       	st	Z, r22
     be2:	31 97       	sbiw	r30, 0x01	; 1
     be4:	65 e0       	ldi	r22, 0x05	; 5
     be6:	60 83       	st	Z, r22
     be8:	31 97       	sbiw	r30, 0x01	; 1
     bea:	66 e0       	ldi	r22, 0x06	; 6
     bec:	60 83       	st	Z, r22
     bee:	31 97       	sbiw	r30, 0x01	; 1
     bf0:	67 e0       	ldi	r22, 0x07	; 7
     bf2:	60 83       	st	Z, r22
     bf4:	31 97       	sbiw	r30, 0x01	; 1
     bf6:	68 e0       	ldi	r22, 0x08	; 8
     bf8:	60 83       	st	Z, r22
     bfa:	31 97       	sbiw	r30, 0x01	; 1
     bfc:	69 e0       	ldi	r22, 0x09	; 9
     bfe:	60 83       	st	Z, r22
     c00:	31 97       	sbiw	r30, 0x01	; 1
     c02:	60 e1       	ldi	r22, 0x10	; 16
     c04:	60 83       	st	Z, r22
     c06:	31 97       	sbiw	r30, 0x01	; 1
     c08:	30 83       	st	Z, r19
     c0a:	31 97       	sbiw	r30, 0x01	; 1
     c0c:	32 e1       	ldi	r19, 0x12	; 18
     c0e:	30 83       	st	Z, r19
     c10:	31 97       	sbiw	r30, 0x01	; 1
     c12:	33 e1       	ldi	r19, 0x13	; 19
     c14:	30 83       	st	Z, r19
     c16:	31 97       	sbiw	r30, 0x01	; 1
     c18:	34 e1       	ldi	r19, 0x14	; 20
     c1a:	30 83       	st	Z, r19
     c1c:	31 97       	sbiw	r30, 0x01	; 1
     c1e:	35 e1       	ldi	r19, 0x15	; 21
     c20:	30 83       	st	Z, r19
     c22:	31 97       	sbiw	r30, 0x01	; 1
     c24:	36 e1       	ldi	r19, 0x16	; 22
     c26:	30 83       	st	Z, r19
     c28:	31 97       	sbiw	r30, 0x01	; 1
     c2a:	37 e1       	ldi	r19, 0x17	; 23
     c2c:	30 83       	st	Z, r19
     c2e:	31 97       	sbiw	r30, 0x01	; 1
     c30:	38 e1       	ldi	r19, 0x18	; 24
     c32:	30 83       	st	Z, r19
     c34:	31 97       	sbiw	r30, 0x01	; 1
     c36:	39 e1       	ldi	r19, 0x19	; 25
     c38:	30 83       	st	Z, r19
     c3a:	31 97       	sbiw	r30, 0x01	; 1
     c3c:	30 e2       	ldi	r19, 0x20	; 32
     c3e:	30 83       	st	Z, r19
     c40:	31 97       	sbiw	r30, 0x01	; 1
     c42:	31 e2       	ldi	r19, 0x21	; 33
     c44:	30 83       	st	Z, r19
     c46:	31 97       	sbiw	r30, 0x01	; 1
     c48:	20 83       	st	Z, r18
     c4a:	31 97       	sbiw	r30, 0x01	; 1
     c4c:	23 e2       	ldi	r18, 0x23	; 35
     c4e:	20 83       	st	Z, r18
     c50:	31 97       	sbiw	r30, 0x01	; 1
     c52:	40 83       	st	Z, r20
     c54:	31 97       	sbiw	r30, 0x01	; 1
     c56:	50 83       	st	Z, r21
     c58:	31 97       	sbiw	r30, 0x01	; 1
     c5a:	26 e2       	ldi	r18, 0x26	; 38
     c5c:	20 83       	st	Z, r18
     c5e:	31 97       	sbiw	r30, 0x01	; 1
     c60:	27 e2       	ldi	r18, 0x27	; 39
     c62:	20 83       	st	Z, r18
     c64:	31 97       	sbiw	r30, 0x01	; 1
     c66:	28 e2       	ldi	r18, 0x28	; 40
     c68:	20 83       	st	Z, r18
     c6a:	31 97       	sbiw	r30, 0x01	; 1
     c6c:	29 e2       	ldi	r18, 0x29	; 41
     c6e:	20 83       	st	Z, r18
     c70:	31 97       	sbiw	r30, 0x01	; 1
     c72:	20 e3       	ldi	r18, 0x30	; 48
     c74:	20 83       	st	Z, r18
     c76:	31 97       	sbiw	r30, 0x01	; 1
     c78:	21 e3       	ldi	r18, 0x31	; 49
     c7a:	20 83       	st	Z, r18
     c7c:	86 97       	sbiw	r24, 0x26	; 38
     c7e:	08 95       	ret

00000c80 <xPortStartScheduler>:
     c80:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     c84:	85 ee       	ldi	r24, 0xE5	; 229
     c86:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     c8a:	8b e0       	ldi	r24, 0x0B	; 11
     c8c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     c90:	ef e6       	ldi	r30, 0x6F	; 111
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	82 60       	ori	r24, 0x02	; 2
     c98:	80 83       	st	Z, r24
     c9a:	a0 91 c2 07 	lds	r26, 0x07C2	; 0x8007c2 <pxCurrentTCB>
     c9e:	b0 91 c3 07 	lds	r27, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
     ca2:	cd 91       	ld	r28, X+
     ca4:	cd bf       	out	0x3d, r28	; 61
     ca6:	dd 91       	ld	r29, X+
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	ff 91       	pop	r31
     cac:	ef 91       	pop	r30
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	bf 91       	pop	r27
     cb4:	af 91       	pop	r26
     cb6:	9f 91       	pop	r25
     cb8:	8f 91       	pop	r24
     cba:	7f 91       	pop	r23
     cbc:	6f 91       	pop	r22
     cbe:	5f 91       	pop	r21
     cc0:	4f 91       	pop	r20
     cc2:	3f 91       	pop	r19
     cc4:	2f 91       	pop	r18
     cc6:	1f 91       	pop	r17
     cc8:	0f 91       	pop	r16
     cca:	ff 90       	pop	r15
     ccc:	ef 90       	pop	r14
     cce:	df 90       	pop	r13
     cd0:	cf 90       	pop	r12
     cd2:	bf 90       	pop	r11
     cd4:	af 90       	pop	r10
     cd6:	9f 90       	pop	r9
     cd8:	8f 90       	pop	r8
     cda:	7f 90       	pop	r7
     cdc:	6f 90       	pop	r6
     cde:	5f 90       	pop	r5
     ce0:	4f 90       	pop	r4
     ce2:	3f 90       	pop	r3
     ce4:	2f 90       	pop	r2
     ce6:	1f 90       	pop	r1
     ce8:	0f 90       	pop	r0
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	0f 90       	pop	r0
     cee:	08 95       	ret
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	08 95       	ret

00000cf4 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     cf4:	0f 92       	push	r0
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	f8 94       	cli
     cfa:	0f 92       	push	r0
     cfc:	1f 92       	push	r1
     cfe:	11 24       	eor	r1, r1
     d00:	2f 92       	push	r2
     d02:	3f 92       	push	r3
     d04:	4f 92       	push	r4
     d06:	5f 92       	push	r5
     d08:	6f 92       	push	r6
     d0a:	7f 92       	push	r7
     d0c:	8f 92       	push	r8
     d0e:	9f 92       	push	r9
     d10:	af 92       	push	r10
     d12:	bf 92       	push	r11
     d14:	cf 92       	push	r12
     d16:	df 92       	push	r13
     d18:	ef 92       	push	r14
     d1a:	ff 92       	push	r15
     d1c:	0f 93       	push	r16
     d1e:	1f 93       	push	r17
     d20:	2f 93       	push	r18
     d22:	3f 93       	push	r19
     d24:	4f 93       	push	r20
     d26:	5f 93       	push	r21
     d28:	6f 93       	push	r22
     d2a:	7f 93       	push	r23
     d2c:	8f 93       	push	r24
     d2e:	9f 93       	push	r25
     d30:	af 93       	push	r26
     d32:	bf 93       	push	r27
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	ef 93       	push	r30
     d3a:	ff 93       	push	r31
     d3c:	a0 91 c2 07 	lds	r26, 0x07C2	; 0x8007c2 <pxCurrentTCB>
     d40:	b0 91 c3 07 	lds	r27, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
     d44:	0d b6       	in	r0, 0x3d	; 61
     d46:	0d 92       	st	X+, r0
     d48:	0e b6       	in	r0, 0x3e	; 62
     d4a:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     d4c:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     d50:	a0 91 c2 07 	lds	r26, 0x07C2	; 0x8007c2 <pxCurrentTCB>
     d54:	b0 91 c3 07 	lds	r27, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
     d58:	cd 91       	ld	r28, X+
     d5a:	cd bf       	out	0x3d, r28	; 61
     d5c:	dd 91       	ld	r29, X+
     d5e:	de bf       	out	0x3e, r29	; 62
     d60:	ff 91       	pop	r31
     d62:	ef 91       	pop	r30
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	bf 91       	pop	r27
     d6a:	af 91       	pop	r26
     d6c:	9f 91       	pop	r25
     d6e:	8f 91       	pop	r24
     d70:	7f 91       	pop	r23
     d72:	6f 91       	pop	r22
     d74:	5f 91       	pop	r21
     d76:	4f 91       	pop	r20
     d78:	3f 91       	pop	r19
     d7a:	2f 91       	pop	r18
     d7c:	1f 91       	pop	r17
     d7e:	0f 91       	pop	r16
     d80:	ff 90       	pop	r15
     d82:	ef 90       	pop	r14
     d84:	df 90       	pop	r13
     d86:	cf 90       	pop	r12
     d88:	bf 90       	pop	r11
     d8a:	af 90       	pop	r10
     d8c:	9f 90       	pop	r9
     d8e:	8f 90       	pop	r8
     d90:	7f 90       	pop	r7
     d92:	6f 90       	pop	r6
     d94:	5f 90       	pop	r5
     d96:	4f 90       	pop	r4
     d98:	3f 90       	pop	r3
     d9a:	2f 90       	pop	r2
     d9c:	1f 90       	pop	r1
     d9e:	0f 90       	pop	r0
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	0f 90       	pop	r0

	asm volatile ( "ret" );
     da4:	08 95       	ret

00000da6 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     da6:	0f 92       	push	r0
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	f8 94       	cli
     dac:	0f 92       	push	r0
     dae:	1f 92       	push	r1
     db0:	11 24       	eor	r1, r1
     db2:	2f 92       	push	r2
     db4:	3f 92       	push	r3
     db6:	4f 92       	push	r4
     db8:	5f 92       	push	r5
     dba:	6f 92       	push	r6
     dbc:	7f 92       	push	r7
     dbe:	8f 92       	push	r8
     dc0:	9f 92       	push	r9
     dc2:	af 92       	push	r10
     dc4:	bf 92       	push	r11
     dc6:	cf 92       	push	r12
     dc8:	df 92       	push	r13
     dca:	ef 92       	push	r14
     dcc:	ff 92       	push	r15
     dce:	0f 93       	push	r16
     dd0:	1f 93       	push	r17
     dd2:	2f 93       	push	r18
     dd4:	3f 93       	push	r19
     dd6:	4f 93       	push	r20
     dd8:	5f 93       	push	r21
     dda:	6f 93       	push	r22
     ddc:	7f 93       	push	r23
     dde:	8f 93       	push	r24
     de0:	9f 93       	push	r25
     de2:	af 93       	push	r26
     de4:	bf 93       	push	r27
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	ef 93       	push	r30
     dec:	ff 93       	push	r31
     dee:	a0 91 c2 07 	lds	r26, 0x07C2	; 0x8007c2 <pxCurrentTCB>
     df2:	b0 91 c3 07 	lds	r27, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
     df6:	0d b6       	in	r0, 0x3d	; 61
     df8:	0d 92       	st	X+, r0
     dfa:	0e b6       	in	r0, 0x3e	; 62
     dfc:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     dfe:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <xTaskIncrementTick>
     e02:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     e04:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     e08:	a0 91 c2 07 	lds	r26, 0x07C2	; 0x8007c2 <pxCurrentTCB>
     e0c:	b0 91 c3 07 	lds	r27, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
     e10:	cd 91       	ld	r28, X+
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	dd 91       	ld	r29, X+
     e16:	de bf       	out	0x3e, r29	; 62
     e18:	ff 91       	pop	r31
     e1a:	ef 91       	pop	r30
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	bf 91       	pop	r27
     e22:	af 91       	pop	r26
     e24:	9f 91       	pop	r25
     e26:	8f 91       	pop	r24
     e28:	7f 91       	pop	r23
     e2a:	6f 91       	pop	r22
     e2c:	5f 91       	pop	r21
     e2e:	4f 91       	pop	r20
     e30:	3f 91       	pop	r19
     e32:	2f 91       	pop	r18
     e34:	1f 91       	pop	r17
     e36:	0f 91       	pop	r16
     e38:	ff 90       	pop	r15
     e3a:	ef 90       	pop	r14
     e3c:	df 90       	pop	r13
     e3e:	cf 90       	pop	r12
     e40:	bf 90       	pop	r11
     e42:	af 90       	pop	r10
     e44:	9f 90       	pop	r9
     e46:	8f 90       	pop	r8
     e48:	7f 90       	pop	r7
     e4a:	6f 90       	pop	r6
     e4c:	5f 90       	pop	r5
     e4e:	4f 90       	pop	r4
     e50:	3f 90       	pop	r3
     e52:	2f 90       	pop	r2
     e54:	1f 90       	pop	r1
     e56:	0f 90       	pop	r0
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	0f 90       	pop	r0

	asm volatile ( "ret" );
     e5c:	08 95       	ret

00000e5e <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
     e5e:	0e 94 d3 06 	call	0xda6	; 0xda6 <vPortYieldFromTick>
		asm volatile ( "reti" );
     e62:	18 95       	reti

00000e64 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
     e6a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     e6e:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <pucAlignedHeap.1965>
     e72:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <pucAlignedHeap.1965+0x1>
     e76:	89 2b       	or	r24, r25
     e78:	31 f4       	brne	.+12     	; 0xe86 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     e7a:	8c e7       	ldi	r24, 0x7C	; 124
     e7c:	93 e0       	ldi	r25, 0x03	; 3
     e7e:	90 93 78 03 	sts	0x0378, r25	; 0x800378 <pucAlignedHeap.1965+0x1>
     e82:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <pucAlignedHeap.1965>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     e86:	20 91 79 03 	lds	r18, 0x0379	; 0x800379 <xNextFreeByte>
     e8a:	30 91 7a 03 	lds	r19, 0x037A	; 0x80037a <xNextFreeByte+0x1>
     e8e:	ce 01       	movw	r24, r28
     e90:	82 0f       	add	r24, r18
     e92:	93 1f       	adc	r25, r19
     e94:	87 3e       	cpi	r24, 0xE7	; 231
     e96:	43 e0       	ldi	r20, 0x03	; 3
     e98:	94 07       	cpc	r25, r20
     e9a:	70 f4       	brcc	.+28     	; 0xeb8 <pvPortMalloc+0x54>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	70 f4       	brcc	.+28     	; 0xebe <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     ea2:	c0 91 77 03 	lds	r28, 0x0377	; 0x800377 <pucAlignedHeap.1965>
     ea6:	d0 91 78 03 	lds	r29, 0x0378	; 0x800378 <pucAlignedHeap.1965+0x1>
     eaa:	c2 0f       	add	r28, r18
     eac:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
     eae:	90 93 7a 03 	sts	0x037A, r25	; 0x80037a <xNextFreeByte+0x1>
     eb2:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <xNextFreeByte>
     eb6:	05 c0       	rjmp	.+10     	; 0xec2 <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     eb8:	c0 e0       	ldi	r28, 0x00	; 0
     eba:	d0 e0       	ldi	r29, 0x00	; 0
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <pvPortMalloc+0x5e>
     ebe:	c0 e0       	ldi	r28, 0x00	; 0
     ec0:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     ec2:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     ec6:	ce 01       	movw	r24, r28
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	08 95       	ret

00000ece <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     ece:	08 95       	ret

00000ed0 <serial_new_instance>:
			_serial_tx_int_on(handle->ser_UDR);
			return BUFFER_OK;
		}
	}
	return BUFFER_FULL;
}
     ed0:	4f 92       	push	r4
     ed2:	5f 92       	push	r5
     ed4:	6f 92       	push	r6
     ed6:	7f 92       	push	r7
     ed8:	8f 92       	push	r8
     eda:	9f 92       	push	r9
     edc:	af 92       	push	r10
     ede:	bf 92       	push	r11
     ee0:	cf 92       	push	r12
     ee2:	df 92       	push	r13
     ee4:	ff 92       	push	r15
     ee6:	0f 93       	push	r16
     ee8:	1f 93       	push	r17
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	f8 2e       	mov	r15, r24
     ef4:	2a 01       	movw	r4, r20
     ef6:	3b 01       	movw	r6, r22
     ef8:	88 e0       	ldi	r24, 0x08	; 8
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0e 94 54 11 	call	0x22a8	; 0x22a8 <malloc>
     f00:	8c 01       	movw	r16, r24
     f02:	8f 2d       	mov	r24, r15
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	fc 01       	movw	r30, r24
     f0c:	ed 59       	subi	r30, 0x9D	; 157
     f0e:	f8 4f       	sbci	r31, 0xF8	; 248
     f10:	11 83       	std	Z+1, r17	; 0x01
     f12:	00 83       	st	Z, r16
     f14:	fc 01       	movw	r30, r24
     f16:	e6 5f       	subi	r30, 0xF6	; 246
     f18:	fe 4f       	sbci	r31, 0xFE	; 254
     f1a:	80 81       	ld	r24, Z
     f1c:	91 81       	ldd	r25, Z+1	; 0x01
     f1e:	d8 01       	movw	r26, r16
     f20:	11 96       	adiw	r26, 0x01	; 1
     f22:	9c 93       	st	X, r25
     f24:	8e 93       	st	-X, r24
     f26:	13 96       	adiw	r26, 0x03	; 3
     f28:	bc 92       	st	X, r11
     f2a:	ae 92       	st	-X, r10
     f2c:	12 97       	sbiw	r26, 0x02	; 2
     f2e:	15 96       	adiw	r26, 0x05	; 5
     f30:	dc 92       	st	X, r13
     f32:	ce 92       	st	-X, r12
     f34:	14 97       	sbiw	r26, 0x04	; 4
     f36:	17 96       	adiw	r26, 0x07	; 7
     f38:	9c 92       	st	X, r9
     f3a:	8e 92       	st	-X, r8
     f3c:	16 97       	sbiw	r26, 0x06	; 6
     f3e:	ff b6       	in	r15, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	ed 91       	ld	r30, X+
     f44:	fc 91       	ld	r31, X
     f46:	11 97       	sbiw	r26, 0x01	; 1
     f48:	36 97       	sbiw	r30, 0x06	; 6
     f4a:	80 81       	ld	r24, Z
     f4c:	82 60       	ori	r24, 0x02	; 2
     f4e:	80 83       	st	Z, r24
     f50:	cd 90       	ld	r12, X+
     f52:	dc 90       	ld	r13, X
     f54:	d3 01       	movw	r26, r6
     f56:	c2 01       	movw	r24, r4
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	aa 1f       	adc	r26, r26
     f5e:	bb 1f       	adc	r27, r27
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	aa 1f       	adc	r26, r26
     f66:	bb 1f       	adc	r27, r27
     f68:	9c 01       	movw	r18, r24
     f6a:	ad 01       	movw	r20, r26
     f6c:	22 0f       	add	r18, r18
     f6e:	33 1f       	adc	r19, r19
     f70:	44 1f       	adc	r20, r20
     f72:	55 1f       	adc	r21, r21
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	81 ee       	ldi	r24, 0xE1	; 225
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	0e 94 32 11 	call	0x2264	; 0x2264 <__udivmodsi4>
     f80:	21 50       	subi	r18, 0x01	; 1
     f82:	f6 01       	movw	r30, r12
     f84:	32 97       	sbiw	r30, 0x02	; 2
     f86:	20 83       	st	Z, r18
     f88:	d8 01       	movw	r26, r16
     f8a:	ed 91       	ld	r30, X+
     f8c:	fc 91       	ld	r31, X
     f8e:	11 97       	sbiw	r26, 0x01	; 1
     f90:	35 97       	sbiw	r30, 0x05	; 5
     f92:	88 e9       	ldi	r24, 0x98	; 152
     f94:	80 83       	st	Z, r24
     f96:	ed 91       	ld	r30, X+
     f98:	fc 91       	ld	r31, X
     f9a:	34 97       	sbiw	r30, 0x04	; 4
     f9c:	86 e0       	ldi	r24, 0x06	; 6
     f9e:	80 83       	st	Z, r24
     fa0:	ff be       	out	0x3f, r15	; 63
     fa2:	c8 01       	movw	r24, r16
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	1f 91       	pop	r17
     faa:	0f 91       	pop	r16
     fac:	ff 90       	pop	r15
     fae:	df 90       	pop	r13
     fb0:	cf 90       	pop	r12
     fb2:	bf 90       	pop	r11
     fb4:	af 90       	pop	r10
     fb6:	9f 90       	pop	r9
     fb8:	8f 90       	pop	r8
     fba:	7f 90       	pop	r7
     fbc:	6f 90       	pop	r6
     fbe:	5f 90       	pop	r5
     fc0:	4f 90       	pop	r4
     fc2:	08 95       	ret

00000fc4 <serial_send_bytes>:

/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
     fc4:	ef 92       	push	r14
     fc6:	ff 92       	push	r15
     fc8:	0f 93       	push	r16
     fca:	1f 93       	push	r17
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
     fd0:	fc 01       	movw	r30, r24
     fd2:	a2 81       	ldd	r26, Z+2	; 0x02
     fd4:	b3 81       	ldd	r27, Z+3	; 0x03
     fd6:	10 97       	sbiw	r26, 0x00	; 0
     fd8:	79 f0       	breq	.+30     	; 0xff8 <serial_send_bytes+0x34>
     fda:	e4 2f       	mov	r30, r20
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	92 96       	adiw	r26, 0x22	; 34
     fe0:	5c 91       	ld	r21, X
     fe2:	20 e2       	ldi	r18, 0x20	; 32
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	25 1b       	sub	r18, r21
     fe8:	31 09       	sbc	r19, r1
     fea:	2e 17       	cp	r18, r30
     fec:	3f 07       	cpc	r19, r31
     fee:	1c f1       	brlt	.+70     	; 0x1036 <serial_send_bytes+0x72>
     ff0:	7c 01       	movw	r14, r24
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
     ff2:	41 11       	cpse	r20, r1
     ff4:	04 c0       	rjmp	.+8      	; 0xffe <serial_send_bytes+0x3a>
     ff6:	16 c0       	rjmp	.+44     	; 0x1024 <serial_send_bytes+0x60>

/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
     ff8:	42 30       	cpi	r20, 0x02	; 2
     ffa:	f8 f4       	brcc	.+62     	; 0x103a <serial_send_bytes+0x76>
     ffc:	f9 cf       	rjmp	.-14     	; 0xff0 <serial_send_bytes+0x2c>
     ffe:	eb 01       	movw	r28, r22
    1000:	41 50       	subi	r20, 0x01	; 1
    1002:	04 2f       	mov	r16, r20
    1004:	10 e0       	ldi	r17, 0x00	; 0
    1006:	0f 5f       	subi	r16, 0xFF	; 255
    1008:	1f 4f       	sbci	r17, 0xFF	; 255
    100a:	06 0f       	add	r16, r22
    100c:	17 1f       	adc	r17, r23
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
    100e:	69 91       	ld	r22, Y+
    1010:	d7 01       	movw	r26, r14
    1012:	12 96       	adiw	r26, 0x02	; 2
    1014:	8d 91       	ld	r24, X+
    1016:	9c 91       	ld	r25, X
    1018:	13 97       	sbiw	r26, 0x03	; 3
    101a:	0e 94 2d 05 	call	0xa5a	; 0xa5a <buffer_put_item>
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    101e:	c0 17       	cp	r28, r16
    1020:	d1 07       	cpc	r29, r17
    1022:	a9 f7       	brne	.-22     	; 0x100e <serial_send_bytes+0x4a>
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
    1024:	d7 01       	movw	r26, r14
    1026:	ed 91       	ld	r30, X+
    1028:	fc 91       	ld	r31, X
SREG = _sreg;


/*-----------------------------------------------------------*/
static void _serial_tx_int_on(volatile uint8_t *UDR_reg) {
	*(UDR_reg  - UCSRB_off) |= serTX_INT_ENABLE;
    102a:	35 97       	sbiw	r30, 0x05	; 5
    102c:	80 81       	ld	r24, Z
    102e:	80 62       	ori	r24, 0x20	; 32
    1030:	80 83       	st	Z, r24
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	03 c0       	rjmp	.+6      	; 0x103c <serial_send_bytes+0x78>
/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
		return BUFFER_FULL;
    1036:	82 e0       	ldi	r24, 0x02	; 2
    1038:	01 c0       	rjmp	.+2      	; 0x103c <serial_send_bytes+0x78>
    103a:	82 e0       	ldi	r24, 0x02	; 2
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
}
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	1f 91       	pop	r17
    1042:	0f 91       	pop	r16
    1044:	ff 90       	pop	r15
    1046:	ef 90       	pop	r14
    1048:	08 95       	ret

0000104a <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    104a:	1f 92       	push	r1
    104c:	0f 92       	push	r0
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	0f 92       	push	r0
    1052:	11 24       	eor	r1, r1
    1054:	2f 93       	push	r18
    1056:	3f 93       	push	r19
    1058:	4f 93       	push	r20
    105a:	5f 93       	push	r21
    105c:	6f 93       	push	r22
    105e:	7f 93       	push	r23
    1060:	8f 93       	push	r24
    1062:	9f 93       	push	r25
    1064:	af 93       	push	r26
    1066:	bf 93       	push	r27
    1068:	cf 93       	push	r28
    106a:	ef 93       	push	r30
    106c:	ff 93       	push	r31
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    106e:	e0 91 63 07 	lds	r30, 0x0763	; 0x800763 <_ser_handle>
    1072:	f0 91 64 07 	lds	r31, 0x0764	; 0x800764 <_ser_handle+0x1>
    1076:	30 97       	sbiw	r30, 0x00	; 0
    1078:	a1 f0       	breq	.+40     	; 0x10a2 <__vector_20+0x58>
		item = UDR0;
    107a:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    107e:	6c 2f       	mov	r22, r28
    1080:	84 81       	ldd	r24, Z+4	; 0x04
    1082:	95 81       	ldd	r25, Z+5	; 0x05
    1084:	0e 94 2d 05 	call	0xa5a	; 0xa5a <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    1088:	80 91 63 07 	lds	r24, 0x0763	; 0x800763 <_ser_handle>
    108c:	90 91 64 07 	lds	r25, 0x0764	; 0x800764 <_ser_handle+0x1>
    1090:	dc 01       	movw	r26, r24
    1092:	16 96       	adiw	r26, 0x06	; 6
    1094:	ed 91       	ld	r30, X+
    1096:	fc 91       	ld	r31, X
    1098:	17 97       	sbiw	r26, 0x07	; 7
    109a:	30 97       	sbiw	r30, 0x00	; 0
    109c:	11 f0       	breq	.+4      	; 0x10a2 <__vector_20+0x58>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    109e:	6c 2f       	mov	r22, r28
    10a0:	09 95       	icall
		}
	}
}
    10a2:	ff 91       	pop	r31
    10a4:	ef 91       	pop	r30
    10a6:	cf 91       	pop	r28
    10a8:	bf 91       	pop	r27
    10aa:	af 91       	pop	r26
    10ac:	9f 91       	pop	r25
    10ae:	8f 91       	pop	r24
    10b0:	7f 91       	pop	r23
    10b2:	6f 91       	pop	r22
    10b4:	5f 91       	pop	r21
    10b6:	4f 91       	pop	r20
    10b8:	3f 91       	pop	r19
    10ba:	2f 91       	pop	r18
    10bc:	0f 90       	pop	r0
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	0f 90       	pop	r0
    10c2:	1f 90       	pop	r1
    10c4:	18 95       	reti

000010c6 <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    10c6:	1f 92       	push	r1
    10c8:	0f 92       	push	r0
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	0f 92       	push	r0
    10ce:	11 24       	eor	r1, r1
    10d0:	2f 93       	push	r18
    10d2:	3f 93       	push	r19
    10d4:	4f 93       	push	r20
    10d6:	5f 93       	push	r21
    10d8:	6f 93       	push	r22
    10da:	7f 93       	push	r23
    10dc:	8f 93       	push	r24
    10de:	9f 93       	push	r25
    10e0:	af 93       	push	r26
    10e2:	bf 93       	push	r27
    10e4:	ef 93       	push	r30
    10e6:	ff 93       	push	r31
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
    10ec:	1f 92       	push	r1
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    10f2:	e0 91 63 07 	lds	r30, 0x0763	; 0x800763 <_ser_handle>
    10f6:	f0 91 64 07 	lds	r31, 0x0764	; 0x800764 <_ser_handle+0x1>
    10fa:	30 97       	sbiw	r30, 0x00	; 0
    10fc:	99 f0       	breq	.+38     	; 0x1124 <__vector_21+0x5e>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    10fe:	be 01       	movw	r22, r28
    1100:	6f 5f       	subi	r22, 0xFF	; 255
    1102:	7f 4f       	sbci	r23, 0xFF	; 255
    1104:	82 81       	ldd	r24, Z+2	; 0x02
    1106:	93 81       	ldd	r25, Z+3	; 0x03
    1108:	0e 94 0c 05 	call	0xa18	; 0xa18 <buffer_get_item>
    110c:	81 11       	cpse	r24, r1
    110e:	04 c0       	rjmp	.+8      	; 0x1118 <__vector_21+0x52>
			UDR0 = item;
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1116:	0b c0       	rjmp	.+22     	; 0x112e <__vector_21+0x68>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    1118:	e1 ec       	ldi	r30, 0xC1	; 193
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	8f 7d       	andi	r24, 0xDF	; 223
    1120:	80 83       	st	Z, r24
    1122:	05 c0       	rjmp	.+10     	; 0x112e <__vector_21+0x68>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    1124:	e1 ec       	ldi	r30, 0xC1	; 193
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	8f 7d       	andi	r24, 0xDF	; 223
    112c:	80 83       	st	Z, r24
	}
}
    112e:	0f 90       	pop	r0
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	ff 91       	pop	r31
    1136:	ef 91       	pop	r30
    1138:	bf 91       	pop	r27
    113a:	af 91       	pop	r26
    113c:	9f 91       	pop	r25
    113e:	8f 91       	pop	r24
    1140:	7f 91       	pop	r23
    1142:	6f 91       	pop	r22
    1144:	5f 91       	pop	r21
    1146:	4f 91       	pop	r20
    1148:	3f 91       	pop	r19
    114a:	2f 91       	pop	r18
    114c:	0f 90       	pop	r0
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	0f 90       	pop	r0
    1152:	1f 90       	pop	r1
    1154:	18 95       	reti

00001156 <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    1156:	1f 92       	push	r1
    1158:	0f 92       	push	r0
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	0f 92       	push	r0
    115e:	11 24       	eor	r1, r1
    1160:	2f 93       	push	r18
    1162:	3f 93       	push	r19
    1164:	4f 93       	push	r20
    1166:	5f 93       	push	r21
    1168:	6f 93       	push	r22
    116a:	7f 93       	push	r23
    116c:	8f 93       	push	r24
    116e:	9f 93       	push	r25
    1170:	af 93       	push	r26
    1172:	bf 93       	push	r27
    1174:	cf 93       	push	r28
    1176:	ef 93       	push	r30
    1178:	ff 93       	push	r31
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    117a:	e0 91 65 07 	lds	r30, 0x0765	; 0x800765 <_ser_handle+0x2>
    117e:	f0 91 66 07 	lds	r31, 0x0766	; 0x800766 <_ser_handle+0x3>
    1182:	30 97       	sbiw	r30, 0x00	; 0
    1184:	a1 f0       	breq	.+40     	; 0x11ae <__vector_28+0x58>
		item = UDR1;
    1186:	c0 91 ce 00 	lds	r28, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    118a:	6c 2f       	mov	r22, r28
    118c:	84 81       	ldd	r24, Z+4	; 0x04
    118e:	95 81       	ldd	r25, Z+5	; 0x05
    1190:	0e 94 2d 05 	call	0xa5a	; 0xa5a <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    1194:	80 91 65 07 	lds	r24, 0x0765	; 0x800765 <_ser_handle+0x2>
    1198:	90 91 66 07 	lds	r25, 0x0766	; 0x800766 <_ser_handle+0x3>
    119c:	dc 01       	movw	r26, r24
    119e:	16 96       	adiw	r26, 0x06	; 6
    11a0:	ed 91       	ld	r30, X+
    11a2:	fc 91       	ld	r31, X
    11a4:	17 97       	sbiw	r26, 0x07	; 7
    11a6:	30 97       	sbiw	r30, 0x00	; 0
    11a8:	11 f0       	breq	.+4      	; 0x11ae <__vector_28+0x58>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    11aa:	6c 2f       	mov	r22, r28
    11ac:	09 95       	icall
		}
	}
}
    11ae:	ff 91       	pop	r31
    11b0:	ef 91       	pop	r30
    11b2:	cf 91       	pop	r28
    11b4:	bf 91       	pop	r27
    11b6:	af 91       	pop	r26
    11b8:	9f 91       	pop	r25
    11ba:	8f 91       	pop	r24
    11bc:	7f 91       	pop	r23
    11be:	6f 91       	pop	r22
    11c0:	5f 91       	pop	r21
    11c2:	4f 91       	pop	r20
    11c4:	3f 91       	pop	r19
    11c6:	2f 91       	pop	r18
    11c8:	0f 90       	pop	r0
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	0f 90       	pop	r0
    11ce:	1f 90       	pop	r1
    11d0:	18 95       	reti

000011d2 <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    11d2:	1f 92       	push	r1
    11d4:	0f 92       	push	r0
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	0f 92       	push	r0
    11da:	11 24       	eor	r1, r1
    11dc:	2f 93       	push	r18
    11de:	3f 93       	push	r19
    11e0:	4f 93       	push	r20
    11e2:	5f 93       	push	r21
    11e4:	6f 93       	push	r22
    11e6:	7f 93       	push	r23
    11e8:	8f 93       	push	r24
    11ea:	9f 93       	push	r25
    11ec:	af 93       	push	r26
    11ee:	bf 93       	push	r27
    11f0:	ef 93       	push	r30
    11f2:	ff 93       	push	r31
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
    11f8:	1f 92       	push	r1
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    11fe:	e0 91 65 07 	lds	r30, 0x0765	; 0x800765 <_ser_handle+0x2>
    1202:	f0 91 66 07 	lds	r31, 0x0766	; 0x800766 <_ser_handle+0x3>
    1206:	30 97       	sbiw	r30, 0x00	; 0
    1208:	99 f0       	breq	.+38     	; 0x1230 <__vector_29+0x5e>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    120a:	be 01       	movw	r22, r28
    120c:	6f 5f       	subi	r22, 0xFF	; 255
    120e:	7f 4f       	sbci	r23, 0xFF	; 255
    1210:	82 81       	ldd	r24, Z+2	; 0x02
    1212:	93 81       	ldd	r25, Z+3	; 0x03
    1214:	0e 94 0c 05 	call	0xa18	; 0xa18 <buffer_get_item>
    1218:	81 11       	cpse	r24, r1
    121a:	04 c0       	rjmp	.+8      	; 0x1224 <__vector_29+0x52>
			UDR1 = item;
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1222:	0b c0       	rjmp	.+22     	; 0x123a <__vector_29+0x68>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    1224:	e9 ec       	ldi	r30, 0xC9	; 201
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	8f 7d       	andi	r24, 0xDF	; 223
    122c:	80 83       	st	Z, r24
    122e:	05 c0       	rjmp	.+10     	; 0x123a <__vector_29+0x68>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    1230:	e9 ec       	ldi	r30, 0xC9	; 201
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	8f 7d       	andi	r24, 0xDF	; 223
    1238:	80 83       	st	Z, r24
	}
}
    123a:	0f 90       	pop	r0
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	ff 91       	pop	r31
    1242:	ef 91       	pop	r30
    1244:	bf 91       	pop	r27
    1246:	af 91       	pop	r26
    1248:	9f 91       	pop	r25
    124a:	8f 91       	pop	r24
    124c:	7f 91       	pop	r23
    124e:	6f 91       	pop	r22
    1250:	5f 91       	pop	r21
    1252:	4f 91       	pop	r20
    1254:	3f 91       	pop	r19
    1256:	2f 91       	pop	r18
    1258:	0f 90       	pop	r0
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	0f 90       	pop	r0
    125e:	1f 90       	pop	r1
    1260:	18 95       	reti

00001262 <prvCopyDataToQueue>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    1262:	0f 93       	push	r16
    1264:	1f 93       	push	r17
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	ec 01       	movw	r28, r24
    126c:	04 2f       	mov	r16, r20
    126e:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1270:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1272:	81 11       	cpse	r24, r1
    1274:	0c c0       	rjmp	.+24     	; 0x128e <prvCopyDataToQueue+0x2c>
    1276:	88 81       	ld	r24, Y
    1278:	99 81       	ldd	r25, Y+1	; 0x01
    127a:	89 2b       	or	r24, r25
    127c:	09 f0       	breq	.+2      	; 0x1280 <prvCopyDataToQueue+0x1e>
    127e:	44 c0       	rjmp	.+136    	; 0x1308 <prvCopyDataToQueue+0xa6>
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	9b 81       	ldd	r25, Y+3	; 0x03
    1284:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <xTaskPriorityDisinherit>
    1288:	1b 82       	std	Y+3, r1	; 0x03
    128a:	1a 82       	std	Y+2, r1	; 0x02
    128c:	44 c0       	rjmp	.+136    	; 0x1316 <prvCopyDataToQueue+0xb4>
    128e:	41 11       	cpse	r20, r1
    1290:	18 c0       	rjmp	.+48     	; 0x12c2 <prvCopyDataToQueue+0x60>
    1292:	48 2f       	mov	r20, r24
    1294:	50 e0       	ldi	r21, 0x00	; 0
    1296:	8c 81       	ldd	r24, Y+4	; 0x04
    1298:	9d 81       	ldd	r25, Y+5	; 0x05
    129a:	0e 94 dd 12 	call	0x25ba	; 0x25ba <memcpy>
    129e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    12a0:	8c 81       	ldd	r24, Y+4	; 0x04
    12a2:	9d 81       	ldd	r25, Y+5	; 0x05
    12a4:	82 0f       	add	r24, r18
    12a6:	91 1d       	adc	r25, r1
    12a8:	9d 83       	std	Y+5, r25	; 0x05
    12aa:	8c 83       	std	Y+4, r24	; 0x04
    12ac:	2a 81       	ldd	r18, Y+2	; 0x02
    12ae:	3b 81       	ldd	r19, Y+3	; 0x03
    12b0:	82 17       	cp	r24, r18
    12b2:	93 07       	cpc	r25, r19
    12b4:	58 f1       	brcs	.+86     	; 0x130c <prvCopyDataToQueue+0xaa>
    12b6:	88 81       	ld	r24, Y
    12b8:	99 81       	ldd	r25, Y+1	; 0x01
    12ba:	9d 83       	std	Y+5, r25	; 0x05
    12bc:	8c 83       	std	Y+4, r24	; 0x04
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	2a c0       	rjmp	.+84     	; 0x1316 <prvCopyDataToQueue+0xb4>
    12c2:	48 2f       	mov	r20, r24
    12c4:	50 e0       	ldi	r21, 0x00	; 0
    12c6:	8e 81       	ldd	r24, Y+6	; 0x06
    12c8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ca:	0e 94 dd 12 	call	0x25ba	; 0x25ba <memcpy>
    12ce:	8c 8d       	ldd	r24, Y+28	; 0x1c
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	91 95       	neg	r25
    12d4:	81 95       	neg	r24
    12d6:	91 09       	sbc	r25, r1
    12d8:	2e 81       	ldd	r18, Y+6	; 0x06
    12da:	3f 81       	ldd	r19, Y+7	; 0x07
    12dc:	28 0f       	add	r18, r24
    12de:	39 1f       	adc	r19, r25
    12e0:	3f 83       	std	Y+7, r19	; 0x07
    12e2:	2e 83       	std	Y+6, r18	; 0x06
    12e4:	48 81       	ld	r20, Y
    12e6:	59 81       	ldd	r21, Y+1	; 0x01
    12e8:	24 17       	cp	r18, r20
    12ea:	35 07       	cpc	r19, r21
    12ec:	30 f4       	brcc	.+12     	; 0x12fa <prvCopyDataToQueue+0x98>
    12ee:	2a 81       	ldd	r18, Y+2	; 0x02
    12f0:	3b 81       	ldd	r19, Y+3	; 0x03
    12f2:	82 0f       	add	r24, r18
    12f4:	93 1f       	adc	r25, r19
    12f6:	9f 83       	std	Y+7, r25	; 0x07
    12f8:	8e 83       	std	Y+6, r24	; 0x06
    12fa:	02 30       	cpi	r16, 0x02	; 2
    12fc:	49 f4       	brne	.+18     	; 0x1310 <prvCopyDataToQueue+0xae>
    12fe:	11 23       	and	r17, r17
    1300:	49 f0       	breq	.+18     	; 0x1314 <prvCopyDataToQueue+0xb2>
    1302:	11 50       	subi	r17, 0x01	; 1
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	07 c0       	rjmp	.+14     	; 0x1316 <prvCopyDataToQueue+0xb4>
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	05 c0       	rjmp	.+10     	; 0x1316 <prvCopyDataToQueue+0xb4>
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	03 c0       	rjmp	.+6      	; 0x1316 <prvCopyDataToQueue+0xb4>
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	01 c0       	rjmp	.+2      	; 0x1316 <prvCopyDataToQueue+0xb4>
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	1f 5f       	subi	r17, 0xFF	; 255
    1318:	1a 8f       	std	Y+26, r17	; 0x1a
    131a:	df 91       	pop	r29
    131c:	cf 91       	pop	r28
    131e:	1f 91       	pop	r17
    1320:	0f 91       	pop	r16
    1322:	08 95       	ret

00001324 <prvCopyDataFromQueue>:
    1324:	fc 01       	movw	r30, r24
    1326:	44 8d       	ldd	r20, Z+28	; 0x1c
    1328:	44 23       	and	r20, r20
    132a:	a9 f0       	breq	.+42     	; 0x1356 <prvCopyDataFromQueue+0x32>
    132c:	50 e0       	ldi	r21, 0x00	; 0
    132e:	26 81       	ldd	r18, Z+6	; 0x06
    1330:	37 81       	ldd	r19, Z+7	; 0x07
    1332:	24 0f       	add	r18, r20
    1334:	35 1f       	adc	r19, r21
    1336:	37 83       	std	Z+7, r19	; 0x07
    1338:	26 83       	std	Z+6, r18	; 0x06
    133a:	82 81       	ldd	r24, Z+2	; 0x02
    133c:	93 81       	ldd	r25, Z+3	; 0x03
    133e:	28 17       	cp	r18, r24
    1340:	39 07       	cpc	r19, r25
    1342:	20 f0       	brcs	.+8      	; 0x134c <prvCopyDataFromQueue+0x28>
    1344:	80 81       	ld	r24, Z
    1346:	91 81       	ldd	r25, Z+1	; 0x01
    1348:	97 83       	std	Z+7, r25	; 0x07
    134a:	86 83       	std	Z+6, r24	; 0x06
    134c:	cb 01       	movw	r24, r22
    134e:	66 81       	ldd	r22, Z+6	; 0x06
    1350:	77 81       	ldd	r23, Z+7	; 0x07
    1352:	0e 94 dd 12 	call	0x25ba	; 0x25ba <memcpy>
    1356:	08 95       	ret

00001358 <prvUnlockQueue>:
    1358:	ef 92       	push	r14
    135a:	ff 92       	push	r15
    135c:	0f 93       	push	r16
    135e:	1f 93       	push	r17
    1360:	cf 93       	push	r28
    1362:	8c 01       	movw	r16, r24
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	0f 92       	push	r0
    136a:	fc 01       	movw	r30, r24
    136c:	c6 8d       	ldd	r28, Z+30	; 0x1e
    136e:	1c 16       	cp	r1, r28
    1370:	ac f4       	brge	.+42     	; 0x139c <prvUnlockQueue+0x44>
    1372:	81 89       	ldd	r24, Z+17	; 0x11
    1374:	81 11       	cpse	r24, r1
    1376:	06 c0       	rjmp	.+12     	; 0x1384 <prvUnlockQueue+0x2c>
    1378:	11 c0       	rjmp	.+34     	; 0x139c <prvUnlockQueue+0x44>
    137a:	f8 01       	movw	r30, r16
    137c:	91 89       	ldd	r25, Z+17	; 0x11
    137e:	91 11       	cpse	r25, r1
    1380:	05 c0       	rjmp	.+10     	; 0x138c <prvUnlockQueue+0x34>
    1382:	0c c0       	rjmp	.+24     	; 0x139c <prvUnlockQueue+0x44>
    1384:	78 01       	movw	r14, r16
    1386:	f1 e1       	ldi	r31, 0x11	; 17
    1388:	ef 0e       	add	r14, r31
    138a:	f1 1c       	adc	r15, r1
    138c:	c7 01       	movw	r24, r14
    138e:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <xTaskRemoveFromEventList>
    1392:	81 11       	cpse	r24, r1
    1394:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <vTaskMissedYield>
    1398:	c1 50       	subi	r28, 0x01	; 1
    139a:	79 f7       	brne	.-34     	; 0x137a <prvUnlockQueue+0x22>
    139c:	8f ef       	ldi	r24, 0xFF	; 255
    139e:	f8 01       	movw	r30, r16
    13a0:	86 8f       	std	Z+30, r24	; 0x1e
    13a2:	0f 90       	pop	r0
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	0f b6       	in	r0, 0x3f	; 63
    13a8:	f8 94       	cli
    13aa:	0f 92       	push	r0
    13ac:	c5 8d       	ldd	r28, Z+29	; 0x1d
    13ae:	1c 16       	cp	r1, r28
    13b0:	ac f4       	brge	.+42     	; 0x13dc <prvUnlockQueue+0x84>
    13b2:	80 85       	ldd	r24, Z+8	; 0x08
    13b4:	81 11       	cpse	r24, r1
    13b6:	06 c0       	rjmp	.+12     	; 0x13c4 <prvUnlockQueue+0x6c>
    13b8:	11 c0       	rjmp	.+34     	; 0x13dc <prvUnlockQueue+0x84>
    13ba:	f8 01       	movw	r30, r16
    13bc:	90 85       	ldd	r25, Z+8	; 0x08
    13be:	91 11       	cpse	r25, r1
    13c0:	05 c0       	rjmp	.+10     	; 0x13cc <prvUnlockQueue+0x74>
    13c2:	0c c0       	rjmp	.+24     	; 0x13dc <prvUnlockQueue+0x84>
    13c4:	78 01       	movw	r14, r16
    13c6:	f8 e0       	ldi	r31, 0x08	; 8
    13c8:	ef 0e       	add	r14, r31
    13ca:	f1 1c       	adc	r15, r1
    13cc:	c7 01       	movw	r24, r14
    13ce:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <xTaskRemoveFromEventList>
    13d2:	81 11       	cpse	r24, r1
    13d4:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <vTaskMissedYield>
    13d8:	c1 50       	subi	r28, 0x01	; 1
    13da:	79 f7       	brne	.-34     	; 0x13ba <prvUnlockQueue+0x62>
    13dc:	8f ef       	ldi	r24, 0xFF	; 255
    13de:	f8 01       	movw	r30, r16
    13e0:	85 8f       	std	Z+29, r24	; 0x1d
    13e2:	0f 90       	pop	r0
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	cf 91       	pop	r28
    13e8:	1f 91       	pop	r17
    13ea:	0f 91       	pop	r16
    13ec:	ff 90       	pop	r15
    13ee:	ef 90       	pop	r14
    13f0:	08 95       	ret

000013f2 <xQueueGenericReset>:
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	ec 01       	movw	r28, r24
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	0f 92       	push	r0
    13fe:	48 81       	ld	r20, Y
    1400:	59 81       	ldd	r21, Y+1	; 0x01
    1402:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1408:	72 9f       	mul	r23, r18
    140a:	c0 01       	movw	r24, r0
    140c:	73 9f       	mul	r23, r19
    140e:	90 0d       	add	r25, r0
    1410:	11 24       	eor	r1, r1
    1412:	fa 01       	movw	r30, r20
    1414:	e8 0f       	add	r30, r24
    1416:	f9 1f       	adc	r31, r25
    1418:	fb 83       	std	Y+3, r31	; 0x03
    141a:	ea 83       	std	Y+2, r30	; 0x02
    141c:	1a 8e       	std	Y+26, r1	; 0x1a
    141e:	5d 83       	std	Y+5, r21	; 0x05
    1420:	4c 83       	std	Y+4, r20	; 0x04
    1422:	82 1b       	sub	r24, r18
    1424:	93 0b       	sbc	r25, r19
    1426:	84 0f       	add	r24, r20
    1428:	95 1f       	adc	r25, r21
    142a:	9f 83       	std	Y+7, r25	; 0x07
    142c:	8e 83       	std	Y+6, r24	; 0x06
    142e:	8f ef       	ldi	r24, 0xFF	; 255
    1430:	8d 8f       	std	Y+29, r24	; 0x1d
    1432:	8e 8f       	std	Y+30, r24	; 0x1e
    1434:	61 11       	cpse	r22, r1
    1436:	0c c0       	rjmp	.+24     	; 0x1450 <xQueueGenericReset+0x5e>
    1438:	88 85       	ldd	r24, Y+8	; 0x08
    143a:	88 23       	and	r24, r24
    143c:	89 f0       	breq	.+34     	; 0x1460 <xQueueGenericReset+0x6e>
    143e:	ce 01       	movw	r24, r28
    1440:	08 96       	adiw	r24, 0x08	; 8
    1442:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <xTaskRemoveFromEventList>
    1446:	88 23       	and	r24, r24
    1448:	59 f0       	breq	.+22     	; 0x1460 <xQueueGenericReset+0x6e>
    144a:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <vPortYield>
    144e:	08 c0       	rjmp	.+16     	; 0x1460 <xQueueGenericReset+0x6e>
    1450:	ce 01       	movw	r24, r28
    1452:	08 96       	adiw	r24, 0x08	; 8
    1454:	0e 94 4a 05 	call	0xa94	; 0xa94 <vListInitialise>
    1458:	ce 01       	movw	r24, r28
    145a:	41 96       	adiw	r24, 0x11	; 17
    145c:	0e 94 4a 05 	call	0xa94	; 0xa94 <vListInitialise>
    1460:	0f 90       	pop	r0
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	08 95       	ret

0000146c <xQueueGenericCreate>:
    146c:	ff 92       	push	r15
    146e:	0f 93       	push	r16
    1470:	1f 93       	push	r17
    1472:	cf 93       	push	r28
    1474:	df 93       	push	r29
    1476:	08 2f       	mov	r16, r24
    1478:	16 2f       	mov	r17, r22
    147a:	f4 2e       	mov	r15, r20
    147c:	66 23       	and	r22, r22
    147e:	c9 f0       	breq	.+50     	; 0x14b2 <xQueueGenericCreate+0x46>
    1480:	86 9f       	mul	r24, r22
    1482:	c0 01       	movw	r24, r0
    1484:	11 24       	eor	r1, r1
    1486:	81 96       	adiw	r24, 0x21	; 33
    1488:	0e 94 32 07 	call	0xe64	; 0xe64 <pvPortMalloc>
    148c:	ec 01       	movw	r28, r24
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	49 f4       	brne	.+18     	; 0x14a4 <xQueueGenericCreate+0x38>
    1492:	16 c0       	rjmp	.+44     	; 0x14c0 <xQueueGenericCreate+0x54>
    1494:	0b 8f       	std	Y+27, r16	; 0x1b
    1496:	1c 8f       	std	Y+28, r17	; 0x1c
    1498:	61 e0       	ldi	r22, 0x01	; 1
    149a:	ce 01       	movw	r24, r28
    149c:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <xQueueGenericReset>
    14a0:	f8 a2       	std	Y+32, r15	; 0x20
    14a2:	0e c0       	rjmp	.+28     	; 0x14c0 <xQueueGenericCreate+0x54>
    14a4:	81 96       	adiw	r24, 0x21	; 33
    14a6:	99 83       	std	Y+1, r25	; 0x01
    14a8:	88 83       	st	Y, r24
    14aa:	f4 cf       	rjmp	.-24     	; 0x1494 <xQueueGenericCreate+0x28>
    14ac:	d9 83       	std	Y+1, r29	; 0x01
    14ae:	c8 83       	st	Y, r28
    14b0:	f1 cf       	rjmp	.-30     	; 0x1494 <xQueueGenericCreate+0x28>
    14b2:	81 e2       	ldi	r24, 0x21	; 33
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	0e 94 32 07 	call	0xe64	; 0xe64 <pvPortMalloc>
    14ba:	ec 01       	movw	r28, r24
    14bc:	89 2b       	or	r24, r25
    14be:	b1 f7       	brne	.-20     	; 0x14ac <xQueueGenericCreate+0x40>
    14c0:	ce 01       	movw	r24, r28
    14c2:	df 91       	pop	r29
    14c4:	cf 91       	pop	r28
    14c6:	1f 91       	pop	r17
    14c8:	0f 91       	pop	r16
    14ca:	ff 90       	pop	r15
    14cc:	08 95       	ret

000014ce <xQueueGenericSend>:
    14ce:	9f 92       	push	r9
    14d0:	af 92       	push	r10
    14d2:	bf 92       	push	r11
    14d4:	cf 92       	push	r12
    14d6:	df 92       	push	r13
    14d8:	ef 92       	push	r14
    14da:	ff 92       	push	r15
    14dc:	0f 93       	push	r16
    14de:	1f 93       	push	r17
    14e0:	cf 93       	push	r28
    14e2:	df 93       	push	r29
    14e4:	00 d0       	rcall	.+0      	; 0x14e6 <xQueueGenericSend+0x18>
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <xQueueGenericSend+0x1a>
    14e8:	1f 92       	push	r1
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
    14ee:	8c 01       	movw	r16, r24
    14f0:	6b 01       	movw	r12, r22
    14f2:	5d 83       	std	Y+5, r21	; 0x05
    14f4:	4c 83       	std	Y+4, r20	; 0x04
    14f6:	a2 2e       	mov	r10, r18
    14f8:	b1 2c       	mov	r11, r1
    14fa:	99 24       	eor	r9, r9
    14fc:	93 94       	inc	r9
    14fe:	7c 01       	movw	r14, r24
    1500:	88 e0       	ldi	r24, 0x08	; 8
    1502:	e8 0e       	add	r14, r24
    1504:	f1 1c       	adc	r15, r1
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	0f 92       	push	r0
    150c:	f8 01       	movw	r30, r16
    150e:	32 8d       	ldd	r19, Z+26	; 0x1a
    1510:	93 8d       	ldd	r25, Z+27	; 0x1b
    1512:	39 17       	cp	r19, r25
    1514:	18 f0       	brcs	.+6      	; 0x151c <xQueueGenericSend+0x4e>
    1516:	f2 e0       	ldi	r31, 0x02	; 2
    1518:	af 12       	cpse	r10, r31
    151a:	19 c0       	rjmp	.+50     	; 0x154e <xQueueGenericSend+0x80>
    151c:	4a 2d       	mov	r20, r10
    151e:	b6 01       	movw	r22, r12
    1520:	c8 01       	movw	r24, r16
    1522:	0e 94 31 09 	call	0x1262	; 0x1262 <prvCopyDataToQueue>
    1526:	f8 01       	movw	r30, r16
    1528:	91 89       	ldd	r25, Z+17	; 0x11
    152a:	99 23       	and	r25, r25
    152c:	49 f0       	breq	.+18     	; 0x1540 <xQueueGenericSend+0x72>
    152e:	c8 01       	movw	r24, r16
    1530:	41 96       	adiw	r24, 0x11	; 17
    1532:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <xTaskRemoveFromEventList>
    1536:	88 23       	and	r24, r24
    1538:	31 f0       	breq	.+12     	; 0x1546 <xQueueGenericSend+0x78>
    153a:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <vPortYield>
    153e:	03 c0       	rjmp	.+6      	; 0x1546 <xQueueGenericSend+0x78>
    1540:	81 11       	cpse	r24, r1
    1542:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <vPortYield>
    1546:	0f 90       	pop	r0
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	50 c0       	rjmp	.+160    	; 0x15ee <xQueueGenericSend+0x120>
    154e:	ec 81       	ldd	r30, Y+4	; 0x04
    1550:	fd 81       	ldd	r31, Y+5	; 0x05
    1552:	ef 2b       	or	r30, r31
    1554:	21 f4       	brne	.+8      	; 0x155e <xQueueGenericSend+0x90>
    1556:	0f 90       	pop	r0
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	48 c0       	rjmp	.+144    	; 0x15ee <xQueueGenericSend+0x120>
    155e:	b1 10       	cpse	r11, r1
    1560:	05 c0       	rjmp	.+10     	; 0x156c <xQueueGenericSend+0x9e>
    1562:	ce 01       	movw	r24, r28
    1564:	01 96       	adiw	r24, 0x01	; 1
    1566:	0e 94 3d 10 	call	0x207a	; 0x207a <vTaskSetTimeOutState>
    156a:	b9 2c       	mov	r11, r9
    156c:	0f 90       	pop	r0
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <vTaskSuspendAll>
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	0f 92       	push	r0
    157a:	f8 01       	movw	r30, r16
    157c:	85 8d       	ldd	r24, Z+29	; 0x1d
    157e:	8f 3f       	cpi	r24, 0xFF	; 255
    1580:	09 f4       	brne	.+2      	; 0x1584 <xQueueGenericSend+0xb6>
    1582:	15 8e       	std	Z+29, r1	; 0x1d
    1584:	f8 01       	movw	r30, r16
    1586:	86 8d       	ldd	r24, Z+30	; 0x1e
    1588:	8f 3f       	cpi	r24, 0xFF	; 255
    158a:	09 f4       	brne	.+2      	; 0x158e <xQueueGenericSend+0xc0>
    158c:	16 8e       	std	Z+30, r1	; 0x1e
    158e:	0f 90       	pop	r0
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	be 01       	movw	r22, r28
    1594:	6c 5f       	subi	r22, 0xFC	; 252
    1596:	7f 4f       	sbci	r23, 0xFF	; 255
    1598:	ce 01       	movw	r24, r28
    159a:	01 96       	adiw	r24, 0x01	; 1
    159c:	0e 94 48 10 	call	0x2090	; 0x2090 <xTaskCheckForTimeOut>
    15a0:	81 11       	cpse	r24, r1
    15a2:	1f c0       	rjmp	.+62     	; 0x15e2 <xQueueGenericSend+0x114>
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	f8 94       	cli
    15a8:	0f 92       	push	r0
    15aa:	f8 01       	movw	r30, r16
    15ac:	92 8d       	ldd	r25, Z+26	; 0x1a
    15ae:	0f 90       	pop	r0
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	83 8d       	ldd	r24, Z+27	; 0x1b
    15b4:	98 13       	cpse	r25, r24
    15b6:	0f c0       	rjmp	.+30     	; 0x15d6 <xQueueGenericSend+0x108>
    15b8:	6c 81       	ldd	r22, Y+4	; 0x04
    15ba:	7d 81       	ldd	r23, Y+5	; 0x05
    15bc:	c7 01       	movw	r24, r14
    15be:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <vTaskPlaceOnEventList>
    15c2:	c8 01       	movw	r24, r16
    15c4:	0e 94 ac 09 	call	0x1358	; 0x1358 <prvUnlockQueue>
    15c8:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <xTaskResumeAll>
    15cc:	81 11       	cpse	r24, r1
    15ce:	9b cf       	rjmp	.-202    	; 0x1506 <xQueueGenericSend+0x38>
    15d0:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <vPortYield>
    15d4:	98 cf       	rjmp	.-208    	; 0x1506 <xQueueGenericSend+0x38>
    15d6:	c8 01       	movw	r24, r16
    15d8:	0e 94 ac 09 	call	0x1358	; 0x1358 <prvUnlockQueue>
    15dc:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <xTaskResumeAll>
    15e0:	92 cf       	rjmp	.-220    	; 0x1506 <xQueueGenericSend+0x38>
    15e2:	c8 01       	movw	r24, r16
    15e4:	0e 94 ac 09 	call	0x1358	; 0x1358 <prvUnlockQueue>
    15e8:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <xTaskResumeAll>
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	1f 91       	pop	r17
    15fe:	0f 91       	pop	r16
    1600:	ff 90       	pop	r15
    1602:	ef 90       	pop	r14
    1604:	df 90       	pop	r13
    1606:	cf 90       	pop	r12
    1608:	bf 90       	pop	r11
    160a:	af 90       	pop	r10
    160c:	9f 90       	pop	r9
    160e:	08 95       	ret

00001610 <xQueueCreateMutex>:
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
    1614:	48 2f       	mov	r20, r24
    1616:	60 e0       	ldi	r22, 0x00	; 0
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	0e 94 36 0a 	call	0x146c	; 0x146c <xQueueGenericCreate>
    161e:	ec 01       	movw	r28, r24
    1620:	00 97       	sbiw	r24, 0x00	; 0
    1622:	61 f0       	breq	.+24     	; 0x163c <xQueueCreateMutex+0x2c>
    1624:	1b 82       	std	Y+3, r1	; 0x03
    1626:	1a 82       	std	Y+2, r1	; 0x02
    1628:	19 82       	std	Y+1, r1	; 0x01
    162a:	18 82       	st	Y, r1
    162c:	1e 82       	std	Y+6, r1	; 0x06
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	40 e0       	ldi	r20, 0x00	; 0
    1632:	50 e0       	ldi	r21, 0x00	; 0
    1634:	60 e0       	ldi	r22, 0x00	; 0
    1636:	70 e0       	ldi	r23, 0x00	; 0
    1638:	0e 94 67 0a 	call	0x14ce	; 0x14ce <xQueueGenericSend>
    163c:	ce 01       	movw	r24, r28
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	08 95       	ret

00001644 <xQueueGenericSendFromISR>:
    1644:	ef 92       	push	r14
    1646:	ff 92       	push	r15
    1648:	0f 93       	push	r16
    164a:	1f 93       	push	r17
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	8a 01       	movw	r16, r20
    1652:	fc 01       	movw	r30, r24
    1654:	52 8d       	ldd	r21, Z+26	; 0x1a
    1656:	33 8d       	ldd	r19, Z+27	; 0x1b
    1658:	53 17       	cp	r21, r19
    165a:	10 f0       	brcs	.+4      	; 0x1660 <xQueueGenericSendFromISR+0x1c>
    165c:	22 30       	cpi	r18, 0x02	; 2
    165e:	f1 f4       	brne	.+60     	; 0x169c <xQueueGenericSendFromISR+0x58>
    1660:	42 2f       	mov	r20, r18
    1662:	78 01       	movw	r14, r16
    1664:	ec 01       	movw	r28, r24
    1666:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1668:	0e 94 31 09 	call	0x1262	; 0x1262 <prvCopyDataToQueue>
    166c:	1f 3f       	cpi	r17, 0xFF	; 255
    166e:	81 f4       	brne	.+32     	; 0x1690 <xQueueGenericSendFromISR+0x4c>
    1670:	89 89       	ldd	r24, Y+17	; 0x11
    1672:	88 23       	and	r24, r24
    1674:	a9 f0       	breq	.+42     	; 0x16a0 <xQueueGenericSendFromISR+0x5c>
    1676:	ce 01       	movw	r24, r28
    1678:	41 96       	adiw	r24, 0x11	; 17
    167a:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <xTaskRemoveFromEventList>
    167e:	88 23       	and	r24, r24
    1680:	89 f0       	breq	.+34     	; 0x16a4 <xQueueGenericSendFromISR+0x60>
    1682:	e1 14       	cp	r14, r1
    1684:	f1 04       	cpc	r15, r1
    1686:	81 f0       	breq	.+32     	; 0x16a8 <xQueueGenericSendFromISR+0x64>
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	f7 01       	movw	r30, r14
    168c:	80 83       	st	Z, r24
    168e:	0d c0       	rjmp	.+26     	; 0x16aa <xQueueGenericSendFromISR+0x66>
    1690:	ff 24       	eor	r15, r15
    1692:	f3 94       	inc	r15
    1694:	f1 0e       	add	r15, r17
    1696:	fe 8e       	std	Y+30, r15	; 0x1e
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	07 c0       	rjmp	.+14     	; 0x16aa <xQueueGenericSendFromISR+0x66>
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	05 c0       	rjmp	.+10     	; 0x16aa <xQueueGenericSendFromISR+0x66>
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	03 c0       	rjmp	.+6      	; 0x16aa <xQueueGenericSendFromISR+0x66>
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	01 c0       	rjmp	.+2      	; 0x16aa <xQueueGenericSendFromISR+0x66>
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	df 91       	pop	r29
    16ac:	cf 91       	pop	r28
    16ae:	1f 91       	pop	r17
    16b0:	0f 91       	pop	r16
    16b2:	ff 90       	pop	r15
    16b4:	ef 90       	pop	r14
    16b6:	08 95       	ret

000016b8 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    16b8:	8f 92       	push	r8
    16ba:	9f 92       	push	r9
    16bc:	af 92       	push	r10
    16be:	bf 92       	push	r11
    16c0:	cf 92       	push	r12
    16c2:	df 92       	push	r13
    16c4:	ef 92       	push	r14
    16c6:	ff 92       	push	r15
    16c8:	0f 93       	push	r16
    16ca:	1f 93       	push	r17
    16cc:	cf 93       	push	r28
    16ce:	df 93       	push	r29
    16d0:	00 d0       	rcall	.+0      	; 0x16d2 <xQueueGenericReceive+0x1a>
    16d2:	00 d0       	rcall	.+0      	; 0x16d4 <xQueueGenericReceive+0x1c>
    16d4:	1f 92       	push	r1
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	8c 01       	movw	r16, r24
    16dc:	5b 01       	movw	r10, r22
    16de:	5d 83       	std	Y+5, r21	; 0x05
    16e0:	4c 83       	std	Y+4, r20	; 0x04
    16e2:	82 2e       	mov	r8, r18
BaseType_t xEntryTimeSet = pdFALSE;
    16e4:	e1 2c       	mov	r14, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    16e6:	99 24       	eor	r9, r9
    16e8:	93 94       	inc	r9
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    16ea:	6c 01       	movw	r12, r24
    16ec:	81 e1       	ldi	r24, 0x11	; 17
    16ee:	c8 0e       	add	r12, r24
    16f0:	d1 1c       	adc	r13, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	f8 94       	cli
    16f6:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    16f8:	f8 01       	movw	r30, r16
    16fa:	f2 8c       	ldd	r15, Z+26	; 0x1a

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    16fc:	ff 20       	and	r15, r15
    16fe:	91 f1       	breq	.+100    	; 0x1764 <xQueueGenericReceive+0xac>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    1700:	c6 80       	ldd	r12, Z+6	; 0x06
    1702:	d7 80       	ldd	r13, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1704:	b5 01       	movw	r22, r10
    1706:	c8 01       	movw	r24, r16
    1708:	0e 94 92 09 	call	0x1324	; 0x1324 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    170c:	81 10       	cpse	r8, r1
    170e:	19 c0       	rjmp	.+50     	; 0x1742 <xQueueGenericReceive+0x8a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    1710:	fa 94       	dec	r15
    1712:	f8 01       	movw	r30, r16
    1714:	f2 8e       	std	Z+26, r15	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1716:	80 81       	ld	r24, Z
    1718:	91 81       	ldd	r25, Z+1	; 0x01
    171a:	89 2b       	or	r24, r25
    171c:	29 f4       	brne	.+10     	; 0x1728 <xQueueGenericReceive+0x70>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    171e:	0e 94 20 11 	call	0x2240	; 0x2240 <pvTaskIncrementMutexHeldCount>
    1722:	f8 01       	movw	r30, r16
    1724:	93 83       	std	Z+3, r25	; 0x03
    1726:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1728:	f8 01       	movw	r30, r16
    172a:	80 85       	ldd	r24, Z+8	; 0x08
    172c:	88 23       	and	r24, r24
    172e:	b1 f0       	breq	.+44     	; 0x175c <xQueueGenericReceive+0xa4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1730:	c8 01       	movw	r24, r16
    1732:	08 96       	adiw	r24, 0x08	; 8
    1734:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <xTaskRemoveFromEventList>
    1738:	88 23       	and	r24, r24
    173a:	81 f0       	breq	.+32     	; 0x175c <xQueueGenericReceive+0xa4>
						{
							queueYIELD_IF_USING_PREEMPTION();
    173c:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <vPortYield>
    1740:	0d c0       	rjmp	.+26     	; 0x175c <xQueueGenericReceive+0xa4>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    1742:	f8 01       	movw	r30, r16
    1744:	d7 82       	std	Z+7, r13	; 0x07
    1746:	c6 82       	std	Z+6, r12	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1748:	81 89       	ldd	r24, Z+17	; 0x11
    174a:	88 23       	and	r24, r24
    174c:	39 f0       	breq	.+14     	; 0x175c <xQueueGenericReceive+0xa4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    174e:	c8 01       	movw	r24, r16
    1750:	41 96       	adiw	r24, 0x11	; 17
    1752:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <xTaskRemoveFromEventList>
    1756:	81 11       	cpse	r24, r1
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    1758:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    175c:	0f 90       	pop	r0
    175e:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	64 c0       	rjmp	.+200    	; 0x182c <xQueueGenericReceive+0x174>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1764:	4c 81       	ldd	r20, Y+4	; 0x04
    1766:	5d 81       	ldd	r21, Y+5	; 0x05
    1768:	45 2b       	or	r20, r21
    176a:	21 f4       	brne	.+8      	; 0x1774 <xQueueGenericReceive+0xbc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    176c:	0f 90       	pop	r0
    176e:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	5c c0       	rjmp	.+184    	; 0x182c <xQueueGenericReceive+0x174>
				}
				else if( xEntryTimeSet == pdFALSE )
    1774:	e1 10       	cpse	r14, r1
    1776:	05 c0       	rjmp	.+10     	; 0x1782 <xQueueGenericReceive+0xca>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1778:	ce 01       	movw	r24, r28
    177a:	01 96       	adiw	r24, 0x01	; 1
    177c:	0e 94 3d 10 	call	0x207a	; 0x207a <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1780:	e9 2c       	mov	r14, r9
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1782:	0f 90       	pop	r0
    1784:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1786:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	0f 92       	push	r0
    1790:	f8 01       	movw	r30, r16
    1792:	85 8d       	ldd	r24, Z+29	; 0x1d
    1794:	8f 3f       	cpi	r24, 0xFF	; 255
    1796:	09 f4       	brne	.+2      	; 0x179a <xQueueGenericReceive+0xe2>
    1798:	15 8e       	std	Z+29, r1	; 0x1d
    179a:	f8 01       	movw	r30, r16
    179c:	96 8d       	ldd	r25, Z+30	; 0x1e
    179e:	9f 3f       	cpi	r25, 0xFF	; 255
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <xQueueGenericReceive+0xec>
    17a2:	16 8e       	std	Z+30, r1	; 0x1e
    17a4:	0f 90       	pop	r0
    17a6:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    17a8:	be 01       	movw	r22, r28
    17aa:	6c 5f       	subi	r22, 0xFC	; 252
    17ac:	7f 4f       	sbci	r23, 0xFF	; 255
    17ae:	ce 01       	movw	r24, r28
    17b0:	01 96       	adiw	r24, 0x01	; 1
    17b2:	0e 94 48 10 	call	0x2090	; 0x2090 <xTaskCheckForTimeOut>
    17b6:	81 11       	cpse	r24, r1
    17b8:	2b c0       	rjmp	.+86     	; 0x1810 <xQueueGenericReceive+0x158>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    17c0:	f8 01       	movw	r30, r16
    17c2:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    17c4:	0f 90       	pop	r0
    17c6:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    17c8:	81 11       	cpse	r24, r1
    17ca:	1c c0       	rjmp	.+56     	; 0x1804 <xQueueGenericReceive+0x14c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    17cc:	80 81       	ld	r24, Z
    17ce:	91 81       	ldd	r25, Z+1	; 0x01
    17d0:	89 2b       	or	r24, r25
    17d2:	49 f4       	brne	.+18     	; 0x17e6 <xQueueGenericReceive+0x12e>
					{
						taskENTER_CRITICAL();
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    17da:	82 81       	ldd	r24, Z+2	; 0x02
    17dc:	93 81       	ldd	r25, Z+3	; 0x03
    17de:	0e 94 7e 10 	call	0x20fc	; 0x20fc <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    17e2:	0f 90       	pop	r0
    17e4:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    17e6:	6c 81       	ldd	r22, Y+4	; 0x04
    17e8:	7d 81       	ldd	r23, Y+5	; 0x05
    17ea:	c6 01       	movw	r24, r12
    17ec:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    17f0:	c8 01       	movw	r24, r16
    17f2:	0e 94 ac 09 	call	0x1358	; 0x1358 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    17f6:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <xTaskResumeAll>
    17fa:	81 11       	cpse	r24, r1
    17fc:	7a cf       	rjmp	.-268    	; 0x16f2 <xQueueGenericReceive+0x3a>
				{
					portYIELD_WITHIN_API();
    17fe:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <vPortYield>
    1802:	77 cf       	rjmp	.-274    	; 0x16f2 <xQueueGenericReceive+0x3a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1804:	c8 01       	movw	r24, r16
    1806:	0e 94 ac 09 	call	0x1358	; 0x1358 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    180a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <xTaskResumeAll>
    180e:	71 cf       	rjmp	.-286    	; 0x16f2 <xQueueGenericReceive+0x3a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1810:	c8 01       	movw	r24, r16
    1812:	0e 94 ac 09 	call	0x1358	; 0x1358 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1816:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <xTaskResumeAll>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1820:	f8 01       	movw	r30, r16
    1822:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1824:	0f 90       	pop	r0
    1826:	0f be       	out	0x3f, r0	; 63
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1828:	81 11       	cpse	r24, r1
    182a:	63 cf       	rjmp	.-314    	; 0x16f2 <xQueueGenericReceive+0x3a>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	df 91       	pop	r29
    1838:	cf 91       	pop	r28
    183a:	1f 91       	pop	r17
    183c:	0f 91       	pop	r16
    183e:	ff 90       	pop	r15
    1840:	ef 90       	pop	r14
    1842:	df 90       	pop	r13
    1844:	cf 90       	pop	r12
    1846:	bf 90       	pop	r11
    1848:	af 90       	pop	r10
    184a:	9f 90       	pop	r9
    184c:	8f 90       	pop	r8
    184e:	08 95       	ret

00001850 <prvResetNextTaskUnblockTime>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
    1850:	e0 91 8a 07 	lds	r30, 0x078A	; 0x80078a <pxDelayedTaskList>
    1854:	f0 91 8b 07 	lds	r31, 0x078B	; 0x80078b <pxDelayedTaskList+0x1>
    1858:	80 81       	ld	r24, Z
    185a:	81 11       	cpse	r24, r1
    185c:	07 c0       	rjmp	.+14     	; 0x186c <prvResetNextTaskUnblockTime+0x1c>
    185e:	8f ef       	ldi	r24, 0xFF	; 255
    1860:	9f ef       	ldi	r25, 0xFF	; 255
    1862:	90 93 6b 07 	sts	0x076B, r25	; 0x80076b <xNextTaskUnblockTime+0x1>
    1866:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <xNextTaskUnblockTime>
    186a:	08 95       	ret
    186c:	e0 91 8a 07 	lds	r30, 0x078A	; 0x80078a <pxDelayedTaskList>
    1870:	f0 91 8b 07 	lds	r31, 0x078B	; 0x80078b <pxDelayedTaskList+0x1>
    1874:	05 80       	ldd	r0, Z+5	; 0x05
    1876:	f6 81       	ldd	r31, Z+6	; 0x06
    1878:	e0 2d       	mov	r30, r0
    187a:	06 80       	ldd	r0, Z+6	; 0x06
    187c:	f7 81       	ldd	r31, Z+7	; 0x07
    187e:	e0 2d       	mov	r30, r0
    1880:	82 81       	ldd	r24, Z+2	; 0x02
    1882:	93 81       	ldd	r25, Z+3	; 0x03
    1884:	90 93 6b 07 	sts	0x076B, r25	; 0x80076b <xNextTaskUnblockTime+0x1>
    1888:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <xNextTaskUnblockTime>
    188c:	08 95       	ret

0000188e <prvAddCurrentTaskToDelayedList>:
    188e:	0f 93       	push	r16
    1890:	1f 93       	push	r17
    1892:	cf 93       	push	r28
    1894:	df 93       	push	r29
    1896:	ec 01       	movw	r28, r24
    1898:	00 91 72 07 	lds	r16, 0x0772	; 0x800772 <xTickCount>
    189c:	10 91 73 07 	lds	r17, 0x0773	; 0x800773 <xTickCount+0x1>
    18a0:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    18a4:	90 91 c3 07 	lds	r25, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    18a8:	02 96       	adiw	r24, 0x02	; 2
    18aa:	0e 94 ae 05 	call	0xb5c	; 0xb5c <uxListRemove>
    18ae:	c0 0f       	add	r28, r16
    18b0:	d1 1f       	adc	r29, r17
    18b2:	e0 91 c2 07 	lds	r30, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    18b6:	f0 91 c3 07 	lds	r31, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    18ba:	d3 83       	std	Z+3, r29	; 0x03
    18bc:	c2 83       	std	Z+2, r28	; 0x02
    18be:	c0 17       	cp	r28, r16
    18c0:	d1 07       	cpc	r29, r17
    18c2:	68 f4       	brcc	.+26     	; 0x18de <prvAddCurrentTaskToDelayedList+0x50>
    18c4:	60 91 c2 07 	lds	r22, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    18c8:	70 91 c3 07 	lds	r23, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    18cc:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <pxOverflowDelayedTaskList>
    18d0:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <pxOverflowDelayedTaskList+0x1>
    18d4:	6e 5f       	subi	r22, 0xFE	; 254
    18d6:	7f 4f       	sbci	r23, 0xFF	; 255
    18d8:	0e 94 7d 05 	call	0xafa	; 0xafa <vListInsert>
    18dc:	17 c0       	rjmp	.+46     	; 0x190c <prvAddCurrentTaskToDelayedList+0x7e>
    18de:	60 91 c2 07 	lds	r22, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    18e2:	70 91 c3 07 	lds	r23, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    18e6:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <pxDelayedTaskList>
    18ea:	90 91 8b 07 	lds	r25, 0x078B	; 0x80078b <pxDelayedTaskList+0x1>
    18ee:	6e 5f       	subi	r22, 0xFE	; 254
    18f0:	7f 4f       	sbci	r23, 0xFF	; 255
    18f2:	0e 94 7d 05 	call	0xafa	; 0xafa <vListInsert>
    18f6:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <xNextTaskUnblockTime>
    18fa:	90 91 6b 07 	lds	r25, 0x076B	; 0x80076b <xNextTaskUnblockTime+0x1>
    18fe:	c8 17       	cp	r28, r24
    1900:	d9 07       	cpc	r29, r25
    1902:	20 f4       	brcc	.+8      	; 0x190c <prvAddCurrentTaskToDelayedList+0x7e>
    1904:	d0 93 6b 07 	sts	0x076B, r29	; 0x80076b <xNextTaskUnblockTime+0x1>
    1908:	c0 93 6a 07 	sts	0x076A, r28	; 0x80076a <xNextTaskUnblockTime>
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	1f 91       	pop	r17
    1912:	0f 91       	pop	r16
    1914:	08 95       	ret

00001916 <xTaskCreate>:
    1916:	4f 92       	push	r4
    1918:	5f 92       	push	r5
    191a:	6f 92       	push	r6
    191c:	7f 92       	push	r7
    191e:	8f 92       	push	r8
    1920:	9f 92       	push	r9
    1922:	af 92       	push	r10
    1924:	bf 92       	push	r11
    1926:	cf 92       	push	r12
    1928:	df 92       	push	r13
    192a:	ef 92       	push	r14
    192c:	ff 92       	push	r15
    192e:	0f 93       	push	r16
    1930:	cf 93       	push	r28
    1932:	df 93       	push	r29
    1934:	4c 01       	movw	r8, r24
    1936:	eb 01       	movw	r28, r22
    1938:	6a 01       	movw	r12, r20
    193a:	29 01       	movw	r4, r18
    193c:	ca 01       	movw	r24, r20
    193e:	0e 94 32 07 	call	0xe64	; 0xe64 <pvPortMalloc>
    1942:	5c 01       	movw	r10, r24
    1944:	89 2b       	or	r24, r25
    1946:	09 f4       	brne	.+2      	; 0x194a <xTaskCreate+0x34>
    1948:	ec c0       	rjmp	.+472    	; 0x1b22 <xTaskCreate+0x20c>
    194a:	8c e2       	ldi	r24, 0x2C	; 44
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	0e 94 32 07 	call	0xe64	; 0xe64 <pvPortMalloc>
    1952:	3c 01       	movw	r6, r24
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	b9 f0       	breq	.+46     	; 0x1986 <xTaskCreate+0x70>
    1958:	fc 01       	movw	r30, r24
    195a:	b0 8e       	std	Z+24, r11	; 0x18
    195c:	a7 8a       	std	Z+23, r10	; 0x17
    195e:	a6 01       	movw	r20, r12
    1960:	65 ea       	ldi	r22, 0xA5	; 165
    1962:	70 e0       	ldi	r23, 0x00	; 0
    1964:	c5 01       	movw	r24, r10
    1966:	0e 94 e6 12 	call	0x25cc	; 0x25cc <memset>
    196a:	f1 e0       	ldi	r31, 0x01	; 1
    196c:	cf 1a       	sub	r12, r31
    196e:	d1 08       	sbc	r13, r1
    1970:	f3 01       	movw	r30, r6
    1972:	87 89       	ldd	r24, Z+23	; 0x17
    1974:	90 8d       	ldd	r25, Z+24	; 0x18
    1976:	c8 0e       	add	r12, r24
    1978:	d9 1e       	adc	r13, r25
    197a:	88 81       	ld	r24, Y
    197c:	81 8f       	std	Z+25, r24	; 0x19
    197e:	88 81       	ld	r24, Y
    1980:	81 11       	cpse	r24, r1
    1982:	05 c0       	rjmp	.+10     	; 0x198e <xTaskCreate+0x78>
    1984:	14 c0       	rjmp	.+40     	; 0x19ae <xTaskCreate+0x98>
    1986:	c5 01       	movw	r24, r10
    1988:	0e 94 67 07 	call	0xece	; 0xece <vPortFree>
    198c:	ca c0       	rjmp	.+404    	; 0x1b22 <xTaskCreate+0x20c>
    198e:	d3 01       	movw	r26, r6
    1990:	5a 96       	adiw	r26, 0x1a	; 26
    1992:	fe 01       	movw	r30, r28
    1994:	31 96       	adiw	r30, 0x01	; 1
    1996:	9e 01       	movw	r18, r28
    1998:	28 5f       	subi	r18, 0xF8	; 248
    199a:	3f 4f       	sbci	r19, 0xFF	; 255
    199c:	ef 01       	movw	r28, r30
    199e:	81 91       	ld	r24, Z+
    19a0:	8d 93       	st	X+, r24
    19a2:	88 81       	ld	r24, Y
    19a4:	88 23       	and	r24, r24
    19a6:	19 f0       	breq	.+6      	; 0x19ae <xTaskCreate+0x98>
    19a8:	e2 17       	cp	r30, r18
    19aa:	f3 07       	cpc	r31, r19
    19ac:	b9 f7       	brne	.-18     	; 0x199c <xTaskCreate+0x86>
    19ae:	f3 01       	movw	r30, r6
    19b0:	10 a2       	std	Z+32, r1	; 0x20
    19b2:	04 30       	cpi	r16, 0x04	; 4
    19b4:	08 f0       	brcs	.+2      	; 0x19b8 <xTaskCreate+0xa2>
    19b6:	03 e0       	ldi	r16, 0x03	; 3
    19b8:	f3 01       	movw	r30, r6
    19ba:	06 8b       	std	Z+22, r16	; 0x16
    19bc:	03 a3       	std	Z+35, r16	; 0x23
    19be:	14 a2       	std	Z+36, r1	; 0x24
    19c0:	e3 01       	movw	r28, r6
    19c2:	22 96       	adiw	r28, 0x02	; 2
    19c4:	ce 01       	movw	r24, r28
    19c6:	0e 94 58 05 	call	0xab0	; 0xab0 <vListInitialiseItem>
    19ca:	c3 01       	movw	r24, r6
    19cc:	0c 96       	adiw	r24, 0x0c	; 12
    19ce:	0e 94 58 05 	call	0xab0	; 0xab0 <vListInitialiseItem>
    19d2:	f3 01       	movw	r30, r6
    19d4:	71 86       	std	Z+9, r7	; 0x09
    19d6:	60 86       	std	Z+8, r6	; 0x08
    19d8:	84 e0       	ldi	r24, 0x04	; 4
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	80 1b       	sub	r24, r16
    19de:	91 09       	sbc	r25, r1
    19e0:	95 87       	std	Z+13, r25	; 0x0d
    19e2:	84 87       	std	Z+12, r24	; 0x0c
    19e4:	73 8a       	std	Z+19, r7	; 0x13
    19e6:	62 8a       	std	Z+18, r6	; 0x12
    19e8:	16 a2       	std	Z+38, r1	; 0x26
    19ea:	15 a2       	std	Z+37, r1	; 0x25
    19ec:	17 a2       	std	Z+39, r1	; 0x27
    19ee:	10 a6       	std	Z+40, r1	; 0x28
    19f0:	11 a6       	std	Z+41, r1	; 0x29
    19f2:	12 a6       	std	Z+42, r1	; 0x2a
    19f4:	13 a6       	std	Z+43, r1	; 0x2b
    19f6:	a2 01       	movw	r20, r4
    19f8:	b4 01       	movw	r22, r8
    19fa:	c6 01       	movw	r24, r12
    19fc:	0e 94 d4 05 	call	0xba8	; 0xba8 <pxPortInitialiseStack>
    1a00:	f3 01       	movw	r30, r6
    1a02:	91 83       	std	Z+1, r25	; 0x01
    1a04:	80 83       	st	Z, r24
    1a06:	e1 14       	cp	r14, r1
    1a08:	f1 04       	cpc	r15, r1
    1a0a:	19 f0       	breq	.+6      	; 0x1a12 <xTaskCreate+0xfc>
    1a0c:	f7 01       	movw	r30, r14
    1a0e:	71 82       	std	Z+1, r7	; 0x01
    1a10:	60 82       	st	Z, r6
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	0f 92       	push	r0
    1a18:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <uxCurrentNumberOfTasks>
    1a1c:	8f 5f       	subi	r24, 0xFF	; 255
    1a1e:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <uxCurrentNumberOfTasks>
    1a22:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    1a26:	90 91 c3 07 	lds	r25, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    1a2a:	89 2b       	or	r24, r25
    1a2c:	a9 f5       	brne	.+106    	; 0x1a98 <xTaskCreate+0x182>
    1a2e:	70 92 c3 07 	sts	0x07C3, r7	; 0x8007c3 <pxCurrentTCB+0x1>
    1a32:	60 92 c2 07 	sts	0x07C2, r6	; 0x8007c2 <pxCurrentTCB>
    1a36:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <uxCurrentNumberOfTasks>
    1a3a:	81 30       	cpi	r24, 0x01	; 1
    1a3c:	f1 f5       	brne	.+124    	; 0x1aba <xTaskCreate+0x1a4>
    1a3e:	8e e9       	ldi	r24, 0x9E	; 158
    1a40:	97 e0       	ldi	r25, 0x07	; 7
    1a42:	0e 94 4a 05 	call	0xa94	; 0xa94 <vListInitialise>
    1a46:	87 ea       	ldi	r24, 0xA7	; 167
    1a48:	97 e0       	ldi	r25, 0x07	; 7
    1a4a:	0e 94 4a 05 	call	0xa94	; 0xa94 <vListInitialise>
    1a4e:	80 eb       	ldi	r24, 0xB0	; 176
    1a50:	97 e0       	ldi	r25, 0x07	; 7
    1a52:	0e 94 4a 05 	call	0xa94	; 0xa94 <vListInitialise>
    1a56:	89 eb       	ldi	r24, 0xB9	; 185
    1a58:	97 e0       	ldi	r25, 0x07	; 7
    1a5a:	0e 94 4a 05 	call	0xa94	; 0xa94 <vListInitialise>
    1a5e:	85 e9       	ldi	r24, 0x95	; 149
    1a60:	97 e0       	ldi	r25, 0x07	; 7
    1a62:	0e 94 4a 05 	call	0xa94	; 0xa94 <vListInitialise>
    1a66:	8c e8       	ldi	r24, 0x8C	; 140
    1a68:	97 e0       	ldi	r25, 0x07	; 7
    1a6a:	0e 94 4a 05 	call	0xa94	; 0xa94 <vListInitialise>
    1a6e:	8f e7       	ldi	r24, 0x7F	; 127
    1a70:	97 e0       	ldi	r25, 0x07	; 7
    1a72:	0e 94 4a 05 	call	0xa94	; 0xa94 <vListInitialise>
    1a76:	86 e7       	ldi	r24, 0x76	; 118
    1a78:	97 e0       	ldi	r25, 0x07	; 7
    1a7a:	0e 94 4a 05 	call	0xa94	; 0xa94 <vListInitialise>
    1a7e:	85 e9       	ldi	r24, 0x95	; 149
    1a80:	97 e0       	ldi	r25, 0x07	; 7
    1a82:	90 93 8b 07 	sts	0x078B, r25	; 0x80078b <pxDelayedTaskList+0x1>
    1a86:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <pxDelayedTaskList>
    1a8a:	8c e8       	ldi	r24, 0x8C	; 140
    1a8c:	97 e0       	ldi	r25, 0x07	; 7
    1a8e:	90 93 89 07 	sts	0x0789, r25	; 0x800789 <pxOverflowDelayedTaskList+0x1>
    1a92:	80 93 88 07 	sts	0x0788, r24	; 0x800788 <pxOverflowDelayedTaskList>
    1a96:	11 c0       	rjmp	.+34     	; 0x1aba <xTaskCreate+0x1a4>
    1a98:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <xSchedulerRunning>
    1a9c:	81 11       	cpse	r24, r1
    1a9e:	0d c0       	rjmp	.+26     	; 0x1aba <xTaskCreate+0x1a4>
    1aa0:	e0 91 c2 07 	lds	r30, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    1aa4:	f0 91 c3 07 	lds	r31, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    1aa8:	96 89       	ldd	r25, Z+22	; 0x16
    1aaa:	f3 01       	movw	r30, r6
    1aac:	86 89       	ldd	r24, Z+22	; 0x16
    1aae:	89 17       	cp	r24, r25
    1ab0:	20 f0       	brcs	.+8      	; 0x1aba <xTaskCreate+0x1a4>
    1ab2:	70 92 c3 07 	sts	0x07C3, r7	; 0x8007c3 <pxCurrentTCB+0x1>
    1ab6:	60 92 c2 07 	sts	0x07C2, r6	; 0x8007c2 <pxCurrentTCB>
    1aba:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <uxTaskNumber>
    1abe:	8f 5f       	subi	r24, 0xFF	; 255
    1ac0:	80 93 6c 07 	sts	0x076C, r24	; 0x80076c <uxTaskNumber>
    1ac4:	f3 01       	movw	r30, r6
    1ac6:	81 a3       	std	Z+33, r24	; 0x21
    1ac8:	86 89       	ldd	r24, Z+22	; 0x16
    1aca:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <uxTopReadyPriority>
    1ace:	98 17       	cp	r25, r24
    1ad0:	10 f4       	brcc	.+4      	; 0x1ad6 <xTaskCreate+0x1c0>
    1ad2:	80 93 71 07 	sts	0x0771, r24	; 0x800771 <uxTopReadyPriority>
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	9c 01       	movw	r18, r24
    1ada:	22 0f       	add	r18, r18
    1adc:	33 1f       	adc	r19, r19
    1ade:	22 0f       	add	r18, r18
    1ae0:	33 1f       	adc	r19, r19
    1ae2:	22 0f       	add	r18, r18
    1ae4:	33 1f       	adc	r19, r19
    1ae6:	82 0f       	add	r24, r18
    1ae8:	93 1f       	adc	r25, r19
    1aea:	be 01       	movw	r22, r28
    1aec:	82 56       	subi	r24, 0x62	; 98
    1aee:	98 4f       	sbci	r25, 0xF8	; 248
    1af0:	0e 94 5c 05 	call	0xab8	; 0xab8 <vListInsertEnd>
    1af4:	0f 90       	pop	r0
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <xSchedulerRunning>
    1afc:	88 23       	and	r24, r24
    1afe:	69 f0       	breq	.+26     	; 0x1b1a <xTaskCreate+0x204>
    1b00:	e0 91 c2 07 	lds	r30, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    1b04:	f0 91 c3 07 	lds	r31, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    1b08:	96 89       	ldd	r25, Z+22	; 0x16
    1b0a:	f3 01       	movw	r30, r6
    1b0c:	86 89       	ldd	r24, Z+22	; 0x16
    1b0e:	98 17       	cp	r25, r24
    1b10:	30 f4       	brcc	.+12     	; 0x1b1e <xTaskCreate+0x208>
    1b12:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <vPortYield>
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	05 c0       	rjmp	.+10     	; 0x1b24 <xTaskCreate+0x20e>
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	03 c0       	rjmp	.+6      	; 0x1b24 <xTaskCreate+0x20e>
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	01 c0       	rjmp	.+2      	; 0x1b24 <xTaskCreate+0x20e>
    1b22:	8f ef       	ldi	r24, 0xFF	; 255
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	0f 91       	pop	r16
    1b2a:	ff 90       	pop	r15
    1b2c:	ef 90       	pop	r14
    1b2e:	df 90       	pop	r13
    1b30:	cf 90       	pop	r12
    1b32:	bf 90       	pop	r11
    1b34:	af 90       	pop	r10
    1b36:	9f 90       	pop	r9
    1b38:	8f 90       	pop	r8
    1b3a:	7f 90       	pop	r7
    1b3c:	6f 90       	pop	r6
    1b3e:	5f 90       	pop	r5
    1b40:	4f 90       	pop	r4
    1b42:	08 95       	ret

00001b44 <vTaskStartScheduler>:
    1b44:	ef 92       	push	r14
    1b46:	ff 92       	push	r15
    1b48:	0f 93       	push	r16
    1b4a:	0f 2e       	mov	r0, r31
    1b4c:	f8 e6       	ldi	r31, 0x68	; 104
    1b4e:	ef 2e       	mov	r14, r31
    1b50:	f7 e0       	ldi	r31, 0x07	; 7
    1b52:	ff 2e       	mov	r15, r31
    1b54:	f0 2d       	mov	r31, r0
    1b56:	00 e0       	ldi	r16, 0x00	; 0
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	45 e5       	ldi	r20, 0x55	; 85
    1b5e:	50 e0       	ldi	r21, 0x00	; 0
    1b60:	6c e5       	ldi	r22, 0x5C	; 92
    1b62:	71 e0       	ldi	r23, 0x01	; 1
    1b64:	80 e2       	ldi	r24, 0x20	; 32
    1b66:	9f e0       	ldi	r25, 0x0F	; 15
    1b68:	0e 94 8b 0c 	call	0x1916	; 0x1916 <xTaskCreate>
    1b6c:	81 30       	cpi	r24, 0x01	; 1
    1b6e:	81 f4       	brne	.+32     	; 0x1b90 <vTaskStartScheduler+0x4c>
    1b70:	f8 94       	cli
    1b72:	8f ef       	ldi	r24, 0xFF	; 255
    1b74:	9f ef       	ldi	r25, 0xFF	; 255
    1b76:	90 93 6b 07 	sts	0x076B, r25	; 0x80076b <xNextTaskUnblockTime+0x1>
    1b7a:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <xNextTaskUnblockTime>
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	80 93 70 07 	sts	0x0770, r24	; 0x800770 <xSchedulerRunning>
    1b84:	10 92 73 07 	sts	0x0773, r1	; 0x800773 <xTickCount+0x1>
    1b88:	10 92 72 07 	sts	0x0772, r1	; 0x800772 <xTickCount>
    1b8c:	0e 94 40 06 	call	0xc80	; 0xc80 <xPortStartScheduler>
    1b90:	0f 91       	pop	r16
    1b92:	ff 90       	pop	r15
    1b94:	ef 90       	pop	r14
    1b96:	08 95       	ret

00001b98 <vTaskSuspendAll>:
    1b98:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <uxSchedulerSuspended>
    1b9c:	8f 5f       	subi	r24, 0xFF	; 255
    1b9e:	80 93 67 07 	sts	0x0767, r24	; 0x800767 <uxSchedulerSuspended>
    1ba2:	08 95       	ret

00001ba4 <xTaskIncrementTick>:
    1ba4:	cf 92       	push	r12
    1ba6:	df 92       	push	r13
    1ba8:	ef 92       	push	r14
    1baa:	ff 92       	push	r15
    1bac:	0f 93       	push	r16
    1bae:	1f 93       	push	r17
    1bb0:	cf 93       	push	r28
    1bb2:	df 93       	push	r29
    1bb4:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <uxSchedulerSuspended>
    1bb8:	81 11       	cpse	r24, r1
    1bba:	99 c0       	rjmp	.+306    	; 0x1cee <xTaskIncrementTick+0x14a>
    1bbc:	e0 90 72 07 	lds	r14, 0x0772	; 0x800772 <xTickCount>
    1bc0:	f0 90 73 07 	lds	r15, 0x0773	; 0x800773 <xTickCount+0x1>
    1bc4:	8f ef       	ldi	r24, 0xFF	; 255
    1bc6:	e8 1a       	sub	r14, r24
    1bc8:	f8 0a       	sbc	r15, r24
    1bca:	f0 92 73 07 	sts	0x0773, r15	; 0x800773 <xTickCount+0x1>
    1bce:	e0 92 72 07 	sts	0x0772, r14	; 0x800772 <xTickCount>
    1bd2:	e1 14       	cp	r14, r1
    1bd4:	f1 04       	cpc	r15, r1
    1bd6:	b9 f4       	brne	.+46     	; 0x1c06 <xTaskIncrementTick+0x62>
    1bd8:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <pxDelayedTaskList>
    1bdc:	90 91 8b 07 	lds	r25, 0x078B	; 0x80078b <pxDelayedTaskList+0x1>
    1be0:	20 91 88 07 	lds	r18, 0x0788	; 0x800788 <pxOverflowDelayedTaskList>
    1be4:	30 91 89 07 	lds	r19, 0x0789	; 0x800789 <pxOverflowDelayedTaskList+0x1>
    1be8:	30 93 8b 07 	sts	0x078B, r19	; 0x80078b <pxDelayedTaskList+0x1>
    1bec:	20 93 8a 07 	sts	0x078A, r18	; 0x80078a <pxDelayedTaskList>
    1bf0:	90 93 89 07 	sts	0x0789, r25	; 0x800789 <pxOverflowDelayedTaskList+0x1>
    1bf4:	80 93 88 07 	sts	0x0788, r24	; 0x800788 <pxOverflowDelayedTaskList>
    1bf8:	80 91 6d 07 	lds	r24, 0x076D	; 0x80076d <xNumOfOverflows>
    1bfc:	8f 5f       	subi	r24, 0xFF	; 255
    1bfe:	80 93 6d 07 	sts	0x076D, r24	; 0x80076d <xNumOfOverflows>
    1c02:	0e 94 28 0c 	call	0x1850	; 0x1850 <prvResetNextTaskUnblockTime>
    1c06:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <xNextTaskUnblockTime>
    1c0a:	90 91 6b 07 	lds	r25, 0x076B	; 0x80076b <xNextTaskUnblockTime+0x1>
    1c0e:	e8 16       	cp	r14, r24
    1c10:	f9 06       	cpc	r15, r25
    1c12:	10 f4       	brcc	.+4      	; 0x1c18 <xTaskIncrementTick+0x74>
    1c14:	d1 2c       	mov	r13, r1
    1c16:	53 c0       	rjmp	.+166    	; 0x1cbe <xTaskIncrementTick+0x11a>
    1c18:	d1 2c       	mov	r13, r1
    1c1a:	cc 24       	eor	r12, r12
    1c1c:	c3 94       	inc	r12
    1c1e:	e0 91 8a 07 	lds	r30, 0x078A	; 0x80078a <pxDelayedTaskList>
    1c22:	f0 91 8b 07 	lds	r31, 0x078B	; 0x80078b <pxDelayedTaskList+0x1>
    1c26:	90 81       	ld	r25, Z
    1c28:	91 11       	cpse	r25, r1
    1c2a:	07 c0       	rjmp	.+14     	; 0x1c3a <xTaskIncrementTick+0x96>
    1c2c:	8f ef       	ldi	r24, 0xFF	; 255
    1c2e:	9f ef       	ldi	r25, 0xFF	; 255
    1c30:	90 93 6b 07 	sts	0x076B, r25	; 0x80076b <xNextTaskUnblockTime+0x1>
    1c34:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <xNextTaskUnblockTime>
    1c38:	42 c0       	rjmp	.+132    	; 0x1cbe <xTaskIncrementTick+0x11a>
    1c3a:	e0 91 8a 07 	lds	r30, 0x078A	; 0x80078a <pxDelayedTaskList>
    1c3e:	f0 91 8b 07 	lds	r31, 0x078B	; 0x80078b <pxDelayedTaskList+0x1>
    1c42:	05 80       	ldd	r0, Z+5	; 0x05
    1c44:	f6 81       	ldd	r31, Z+6	; 0x06
    1c46:	e0 2d       	mov	r30, r0
    1c48:	c6 81       	ldd	r28, Z+6	; 0x06
    1c4a:	d7 81       	ldd	r29, Z+7	; 0x07
    1c4c:	2a 81       	ldd	r18, Y+2	; 0x02
    1c4e:	3b 81       	ldd	r19, Y+3	; 0x03
    1c50:	e2 16       	cp	r14, r18
    1c52:	f3 06       	cpc	r15, r19
    1c54:	28 f4       	brcc	.+10     	; 0x1c60 <xTaskIncrementTick+0xbc>
    1c56:	30 93 6b 07 	sts	0x076B, r19	; 0x80076b <xNextTaskUnblockTime+0x1>
    1c5a:	20 93 6a 07 	sts	0x076A, r18	; 0x80076a <xNextTaskUnblockTime>
    1c5e:	2f c0       	rjmp	.+94     	; 0x1cbe <xTaskIncrementTick+0x11a>
    1c60:	8e 01       	movw	r16, r28
    1c62:	0e 5f       	subi	r16, 0xFE	; 254
    1c64:	1f 4f       	sbci	r17, 0xFF	; 255
    1c66:	c8 01       	movw	r24, r16
    1c68:	0e 94 ae 05 	call	0xb5c	; 0xb5c <uxListRemove>
    1c6c:	8c 89       	ldd	r24, Y+20	; 0x14
    1c6e:	9d 89       	ldd	r25, Y+21	; 0x15
    1c70:	89 2b       	or	r24, r25
    1c72:	21 f0       	breq	.+8      	; 0x1c7c <xTaskIncrementTick+0xd8>
    1c74:	ce 01       	movw	r24, r28
    1c76:	0c 96       	adiw	r24, 0x0c	; 12
    1c78:	0e 94 ae 05 	call	0xb5c	; 0xb5c <uxListRemove>
    1c7c:	2e 89       	ldd	r18, Y+22	; 0x16
    1c7e:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <uxTopReadyPriority>
    1c82:	82 17       	cp	r24, r18
    1c84:	10 f4       	brcc	.+4      	; 0x1c8a <xTaskIncrementTick+0xe6>
    1c86:	20 93 71 07 	sts	0x0771, r18	; 0x800771 <uxTopReadyPriority>
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	c9 01       	movw	r24, r18
    1c8e:	88 0f       	add	r24, r24
    1c90:	99 1f       	adc	r25, r25
    1c92:	88 0f       	add	r24, r24
    1c94:	99 1f       	adc	r25, r25
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	82 0f       	add	r24, r18
    1c9c:	93 1f       	adc	r25, r19
    1c9e:	b8 01       	movw	r22, r16
    1ca0:	82 56       	subi	r24, 0x62	; 98
    1ca2:	98 4f       	sbci	r25, 0xF8	; 248
    1ca4:	0e 94 5c 05 	call	0xab8	; 0xab8 <vListInsertEnd>
    1ca8:	e0 91 c2 07 	lds	r30, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    1cac:	f0 91 c3 07 	lds	r31, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    1cb0:	9e 89       	ldd	r25, Y+22	; 0x16
    1cb2:	86 89       	ldd	r24, Z+22	; 0x16
    1cb4:	98 17       	cp	r25, r24
    1cb6:	08 f4       	brcc	.+2      	; 0x1cba <xTaskIncrementTick+0x116>
    1cb8:	b2 cf       	rjmp	.-156    	; 0x1c1e <xTaskIncrementTick+0x7a>
    1cba:	dc 2c       	mov	r13, r12
    1cbc:	b0 cf       	rjmp	.-160    	; 0x1c1e <xTaskIncrementTick+0x7a>
    1cbe:	e0 91 c2 07 	lds	r30, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    1cc2:	f0 91 c3 07 	lds	r31, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    1cc6:	86 89       	ldd	r24, Z+22	; 0x16
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	fc 01       	movw	r30, r24
    1ccc:	ee 0f       	add	r30, r30
    1cce:	ff 1f       	adc	r31, r31
    1cd0:	ee 0f       	add	r30, r30
    1cd2:	ff 1f       	adc	r31, r31
    1cd4:	ee 0f       	add	r30, r30
    1cd6:	ff 1f       	adc	r31, r31
    1cd8:	8e 0f       	add	r24, r30
    1cda:	9f 1f       	adc	r25, r31
    1cdc:	fc 01       	movw	r30, r24
    1cde:	e2 56       	subi	r30, 0x62	; 98
    1ce0:	f8 4f       	sbci	r31, 0xF8	; 248
    1ce2:	80 81       	ld	r24, Z
    1ce4:	82 30       	cpi	r24, 0x02	; 2
    1ce6:	48 f0       	brcs	.+18     	; 0x1cfa <xTaskIncrementTick+0x156>
    1ce8:	dd 24       	eor	r13, r13
    1cea:	d3 94       	inc	r13
    1cec:	06 c0       	rjmp	.+12     	; 0x1cfa <xTaskIncrementTick+0x156>
    1cee:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <uxPendedTicks>
    1cf2:	8f 5f       	subi	r24, 0xFF	; 255
    1cf4:	80 93 6f 07 	sts	0x076F, r24	; 0x80076f <uxPendedTicks>
    1cf8:	d1 2c       	mov	r13, r1
    1cfa:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <xYieldPending>
    1cfe:	88 23       	and	r24, r24
    1d00:	11 f0       	breq	.+4      	; 0x1d06 <xTaskIncrementTick+0x162>
    1d02:	dd 24       	eor	r13, r13
    1d04:	d3 94       	inc	r13
    1d06:	8d 2d       	mov	r24, r13
    1d08:	df 91       	pop	r29
    1d0a:	cf 91       	pop	r28
    1d0c:	1f 91       	pop	r17
    1d0e:	0f 91       	pop	r16
    1d10:	ff 90       	pop	r15
    1d12:	ef 90       	pop	r14
    1d14:	df 90       	pop	r13
    1d16:	cf 90       	pop	r12
    1d18:	08 95       	ret

00001d1a <xTaskResumeAll>:
    1d1a:	df 92       	push	r13
    1d1c:	ef 92       	push	r14
    1d1e:	ff 92       	push	r15
    1d20:	0f 93       	push	r16
    1d22:	1f 93       	push	r17
    1d24:	cf 93       	push	r28
    1d26:	df 93       	push	r29
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	f8 94       	cli
    1d2c:	0f 92       	push	r0
    1d2e:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <uxSchedulerSuspended>
    1d32:	81 50       	subi	r24, 0x01	; 1
    1d34:	80 93 67 07 	sts	0x0767, r24	; 0x800767 <uxSchedulerSuspended>
    1d38:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <uxSchedulerSuspended>
    1d3c:	81 11       	cpse	r24, r1
    1d3e:	5f c0       	rjmp	.+190    	; 0x1dfe <xTaskResumeAll+0xe4>
    1d40:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <uxCurrentNumberOfTasks>
    1d44:	81 11       	cpse	r24, r1
    1d46:	33 c0       	rjmp	.+102    	; 0x1dae <xTaskResumeAll+0x94>
    1d48:	5d c0       	rjmp	.+186    	; 0x1e04 <xTaskResumeAll+0xea>
    1d4a:	d7 01       	movw	r26, r14
    1d4c:	15 96       	adiw	r26, 0x05	; 5
    1d4e:	ed 91       	ld	r30, X+
    1d50:	fc 91       	ld	r31, X
    1d52:	16 97       	sbiw	r26, 0x06	; 6
    1d54:	c6 81       	ldd	r28, Z+6	; 0x06
    1d56:	d7 81       	ldd	r29, Z+7	; 0x07
    1d58:	ce 01       	movw	r24, r28
    1d5a:	0c 96       	adiw	r24, 0x0c	; 12
    1d5c:	0e 94 ae 05 	call	0xb5c	; 0xb5c <uxListRemove>
    1d60:	8e 01       	movw	r16, r28
    1d62:	0e 5f       	subi	r16, 0xFE	; 254
    1d64:	1f 4f       	sbci	r17, 0xFF	; 255
    1d66:	c8 01       	movw	r24, r16
    1d68:	0e 94 ae 05 	call	0xb5c	; 0xb5c <uxListRemove>
    1d6c:	2e 89       	ldd	r18, Y+22	; 0x16
    1d6e:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <uxTopReadyPriority>
    1d72:	82 17       	cp	r24, r18
    1d74:	10 f4       	brcc	.+4      	; 0x1d7a <xTaskResumeAll+0x60>
    1d76:	20 93 71 07 	sts	0x0771, r18	; 0x800771 <uxTopReadyPriority>
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	c9 01       	movw	r24, r18
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	82 0f       	add	r24, r18
    1d8c:	93 1f       	adc	r25, r19
    1d8e:	b8 01       	movw	r22, r16
    1d90:	82 56       	subi	r24, 0x62	; 98
    1d92:	98 4f       	sbci	r25, 0xF8	; 248
    1d94:	0e 94 5c 05 	call	0xab8	; 0xab8 <vListInsertEnd>
    1d98:	e0 91 c2 07 	lds	r30, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    1d9c:	f0 91 c3 07 	lds	r31, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    1da0:	9e 89       	ldd	r25, Y+22	; 0x16
    1da2:	86 89       	ldd	r24, Z+22	; 0x16
    1da4:	98 17       	cp	r25, r24
    1da6:	68 f0       	brcs	.+26     	; 0x1dc2 <xTaskResumeAll+0xa8>
    1da8:	d0 92 6e 07 	sts	0x076E, r13	; 0x80076e <xYieldPending>
    1dac:	0a c0       	rjmp	.+20     	; 0x1dc2 <xTaskResumeAll+0xa8>
    1dae:	c0 e0       	ldi	r28, 0x00	; 0
    1db0:	d0 e0       	ldi	r29, 0x00	; 0
    1db2:	0f 2e       	mov	r0, r31
    1db4:	ff e7       	ldi	r31, 0x7F	; 127
    1db6:	ef 2e       	mov	r14, r31
    1db8:	f7 e0       	ldi	r31, 0x07	; 7
    1dba:	ff 2e       	mov	r15, r31
    1dbc:	f0 2d       	mov	r31, r0
    1dbe:	dd 24       	eor	r13, r13
    1dc0:	d3 94       	inc	r13
    1dc2:	f7 01       	movw	r30, r14
    1dc4:	80 81       	ld	r24, Z
    1dc6:	81 11       	cpse	r24, r1
    1dc8:	c0 cf       	rjmp	.-128    	; 0x1d4a <xTaskResumeAll+0x30>
    1dca:	cd 2b       	or	r28, r29
    1dcc:	11 f0       	breq	.+4      	; 0x1dd2 <xTaskResumeAll+0xb8>
    1dce:	0e 94 28 0c 	call	0x1850	; 0x1850 <prvResetNextTaskUnblockTime>
    1dd2:	c0 91 6f 07 	lds	r28, 0x076F	; 0x80076f <uxPendedTicks>
    1dd6:	cc 23       	and	r28, r28
    1dd8:	51 f0       	breq	.+20     	; 0x1dee <xTaskResumeAll+0xd4>
    1dda:	d1 e0       	ldi	r29, 0x01	; 1
    1ddc:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <xTaskIncrementTick>
    1de0:	81 11       	cpse	r24, r1
    1de2:	d0 93 6e 07 	sts	0x076E, r29	; 0x80076e <xYieldPending>
    1de6:	c1 50       	subi	r28, 0x01	; 1
    1de8:	c9 f7       	brne	.-14     	; 0x1ddc <xTaskResumeAll+0xc2>
    1dea:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <uxPendedTicks>
    1dee:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <xYieldPending>
    1df2:	88 23       	and	r24, r24
    1df4:	31 f0       	breq	.+12     	; 0x1e02 <xTaskResumeAll+0xe8>
    1df6:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <vPortYield>
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	03 c0       	rjmp	.+6      	; 0x1e04 <xTaskResumeAll+0xea>
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	01 c0       	rjmp	.+2      	; 0x1e04 <xTaskResumeAll+0xea>
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	0f 90       	pop	r0
    1e06:	0f be       	out	0x3f, r0	; 63
    1e08:	df 91       	pop	r29
    1e0a:	cf 91       	pop	r28
    1e0c:	1f 91       	pop	r17
    1e0e:	0f 91       	pop	r16
    1e10:	ff 90       	pop	r15
    1e12:	ef 90       	pop	r14
    1e14:	df 90       	pop	r13
    1e16:	08 95       	ret

00001e18 <vTaskDelay>:
    1e18:	cf 93       	push	r28
    1e1a:	df 93       	push	r29
    1e1c:	ec 01       	movw	r28, r24
    1e1e:	89 2b       	or	r24, r25
    1e20:	51 f0       	breq	.+20     	; 0x1e36 <vTaskDelay+0x1e>
    1e22:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <vTaskSuspendAll>
    1e26:	60 e0       	ldi	r22, 0x00	; 0
    1e28:	ce 01       	movw	r24, r28
    1e2a:	0e 94 47 0c 	call	0x188e	; 0x188e <prvAddCurrentTaskToDelayedList>
    1e2e:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <xTaskResumeAll>
    1e32:	81 11       	cpse	r24, r1
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <vTaskDelay+0x22>
    1e36:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <vPortYield>
    1e3a:	df 91       	pop	r29
    1e3c:	cf 91       	pop	r28
    1e3e:	08 95       	ret

00001e40 <prvIdleTask>:
    1e40:	06 e7       	ldi	r16, 0x76	; 118
    1e42:	17 e0       	ldi	r17, 0x07	; 7
    1e44:	0f 2e       	mov	r0, r31
    1e46:	fe e9       	ldi	r31, 0x9E	; 158
    1e48:	ef 2e       	mov	r14, r31
    1e4a:	f7 e0       	ldi	r31, 0x07	; 7
    1e4c:	ff 2e       	mov	r15, r31
    1e4e:	f0 2d       	mov	r31, r0
    1e50:	29 c0       	rjmp	.+82     	; 0x1ea4 <prvIdleTask+0x64>
    1e52:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <vTaskSuspendAll>
    1e56:	d8 01       	movw	r26, r16
    1e58:	cc 91       	ld	r28, X
    1e5a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <xTaskResumeAll>
    1e5e:	cc 23       	and	r28, r28
    1e60:	09 f1       	breq	.+66     	; 0x1ea4 <prvIdleTask+0x64>
    1e62:	0f b6       	in	r0, 0x3f	; 63
    1e64:	f8 94       	cli
    1e66:	0f 92       	push	r0
    1e68:	d8 01       	movw	r26, r16
    1e6a:	15 96       	adiw	r26, 0x05	; 5
    1e6c:	ed 91       	ld	r30, X+
    1e6e:	fc 91       	ld	r31, X
    1e70:	16 97       	sbiw	r26, 0x06	; 6
    1e72:	c6 81       	ldd	r28, Z+6	; 0x06
    1e74:	d7 81       	ldd	r29, Z+7	; 0x07
    1e76:	ce 01       	movw	r24, r28
    1e78:	02 96       	adiw	r24, 0x02	; 2
    1e7a:	0e 94 ae 05 	call	0xb5c	; 0xb5c <uxListRemove>
    1e7e:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <uxCurrentNumberOfTasks>
    1e82:	81 50       	subi	r24, 0x01	; 1
    1e84:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <uxCurrentNumberOfTasks>
    1e88:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <uxDeletedTasksWaitingCleanUp>
    1e8c:	81 50       	subi	r24, 0x01	; 1
    1e8e:	80 93 75 07 	sts	0x0775, r24	; 0x800775 <uxDeletedTasksWaitingCleanUp>
    1e92:	0f 90       	pop	r0
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	8f 89       	ldd	r24, Y+23	; 0x17
    1e98:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9a:	0e 94 67 07 	call	0xece	; 0xece <vPortFree>
    1e9e:	ce 01       	movw	r24, r28
    1ea0:	0e 94 67 07 	call	0xece	; 0xece <vPortFree>
    1ea4:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <uxDeletedTasksWaitingCleanUp>
    1ea8:	81 11       	cpse	r24, r1
    1eaa:	d3 cf       	rjmp	.-90     	; 0x1e52 <prvIdleTask+0x12>
    1eac:	f7 01       	movw	r30, r14
    1eae:	80 81       	ld	r24, Z
    1eb0:	82 30       	cpi	r24, 0x02	; 2
    1eb2:	10 f0       	brcs	.+4      	; 0x1eb8 <prvIdleTask+0x78>
    1eb4:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <vPortYield>
    1eb8:	0e 94 29 04 	call	0x852	; 0x852 <vApplicationIdleHook>
    1ebc:	f3 cf       	rjmp	.-26     	; 0x1ea4 <prvIdleTask+0x64>

00001ebe <vTaskSetApplicationTaskTag>:
    1ebe:	00 97       	sbiw	r24, 0x00	; 0
    1ec0:	21 f4       	brne	.+8      	; 0x1eca <vTaskSetApplicationTaskTag+0xc>
    1ec2:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    1ec6:	90 91 c3 07 	lds	r25, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	f8 94       	cli
    1ece:	0f 92       	push	r0
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	76 a3       	std	Z+38, r23	; 0x26
    1ed4:	65 a3       	std	Z+37, r22	; 0x25
    1ed6:	0f 90       	pop	r0
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	08 95       	ret

00001edc <vTaskSwitchContext>:
    1edc:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <uxSchedulerSuspended>
    1ee0:	88 23       	and	r24, r24
    1ee2:	21 f0       	breq	.+8      	; 0x1eec <vTaskSwitchContext+0x10>
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <xYieldPending>
    1eea:	08 95       	ret
    1eec:	10 92 6e 07 	sts	0x076E, r1	; 0x80076e <xYieldPending>
    1ef0:	e0 91 c2 07 	lds	r30, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    1ef4:	f0 91 c3 07 	lds	r31, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    1ef8:	85 a1       	ldd	r24, Z+37	; 0x25
    1efa:	0e 94 03 05 	call	0xa06	; 0xa06 <switch_out>
    1efe:	20 91 71 07 	lds	r18, 0x0771	; 0x800771 <uxTopReadyPriority>
    1f02:	82 2f       	mov	r24, r18
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	fc 01       	movw	r30, r24
    1f08:	ee 0f       	add	r30, r30
    1f0a:	ff 1f       	adc	r31, r31
    1f0c:	ee 0f       	add	r30, r30
    1f0e:	ff 1f       	adc	r31, r31
    1f10:	ee 0f       	add	r30, r30
    1f12:	ff 1f       	adc	r31, r31
    1f14:	e8 0f       	add	r30, r24
    1f16:	f9 1f       	adc	r31, r25
    1f18:	e2 56       	subi	r30, 0x62	; 98
    1f1a:	f8 4f       	sbci	r31, 0xF8	; 248
    1f1c:	30 81       	ld	r19, Z
    1f1e:	31 11       	cpse	r19, r1
    1f20:	11 c0       	rjmp	.+34     	; 0x1f44 <vTaskSwitchContext+0x68>
    1f22:	21 50       	subi	r18, 0x01	; 1
    1f24:	82 2f       	mov	r24, r18
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	fc 01       	movw	r30, r24
    1f2a:	ee 0f       	add	r30, r30
    1f2c:	ff 1f       	adc	r31, r31
    1f2e:	ee 0f       	add	r30, r30
    1f30:	ff 1f       	adc	r31, r31
    1f32:	ee 0f       	add	r30, r30
    1f34:	ff 1f       	adc	r31, r31
    1f36:	e8 0f       	add	r30, r24
    1f38:	f9 1f       	adc	r31, r25
    1f3a:	e2 56       	subi	r30, 0x62	; 98
    1f3c:	f8 4f       	sbci	r31, 0xF8	; 248
    1f3e:	30 81       	ld	r19, Z
    1f40:	33 23       	and	r19, r19
    1f42:	79 f3       	breq	.-34     	; 0x1f22 <vTaskSwitchContext+0x46>
    1f44:	ac 01       	movw	r20, r24
    1f46:	44 0f       	add	r20, r20
    1f48:	55 1f       	adc	r21, r21
    1f4a:	44 0f       	add	r20, r20
    1f4c:	55 1f       	adc	r21, r21
    1f4e:	44 0f       	add	r20, r20
    1f50:	55 1f       	adc	r21, r21
    1f52:	48 0f       	add	r20, r24
    1f54:	59 1f       	adc	r21, r25
    1f56:	da 01       	movw	r26, r20
    1f58:	a2 56       	subi	r26, 0x62	; 98
    1f5a:	b8 4f       	sbci	r27, 0xF8	; 248
    1f5c:	11 96       	adiw	r26, 0x01	; 1
    1f5e:	ed 91       	ld	r30, X+
    1f60:	fc 91       	ld	r31, X
    1f62:	12 97       	sbiw	r26, 0x02	; 2
    1f64:	02 80       	ldd	r0, Z+2	; 0x02
    1f66:	f3 81       	ldd	r31, Z+3	; 0x03
    1f68:	e0 2d       	mov	r30, r0
    1f6a:	12 96       	adiw	r26, 0x02	; 2
    1f6c:	fc 93       	st	X, r31
    1f6e:	ee 93       	st	-X, r30
    1f70:	11 97       	sbiw	r26, 0x01	; 1
    1f72:	4f 55       	subi	r20, 0x5F	; 95
    1f74:	58 4f       	sbci	r21, 0xF8	; 248
    1f76:	e4 17       	cp	r30, r20
    1f78:	f5 07       	cpc	r31, r21
    1f7a:	29 f4       	brne	.+10     	; 0x1f86 <vTaskSwitchContext+0xaa>
    1f7c:	42 81       	ldd	r20, Z+2	; 0x02
    1f7e:	53 81       	ldd	r21, Z+3	; 0x03
    1f80:	fd 01       	movw	r30, r26
    1f82:	52 83       	std	Z+2, r21	; 0x02
    1f84:	41 83       	std	Z+1, r20	; 0x01
    1f86:	fc 01       	movw	r30, r24
    1f88:	ee 0f       	add	r30, r30
    1f8a:	ff 1f       	adc	r31, r31
    1f8c:	ee 0f       	add	r30, r30
    1f8e:	ff 1f       	adc	r31, r31
    1f90:	ee 0f       	add	r30, r30
    1f92:	ff 1f       	adc	r31, r31
    1f94:	8e 0f       	add	r24, r30
    1f96:	9f 1f       	adc	r25, r31
    1f98:	fc 01       	movw	r30, r24
    1f9a:	e2 56       	subi	r30, 0x62	; 98
    1f9c:	f8 4f       	sbci	r31, 0xF8	; 248
    1f9e:	01 80       	ldd	r0, Z+1	; 0x01
    1fa0:	f2 81       	ldd	r31, Z+2	; 0x02
    1fa2:	e0 2d       	mov	r30, r0
    1fa4:	86 81       	ldd	r24, Z+6	; 0x06
    1fa6:	97 81       	ldd	r25, Z+7	; 0x07
    1fa8:	90 93 c3 07 	sts	0x07C3, r25	; 0x8007c3 <pxCurrentTCB+0x1>
    1fac:	80 93 c2 07 	sts	0x07C2, r24	; 0x8007c2 <pxCurrentTCB>
    1fb0:	20 93 71 07 	sts	0x0771, r18	; 0x800771 <uxTopReadyPriority>
    1fb4:	e0 91 c2 07 	lds	r30, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    1fb8:	f0 91 c3 07 	lds	r31, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    1fbc:	85 a1       	ldd	r24, Z+37	; 0x25
    1fbe:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <switch_in>
    1fc2:	08 95       	ret

00001fc4 <vTaskPlaceOnEventList>:
    1fc4:	cf 93       	push	r28
    1fc6:	df 93       	push	r29
    1fc8:	eb 01       	movw	r28, r22
    1fca:	20 91 c2 07 	lds	r18, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    1fce:	30 91 c3 07 	lds	r19, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    1fd2:	b9 01       	movw	r22, r18
    1fd4:	64 5f       	subi	r22, 0xF4	; 244
    1fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd8:	0e 94 7d 05 	call	0xafa	; 0xafa <vListInsert>
    1fdc:	61 e0       	ldi	r22, 0x01	; 1
    1fde:	ce 01       	movw	r24, r28
    1fe0:	0e 94 47 0c 	call	0x188e	; 0x188e <prvAddCurrentTaskToDelayedList>
    1fe4:	df 91       	pop	r29
    1fe6:	cf 91       	pop	r28
    1fe8:	08 95       	ret

00001fea <xTaskRemoveFromEventList>:
    1fea:	0f 93       	push	r16
    1fec:	1f 93       	push	r17
    1fee:	cf 93       	push	r28
    1ff0:	df 93       	push	r29
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	15 96       	adiw	r26, 0x05	; 5
    1ff6:	ed 91       	ld	r30, X+
    1ff8:	fc 91       	ld	r31, X
    1ffa:	16 97       	sbiw	r26, 0x06	; 6
    1ffc:	c6 81       	ldd	r28, Z+6	; 0x06
    1ffe:	d7 81       	ldd	r29, Z+7	; 0x07
    2000:	8e 01       	movw	r16, r28
    2002:	04 5f       	subi	r16, 0xF4	; 244
    2004:	1f 4f       	sbci	r17, 0xFF	; 255
    2006:	c8 01       	movw	r24, r16
    2008:	0e 94 ae 05 	call	0xb5c	; 0xb5c <uxListRemove>
    200c:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <uxSchedulerSuspended>
    2010:	81 11       	cpse	r24, r1
    2012:	1c c0       	rjmp	.+56     	; 0x204c <xTaskRemoveFromEventList+0x62>
    2014:	0a 50       	subi	r16, 0x0A	; 10
    2016:	11 09       	sbc	r17, r1
    2018:	c8 01       	movw	r24, r16
    201a:	0e 94 ae 05 	call	0xb5c	; 0xb5c <uxListRemove>
    201e:	2e 89       	ldd	r18, Y+22	; 0x16
    2020:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <uxTopReadyPriority>
    2024:	82 17       	cp	r24, r18
    2026:	10 f4       	brcc	.+4      	; 0x202c <xTaskRemoveFromEventList+0x42>
    2028:	20 93 71 07 	sts	0x0771, r18	; 0x800771 <uxTopReadyPriority>
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	c9 01       	movw	r24, r18
    2030:	88 0f       	add	r24, r24
    2032:	99 1f       	adc	r25, r25
    2034:	88 0f       	add	r24, r24
    2036:	99 1f       	adc	r25, r25
    2038:	88 0f       	add	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	82 0f       	add	r24, r18
    203e:	93 1f       	adc	r25, r19
    2040:	b8 01       	movw	r22, r16
    2042:	82 56       	subi	r24, 0x62	; 98
    2044:	98 4f       	sbci	r25, 0xF8	; 248
    2046:	0e 94 5c 05 	call	0xab8	; 0xab8 <vListInsertEnd>
    204a:	05 c0       	rjmp	.+10     	; 0x2056 <xTaskRemoveFromEventList+0x6c>
    204c:	b8 01       	movw	r22, r16
    204e:	8f e7       	ldi	r24, 0x7F	; 127
    2050:	97 e0       	ldi	r25, 0x07	; 7
    2052:	0e 94 5c 05 	call	0xab8	; 0xab8 <vListInsertEnd>
    2056:	e0 91 c2 07 	lds	r30, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    205a:	f0 91 c3 07 	lds	r31, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    205e:	9e 89       	ldd	r25, Y+22	; 0x16
    2060:	86 89       	ldd	r24, Z+22	; 0x16
    2062:	89 17       	cp	r24, r25
    2064:	20 f4       	brcc	.+8      	; 0x206e <xTaskRemoveFromEventList+0x84>
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <xYieldPending>
    206c:	01 c0       	rjmp	.+2      	; 0x2070 <xTaskRemoveFromEventList+0x86>
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	df 91       	pop	r29
    2072:	cf 91       	pop	r28
    2074:	1f 91       	pop	r17
    2076:	0f 91       	pop	r16
    2078:	08 95       	ret

0000207a <vTaskSetTimeOutState>:
    207a:	20 91 6d 07 	lds	r18, 0x076D	; 0x80076d <xNumOfOverflows>
    207e:	fc 01       	movw	r30, r24
    2080:	20 83       	st	Z, r18
    2082:	20 91 72 07 	lds	r18, 0x0772	; 0x800772 <xTickCount>
    2086:	30 91 73 07 	lds	r19, 0x0773	; 0x800773 <xTickCount+0x1>
    208a:	32 83       	std	Z+2, r19	; 0x02
    208c:	21 83       	std	Z+1, r18	; 0x01
    208e:	08 95       	ret

00002090 <xTaskCheckForTimeOut>:
    2090:	cf 93       	push	r28
    2092:	df 93       	push	r29
    2094:	fc 01       	movw	r30, r24
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	f8 94       	cli
    209a:	0f 92       	push	r0
    209c:	20 91 72 07 	lds	r18, 0x0772	; 0x800772 <xTickCount>
    20a0:	30 91 73 07 	lds	r19, 0x0773	; 0x800773 <xTickCount+0x1>
    20a4:	80 91 6d 07 	lds	r24, 0x076D	; 0x80076d <xNumOfOverflows>
    20a8:	90 81       	ld	r25, Z
    20aa:	98 17       	cp	r25, r24
    20ac:	29 f0       	breq	.+10     	; 0x20b8 <xTaskCheckForTimeOut+0x28>
    20ae:	81 81       	ldd	r24, Z+1	; 0x01
    20b0:	92 81       	ldd	r25, Z+2	; 0x02
    20b2:	28 17       	cp	r18, r24
    20b4:	39 07       	cpc	r19, r25
    20b6:	b0 f4       	brcc	.+44     	; 0x20e4 <xTaskCheckForTimeOut+0x54>
    20b8:	a1 81       	ldd	r26, Z+1	; 0x01
    20ba:	b2 81       	ldd	r27, Z+2	; 0x02
    20bc:	eb 01       	movw	r28, r22
    20be:	48 81       	ld	r20, Y
    20c0:	59 81       	ldd	r21, Y+1	; 0x01
    20c2:	c9 01       	movw	r24, r18
    20c4:	8a 1b       	sub	r24, r26
    20c6:	9b 0b       	sbc	r25, r27
    20c8:	84 17       	cp	r24, r20
    20ca:	95 07       	cpc	r25, r21
    20cc:	68 f4       	brcc	.+26     	; 0x20e8 <xTaskCheckForTimeOut+0x58>
    20ce:	cf 01       	movw	r24, r30
    20d0:	a2 1b       	sub	r26, r18
    20d2:	b3 0b       	sbc	r27, r19
    20d4:	4a 0f       	add	r20, r26
    20d6:	5b 1f       	adc	r21, r27
    20d8:	59 83       	std	Y+1, r21	; 0x01
    20da:	48 83       	st	Y, r20
    20dc:	0e 94 3d 10 	call	0x207a	; 0x207a <vTaskSetTimeOutState>
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	03 c0       	rjmp	.+6      	; 0x20ea <xTaskCheckForTimeOut+0x5a>
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	01 c0       	rjmp	.+2      	; 0x20ea <xTaskCheckForTimeOut+0x5a>
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	0f 90       	pop	r0
    20ec:	0f be       	out	0x3f, r0	; 63
    20ee:	df 91       	pop	r29
    20f0:	cf 91       	pop	r28
    20f2:	08 95       	ret

000020f4 <vTaskMissedYield>:
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <xYieldPending>
    20fa:	08 95       	ret

000020fc <vTaskPriorityInherit>:
    20fc:	0f 93       	push	r16
    20fe:	1f 93       	push	r17
    2100:	cf 93       	push	r28
    2102:	df 93       	push	r29
    2104:	fc 01       	movw	r30, r24
    2106:	89 2b       	or	r24, r25
    2108:	09 f4       	brne	.+2      	; 0x210c <vTaskPriorityInherit+0x10>
    210a:	55 c0       	rjmp	.+170    	; 0x21b6 <vTaskPriorityInherit+0xba>
    210c:	26 89       	ldd	r18, Z+22	; 0x16
    210e:	a0 91 c2 07 	lds	r26, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    2112:	b0 91 c3 07 	lds	r27, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    2116:	56 96       	adiw	r26, 0x16	; 22
    2118:	8c 91       	ld	r24, X
    211a:	28 17       	cp	r18, r24
    211c:	08 f0       	brcs	.+2      	; 0x2120 <vTaskPriorityInherit+0x24>
    211e:	4b c0       	rjmp	.+150    	; 0x21b6 <vTaskPriorityInherit+0xba>
    2120:	84 85       	ldd	r24, Z+12	; 0x0c
    2122:	95 85       	ldd	r25, Z+13	; 0x0d
    2124:	99 23       	and	r25, r25
    2126:	64 f0       	brlt	.+24     	; 0x2140 <vTaskPriorityInherit+0x44>
    2128:	a0 91 c2 07 	lds	r26, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    212c:	b0 91 c3 07 	lds	r27, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    2130:	56 96       	adiw	r26, 0x16	; 22
    2132:	3c 91       	ld	r19, X
    2134:	84 e0       	ldi	r24, 0x04	; 4
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	83 1b       	sub	r24, r19
    213a:	91 09       	sbc	r25, r1
    213c:	95 87       	std	Z+13, r25	; 0x0d
    213e:	84 87       	std	Z+12, r24	; 0x0c
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	c9 01       	movw	r24, r18
    2144:	88 0f       	add	r24, r24
    2146:	99 1f       	adc	r25, r25
    2148:	88 0f       	add	r24, r24
    214a:	99 1f       	adc	r25, r25
    214c:	88 0f       	add	r24, r24
    214e:	99 1f       	adc	r25, r25
    2150:	28 0f       	add	r18, r24
    2152:	39 1f       	adc	r19, r25
    2154:	22 56       	subi	r18, 0x62	; 98
    2156:	38 4f       	sbci	r19, 0xF8	; 248
    2158:	82 85       	ldd	r24, Z+10	; 0x0a
    215a:	93 85       	ldd	r25, Z+11	; 0x0b
    215c:	82 17       	cp	r24, r18
    215e:	93 07       	cpc	r25, r19
    2160:	19 f5       	brne	.+70     	; 0x21a8 <vTaskPriorityInherit+0xac>
    2162:	8f 01       	movw	r16, r30
    2164:	ef 01       	movw	r28, r30
    2166:	22 96       	adiw	r28, 0x02	; 2
    2168:	ce 01       	movw	r24, r28
    216a:	0e 94 ae 05 	call	0xb5c	; 0xb5c <uxListRemove>
    216e:	e0 91 c2 07 	lds	r30, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    2172:	f0 91 c3 07 	lds	r31, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    2176:	26 89       	ldd	r18, Z+22	; 0x16
    2178:	f8 01       	movw	r30, r16
    217a:	26 8b       	std	Z+22, r18	; 0x16
    217c:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <uxTopReadyPriority>
    2180:	82 17       	cp	r24, r18
    2182:	10 f4       	brcc	.+4      	; 0x2188 <vTaskPriorityInherit+0x8c>
    2184:	20 93 71 07 	sts	0x0771, r18	; 0x800771 <uxTopReadyPriority>
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	c9 01       	movw	r24, r18
    218c:	88 0f       	add	r24, r24
    218e:	99 1f       	adc	r25, r25
    2190:	88 0f       	add	r24, r24
    2192:	99 1f       	adc	r25, r25
    2194:	88 0f       	add	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	82 0f       	add	r24, r18
    219a:	93 1f       	adc	r25, r19
    219c:	be 01       	movw	r22, r28
    219e:	82 56       	subi	r24, 0x62	; 98
    21a0:	98 4f       	sbci	r25, 0xF8	; 248
    21a2:	0e 94 5c 05 	call	0xab8	; 0xab8 <vListInsertEnd>
    21a6:	07 c0       	rjmp	.+14     	; 0x21b6 <vTaskPriorityInherit+0xba>
    21a8:	a0 91 c2 07 	lds	r26, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    21ac:	b0 91 c3 07 	lds	r27, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    21b0:	56 96       	adiw	r26, 0x16	; 22
    21b2:	8c 91       	ld	r24, X
    21b4:	86 8b       	std	Z+22, r24	; 0x16
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
    21ba:	1f 91       	pop	r17
    21bc:	0f 91       	pop	r16
    21be:	08 95       	ret

000021c0 <xTaskPriorityDisinherit>:
    21c0:	0f 93       	push	r16
    21c2:	1f 93       	push	r17
    21c4:	cf 93       	push	r28
    21c6:	df 93       	push	r29
    21c8:	fc 01       	movw	r30, r24
    21ca:	89 2b       	or	r24, r25
    21cc:	79 f1       	breq	.+94     	; 0x222c <xTaskPriorityDisinherit+0x6c>
    21ce:	84 a1       	ldd	r24, Z+36	; 0x24
    21d0:	81 50       	subi	r24, 0x01	; 1
    21d2:	84 a3       	std	Z+36, r24	; 0x24
    21d4:	26 89       	ldd	r18, Z+22	; 0x16
    21d6:	93 a1       	ldd	r25, Z+35	; 0x23
    21d8:	29 17       	cp	r18, r25
    21da:	51 f1       	breq	.+84     	; 0x2230 <xTaskPriorityDisinherit+0x70>
    21dc:	81 11       	cpse	r24, r1
    21de:	2a c0       	rjmp	.+84     	; 0x2234 <xTaskPriorityDisinherit+0x74>
    21e0:	ef 01       	movw	r28, r30
    21e2:	8f 01       	movw	r16, r30
    21e4:	0e 5f       	subi	r16, 0xFE	; 254
    21e6:	1f 4f       	sbci	r17, 0xFF	; 255
    21e8:	c8 01       	movw	r24, r16
    21ea:	0e 94 ae 05 	call	0xb5c	; 0xb5c <uxListRemove>
    21ee:	2b a1       	ldd	r18, Y+35	; 0x23
    21f0:	2e 8b       	std	Y+22, r18	; 0x16
    21f2:	44 e0       	ldi	r20, 0x04	; 4
    21f4:	50 e0       	ldi	r21, 0x00	; 0
    21f6:	42 1b       	sub	r20, r18
    21f8:	51 09       	sbc	r21, r1
    21fa:	5d 87       	std	Y+13, r21	; 0x0d
    21fc:	4c 87       	std	Y+12, r20	; 0x0c
    21fe:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <uxTopReadyPriority>
    2202:	82 17       	cp	r24, r18
    2204:	10 f4       	brcc	.+4      	; 0x220a <xTaskPriorityDisinherit+0x4a>
    2206:	20 93 71 07 	sts	0x0771, r18	; 0x800771 <uxTopReadyPriority>
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	c9 01       	movw	r24, r18
    220e:	88 0f       	add	r24, r24
    2210:	99 1f       	adc	r25, r25
    2212:	88 0f       	add	r24, r24
    2214:	99 1f       	adc	r25, r25
    2216:	88 0f       	add	r24, r24
    2218:	99 1f       	adc	r25, r25
    221a:	82 0f       	add	r24, r18
    221c:	93 1f       	adc	r25, r19
    221e:	b8 01       	movw	r22, r16
    2220:	82 56       	subi	r24, 0x62	; 98
    2222:	98 4f       	sbci	r25, 0xF8	; 248
    2224:	0e 94 5c 05 	call	0xab8	; 0xab8 <vListInsertEnd>
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	05 c0       	rjmp	.+10     	; 0x2236 <xTaskPriorityDisinherit+0x76>
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	03 c0       	rjmp	.+6      	; 0x2236 <xTaskPriorityDisinherit+0x76>
    2230:	80 e0       	ldi	r24, 0x00	; 0
    2232:	01 c0       	rjmp	.+2      	; 0x2236 <xTaskPriorityDisinherit+0x76>
    2234:	80 e0       	ldi	r24, 0x00	; 0
    2236:	df 91       	pop	r29
    2238:	cf 91       	pop	r28
    223a:	1f 91       	pop	r17
    223c:	0f 91       	pop	r16
    223e:	08 95       	ret

00002240 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    2240:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    2244:	90 91 c3 07 	lds	r25, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    2248:	89 2b       	or	r24, r25
    224a:	39 f0       	breq	.+14     	; 0x225a <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    224c:	e0 91 c2 07 	lds	r30, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    2250:	f0 91 c3 07 	lds	r31, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    2254:	84 a1       	ldd	r24, Z+36	; 0x24
    2256:	8f 5f       	subi	r24, 0xFF	; 255
    2258:	84 a3       	std	Z+36, r24	; 0x24
		}

		return pxCurrentTCB;
    225a:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    225e:	90 91 c3 07 	lds	r25, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
	}
    2262:	08 95       	ret

00002264 <__udivmodsi4>:
    2264:	a1 e2       	ldi	r26, 0x21	; 33
    2266:	1a 2e       	mov	r1, r26
    2268:	aa 1b       	sub	r26, r26
    226a:	bb 1b       	sub	r27, r27
    226c:	fd 01       	movw	r30, r26
    226e:	0d c0       	rjmp	.+26     	; 0x228a <__udivmodsi4_ep>

00002270 <__udivmodsi4_loop>:
    2270:	aa 1f       	adc	r26, r26
    2272:	bb 1f       	adc	r27, r27
    2274:	ee 1f       	adc	r30, r30
    2276:	ff 1f       	adc	r31, r31
    2278:	a2 17       	cp	r26, r18
    227a:	b3 07       	cpc	r27, r19
    227c:	e4 07       	cpc	r30, r20
    227e:	f5 07       	cpc	r31, r21
    2280:	20 f0       	brcs	.+8      	; 0x228a <__udivmodsi4_ep>
    2282:	a2 1b       	sub	r26, r18
    2284:	b3 0b       	sbc	r27, r19
    2286:	e4 0b       	sbc	r30, r20
    2288:	f5 0b       	sbc	r31, r21

0000228a <__udivmodsi4_ep>:
    228a:	66 1f       	adc	r22, r22
    228c:	77 1f       	adc	r23, r23
    228e:	88 1f       	adc	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	1a 94       	dec	r1
    2294:	69 f7       	brne	.-38     	; 0x2270 <__udivmodsi4_loop>
    2296:	60 95       	com	r22
    2298:	70 95       	com	r23
    229a:	80 95       	com	r24
    229c:	90 95       	com	r25
    229e:	9b 01       	movw	r18, r22
    22a0:	ac 01       	movw	r20, r24
    22a2:	bd 01       	movw	r22, r26
    22a4:	cf 01       	movw	r24, r30
    22a6:	08 95       	ret

000022a8 <malloc>:
    22a8:	cf 93       	push	r28
    22aa:	df 93       	push	r29
    22ac:	82 30       	cpi	r24, 0x02	; 2
    22ae:	91 05       	cpc	r25, r1
    22b0:	10 f4       	brcc	.+4      	; 0x22b6 <malloc+0xe>
    22b2:	82 e0       	ldi	r24, 0x02	; 2
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <__flp>
    22ba:	f0 91 c7 07 	lds	r31, 0x07C7	; 0x8007c7 <__flp+0x1>
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	c0 e0       	ldi	r28, 0x00	; 0
    22c4:	d0 e0       	ldi	r29, 0x00	; 0
    22c6:	30 97       	sbiw	r30, 0x00	; 0
    22c8:	11 f1       	breq	.+68     	; 0x230e <malloc+0x66>
    22ca:	40 81       	ld	r20, Z
    22cc:	51 81       	ldd	r21, Z+1	; 0x01
    22ce:	48 17       	cp	r20, r24
    22d0:	59 07       	cpc	r21, r25
    22d2:	c0 f0       	brcs	.+48     	; 0x2304 <malloc+0x5c>
    22d4:	48 17       	cp	r20, r24
    22d6:	59 07       	cpc	r21, r25
    22d8:	61 f4       	brne	.+24     	; 0x22f2 <malloc+0x4a>
    22da:	82 81       	ldd	r24, Z+2	; 0x02
    22dc:	93 81       	ldd	r25, Z+3	; 0x03
    22de:	20 97       	sbiw	r28, 0x00	; 0
    22e0:	19 f0       	breq	.+6      	; 0x22e8 <malloc+0x40>
    22e2:	9b 83       	std	Y+3, r25	; 0x03
    22e4:	8a 83       	std	Y+2, r24	; 0x02
    22e6:	2b c0       	rjmp	.+86     	; 0x233e <malloc+0x96>
    22e8:	90 93 c7 07 	sts	0x07C7, r25	; 0x8007c7 <__flp+0x1>
    22ec:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__flp>
    22f0:	26 c0       	rjmp	.+76     	; 0x233e <malloc+0x96>
    22f2:	21 15       	cp	r18, r1
    22f4:	31 05       	cpc	r19, r1
    22f6:	19 f0       	breq	.+6      	; 0x22fe <malloc+0x56>
    22f8:	42 17       	cp	r20, r18
    22fa:	53 07       	cpc	r21, r19
    22fc:	18 f4       	brcc	.+6      	; 0x2304 <malloc+0x5c>
    22fe:	9a 01       	movw	r18, r20
    2300:	be 01       	movw	r22, r28
    2302:	df 01       	movw	r26, r30
    2304:	ef 01       	movw	r28, r30
    2306:	02 80       	ldd	r0, Z+2	; 0x02
    2308:	f3 81       	ldd	r31, Z+3	; 0x03
    230a:	e0 2d       	mov	r30, r0
    230c:	dc cf       	rjmp	.-72     	; 0x22c6 <malloc+0x1e>
    230e:	21 15       	cp	r18, r1
    2310:	31 05       	cpc	r19, r1
    2312:	09 f1       	breq	.+66     	; 0x2356 <malloc+0xae>
    2314:	28 1b       	sub	r18, r24
    2316:	39 0b       	sbc	r19, r25
    2318:	24 30       	cpi	r18, 0x04	; 4
    231a:	31 05       	cpc	r19, r1
    231c:	90 f4       	brcc	.+36     	; 0x2342 <malloc+0x9a>
    231e:	12 96       	adiw	r26, 0x02	; 2
    2320:	8d 91       	ld	r24, X+
    2322:	9c 91       	ld	r25, X
    2324:	13 97       	sbiw	r26, 0x03	; 3
    2326:	61 15       	cp	r22, r1
    2328:	71 05       	cpc	r23, r1
    232a:	21 f0       	breq	.+8      	; 0x2334 <malloc+0x8c>
    232c:	fb 01       	movw	r30, r22
    232e:	93 83       	std	Z+3, r25	; 0x03
    2330:	82 83       	std	Z+2, r24	; 0x02
    2332:	04 c0       	rjmp	.+8      	; 0x233c <malloc+0x94>
    2334:	90 93 c7 07 	sts	0x07C7, r25	; 0x8007c7 <__flp+0x1>
    2338:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__flp>
    233c:	fd 01       	movw	r30, r26
    233e:	32 96       	adiw	r30, 0x02	; 2
    2340:	44 c0       	rjmp	.+136    	; 0x23ca <malloc+0x122>
    2342:	fd 01       	movw	r30, r26
    2344:	e2 0f       	add	r30, r18
    2346:	f3 1f       	adc	r31, r19
    2348:	81 93       	st	Z+, r24
    234a:	91 93       	st	Z+, r25
    234c:	22 50       	subi	r18, 0x02	; 2
    234e:	31 09       	sbc	r19, r1
    2350:	2d 93       	st	X+, r18
    2352:	3c 93       	st	X, r19
    2354:	3a c0       	rjmp	.+116    	; 0x23ca <malloc+0x122>
    2356:	20 91 c4 07 	lds	r18, 0x07C4	; 0x8007c4 <__brkval>
    235a:	30 91 c5 07 	lds	r19, 0x07C5	; 0x8007c5 <__brkval+0x1>
    235e:	23 2b       	or	r18, r19
    2360:	41 f4       	brne	.+16     	; 0x2372 <malloc+0xca>
    2362:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2366:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    236a:	30 93 c5 07 	sts	0x07C5, r19	; 0x8007c5 <__brkval+0x1>
    236e:	20 93 c4 07 	sts	0x07C4, r18	; 0x8007c4 <__brkval>
    2372:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2376:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    237a:	21 15       	cp	r18, r1
    237c:	31 05       	cpc	r19, r1
    237e:	41 f4       	brne	.+16     	; 0x2390 <malloc+0xe8>
    2380:	2d b7       	in	r18, 0x3d	; 61
    2382:	3e b7       	in	r19, 0x3e	; 62
    2384:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2388:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    238c:	24 1b       	sub	r18, r20
    238e:	35 0b       	sbc	r19, r21
    2390:	e0 91 c4 07 	lds	r30, 0x07C4	; 0x8007c4 <__brkval>
    2394:	f0 91 c5 07 	lds	r31, 0x07C5	; 0x8007c5 <__brkval+0x1>
    2398:	e2 17       	cp	r30, r18
    239a:	f3 07       	cpc	r31, r19
    239c:	a0 f4       	brcc	.+40     	; 0x23c6 <malloc+0x11e>
    239e:	2e 1b       	sub	r18, r30
    23a0:	3f 0b       	sbc	r19, r31
    23a2:	28 17       	cp	r18, r24
    23a4:	39 07       	cpc	r19, r25
    23a6:	78 f0       	brcs	.+30     	; 0x23c6 <malloc+0x11e>
    23a8:	ac 01       	movw	r20, r24
    23aa:	4e 5f       	subi	r20, 0xFE	; 254
    23ac:	5f 4f       	sbci	r21, 0xFF	; 255
    23ae:	24 17       	cp	r18, r20
    23b0:	35 07       	cpc	r19, r21
    23b2:	48 f0       	brcs	.+18     	; 0x23c6 <malloc+0x11e>
    23b4:	4e 0f       	add	r20, r30
    23b6:	5f 1f       	adc	r21, r31
    23b8:	50 93 c5 07 	sts	0x07C5, r21	; 0x8007c5 <__brkval+0x1>
    23bc:	40 93 c4 07 	sts	0x07C4, r20	; 0x8007c4 <__brkval>
    23c0:	81 93       	st	Z+, r24
    23c2:	91 93       	st	Z+, r25
    23c4:	02 c0       	rjmp	.+4      	; 0x23ca <malloc+0x122>
    23c6:	e0 e0       	ldi	r30, 0x00	; 0
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	cf 01       	movw	r24, r30
    23cc:	df 91       	pop	r29
    23ce:	cf 91       	pop	r28
    23d0:	08 95       	ret

000023d2 <free>:
    23d2:	0f 93       	push	r16
    23d4:	1f 93       	push	r17
    23d6:	cf 93       	push	r28
    23d8:	df 93       	push	r29
    23da:	00 97       	sbiw	r24, 0x00	; 0
    23dc:	09 f4       	brne	.+2      	; 0x23e0 <free+0xe>
    23de:	8c c0       	rjmp	.+280    	; 0x24f8 <free+0x126>
    23e0:	fc 01       	movw	r30, r24
    23e2:	32 97       	sbiw	r30, 0x02	; 2
    23e4:	13 82       	std	Z+3, r1	; 0x03
    23e6:	12 82       	std	Z+2, r1	; 0x02
    23e8:	00 91 c6 07 	lds	r16, 0x07C6	; 0x8007c6 <__flp>
    23ec:	10 91 c7 07 	lds	r17, 0x07C7	; 0x8007c7 <__flp+0x1>
    23f0:	01 15       	cp	r16, r1
    23f2:	11 05       	cpc	r17, r1
    23f4:	81 f4       	brne	.+32     	; 0x2416 <free+0x44>
    23f6:	20 81       	ld	r18, Z
    23f8:	31 81       	ldd	r19, Z+1	; 0x01
    23fa:	82 0f       	add	r24, r18
    23fc:	93 1f       	adc	r25, r19
    23fe:	20 91 c4 07 	lds	r18, 0x07C4	; 0x8007c4 <__brkval>
    2402:	30 91 c5 07 	lds	r19, 0x07C5	; 0x8007c5 <__brkval+0x1>
    2406:	28 17       	cp	r18, r24
    2408:	39 07       	cpc	r19, r25
    240a:	79 f5       	brne	.+94     	; 0x246a <free+0x98>
    240c:	f0 93 c5 07 	sts	0x07C5, r31	; 0x8007c5 <__brkval+0x1>
    2410:	e0 93 c4 07 	sts	0x07C4, r30	; 0x8007c4 <__brkval>
    2414:	71 c0       	rjmp	.+226    	; 0x24f8 <free+0x126>
    2416:	d8 01       	movw	r26, r16
    2418:	40 e0       	ldi	r20, 0x00	; 0
    241a:	50 e0       	ldi	r21, 0x00	; 0
    241c:	ae 17       	cp	r26, r30
    241e:	bf 07       	cpc	r27, r31
    2420:	50 f4       	brcc	.+20     	; 0x2436 <free+0x64>
    2422:	12 96       	adiw	r26, 0x02	; 2
    2424:	2d 91       	ld	r18, X+
    2426:	3c 91       	ld	r19, X
    2428:	13 97       	sbiw	r26, 0x03	; 3
    242a:	ad 01       	movw	r20, r26
    242c:	21 15       	cp	r18, r1
    242e:	31 05       	cpc	r19, r1
    2430:	09 f1       	breq	.+66     	; 0x2474 <free+0xa2>
    2432:	d9 01       	movw	r26, r18
    2434:	f3 cf       	rjmp	.-26     	; 0x241c <free+0x4a>
    2436:	9d 01       	movw	r18, r26
    2438:	da 01       	movw	r26, r20
    243a:	33 83       	std	Z+3, r19	; 0x03
    243c:	22 83       	std	Z+2, r18	; 0x02
    243e:	60 81       	ld	r22, Z
    2440:	71 81       	ldd	r23, Z+1	; 0x01
    2442:	86 0f       	add	r24, r22
    2444:	97 1f       	adc	r25, r23
    2446:	82 17       	cp	r24, r18
    2448:	93 07       	cpc	r25, r19
    244a:	69 f4       	brne	.+26     	; 0x2466 <free+0x94>
    244c:	ec 01       	movw	r28, r24
    244e:	28 81       	ld	r18, Y
    2450:	39 81       	ldd	r19, Y+1	; 0x01
    2452:	26 0f       	add	r18, r22
    2454:	37 1f       	adc	r19, r23
    2456:	2e 5f       	subi	r18, 0xFE	; 254
    2458:	3f 4f       	sbci	r19, 0xFF	; 255
    245a:	31 83       	std	Z+1, r19	; 0x01
    245c:	20 83       	st	Z, r18
    245e:	8a 81       	ldd	r24, Y+2	; 0x02
    2460:	9b 81       	ldd	r25, Y+3	; 0x03
    2462:	93 83       	std	Z+3, r25	; 0x03
    2464:	82 83       	std	Z+2, r24	; 0x02
    2466:	45 2b       	or	r20, r21
    2468:	29 f4       	brne	.+10     	; 0x2474 <free+0xa2>
    246a:	f0 93 c7 07 	sts	0x07C7, r31	; 0x8007c7 <__flp+0x1>
    246e:	e0 93 c6 07 	sts	0x07C6, r30	; 0x8007c6 <__flp>
    2472:	42 c0       	rjmp	.+132    	; 0x24f8 <free+0x126>
    2474:	13 96       	adiw	r26, 0x03	; 3
    2476:	fc 93       	st	X, r31
    2478:	ee 93       	st	-X, r30
    247a:	12 97       	sbiw	r26, 0x02	; 2
    247c:	ed 01       	movw	r28, r26
    247e:	49 91       	ld	r20, Y+
    2480:	59 91       	ld	r21, Y+
    2482:	9e 01       	movw	r18, r28
    2484:	24 0f       	add	r18, r20
    2486:	35 1f       	adc	r19, r21
    2488:	e2 17       	cp	r30, r18
    248a:	f3 07       	cpc	r31, r19
    248c:	71 f4       	brne	.+28     	; 0x24aa <free+0xd8>
    248e:	80 81       	ld	r24, Z
    2490:	91 81       	ldd	r25, Z+1	; 0x01
    2492:	84 0f       	add	r24, r20
    2494:	95 1f       	adc	r25, r21
    2496:	02 96       	adiw	r24, 0x02	; 2
    2498:	11 96       	adiw	r26, 0x01	; 1
    249a:	9c 93       	st	X, r25
    249c:	8e 93       	st	-X, r24
    249e:	82 81       	ldd	r24, Z+2	; 0x02
    24a0:	93 81       	ldd	r25, Z+3	; 0x03
    24a2:	13 96       	adiw	r26, 0x03	; 3
    24a4:	9c 93       	st	X, r25
    24a6:	8e 93       	st	-X, r24
    24a8:	12 97       	sbiw	r26, 0x02	; 2
    24aa:	e0 e0       	ldi	r30, 0x00	; 0
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	d8 01       	movw	r26, r16
    24b0:	12 96       	adiw	r26, 0x02	; 2
    24b2:	8d 91       	ld	r24, X+
    24b4:	9c 91       	ld	r25, X
    24b6:	13 97       	sbiw	r26, 0x03	; 3
    24b8:	00 97       	sbiw	r24, 0x00	; 0
    24ba:	19 f0       	breq	.+6      	; 0x24c2 <free+0xf0>
    24bc:	f8 01       	movw	r30, r16
    24be:	8c 01       	movw	r16, r24
    24c0:	f6 cf       	rjmp	.-20     	; 0x24ae <free+0xdc>
    24c2:	8d 91       	ld	r24, X+
    24c4:	9c 91       	ld	r25, X
    24c6:	98 01       	movw	r18, r16
    24c8:	2e 5f       	subi	r18, 0xFE	; 254
    24ca:	3f 4f       	sbci	r19, 0xFF	; 255
    24cc:	82 0f       	add	r24, r18
    24ce:	93 1f       	adc	r25, r19
    24d0:	20 91 c4 07 	lds	r18, 0x07C4	; 0x8007c4 <__brkval>
    24d4:	30 91 c5 07 	lds	r19, 0x07C5	; 0x8007c5 <__brkval+0x1>
    24d8:	28 17       	cp	r18, r24
    24da:	39 07       	cpc	r19, r25
    24dc:	69 f4       	brne	.+26     	; 0x24f8 <free+0x126>
    24de:	30 97       	sbiw	r30, 0x00	; 0
    24e0:	29 f4       	brne	.+10     	; 0x24ec <free+0x11a>
    24e2:	10 92 c7 07 	sts	0x07C7, r1	; 0x8007c7 <__flp+0x1>
    24e6:	10 92 c6 07 	sts	0x07C6, r1	; 0x8007c6 <__flp>
    24ea:	02 c0       	rjmp	.+4      	; 0x24f0 <free+0x11e>
    24ec:	13 82       	std	Z+3, r1	; 0x03
    24ee:	12 82       	std	Z+2, r1	; 0x02
    24f0:	10 93 c5 07 	sts	0x07C5, r17	; 0x8007c5 <__brkval+0x1>
    24f4:	00 93 c4 07 	sts	0x07C4, r16	; 0x8007c4 <__brkval>
    24f8:	df 91       	pop	r29
    24fa:	cf 91       	pop	r28
    24fc:	1f 91       	pop	r17
    24fe:	0f 91       	pop	r16
    2500:	08 95       	ret

00002502 <do_rand>:
    2502:	8f 92       	push	r8
    2504:	9f 92       	push	r9
    2506:	af 92       	push	r10
    2508:	bf 92       	push	r11
    250a:	cf 92       	push	r12
    250c:	df 92       	push	r13
    250e:	ef 92       	push	r14
    2510:	ff 92       	push	r15
    2512:	cf 93       	push	r28
    2514:	df 93       	push	r29
    2516:	ec 01       	movw	r28, r24
    2518:	68 81       	ld	r22, Y
    251a:	79 81       	ldd	r23, Y+1	; 0x01
    251c:	8a 81       	ldd	r24, Y+2	; 0x02
    251e:	9b 81       	ldd	r25, Y+3	; 0x03
    2520:	61 15       	cp	r22, r1
    2522:	71 05       	cpc	r23, r1
    2524:	81 05       	cpc	r24, r1
    2526:	91 05       	cpc	r25, r1
    2528:	21 f4       	brne	.+8      	; 0x2532 <do_rand+0x30>
    252a:	64 e2       	ldi	r22, 0x24	; 36
    252c:	79 ed       	ldi	r23, 0xD9	; 217
    252e:	8b e5       	ldi	r24, 0x5B	; 91
    2530:	97 e0       	ldi	r25, 0x07	; 7
    2532:	2d e1       	ldi	r18, 0x1D	; 29
    2534:	33 ef       	ldi	r19, 0xF3	; 243
    2536:	41 e0       	ldi	r20, 0x01	; 1
    2538:	50 e0       	ldi	r21, 0x00	; 0
    253a:	0e 94 ed 12 	call	0x25da	; 0x25da <__divmodsi4>
    253e:	49 01       	movw	r8, r18
    2540:	5a 01       	movw	r10, r20
    2542:	9b 01       	movw	r18, r22
    2544:	ac 01       	movw	r20, r24
    2546:	a7 ea       	ldi	r26, 0xA7	; 167
    2548:	b1 e4       	ldi	r27, 0x41	; 65
    254a:	0e 94 0c 13 	call	0x2618	; 0x2618 <__muluhisi3>
    254e:	6b 01       	movw	r12, r22
    2550:	7c 01       	movw	r14, r24
    2552:	ac ee       	ldi	r26, 0xEC	; 236
    2554:	b4 ef       	ldi	r27, 0xF4	; 244
    2556:	a5 01       	movw	r20, r10
    2558:	94 01       	movw	r18, r8
    255a:	0e 94 1a 13 	call	0x2634	; 0x2634 <__mulohisi3>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	8c 0d       	add	r24, r12
    2564:	9d 1d       	adc	r25, r13
    2566:	ae 1d       	adc	r26, r14
    2568:	bf 1d       	adc	r27, r15
    256a:	b7 ff       	sbrs	r27, 7
    256c:	03 c0       	rjmp	.+6      	; 0x2574 <do_rand+0x72>
    256e:	01 97       	sbiw	r24, 0x01	; 1
    2570:	a1 09       	sbc	r26, r1
    2572:	b0 48       	sbci	r27, 0x80	; 128
    2574:	88 83       	st	Y, r24
    2576:	99 83       	std	Y+1, r25	; 0x01
    2578:	aa 83       	std	Y+2, r26	; 0x02
    257a:	bb 83       	std	Y+3, r27	; 0x03
    257c:	9f 77       	andi	r25, 0x7F	; 127
    257e:	df 91       	pop	r29
    2580:	cf 91       	pop	r28
    2582:	ff 90       	pop	r15
    2584:	ef 90       	pop	r14
    2586:	df 90       	pop	r13
    2588:	cf 90       	pop	r12
    258a:	bf 90       	pop	r11
    258c:	af 90       	pop	r10
    258e:	9f 90       	pop	r9
    2590:	8f 90       	pop	r8
    2592:	08 95       	ret

00002594 <rand_r>:
    2594:	0e 94 81 12 	call	0x2502	; 0x2502 <do_rand>
    2598:	08 95       	ret

0000259a <rand>:
    259a:	86 e0       	ldi	r24, 0x06	; 6
    259c:	91 e0       	ldi	r25, 0x01	; 1
    259e:	0e 94 81 12 	call	0x2502	; 0x2502 <do_rand>
    25a2:	08 95       	ret

000025a4 <srand>:
    25a4:	a0 e0       	ldi	r26, 0x00	; 0
    25a6:	b0 e0       	ldi	r27, 0x00	; 0
    25a8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    25ac:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    25b0:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    25b4:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    25b8:	08 95       	ret

000025ba <memcpy>:
    25ba:	fb 01       	movw	r30, r22
    25bc:	dc 01       	movw	r26, r24
    25be:	02 c0       	rjmp	.+4      	; 0x25c4 <memcpy+0xa>
    25c0:	01 90       	ld	r0, Z+
    25c2:	0d 92       	st	X+, r0
    25c4:	41 50       	subi	r20, 0x01	; 1
    25c6:	50 40       	sbci	r21, 0x00	; 0
    25c8:	d8 f7       	brcc	.-10     	; 0x25c0 <memcpy+0x6>
    25ca:	08 95       	ret

000025cc <memset>:
    25cc:	dc 01       	movw	r26, r24
    25ce:	01 c0       	rjmp	.+2      	; 0x25d2 <memset+0x6>
    25d0:	6d 93       	st	X+, r22
    25d2:	41 50       	subi	r20, 0x01	; 1
    25d4:	50 40       	sbci	r21, 0x00	; 0
    25d6:	e0 f7       	brcc	.-8      	; 0x25d0 <memset+0x4>
    25d8:	08 95       	ret

000025da <__divmodsi4>:
    25da:	05 2e       	mov	r0, r21
    25dc:	97 fb       	bst	r25, 7
    25de:	1e f4       	brtc	.+6      	; 0x25e6 <__divmodsi4+0xc>
    25e0:	00 94       	com	r0
    25e2:	0e 94 04 13 	call	0x2608	; 0x2608 <__negsi2>
    25e6:	57 fd       	sbrc	r21, 7
    25e8:	07 d0       	rcall	.+14     	; 0x25f8 <__divmodsi4_neg2>
    25ea:	0e 94 32 11 	call	0x2264	; 0x2264 <__udivmodsi4>
    25ee:	07 fc       	sbrc	r0, 7
    25f0:	03 d0       	rcall	.+6      	; 0x25f8 <__divmodsi4_neg2>
    25f2:	4e f4       	brtc	.+18     	; 0x2606 <__divmodsi4_exit>
    25f4:	0c 94 04 13 	jmp	0x2608	; 0x2608 <__negsi2>

000025f8 <__divmodsi4_neg2>:
    25f8:	50 95       	com	r21
    25fa:	40 95       	com	r20
    25fc:	30 95       	com	r19
    25fe:	21 95       	neg	r18
    2600:	3f 4f       	sbci	r19, 0xFF	; 255
    2602:	4f 4f       	sbci	r20, 0xFF	; 255
    2604:	5f 4f       	sbci	r21, 0xFF	; 255

00002606 <__divmodsi4_exit>:
    2606:	08 95       	ret

00002608 <__negsi2>:
    2608:	90 95       	com	r25
    260a:	80 95       	com	r24
    260c:	70 95       	com	r23
    260e:	61 95       	neg	r22
    2610:	7f 4f       	sbci	r23, 0xFF	; 255
    2612:	8f 4f       	sbci	r24, 0xFF	; 255
    2614:	9f 4f       	sbci	r25, 0xFF	; 255
    2616:	08 95       	ret

00002618 <__muluhisi3>:
    2618:	0e 94 1f 13 	call	0x263e	; 0x263e <__umulhisi3>
    261c:	a5 9f       	mul	r26, r21
    261e:	90 0d       	add	r25, r0
    2620:	b4 9f       	mul	r27, r20
    2622:	90 0d       	add	r25, r0
    2624:	a4 9f       	mul	r26, r20
    2626:	80 0d       	add	r24, r0
    2628:	91 1d       	adc	r25, r1
    262a:	11 24       	eor	r1, r1
    262c:	08 95       	ret

0000262e <__mulshisi3>:
    262e:	b7 ff       	sbrs	r27, 7
    2630:	0c 94 0c 13 	jmp	0x2618	; 0x2618 <__muluhisi3>

00002634 <__mulohisi3>:
    2634:	0e 94 0c 13 	call	0x2618	; 0x2618 <__muluhisi3>
    2638:	82 1b       	sub	r24, r18
    263a:	93 0b       	sbc	r25, r19
    263c:	08 95       	ret

0000263e <__umulhisi3>:
    263e:	a2 9f       	mul	r26, r18
    2640:	b0 01       	movw	r22, r0
    2642:	b3 9f       	mul	r27, r19
    2644:	c0 01       	movw	r24, r0
    2646:	a3 9f       	mul	r26, r19
    2648:	70 0d       	add	r23, r0
    264a:	81 1d       	adc	r24, r1
    264c:	11 24       	eor	r1, r1
    264e:	91 1d       	adc	r25, r1
    2650:	b2 9f       	mul	r27, r18
    2652:	70 0d       	add	r23, r0
    2654:	81 1d       	adc	r24, r1
    2656:	11 24       	eor	r1, r1
    2658:	91 1d       	adc	r25, r1
    265a:	08 95       	ret

0000265c <_exit>:
    265c:	f8 94       	cli

0000265e <__stop_program>:
    265e:	ff cf       	rjmp	.-2      	; 0x265e <__stop_program>
