
FirstTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  000025ea  0000267e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000025ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000666  00800162  00800162  000026e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000026e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002710  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a0  00000000  00000000  00002750  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000057a3  00000000  00000000  00002bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000123f  00000000  00000000  00008393  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002ffa  00000000  00000000  000095d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f08  00000000  00000000  0000c5cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001995  00000000  00000000  0000d4d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000056f7  00000000  00000000  0000ee69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005c8  00000000  00000000  00014560  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__vector_13>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 41 04 	jmp	0x882	; 0x882 <__vector_16>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__vector_20>
      54:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__vector_21>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__vector_28>
      74:	0c 94 ae 08 	jmp	0x115c	; 0x115c <__vector_29>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	ea ee       	ldi	r30, 0xEA	; 234
      90:	f5 e2       	ldi	r31, 0x25	; 37
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a2 36       	cpi	r26, 0x62	; 98
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	27 e0       	ldi	r18, 0x07	; 7
      a0:	a2 e6       	ldi	r26, 0x62	; 98
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a8 3c       	cpi	r26, 0xC8	; 200
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 ef 03 	call	0x7de	; 0x7de <main>
      b2:	0c 94 f3 12 	jmp	0x25e6	; 0x25e6 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <obstacles_task>:
{

}
//-----------------------------------------
void comReceiver_task(void *pvParameters)
{
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	00 d0       	rcall	.+0      	; 0xc0 <obstacles_task+0x6>
      c0:	00 d0       	rcall	.+0      	; 0xc2 <obstacles_task+0x8>
      c2:	cd b7       	in	r28, 0x3d	; 61
      c4:	de b7       	in	r29, 0x3e	; 62
      c6:	0f 2e       	mov	r0, r31
      c8:	f1 ef       	ldi	r31, 0xF1	; 241
      ca:	6f 2e       	mov	r6, r31
      cc:	f1 e0       	ldi	r31, 0x01	; 1
      ce:	7f 2e       	mov	r7, r31
      d0:	f0 2d       	mov	r31, r0
      d2:	0f 2e       	mov	r0, r31
      d4:	ff e0       	ldi	r31, 0x0F	; 15
      d6:	af 2e       	mov	r10, r31
      d8:	f3 e0       	ldi	r31, 0x03	; 3
      da:	bf 2e       	mov	r11, r31
      dc:	f0 2d       	mov	r31, r0
      de:	33 24       	eor	r3, r3
      e0:	33 94       	inc	r3
      e2:	21 2c       	mov	r2, r1
      e4:	0f 2e       	mov	r0, r31
      e6:	f5 ef       	ldi	r31, 0xF5	; 245
      e8:	8f 2e       	mov	r8, r31
      ea:	f1 e0       	ldi	r31, 0x01	; 1
      ec:	9f 2e       	mov	r9, r31
      ee:	f0 2d       	mov	r31, r0
      f0:	0f 2e       	mov	r0, r31
      f2:	fd e0       	ldi	r31, 0x0D	; 13
      f4:	cf 2e       	mov	r12, r31
      f6:	f3 e0       	ldi	r31, 0x03	; 3
      f8:	df 2e       	mov	r13, r31
      fa:	f0 2d       	mov	r31, r0
      fc:	19 82       	std	Y+1, r1	; 0x01
      fe:	1a 82       	std	Y+2, r1	; 0x02
     100:	d3 01       	movw	r26, r6
     102:	8d 91       	ld	r24, X+
     104:	9c 91       	ld	r25, X
     106:	11 97       	sbiw	r26, 0x01	; 1
     108:	9c 01       	movw	r18, r24
     10a:	22 0f       	add	r18, r18
     10c:	33 1f       	adc	r19, r19
     10e:	88 0f       	add	r24, r24
     110:	99 1f       	adc	r25, r25
     112:	88 0f       	add	r24, r24
     114:	99 1f       	adc	r25, r25
     116:	88 0f       	add	r24, r24
     118:	99 1f       	adc	r25, r25
     11a:	82 0f       	add	r24, r18
     11c:	93 1f       	adc	r25, r19
     11e:	12 96       	adiw	r26, 0x02	; 2
     120:	ed 91       	ld	r30, X+
     122:	fc 91       	ld	r31, X
     124:	13 97       	sbiw	r26, 0x03	; 3
     126:	8e 0f       	add	r24, r30
     128:	9f 1f       	adc	r25, r31
     12a:	fc 01       	movw	r30, r24
     12c:	ee 59       	subi	r30, 0x9E	; 158
     12e:	fe 4f       	sbci	r31, 0xFE	; 254
     130:	80 81       	ld	r24, Z
     132:	81 11       	cpse	r24, r1
     134:	96 c0       	rjmp	.+300    	; 0x262 <obstacles_task+0x1a8>
     136:	0f 2e       	mov	r0, r31
     138:	f3 e6       	ldi	r31, 0x63	; 99
     13a:	ef 2e       	mov	r14, r31
     13c:	f1 e0       	ldi	r31, 0x01	; 1
     13e:	ff 2e       	mov	r15, r31
     140:	f0 2d       	mov	r31, r0
     142:	47 ef       	ldi	r20, 0xF7	; 247
     144:	51 e0       	ldi	r21, 0x01	; 1
     146:	b7 01       	movw	r22, r14
     148:	0e c0       	rjmp	.+28     	; 0x166 <obstacles_task+0xac>
     14a:	8d 91       	ld	r24, X+
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	81 93       	st	Z+, r24
     150:	91 93       	st	Z+, r25
     152:	e2 17       	cp	r30, r18
     154:	f3 07       	cpc	r31, r19
     156:	c9 f7       	brne	.-14     	; 0x14a <obstacles_task+0x90>
     158:	66 5f       	subi	r22, 0xF6	; 246
     15a:	7f 4f       	sbci	r23, 0xFF	; 255
     15c:	4c 5e       	subi	r20, 0xEC	; 236
     15e:	5f 4f       	sbci	r21, 0xFF	; 255
     160:	4a 15       	cp	r20, r10
     162:	5b 05       	cpc	r21, r11
     164:	31 f0       	breq	.+12     	; 0x172 <obstacles_task+0xb8>
     166:	9a 01       	movw	r18, r20
     168:	2e 5e       	subi	r18, 0xEE	; 238
     16a:	3f 4f       	sbci	r19, 0xFF	; 255
     16c:	fa 01       	movw	r30, r20
     16e:	db 01       	movw	r26, r22
     170:	ec cf       	rjmp	.-40     	; 0x14a <obstacles_task+0x90>
     172:	e9 e0       	ldi	r30, 0x09	; 9
     174:	f2 e0       	ldi	r31, 0x02	; 2
     176:	43 2c       	mov	r4, r3
     178:	52 2c       	mov	r5, r2
     17a:	00 e0       	ldi	r16, 0x00	; 0
     17c:	10 e0       	ldi	r17, 0x00	; 0
     17e:	fc 83       	std	Y+4, r31	; 0x04
     180:	eb 83       	std	Y+3, r30	; 0x03
     182:	0e 94 92 12 	call	0x2524	; 0x2524 <rand>
     186:	81 70       	andi	r24, 0x01	; 1
     188:	90 78       	andi	r25, 0x80	; 128
     18a:	99 23       	and	r25, r25
     18c:	24 f4       	brge	.+8      	; 0x196 <obstacles_task+0xdc>
     18e:	01 97       	sbiw	r24, 0x01	; 1
     190:	8e 6f       	ori	r24, 0xFE	; 254
     192:	9f 6f       	ori	r25, 0xFF	; 255
     194:	01 96       	adiw	r24, 0x01	; 1
     196:	d4 01       	movw	r26, r8
     198:	8d 93       	st	X+, r24
     19a:	9c 93       	st	X, r25
     19c:	02 30       	cpi	r16, 0x02	; 2
     19e:	11 05       	cpc	r17, r1
     1a0:	2c f0       	brlt	.+10     	; 0x1ac <obstacles_task+0xf2>
     1a2:	bd e0       	ldi	r27, 0x0D	; 13
     1a4:	4b 16       	cp	r4, r27
     1a6:	51 04       	cpc	r5, r1
     1a8:	d9 f4       	brne	.+54     	; 0x1e0 <obstacles_task+0x126>
     1aa:	60 c0       	rjmp	.+192    	; 0x26c <obstacles_task+0x1b2>
     1ac:	0e 94 92 12 	call	0x2524	; 0x2524 <rand>
     1b0:	81 70       	andi	r24, 0x01	; 1
     1b2:	90 78       	andi	r25, 0x80	; 128
     1b4:	99 23       	and	r25, r25
     1b6:	24 f4       	brge	.+8      	; 0x1c0 <obstacles_task+0x106>
     1b8:	01 97       	sbiw	r24, 0x01	; 1
     1ba:	8e 6f       	ori	r24, 0xFE	; 254
     1bc:	9f 6f       	ori	r25, 0xFF	; 255
     1be:	01 96       	adiw	r24, 0x01	; 1
     1c0:	eb 81       	ldd	r30, Y+3	; 0x03
     1c2:	fc 81       	ldd	r31, Y+4	; 0x04
     1c4:	91 83       	std	Z+1, r25	; 0x01
     1c6:	80 83       	st	Z, r24
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	11 f4       	brne	.+4      	; 0x1d0 <obstacles_task+0x116>
     1cc:	0f 5f       	subi	r16, 0xFF	; 255
     1ce:	1f 4f       	sbci	r17, 0xFF	; 255
     1d0:	c2 01       	movw	r24, r4
     1d2:	83 70       	andi	r24, 0x03	; 3
     1d4:	99 27       	eor	r25, r25
     1d6:	89 2b       	or	r24, r25
     1d8:	39 f4       	brne	.+14     	; 0x1e8 <obstacles_task+0x12e>
     1da:	09 81       	ldd	r16, Y+1	; 0x01
     1dc:	1a 81       	ldd	r17, Y+2	; 0x02
     1de:	04 c0       	rjmp	.+8      	; 0x1e8 <obstacles_task+0x12e>
     1e0:	ab 81       	ldd	r26, Y+3	; 0x03
     1e2:	bc 81       	ldd	r27, Y+4	; 0x04
     1e4:	1d 92       	st	X+, r1
     1e6:	1c 92       	st	X, r1
     1e8:	bf ef       	ldi	r27, 0xFF	; 255
     1ea:	4b 1a       	sub	r4, r27
     1ec:	5b 0a       	sbc	r5, r27
     1ee:	eb 81       	ldd	r30, Y+3	; 0x03
     1f0:	fc 81       	ldd	r31, Y+4	; 0x04
     1f2:	74 96       	adiw	r30, 0x14	; 20
     1f4:	fc 83       	std	Y+4, r31	; 0x04
     1f6:	eb 83       	std	Y+3, r30	; 0x03
     1f8:	fe e0       	ldi	r31, 0x0E	; 14
     1fa:	4f 16       	cp	r4, r31
     1fc:	51 04       	cpc	r5, r1
     1fe:	09 f6       	brne	.-126    	; 0x182 <obstacles_task+0xc8>
     200:	a4 01       	movw	r20, r8
     202:	0e c0       	rjmp	.+28     	; 0x220 <obstacles_task+0x166>
     204:	80 81       	ld	r24, Z
     206:	32 96       	adiw	r30, 0x02	; 2
     208:	8d 93       	st	X+, r24
     20a:	e2 17       	cp	r30, r18
     20c:	f3 07       	cpc	r31, r19
     20e:	d1 f7       	brne	.-12     	; 0x204 <obstacles_task+0x14a>
     210:	4c 5e       	subi	r20, 0xEC	; 236
     212:	5f 4f       	sbci	r21, 0xFF	; 255
     214:	8a e0       	ldi	r24, 0x0A	; 10
     216:	e8 0e       	add	r14, r24
     218:	f1 1c       	adc	r15, r1
     21a:	4c 15       	cp	r20, r12
     21c:	5d 05       	cpc	r21, r13
     21e:	31 f0       	breq	.+12     	; 0x22c <obstacles_task+0x172>
     220:	9a 01       	movw	r18, r20
     222:	2e 5e       	subi	r18, 0xEE	; 238
     224:	3f 4f       	sbci	r19, 0xFF	; 255
     226:	d7 01       	movw	r26, r14
     228:	fa 01       	movw	r30, r20
     22a:	ec cf       	rjmp	.-40     	; 0x204 <obstacles_task+0x14a>
     22c:	d3 01       	movw	r26, r6
     22e:	8d 91       	ld	r24, X+
     230:	9c 91       	ld	r25, X
     232:	11 97       	sbiw	r26, 0x01	; 1
     234:	fc 01       	movw	r30, r24
     236:	ee 0f       	add	r30, r30
     238:	ff 1f       	adc	r31, r31
     23a:	88 0f       	add	r24, r24
     23c:	99 1f       	adc	r25, r25
     23e:	88 0f       	add	r24, r24
     240:	99 1f       	adc	r25, r25
     242:	88 0f       	add	r24, r24
     244:	99 1f       	adc	r25, r25
     246:	e8 0f       	add	r30, r24
     248:	f9 1f       	adc	r31, r25
     24a:	12 96       	adiw	r26, 0x02	; 2
     24c:	8d 91       	ld	r24, X+
     24e:	9c 91       	ld	r25, X
     250:	13 97       	sbiw	r26, 0x03	; 3
     252:	e8 0f       	add	r30, r24
     254:	f9 1f       	adc	r31, r25
     256:	ee 0f       	add	r30, r30
     258:	ff 1f       	adc	r31, r31
     25a:	eb 50       	subi	r30, 0x0B	; 11
     25c:	fe 4f       	sbci	r31, 0xFE	; 254
     25e:	30 82       	st	Z, r3
     260:	21 82       	std	Z+1, r2	; 0x01
     262:	88 ee       	ldi	r24, 0xE8	; 232
     264:	93 e0       	ldi	r25, 0x03	; 3
     266:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <vTaskDelay>
     26a:	4a cf       	rjmp	.-364    	; 0x100 <obstacles_task+0x46>
     26c:	0e 94 92 12 	call	0x2524	; 0x2524 <rand>
     270:	81 70       	andi	r24, 0x01	; 1
     272:	90 78       	andi	r25, 0x80	; 128
     274:	99 23       	and	r25, r25
     276:	24 f4       	brge	.+8      	; 0x280 <obstacles_task+0x1c6>
     278:	01 97       	sbiw	r24, 0x01	; 1
     27a:	8e 6f       	ori	r24, 0xFE	; 254
     27c:	9f 6f       	ori	r25, 0xFF	; 255
     27e:	01 96       	adiw	r24, 0x01	; 1
     280:	eb 81       	ldd	r30, Y+3	; 0x03
     282:	fc 81       	ldd	r31, Y+4	; 0x04
     284:	91 83       	std	Z+1, r25	; 0x01
     286:	80 83       	st	Z, r24
     288:	01 97       	sbiw	r24, 0x01	; 1
     28a:	09 f0       	breq	.+2      	; 0x28e <obstacles_task+0x1d4>
     28c:	b9 cf       	rjmp	.-142    	; 0x200 <obstacles_task+0x146>
     28e:	9e cf       	rjmp	.-196    	; 0x1cc <obstacles_task+0x112>

00000290 <update>:
     290:	cf 92       	push	r12
     292:	df 92       	push	r13
     294:	ef 92       	push	r14
     296:	ff 92       	push	r15
     298:	0f 93       	push	r16
     29a:	1f 93       	push	r17
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	cd e0       	ldi	r28, 0x0D	; 13
     2a2:	d3 e0       	ldi	r29, 0x03	; 3
     2a4:	45 ef       	ldi	r20, 0xF5	; 245
     2a6:	51 e0       	ldi	r21, 0x01	; 1
     2a8:	0d e0       	ldi	r16, 0x0D	; 13
     2aa:	13 e0       	ldi	r17, 0x03	; 3
     2ac:	c1 2c       	mov	r12, r1
     2ae:	d1 2c       	mov	r13, r1
     2b0:	61 e0       	ldi	r22, 0x01	; 1
     2b2:	70 e0       	ldi	r23, 0x00	; 0
     2b4:	de 01       	movw	r26, r28
     2b6:	19 82       	std	Y+1, r1	; 0x01
     2b8:	18 82       	st	Y, r1
     2ba:	fa 01       	movw	r30, r20
     2bc:	8c 2d       	mov	r24, r12
     2be:	9d 2d       	mov	r25, r13
     2c0:	21 91       	ld	r18, Z+
     2c2:	31 91       	ld	r19, Z+
     2c4:	21 30       	cpi	r18, 0x01	; 1
     2c6:	31 05       	cpc	r19, r1
     2c8:	79 f4       	brne	.+30     	; 0x2e8 <update+0x58>
     2ca:	ed 90       	ld	r14, X+
     2cc:	fc 90       	ld	r15, X
     2ce:	11 97       	sbiw	r26, 0x01	; 1
     2d0:	9b 01       	movw	r18, r22
     2d2:	08 2e       	mov	r0, r24
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <update+0x4a>
     2d6:	22 0f       	add	r18, r18
     2d8:	33 1f       	adc	r19, r19
     2da:	0a 94       	dec	r0
     2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <update+0x46>
     2de:	2e 29       	or	r18, r14
     2e0:	3f 29       	or	r19, r15
     2e2:	11 96       	adiw	r26, 0x01	; 1
     2e4:	3c 93       	st	X, r19
     2e6:	2e 93       	st	-X, r18
     2e8:	01 96       	adiw	r24, 0x01	; 1
     2ea:	8a 30       	cpi	r24, 0x0A	; 10
     2ec:	91 05       	cpc	r25, r1
     2ee:	41 f7       	brne	.-48     	; 0x2c0 <update+0x30>
     2f0:	22 96       	adiw	r28, 0x02	; 2
     2f2:	4c 5e       	subi	r20, 0xEC	; 236
     2f4:	5f 4f       	sbci	r21, 0xFF	; 255
     2f6:	40 17       	cp	r20, r16
     2f8:	51 07       	cpc	r21, r17
     2fa:	e1 f6       	brne	.-72     	; 0x2b4 <update+0x24>
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	1f 91       	pop	r17
     302:	0f 91       	pop	r16
     304:	ff 90       	pop	r15
     306:	ef 90       	pop	r14
     308:	df 90       	pop	r13
     30a:	cf 90       	pop	r12
     30c:	08 95       	ret

0000030e <moveCar>:
     30e:	81 30       	cpi	r24, 0x01	; 1
     310:	91 05       	cpc	r25, r1
     312:	09 f4       	brne	.+2      	; 0x316 <moveCar+0x8>
     314:	62 c0       	rjmp	.+196    	; 0x3da <moveCar+0xcc>
     316:	40 f0       	brcs	.+16     	; 0x328 <moveCar+0x1a>
     318:	82 30       	cpi	r24, 0x02	; 2
     31a:	91 05       	cpc	r25, r1
     31c:	09 f4       	brne	.+2      	; 0x320 <moveCar+0x12>
     31e:	ba c0       	rjmp	.+372    	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
     320:	03 97       	sbiw	r24, 0x03	; 3
     322:	09 f4       	brne	.+2      	; 0x326 <moveCar+0x18>
     324:	14 c1       	rjmp	.+552    	; 0x54e <__FUSE_REGION_LENGTH__+0x14e>
     326:	08 95       	ret
     328:	db 01       	movw	r26, r22
     32a:	12 96       	adiw	r26, 0x02	; 2
     32c:	2d 91       	ld	r18, X+
     32e:	3c 91       	ld	r19, X
     330:	13 97       	sbiw	r26, 0x03	; 3
     332:	c9 01       	movw	r24, r18
     334:	01 96       	adiw	r24, 0x01	; 1
     336:	8a 30       	cpi	r24, 0x0A	; 10
     338:	91 05       	cpc	r25, r1
     33a:	08 f0       	brcs	.+2      	; 0x33e <moveCar+0x30>
     33c:	63 c1       	rjmp	.+710    	; 0x604 <__FUSE_REGION_LENGTH__+0x204>
     33e:	4d 91       	ld	r20, X+
     340:	5c 91       	ld	r21, X
     342:	da 01       	movw	r26, r20
     344:	aa 0f       	add	r26, r26
     346:	bb 1f       	adc	r27, r27
     348:	fa 01       	movw	r30, r20
     34a:	ee 0f       	add	r30, r30
     34c:	ff 1f       	adc	r31, r31
     34e:	ee 0f       	add	r30, r30
     350:	ff 1f       	adc	r31, r31
     352:	ee 0f       	add	r30, r30
     354:	ff 1f       	adc	r31, r31
     356:	ea 0f       	add	r30, r26
     358:	fb 1f       	adc	r31, r27
     35a:	e8 0f       	add	r30, r24
     35c:	f9 1f       	adc	r31, r25
     35e:	ee 0f       	add	r30, r30
     360:	ff 1f       	adc	r31, r31
     362:	eb 50       	subi	r30, 0x0B	; 11
     364:	fe 4f       	sbci	r31, 0xFE	; 254
     366:	80 81       	ld	r24, Z
     368:	91 81       	ldd	r25, Z+1	; 0x01
     36a:	89 2b       	or	r24, r25
     36c:	09 f0       	breq	.+2      	; 0x370 <moveCar+0x62>
     36e:	4a c1       	rjmp	.+660    	; 0x604 <__FUSE_REGION_LENGTH__+0x204>
     370:	fd 01       	movw	r30, r26
     372:	44 0f       	add	r20, r20
     374:	55 1f       	adc	r21, r21
     376:	44 0f       	add	r20, r20
     378:	55 1f       	adc	r21, r21
     37a:	44 0f       	add	r20, r20
     37c:	55 1f       	adc	r21, r21
     37e:	e4 0f       	add	r30, r20
     380:	f5 1f       	adc	r31, r21
     382:	e2 0f       	add	r30, r18
     384:	f3 1f       	adc	r31, r19
     386:	ee 0f       	add	r30, r30
     388:	ff 1f       	adc	r31, r31
     38a:	eb 50       	subi	r30, 0x0B	; 11
     38c:	fe 4f       	sbci	r31, 0xFE	; 254
     38e:	11 82       	std	Z+1, r1	; 0x01
     390:	10 82       	st	Z, r1
     392:	fb 01       	movw	r30, r22
     394:	20 81       	ld	r18, Z
     396:	31 81       	ldd	r19, Z+1	; 0x01
     398:	82 81       	ldd	r24, Z+2	; 0x02
     39a:	93 81       	ldd	r25, Z+3	; 0x03
     39c:	01 96       	adiw	r24, 0x01	; 1
     39e:	93 83       	std	Z+3, r25	; 0x03
     3a0:	82 83       	std	Z+2, r24	; 0x02
     3a2:	f9 01       	movw	r30, r18
     3a4:	ee 0f       	add	r30, r30
     3a6:	ff 1f       	adc	r31, r31
     3a8:	22 0f       	add	r18, r18
     3aa:	33 1f       	adc	r19, r19
     3ac:	22 0f       	add	r18, r18
     3ae:	33 1f       	adc	r19, r19
     3b0:	22 0f       	add	r18, r18
     3b2:	33 1f       	adc	r19, r19
     3b4:	e2 0f       	add	r30, r18
     3b6:	f3 1f       	adc	r31, r19
     3b8:	e8 0f       	add	r30, r24
     3ba:	f9 1f       	adc	r31, r25
     3bc:	ee 0f       	add	r30, r30
     3be:	ff 1f       	adc	r31, r31
     3c0:	eb 50       	subi	r30, 0x0B	; 11
     3c2:	fe 4f       	sbci	r31, 0xFE	; 254
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	91 83       	std	Z+1, r25	; 0x01
     3ca:	80 83       	st	Z, r24
     3cc:	0e 94 48 01 	call	0x290	; 0x290 <update>
     3d0:	88 ec       	ldi	r24, 0xC8	; 200
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <vTaskDelay>
     3d8:	08 95       	ret
     3da:	db 01       	movw	r26, r22
     3dc:	12 96       	adiw	r26, 0x02	; 2
     3de:	2d 91       	ld	r18, X+
     3e0:	3c 91       	ld	r19, X
     3e2:	13 97       	sbiw	r26, 0x03	; 3
     3e4:	21 15       	cp	r18, r1
     3e6:	31 05       	cpc	r19, r1
     3e8:	09 f4       	brne	.+2      	; 0x3ec <moveCar+0xde>
     3ea:	0c c1       	rjmp	.+536    	; 0x604 <__FUSE_REGION_LENGTH__+0x204>
     3ec:	4d 91       	ld	r20, X+
     3ee:	5c 91       	ld	r21, X
     3f0:	11 97       	sbiw	r26, 0x01	; 1
     3f2:	fa 01       	movw	r30, r20
     3f4:	ee 0f       	add	r30, r30
     3f6:	ff 1f       	adc	r31, r31
     3f8:	ca 01       	movw	r24, r20
     3fa:	88 0f       	add	r24, r24
     3fc:	99 1f       	adc	r25, r25
     3fe:	88 0f       	add	r24, r24
     400:	99 1f       	adc	r25, r25
     402:	88 0f       	add	r24, r24
     404:	99 1f       	adc	r25, r25
     406:	e8 0f       	add	r30, r24
     408:	f9 1f       	adc	r31, r25
     40a:	e2 0f       	add	r30, r18
     40c:	f3 1f       	adc	r31, r19
     40e:	ee 0f       	add	r30, r30
     410:	ff 1f       	adc	r31, r31
     412:	ed 50       	subi	r30, 0x0D	; 13
     414:	fe 4f       	sbci	r31, 0xFE	; 254
     416:	80 81       	ld	r24, Z
     418:	91 81       	ldd	r25, Z+1	; 0x01
     41a:	89 2b       	or	r24, r25
     41c:	09 f0       	breq	.+2      	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
     41e:	f2 c0       	rjmp	.+484    	; 0x604 <__FUSE_REGION_LENGTH__+0x204>
     420:	fa 01       	movw	r30, r20
     422:	ee 0f       	add	r30, r30
     424:	ff 1f       	adc	r31, r31
     426:	44 0f       	add	r20, r20
     428:	55 1f       	adc	r21, r21
     42a:	44 0f       	add	r20, r20
     42c:	55 1f       	adc	r21, r21
     42e:	44 0f       	add	r20, r20
     430:	55 1f       	adc	r21, r21
     432:	e4 0f       	add	r30, r20
     434:	f5 1f       	adc	r31, r21
     436:	e2 0f       	add	r30, r18
     438:	f3 1f       	adc	r31, r19
     43a:	ee 0f       	add	r30, r30
     43c:	ff 1f       	adc	r31, r31
     43e:	eb 50       	subi	r30, 0x0B	; 11
     440:	fe 4f       	sbci	r31, 0xFE	; 254
     442:	11 82       	std	Z+1, r1	; 0x01
     444:	10 82       	st	Z, r1
     446:	12 96       	adiw	r26, 0x02	; 2
     448:	8d 91       	ld	r24, X+
     44a:	9c 91       	ld	r25, X
     44c:	13 97       	sbiw	r26, 0x03	; 3
     44e:	01 97       	sbiw	r24, 0x01	; 1
     450:	13 96       	adiw	r26, 0x03	; 3
     452:	9c 93       	st	X, r25
     454:	8e 93       	st	-X, r24
     456:	12 97       	sbiw	r26, 0x02	; 2
     458:	2d 91       	ld	r18, X+
     45a:	3c 91       	ld	r19, X
     45c:	f9 01       	movw	r30, r18
     45e:	ee 0f       	add	r30, r30
     460:	ff 1f       	adc	r31, r31
     462:	22 0f       	add	r18, r18
     464:	33 1f       	adc	r19, r19
     466:	22 0f       	add	r18, r18
     468:	33 1f       	adc	r19, r19
     46a:	22 0f       	add	r18, r18
     46c:	33 1f       	adc	r19, r19
     46e:	e2 0f       	add	r30, r18
     470:	f3 1f       	adc	r31, r19
     472:	e8 0f       	add	r30, r24
     474:	f9 1f       	adc	r31, r25
     476:	ee 0f       	add	r30, r30
     478:	ff 1f       	adc	r31, r31
     47a:	eb 50       	subi	r30, 0x0B	; 11
     47c:	fe 4f       	sbci	r31, 0xFE	; 254
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	91 83       	std	Z+1, r25	; 0x01
     484:	80 83       	st	Z, r24
     486:	0e 94 48 01 	call	0x290	; 0x290 <update>
     48a:	88 ec       	ldi	r24, 0xC8	; 200
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <vTaskDelay>
     492:	08 95       	ret
     494:	fb 01       	movw	r30, r22
     496:	20 81       	ld	r18, Z
     498:	31 81       	ldd	r19, Z+1	; 0x01
     49a:	c9 01       	movw	r24, r18
     49c:	01 96       	adiw	r24, 0x01	; 1
     49e:	8e 30       	cpi	r24, 0x0E	; 14
     4a0:	91 05       	cpc	r25, r1
     4a2:	08 f0       	brcs	.+2      	; 0x4a6 <__FUSE_REGION_LENGTH__+0xa6>
     4a4:	af c0       	rjmp	.+350    	; 0x604 <__FUSE_REGION_LENGTH__+0x204>
     4a6:	42 81       	ldd	r20, Z+2	; 0x02
     4a8:	53 81       	ldd	r21, Z+3	; 0x03
     4aa:	fc 01       	movw	r30, r24
     4ac:	ee 0f       	add	r30, r30
     4ae:	ff 1f       	adc	r31, r31
     4b0:	88 0f       	add	r24, r24
     4b2:	99 1f       	adc	r25, r25
     4b4:	88 0f       	add	r24, r24
     4b6:	99 1f       	adc	r25, r25
     4b8:	88 0f       	add	r24, r24
     4ba:	99 1f       	adc	r25, r25
     4bc:	e8 0f       	add	r30, r24
     4be:	f9 1f       	adc	r31, r25
     4c0:	e4 0f       	add	r30, r20
     4c2:	f5 1f       	adc	r31, r21
     4c4:	ee 0f       	add	r30, r30
     4c6:	ff 1f       	adc	r31, r31
     4c8:	eb 50       	subi	r30, 0x0B	; 11
     4ca:	fe 4f       	sbci	r31, 0xFE	; 254
     4cc:	80 81       	ld	r24, Z
     4ce:	91 81       	ldd	r25, Z+1	; 0x01
     4d0:	89 2b       	or	r24, r25
     4d2:	09 f0       	breq	.+2      	; 0x4d6 <__FUSE_REGION_LENGTH__+0xd6>
     4d4:	97 c0       	rjmp	.+302    	; 0x604 <__FUSE_REGION_LENGTH__+0x204>
     4d6:	c9 01       	movw	r24, r18
     4d8:	88 0f       	add	r24, r24
     4da:	99 1f       	adc	r25, r25
     4dc:	22 0f       	add	r18, r18
     4de:	33 1f       	adc	r19, r19
     4e0:	22 0f       	add	r18, r18
     4e2:	33 1f       	adc	r19, r19
     4e4:	22 0f       	add	r18, r18
     4e6:	33 1f       	adc	r19, r19
     4e8:	28 0f       	add	r18, r24
     4ea:	39 1f       	adc	r19, r25
     4ec:	f9 01       	movw	r30, r18
     4ee:	e4 0f       	add	r30, r20
     4f0:	f5 1f       	adc	r31, r21
     4f2:	ee 0f       	add	r30, r30
     4f4:	ff 1f       	adc	r31, r31
     4f6:	eb 50       	subi	r30, 0x0B	; 11
     4f8:	fe 4f       	sbci	r31, 0xFE	; 254
     4fa:	11 82       	std	Z+1, r1	; 0x01
     4fc:	10 82       	st	Z, r1
     4fe:	db 01       	movw	r26, r22
     500:	8d 91       	ld	r24, X+
     502:	9c 91       	ld	r25, X
     504:	11 97       	sbiw	r26, 0x01	; 1
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	11 96       	adiw	r26, 0x01	; 1
     50a:	9c 93       	st	X, r25
     50c:	8e 93       	st	-X, r24
     50e:	12 96       	adiw	r26, 0x02	; 2
     510:	ed 91       	ld	r30, X+
     512:	fc 91       	ld	r31, X
     514:	13 97       	sbiw	r26, 0x03	; 3
     516:	9c 01       	movw	r18, r24
     518:	22 0f       	add	r18, r18
     51a:	33 1f       	adc	r19, r19
     51c:	88 0f       	add	r24, r24
     51e:	99 1f       	adc	r25, r25
     520:	88 0f       	add	r24, r24
     522:	99 1f       	adc	r25, r25
     524:	88 0f       	add	r24, r24
     526:	99 1f       	adc	r25, r25
     528:	82 0f       	add	r24, r18
     52a:	93 1f       	adc	r25, r19
     52c:	e8 0f       	add	r30, r24
     52e:	f9 1f       	adc	r31, r25
     530:	ee 0f       	add	r30, r30
     532:	ff 1f       	adc	r31, r31
     534:	eb 50       	subi	r30, 0x0B	; 11
     536:	fe 4f       	sbci	r31, 0xFE	; 254
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	91 83       	std	Z+1, r25	; 0x01
     53e:	80 83       	st	Z, r24
     540:	0e 94 48 01 	call	0x290	; 0x290 <update>
     544:	88 ec       	ldi	r24, 0xC8	; 200
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <vTaskDelay>
     54c:	08 95       	ret
     54e:	fb 01       	movw	r30, r22
     550:	20 81       	ld	r18, Z
     552:	31 81       	ldd	r19, Z+1	; 0x01
     554:	21 15       	cp	r18, r1
     556:	31 05       	cpc	r19, r1
     558:	09 f4       	brne	.+2      	; 0x55c <__FUSE_REGION_LENGTH__+0x15c>
     55a:	54 c0       	rjmp	.+168    	; 0x604 <__FUSE_REGION_LENGTH__+0x204>
     55c:	42 81       	ldd	r20, Z+2	; 0x02
     55e:	53 81       	ldd	r21, Z+3	; 0x03
     560:	c9 01       	movw	r24, r18
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	fc 01       	movw	r30, r24
     566:	ee 0f       	add	r30, r30
     568:	ff 1f       	adc	r31, r31
     56a:	88 0f       	add	r24, r24
     56c:	99 1f       	adc	r25, r25
     56e:	88 0f       	add	r24, r24
     570:	99 1f       	adc	r25, r25
     572:	88 0f       	add	r24, r24
     574:	99 1f       	adc	r25, r25
     576:	e8 0f       	add	r30, r24
     578:	f9 1f       	adc	r31, r25
     57a:	e4 0f       	add	r30, r20
     57c:	f5 1f       	adc	r31, r21
     57e:	ee 0f       	add	r30, r30
     580:	ff 1f       	adc	r31, r31
     582:	eb 50       	subi	r30, 0x0B	; 11
     584:	fe 4f       	sbci	r31, 0xFE	; 254
     586:	80 81       	ld	r24, Z
     588:	91 81       	ldd	r25, Z+1	; 0x01
     58a:	89 2b       	or	r24, r25
     58c:	d9 f5       	brne	.+118    	; 0x604 <__FUSE_REGION_LENGTH__+0x204>
     58e:	c9 01       	movw	r24, r18
     590:	88 0f       	add	r24, r24
     592:	99 1f       	adc	r25, r25
     594:	22 0f       	add	r18, r18
     596:	33 1f       	adc	r19, r19
     598:	22 0f       	add	r18, r18
     59a:	33 1f       	adc	r19, r19
     59c:	22 0f       	add	r18, r18
     59e:	33 1f       	adc	r19, r19
     5a0:	28 0f       	add	r18, r24
     5a2:	39 1f       	adc	r19, r25
     5a4:	f9 01       	movw	r30, r18
     5a6:	e4 0f       	add	r30, r20
     5a8:	f5 1f       	adc	r31, r21
     5aa:	ee 0f       	add	r30, r30
     5ac:	ff 1f       	adc	r31, r31
     5ae:	eb 50       	subi	r30, 0x0B	; 11
     5b0:	fe 4f       	sbci	r31, 0xFE	; 254
     5b2:	11 82       	std	Z+1, r1	; 0x01
     5b4:	10 82       	st	Z, r1
     5b6:	db 01       	movw	r26, r22
     5b8:	8d 91       	ld	r24, X+
     5ba:	9c 91       	ld	r25, X
     5bc:	11 97       	sbiw	r26, 0x01	; 1
     5be:	01 97       	sbiw	r24, 0x01	; 1
     5c0:	11 96       	adiw	r26, 0x01	; 1
     5c2:	9c 93       	st	X, r25
     5c4:	8e 93       	st	-X, r24
     5c6:	12 96       	adiw	r26, 0x02	; 2
     5c8:	ed 91       	ld	r30, X+
     5ca:	fc 91       	ld	r31, X
     5cc:	13 97       	sbiw	r26, 0x03	; 3
     5ce:	9c 01       	movw	r18, r24
     5d0:	22 0f       	add	r18, r18
     5d2:	33 1f       	adc	r19, r19
     5d4:	88 0f       	add	r24, r24
     5d6:	99 1f       	adc	r25, r25
     5d8:	88 0f       	add	r24, r24
     5da:	99 1f       	adc	r25, r25
     5dc:	88 0f       	add	r24, r24
     5de:	99 1f       	adc	r25, r25
     5e0:	82 0f       	add	r24, r18
     5e2:	93 1f       	adc	r25, r19
     5e4:	e8 0f       	add	r30, r24
     5e6:	f9 1f       	adc	r31, r25
     5e8:	ee 0f       	add	r30, r30
     5ea:	ff 1f       	adc	r31, r31
     5ec:	eb 50       	subi	r30, 0x0B	; 11
     5ee:	fe 4f       	sbci	r31, 0xFE	; 254
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	91 83       	std	Z+1, r25	; 0x01
     5f6:	80 83       	st	Z, r24
     5f8:	0e 94 48 01 	call	0x290	; 0x290 <update>
     5fc:	88 ec       	ldi	r24, 0xC8	; 200
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <vTaskDelay>
     604:	08 95       	ret

00000606 <gameLogic_task>:
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	00 d0       	rcall	.+0      	; 0x60c <gameLogic_task+0x6>
     60c:	00 d0       	rcall	.+0      	; 0x60e <gameLogic_task+0x8>
     60e:	00 d0       	rcall	.+0      	; 0x610 <gameLogic_task+0xa>
     610:	cd b7       	in	r28, 0x3d	; 61
     612:	de b7       	in	r29, 0x3e	; 62
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	4f ef       	ldi	r20, 0xFF	; 255
     618:	5f ef       	ldi	r21, 0xFF	; 255
     61a:	be 01       	movw	r22, r28
     61c:	6f 5f       	subi	r22, 0xFF	; 255
     61e:	7f 4f       	sbci	r23, 0xFF	; 255
     620:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <inputQueue>
     624:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <inputQueue+0x1>
     628:	0e 94 21 0b 	call	0x1642	; 0x1642 <xQueueGenericReceive>
     62c:	be 01       	movw	r22, r28
     62e:	6d 5f       	subi	r22, 0xFD	; 253
     630:	7f 4f       	sbci	r23, 0xFF	; 255
     632:	89 81       	ldd	r24, Y+1	; 0x01
     634:	9a 81       	ldd	r25, Y+2	; 0x02
     636:	0e 94 87 01 	call	0x30e	; 0x30e <moveCar>
     63a:	86 e4       	ldi	r24, 0x46	; 70
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <vTaskDelay>
     642:	e8 cf       	rjmp	.-48     	; 0x614 <gameLogic_task+0xe>

00000644 <joystickSampler_task>:
     644:	30 99       	sbic	0x06, 0	; 6
     646:	06 c0       	rjmp	.+12     	; 0x654 <joystickSampler_task+0x10>
     648:	61 ef       	ldi	r22, 0xF1	; 241
     64a:	71 e0       	ldi	r23, 0x01	; 1
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	0e 94 87 01 	call	0x30e	; 0x30e <moveCar>
     654:	31 99       	sbic	0x06, 1	; 6
     656:	06 c0       	rjmp	.+12     	; 0x664 <joystickSampler_task+0x20>
     658:	61 ef       	ldi	r22, 0xF1	; 241
     65a:	71 e0       	ldi	r23, 0x01	; 1
     65c:	82 e0       	ldi	r24, 0x02	; 2
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	0e 94 87 01 	call	0x30e	; 0x30e <moveCar>
     664:	36 99       	sbic	0x06, 6	; 6
     666:	06 c0       	rjmp	.+12     	; 0x674 <joystickSampler_task+0x30>
     668:	61 ef       	ldi	r22, 0xF1	; 241
     66a:	71 e0       	ldi	r23, 0x01	; 1
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	0e 94 87 01 	call	0x30e	; 0x30e <moveCar>
     674:	37 99       	sbic	0x06, 7	; 6
     676:	06 c0       	rjmp	.+12     	; 0x684 <joystickSampler_task+0x40>
     678:	61 ef       	ldi	r22, 0xF1	; 241
     67a:	71 e0       	ldi	r23, 0x01	; 1
     67c:	83 e0       	ldi	r24, 0x03	; 3
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	0e 94 87 01 	call	0x30e	; 0x30e <moveCar>
     684:	84 e6       	ldi	r24, 0x64	; 100
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <vTaskDelay>
     68c:	db cf       	rjmp	.-74     	; 0x644 <joystickSampler_task>

0000068e <displayUpdater_task>:
     68e:	0e 94 48 01 	call	0x290	; 0x290 <update>
     692:	8c e3       	ldi	r24, 0x3C	; 60
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <vTaskDelay>
     69a:	f9 cf       	rjmp	.-14     	; 0x68e <displayUpdater_task>

0000069c <startup_task>:
     69c:	e5 ef       	ldi	r30, 0xF5	; 245
     69e:	f1 e0       	ldi	r31, 0x01	; 1
     6a0:	2d e0       	ldi	r18, 0x0D	; 13
     6a2:	33 e0       	ldi	r19, 0x03	; 3
     6a4:	09 c0       	rjmp	.+18     	; 0x6b8 <startup_task+0x1c>
     6a6:	11 92       	st	Z+, r1
     6a8:	11 92       	st	Z+, r1
     6aa:	e8 17       	cp	r30, r24
     6ac:	f9 07       	cpc	r31, r25
     6ae:	d9 f7       	brne	.-10     	; 0x6a6 <startup_task+0xa>
     6b0:	fc 01       	movw	r30, r24
     6b2:	28 17       	cp	r18, r24
     6b4:	39 07       	cpc	r19, r25
     6b6:	19 f0       	breq	.+6      	; 0x6be <startup_task+0x22>
     6b8:	cf 01       	movw	r24, r30
     6ba:	44 96       	adiw	r24, 0x14	; 20
     6bc:	f4 cf       	rjmp	.-24     	; 0x6a6 <startup_task+0xa>
     6be:	e1 ef       	ldi	r30, 0xF1	; 241
     6c0:	f1 e0       	ldi	r31, 0x01	; 1
     6c2:	86 e0       	ldi	r24, 0x06	; 6
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	91 83       	std	Z+1, r25	; 0x01
     6c8:	80 83       	st	Z, r24
     6ca:	89 e0       	ldi	r24, 0x09	; 9
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	93 83       	std	Z+3, r25	; 0x03
     6d0:	82 83       	std	Z+2, r24	; 0x02
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	90 93 80 02 	sts	0x0280, r25	; 0x800280 <myMatrix+0x8b>
     6da:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <myMatrix+0x8a>
     6de:	0e 94 48 01 	call	0x290	; 0x290 <update>
     6e2:	61 e0       	ldi	r22, 0x01	; 1
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <vTaskSetApplicationTaskTag>
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	0e 94 cd 0a 	call	0x159a	; 0x159a <xQueueCreateMutex>
     6f4:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <xMutex+0x1>
     6f8:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <xMutex>
     6fc:	e1 2c       	mov	r14, r1
     6fe:	f1 2c       	mov	r15, r1
     700:	04 e0       	ldi	r16, 0x04	; 4
     702:	20 e0       	ldi	r18, 0x00	; 0
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	45 e5       	ldi	r20, 0x55	; 85
     708:	50 e0       	ldi	r21, 0x00	; 0
     70a:	6e e0       	ldi	r22, 0x0E	; 14
     70c:	71 e0       	ldi	r23, 0x01	; 1
     70e:	8d e5       	ldi	r24, 0x5D	; 93
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <xTaskCreate>
     716:	06 e0       	ldi	r16, 0x06	; 6
     718:	20 e0       	ldi	r18, 0x00	; 0
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	45 e5       	ldi	r20, 0x55	; 85
     71e:	50 e0       	ldi	r21, 0x00	; 0
     720:	68 e1       	ldi	r22, 0x18	; 24
     722:	71 e0       	ldi	r23, 0x01	; 1
     724:	87 e4       	ldi	r24, 0x47	; 71
     726:	93 e0       	ldi	r25, 0x03	; 3
     728:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <xTaskCreate>
     72c:	03 e0       	ldi	r16, 0x03	; 3
     72e:	20 e0       	ldi	r18, 0x00	; 0
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	45 e5       	ldi	r20, 0x55	; 85
     734:	50 e0       	ldi	r21, 0x00	; 0
     736:	68 e2       	ldi	r22, 0x28	; 40
     738:	71 e0       	ldi	r23, 0x01	; 1
     73a:	83 e0       	ldi	r24, 0x03	; 3
     73c:	93 e0       	ldi	r25, 0x03	; 3
     73e:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <xTaskCreate>
     742:	02 e0       	ldi	r16, 0x02	; 2
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	45 e5       	ldi	r20, 0x55	; 85
     74a:	50 e0       	ldi	r21, 0x00	; 0
     74c:	63 e3       	ldi	r22, 0x33	; 51
     74e:	71 e0       	ldi	r23, 0x01	; 1
     750:	82 e2       	ldi	r24, 0x22	; 34
     752:	93 e0       	ldi	r25, 0x03	; 3
     754:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <xTaskCreate>
     758:	6f e0       	ldi	r22, 0x0F	; 15
     75a:	84 e4       	ldi	r24, 0x44	; 68
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <com_send_bytes>
     762:	ff cf       	rjmp	.-2      	; 0x762 <startup_task+0xc6>

00000764 <prepare_shiftregister>:

// Prepare shift register setting SER = 1
void prepare_shiftregister()
{
	// Set SER to 1
	PORTD |= _BV(PORTD2);
     764:	5a 9a       	sbi	0x0b, 2	; 11
     766:	08 95       	ret

00000768 <clock_shift_register_and_prepare_for_next_col>:

// clock shift-register
void clock_shift_register_and_prepare_for_next_col()
{
	// one SCK pulse
	PORTD |= _BV(PORTD5);
     768:	5d 9a       	sbi	0x0b, 5	; 11
	PORTD &= ~_BV(PORTD5);
     76a:	5d 98       	cbi	0x0b, 5	; 11
	
	// one RCK pulse
	PORTD |= _BV(PORTD4);
     76c:	5c 9a       	sbi	0x0b, 4	; 11
	PORTD &= ~_BV(PORTD4);
     76e:	5c 98       	cbi	0x0b, 4	; 11
	
	// Set SER to 0 - for next column
	PORTD &= ~_BV(PORTD2);
     770:	5a 98       	cbi	0x0b, 2	; 11
     772:	08 95       	ret

00000774 <load_col_value>:
}

// Load column value for column to show
void load_col_value(uint16_t col_value)
{
	PORTA = ~(col_value & 0xFF);
     774:	80 95       	com	r24
     776:	82 b9       	out	0x02, r24	; 2
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
     778:	85 b1       	in	r24, 0x05	; 5
     77a:	83 60       	ori	r24, 0x03	; 3
     77c:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~((col_value >> 8) & 0x03);
     77e:	85 b1       	in	r24, 0x05	; 5
     780:	93 70       	andi	r25, 0x03	; 3
     782:	90 95       	com	r25
     784:	89 23       	and	r24, r25
     786:	85 b9       	out	0x05, r24	; 5
     788:	08 95       	ret

0000078a <handle_display>:
}

//-----------------------------------------
void handle_display(void)
{
     78a:	cf 93       	push	r28
	static uint8_t col = 0;
	
	if (col == 0)
     78c:	c0 91 62 01 	lds	r28, 0x0162	; 0x800162 <__data_end>
     790:	c1 11       	cpse	r28, r1
     792:	0e c0       	rjmp	.+28     	; 0x7b0 <handle_display+0x26>
	{
		prepare_shiftregister();
     794:	0e 94 b2 03 	call	0x764	; 0x764 <prepare_shiftregister>
	}
	
	load_col_value(frame_buf[col]);
     798:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <frame_buf>
     79c:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <frame_buf+0x1>
     7a0:	0e 94 ba 03 	call	0x774	; 0x774 <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
     7a4:	0e 94 b4 03 	call	0x768	; 0x768 <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	col++;
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
     7ae:	14 c0       	rjmp	.+40     	; 0x7d8 <handle_display+0x4e>
	if (col == 0)
	{
		prepare_shiftregister();
	}
	
	load_col_value(frame_buf[col]);
     7b0:	ec 2f       	mov	r30, r28
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	ee 0f       	add	r30, r30
     7b6:	ff 1f       	adc	r31, r31
     7b8:	e3 5f       	subi	r30, 0xF3	; 243
     7ba:	fc 4f       	sbci	r31, 0xFC	; 252
     7bc:	80 81       	ld	r24, Z
     7be:	91 81       	ldd	r25, Z+1	; 0x01
     7c0:	0e 94 ba 03 	call	0x774	; 0x774 <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
     7c4:	0e 94 b4 03 	call	0x768	; 0x768 <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	col++;
     7c8:	cf 5f       	subi	r28, 0xFF	; 255
	if (col > 13)
     7ca:	ce 30       	cpi	r28, 0x0E	; 14
     7cc:	18 f4       	brcc	.+6      	; 0x7d4 <handle_display+0x4a>
	load_col_value(frame_buf[col]);
	
	clock_shift_register_and_prepare_for_next_col();
	
	// count column up - prepare for next
	col++;
     7ce:	c0 93 62 01 	sts	0x0162, r28	; 0x800162 <__data_end>
     7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <handle_display+0x4e>
	if (col > 13)
	{
		col = 0;
     7d4:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <__data_end>
	}
}
     7d8:	cf 91       	pop	r28
     7da:	08 95       	ret

000007dc <vApplicationIdleHook>:

//-----------------------------------------
void vApplicationIdleHook( void )
{
     7dc:	08 95       	ret

000007de <main>:
}

//-----------------------------------------
int main(void)
{	
	init_board();
     7de:	0e 94 73 04 	call	0x8e6	; 0x8e6 <init_board>
	inputQueue = xQueueCreate(20, sizeof(struct input*));
     7e2:	40 e0       	ldi	r20, 0x00	; 0
     7e4:	62 e0       	ldi	r22, 0x02	; 2
     7e6:	84 e1       	ldi	r24, 0x14	; 20
     7e8:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <xQueueGenericCreate>
     7ec:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <inputQueue+0x1>
     7f0:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <inputQueue>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
     7f4:	5e 98       	cbi	0x0b, 6	; 11
	
	//Create task to blink gpio
	BaseType_t t1 = xTaskCreate(startup_task, (const char *)"Startup", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
     7f6:	e1 2c       	mov	r14, r1
     7f8:	f1 2c       	mov	r15, r1
     7fa:	00 e0       	ldi	r16, 0x00	; 0
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	45 e5       	ldi	r20, 0x55	; 85
     802:	50 e0       	ldi	r21, 0x00	; 0
     804:	64 e5       	ldi	r22, 0x54	; 84
     806:	71 e0       	ldi	r23, 0x01	; 1
     808:	8e e4       	ldi	r24, 0x4E	; 78
     80a:	93 e0       	ldi	r25, 0x03	; 3
     80c:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <xTaskCreate>

	// Start the display handler timer
	init_display_timer(handle_display);
     810:	85 ec       	ldi	r24, 0xC5	; 197
     812:	93 e0       	ldi	r25, 0x03	; 3
     814:	0e 94 2f 04 	call	0x85e	; 0x85e <init_display_timer>
	
	sei();
     818:	78 94       	sei
	
	//Start the scheduler
	vTaskStartScheduler();
     81a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <vTaskStartScheduler>
	
	//Should never reach here
	while (1)
	{
	}
     81e:	ff cf       	rjmp	.-2      	; 0x81e <main+0x40>

00000820 <_com_call_back>:
	}
}

// ----------------------------------------------------------------------------------------------------------------------
void init_com(QueueHandle_t x_rx_queue) {
	_x_rx_com_queue = x_rx_queue;
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	00 d0       	rcall	.+0      	; 0x826 <_com_call_back+0x6>
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
     82a:	6a 83       	std	Y+2, r22	; 0x02
     82c:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <_x_rx_com_queue>
     830:	90 91 74 03 	lds	r25, 0x0374	; 0x800374 <_x_rx_com_queue+0x1>
     834:	00 97       	sbiw	r24, 0x00	; 0
     836:	71 f0       	breq	.+28     	; 0x854 <_com_call_back+0x34>
     838:	19 82       	std	Y+1, r1	; 0x01
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	ae 01       	movw	r20, r28
     83e:	4f 5f       	subi	r20, 0xFF	; 255
     840:	5f 4f       	sbci	r21, 0xFF	; 255
     842:	be 01       	movw	r22, r28
     844:	6e 5f       	subi	r22, 0xFE	; 254
     846:	7f 4f       	sbci	r23, 0xFF	; 255
     848:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <xQueueGenericSendFromISR>
     84c:	89 81       	ldd	r24, Y+1	; 0x01
     84e:	81 11       	cpse	r24, r1
     850:	0e 94 3f 06 	call	0xc7e	; 0xc7e <vPortYield>
     854:	0f 90       	pop	r0
     856:	0f 90       	pop	r0
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <init_display_timer>:
}

// ----------------------------------------------------------------------------------------------------------------------
void init_display_timer(display_callback_ptr_t cb)
{
	cb_ptr = cb;
     85e:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <cb_ptr+0x1>
     862:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <cb_ptr>
	
	// Setup timer T0 to CTC, ~1309 Hz
	OCR0A = 10;
     866:	8a e0       	ldi	r24, 0x0A	; 10
     868:	87 bd       	out	0x27, r24	; 39
	TCCR0A |= _BV(WGM01); // Mode 2
     86a:	84 b5       	in	r24, 0x24	; 36
     86c:	82 60       	ori	r24, 0x02	; 2
     86e:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= _BV(OCIE0A); // Enable interrupt
     870:	ee e6       	ldi	r30, 0x6E	; 110
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	80 81       	ld	r24, Z
     876:	82 60       	ori	r24, 0x02	; 2
     878:	80 83       	st	Z, r24
	TCCR0B |= _BV(CS00) | _BV(CS02); // Prescaler 1024 - and start timer
     87a:	85 b5       	in	r24, 0x25	; 37
     87c:	85 60       	ori	r24, 0x05	; 5
     87e:	85 bd       	out	0x25, r24	; 37
     880:	08 95       	ret

00000882 <__vector_16>:
}

// ----------------------------------------------------------------------------------------------------------------------
//ISR for display timer
ISR(TIMER0_COMPA_vect)
{
     882:	1f 92       	push	r1
     884:	0f 92       	push	r0
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	0f 92       	push	r0
     88a:	11 24       	eor	r1, r1
     88c:	2f 93       	push	r18
     88e:	3f 93       	push	r19
     890:	4f 93       	push	r20
     892:	5f 93       	push	r21
     894:	6f 93       	push	r22
     896:	7f 93       	push	r23
     898:	8f 93       	push	r24
     89a:	9f 93       	push	r25
     89c:	af 93       	push	r26
     89e:	bf 93       	push	r27
     8a0:	ef 93       	push	r30
     8a2:	ff 93       	push	r31
	if (cb_ptr)
     8a4:	e0 91 71 03 	lds	r30, 0x0371	; 0x800371 <cb_ptr>
     8a8:	f0 91 72 03 	lds	r31, 0x0372	; 0x800372 <cb_ptr+0x1>
     8ac:	30 97       	sbiw	r30, 0x00	; 0
     8ae:	09 f0       	breq	.+2      	; 0x8b2 <__vector_16+0x30>
	{
		cb_ptr();
     8b0:	09 95       	icall
	}
}
     8b2:	ff 91       	pop	r31
     8b4:	ef 91       	pop	r30
     8b6:	bf 91       	pop	r27
     8b8:	af 91       	pop	r26
     8ba:	9f 91       	pop	r25
     8bc:	8f 91       	pop	r24
     8be:	7f 91       	pop	r23
     8c0:	6f 91       	pop	r22
     8c2:	5f 91       	pop	r21
     8c4:	4f 91       	pop	r20
     8c6:	3f 91       	pop	r19
     8c8:	2f 91       	pop	r18
     8ca:	0f 90       	pop	r0
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	0f 90       	pop	r0
     8d0:	1f 90       	pop	r1
     8d2:	18 95       	reti

000008d4 <com_send_bytes>:

// ----------------------------------------------------------------------------------------------------------------------
void com_send_bytes(uint8_t *bytes, uint8_t len) {
     8d4:	46 2f       	mov	r20, r22
	serial_send_bytes(_com_serial_instance, bytes, len);
     8d6:	bc 01       	movw	r22, r24
     8d8:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <_com_serial_instance>
     8dc:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <_com_serial_instance+0x1>
     8e0:	0e 94 a7 07 	call	0xf4e	; 0xf4e <serial_send_bytes>
     8e4:	08 95       	ret

000008e6 <init_board>:
}

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
     8e6:	8f 92       	push	r8
     8e8:	9f 92       	push	r9
     8ea:	af 92       	push	r10
     8ec:	bf 92       	push	r11
     8ee:	cf 92       	push	r12
     8f0:	df 92       	push	r13
     8f2:	ef 92       	push	r14
     8f4:	0f 93       	push	r16
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
     8f6:	8e e4       	ldi	r24, 0x4E	; 78
     8f8:	93 e0       	ldi	r25, 0x03	; 3
     8fa:	0e 94 cc 04 	call	0x998	; 0x998 <buffer_init>
	buffer_init(&_com_tx_buffer);
     8fe:	8b e2       	ldi	r24, 0x2B	; 43
     900:	93 e0       	ldi	r25, 0x03	; 3
     902:	0e 94 cc 04 	call	0x998	; 0x998 <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
     906:	0f 2e       	mov	r0, r31
     908:	f0 e1       	ldi	r31, 0x10	; 16
     90a:	8f 2e       	mov	r8, r31
     90c:	f4 e0       	ldi	r31, 0x04	; 4
     90e:	9f 2e       	mov	r9, r31
     910:	f0 2d       	mov	r31, r0
     912:	0f 2e       	mov	r0, r31
     914:	fb e2       	ldi	r31, 0x2B	; 43
     916:	af 2e       	mov	r10, r31
     918:	f3 e0       	ldi	r31, 0x03	; 3
     91a:	bf 2e       	mov	r11, r31
     91c:	f0 2d       	mov	r31, r0
     91e:	0f 2e       	mov	r0, r31
     920:	fe e4       	ldi	r31, 0x4E	; 78
     922:	cf 2e       	mov	r12, r31
     924:	f3 e0       	ldi	r31, 0x03	; 3
     926:	df 2e       	mov	r13, r31
     928:	f0 2d       	mov	r31, r0
     92a:	e1 2c       	mov	r14, r1
     92c:	00 e0       	ldi	r16, 0x00	; 0
     92e:	23 e0       	ldi	r18, 0x03	; 3
     930:	40 e0       	ldi	r20, 0x00	; 0
     932:	52 ec       	ldi	r21, 0xC2	; 194
     934:	61 e0       	ldi	r22, 0x01	; 1
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	0e 94 2d 07 	call	0xe5a	; 0xe5a <serial_new_instance>
     93e:	90 93 76 03 	sts	0x0376, r25	; 0x800376 <_com_serial_instance+0x1>
     942:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <_com_serial_instance>
	
	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
     946:	88 b1       	in	r24, 0x08	; 8
     948:	83 6c       	ori	r24, 0xC3	; 195
     94a:	88 b9       	out	0x08, r24	; 8
	PORTD |= _BV(PORTD3);
     94c:	5b 9a       	sbi	0x0b, 3	; 11
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
     94e:	8a b1       	in	r24, 0x0a	; 10
     950:	84 67       	ori	r24, 0x74	; 116
     952:	8a b9       	out	0x0a, r24	; 10
	// G (enable output) high
	PORTD |= _BV(PORTD6);
     954:	5e 9a       	sbi	0x0b, 6	; 11
	
	// Column pins to output
	DDRA |= 0xFF;
     956:	81 b1       	in	r24, 0x01	; 1
     958:	8f ef       	ldi	r24, 0xFF	; 255
     95a:	81 b9       	out	0x01, r24	; 1
	DDRB |= _BV(DDB0) | _BV(DDB1);
     95c:	84 b1       	in	r24, 0x04	; 4
     95e:	83 60       	ori	r24, 0x03	; 3
     960:	84 b9       	out	0x04, r24	; 4
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
     962:	84 b1       	in	r24, 0x04	; 4
     964:	8c 63       	ori	r24, 0x3C	; 60
     966:	84 b9       	out	0x04, r24	; 4
}
     968:	0f 91       	pop	r16
     96a:	ef 90       	pop	r14
     96c:	df 90       	pop	r13
     96e:	cf 90       	pop	r12
     970:	bf 90       	pop	r11
     972:	af 90       	pop	r10
     974:	9f 90       	pop	r9
     976:	8f 90       	pop	r8
     978:	08 95       	ret

0000097a <switch_in>:
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
		PORTB &= 0b11000011;
     97a:	95 b1       	in	r25, 0x05	; 5
     97c:	93 7c       	andi	r25, 0xC3	; 195
     97e:	95 b9       	out	0x05, r25	; 5
		PORTB |= task_no << 2;
     980:	25 b1       	in	r18, 0x05	; 5
     982:	34 e0       	ldi	r19, 0x04	; 4
     984:	83 9f       	mul	r24, r19
     986:	c0 01       	movw	r24, r0
     988:	11 24       	eor	r1, r1
     98a:	82 2b       	or	r24, r18
     98c:	85 b9       	out	0x05, r24	; 5
     98e:	08 95       	ret

00000990 <switch_out>:
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
		PORTB &= 0b11000011;
     990:	85 b1       	in	r24, 0x05	; 5
     992:	83 7c       	andi	r24, 0xC3	; 195
     994:	85 b9       	out	0x05, r24	; 5
     996:	08 95       	ret

00000998 <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
     998:	fc 01       	movw	r30, r24
	buffer->in_i = 0;
     99a:	10 a2       	std	Z+32, r1	; 0x20
	buffer->out_i = 0;
     99c:	11 a2       	std	Z+33, r1	; 0x21
	buffer->no_in_buffer = 0;
     99e:	12 a2       	std	Z+34, r1	; 0x22
     9a0:	08 95       	ret

000009a2 <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
     9a2:	fc 01       	movw	r30, r24
	if (buffer->no_in_buffer > 0) {
     9a4:	82 a1       	ldd	r24, Z+34	; 0x22
     9a6:	88 23       	and	r24, r24
     9a8:	d9 f0       	breq	.+54     	; 0x9e0 <buffer_get_item+0x3e>
		*item = buffer->storage[buffer->out_i];
     9aa:	81 a1       	ldd	r24, Z+33	; 0x21
     9ac:	df 01       	movw	r26, r30
     9ae:	a8 0f       	add	r26, r24
     9b0:	b1 1d       	adc	r27, r1
     9b2:	8c 91       	ld	r24, X
     9b4:	db 01       	movw	r26, r22
     9b6:	8c 93       	st	X, r24
		buffer->out_i = INCREMENT(buffer->out_i);
     9b8:	21 a1       	ldd	r18, Z+33	; 0x21
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	2f 5f       	subi	r18, 0xFF	; 255
     9be:	3f 4f       	sbci	r19, 0xFF	; 255
     9c0:	2f 71       	andi	r18, 0x1F	; 31
     9c2:	30 78       	andi	r19, 0x80	; 128
     9c4:	33 23       	and	r19, r19
     9c6:	34 f4       	brge	.+12     	; 0x9d4 <buffer_get_item+0x32>
     9c8:	21 50       	subi	r18, 0x01	; 1
     9ca:	31 09       	sbc	r19, r1
     9cc:	20 6e       	ori	r18, 0xE0	; 224
     9ce:	3f 6f       	ori	r19, 0xFF	; 255
     9d0:	2f 5f       	subi	r18, 0xFF	; 255
     9d2:	3f 4f       	sbci	r19, 0xFF	; 255
     9d4:	21 a3       	std	Z+33, r18	; 0x21
		buffer->no_in_buffer--;
     9d6:	82 a1       	ldd	r24, Z+34	; 0x22
     9d8:	81 50       	subi	r24, 0x01	; 1
     9da:	82 a3       	std	Z+34, r24	; 0x22
		return BUFFER_OK;
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	08 95       	ret
	}
	return BUFFER_EMPTY;
     9e0:	81 e0       	ldi	r24, 0x01	; 1
}
     9e2:	08 95       	ret

000009e4 <buffer_put_item>:
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
	if (buffer->no_in_buffer<BUFFER_SIZE) {
     9e4:	fc 01       	movw	r30, r24
     9e6:	42 a1       	ldd	r20, Z+34	; 0x22
     9e8:	40 32       	cpi	r20, 0x20	; 32
     9ea:	b8 f4       	brcc	.+46     	; 0xa1a <buffer_put_item+0x36>
		buffer->storage[buffer->in_i] = item;
     9ec:	20 a1       	ldd	r18, Z+32	; 0x20
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	e2 0f       	add	r30, r18
     9f2:	f3 1f       	adc	r31, r19
     9f4:	60 83       	st	Z, r22
		buffer->in_i = INCREMENT(buffer->in_i);
     9f6:	2f 5f       	subi	r18, 0xFF	; 255
     9f8:	3f 4f       	sbci	r19, 0xFF	; 255
     9fa:	2f 71       	andi	r18, 0x1F	; 31
     9fc:	30 78       	andi	r19, 0x80	; 128
     9fe:	33 23       	and	r19, r19
     a00:	34 f4       	brge	.+12     	; 0xa0e <buffer_put_item+0x2a>
     a02:	21 50       	subi	r18, 0x01	; 1
     a04:	31 09       	sbc	r19, r1
     a06:	20 6e       	ori	r18, 0xE0	; 224
     a08:	3f 6f       	ori	r19, 0xFF	; 255
     a0a:	2f 5f       	subi	r18, 0xFF	; 255
     a0c:	3f 4f       	sbci	r19, 0xFF	; 255
     a0e:	fc 01       	movw	r30, r24
     a10:	20 a3       	std	Z+32, r18	; 0x20
		buffer->no_in_buffer++;
     a12:	4f 5f       	subi	r20, 0xFF	; 255
     a14:	42 a3       	std	Z+34, r20	; 0x22
		return BUFFER_OK;
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	08 95       	ret
	}
	return BUFFER_FULL;
     a1a:	82 e0       	ldi	r24, 0x02	; 2
}
     a1c:	08 95       	ret

00000a1e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     a1e:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a20:	03 96       	adiw	r24, 0x03	; 3
     a22:	92 83       	std	Z+2, r25	; 0x02
     a24:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     a26:	2f ef       	ldi	r18, 0xFF	; 255
     a28:	3f ef       	ldi	r19, 0xFF	; 255
     a2a:	34 83       	std	Z+4, r19	; 0x04
     a2c:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a2e:	96 83       	std	Z+6, r25	; 0x06
     a30:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a32:	90 87       	std	Z+8, r25	; 0x08
     a34:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     a36:	10 82       	st	Z, r1
     a38:	08 95       	ret

00000a3a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     a3a:	fc 01       	movw	r30, r24
     a3c:	11 86       	std	Z+9, r1	; 0x09
     a3e:	10 86       	std	Z+8, r1	; 0x08
     a40:	08 95       	ret

00000a42 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	9c 01       	movw	r18, r24
     a48:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     a4a:	dc 01       	movw	r26, r24
     a4c:	11 96       	adiw	r26, 0x01	; 1
     a4e:	cd 91       	ld	r28, X+
     a50:	dc 91       	ld	r29, X
     a52:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     a54:	d3 83       	std	Z+3, r29	; 0x03
     a56:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     a58:	8c 81       	ldd	r24, Y+4	; 0x04
     a5a:	9d 81       	ldd	r25, Y+5	; 0x05
     a5c:	95 83       	std	Z+5, r25	; 0x05
     a5e:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     a60:	8c 81       	ldd	r24, Y+4	; 0x04
     a62:	9d 81       	ldd	r25, Y+5	; 0x05
     a64:	dc 01       	movw	r26, r24
     a66:	13 96       	adiw	r26, 0x03	; 3
     a68:	7c 93       	st	X, r23
     a6a:	6e 93       	st	-X, r22
     a6c:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     a6e:	7d 83       	std	Y+5, r23	; 0x05
     a70:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     a72:	31 87       	std	Z+9, r19	; 0x09
     a74:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     a76:	f9 01       	movw	r30, r18
     a78:	80 81       	ld	r24, Z
     a7a:	8f 5f       	subi	r24, 0xFF	; 255
     a7c:	80 83       	st	Z, r24
}
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	08 95       	ret

00000a84 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     a8a:	48 81       	ld	r20, Y
     a8c:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     a8e:	4f 3f       	cpi	r20, 0xFF	; 255
     a90:	2f ef       	ldi	r18, 0xFF	; 255
     a92:	52 07       	cpc	r21, r18
     a94:	21 f4       	brne	.+8      	; 0xa9e <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     a96:	fc 01       	movw	r30, r24
     a98:	a7 81       	ldd	r26, Z+7	; 0x07
     a9a:	b0 85       	ldd	r27, Z+8	; 0x08
     a9c:	0d c0       	rjmp	.+26     	; 0xab8 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     a9e:	dc 01       	movw	r26, r24
     aa0:	13 96       	adiw	r26, 0x03	; 3
     aa2:	01 c0       	rjmp	.+2      	; 0xaa6 <vListInsert+0x22>
     aa4:	df 01       	movw	r26, r30
     aa6:	12 96       	adiw	r26, 0x02	; 2
     aa8:	ed 91       	ld	r30, X+
     aaa:	fc 91       	ld	r31, X
     aac:	13 97       	sbiw	r26, 0x03	; 3
     aae:	20 81       	ld	r18, Z
     ab0:	31 81       	ldd	r19, Z+1	; 0x01
     ab2:	42 17       	cp	r20, r18
     ab4:	53 07       	cpc	r21, r19
     ab6:	b0 f7       	brcc	.-20     	; 0xaa4 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     ab8:	12 96       	adiw	r26, 0x02	; 2
     aba:	ed 91       	ld	r30, X+
     abc:	fc 91       	ld	r31, X
     abe:	13 97       	sbiw	r26, 0x03	; 3
     ac0:	fb 83       	std	Y+3, r31	; 0x03
     ac2:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     ac4:	d5 83       	std	Z+5, r29	; 0x05
     ac6:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     ac8:	bd 83       	std	Y+5, r27	; 0x05
     aca:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     acc:	13 96       	adiw	r26, 0x03	; 3
     ace:	dc 93       	st	X, r29
     ad0:	ce 93       	st	-X, r28
     ad2:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     ad4:	99 87       	std	Y+9, r25	; 0x09
     ad6:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     ad8:	fc 01       	movw	r30, r24
     ada:	20 81       	ld	r18, Z
     adc:	2f 5f       	subi	r18, 0xFF	; 255
     ade:	20 83       	st	Z, r18
}
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	08 95       	ret

00000ae6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     aec:	a0 85       	ldd	r26, Z+8	; 0x08
     aee:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     af0:	c2 81       	ldd	r28, Z+2	; 0x02
     af2:	d3 81       	ldd	r29, Z+3	; 0x03
     af4:	84 81       	ldd	r24, Z+4	; 0x04
     af6:	95 81       	ldd	r25, Z+5	; 0x05
     af8:	9d 83       	std	Y+5, r25	; 0x05
     afa:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     afc:	c4 81       	ldd	r28, Z+4	; 0x04
     afe:	d5 81       	ldd	r29, Z+5	; 0x05
     b00:	82 81       	ldd	r24, Z+2	; 0x02
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	9b 83       	std	Y+3, r25	; 0x03
     b06:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     b08:	11 96       	adiw	r26, 0x01	; 1
     b0a:	cd 91       	ld	r28, X+
     b0c:	dc 91       	ld	r29, X
     b0e:	12 97       	sbiw	r26, 0x02	; 2
     b10:	ce 17       	cp	r28, r30
     b12:	df 07       	cpc	r29, r31
     b14:	31 f4       	brne	.+12     	; 0xb22 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     b16:	8c 81       	ldd	r24, Y+4	; 0x04
     b18:	9d 81       	ldd	r25, Y+5	; 0x05
     b1a:	12 96       	adiw	r26, 0x02	; 2
     b1c:	9c 93       	st	X, r25
     b1e:	8e 93       	st	-X, r24
     b20:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     b22:	11 86       	std	Z+9, r1	; 0x09
     b24:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     b26:	8c 91       	ld	r24, X
     b28:	81 50       	subi	r24, 0x01	; 1
     b2a:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	08 95       	ret

00000b32 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     b32:	31 e1       	ldi	r19, 0x11	; 17
     b34:	fc 01       	movw	r30, r24
     b36:	30 83       	st	Z, r19
     b38:	31 97       	sbiw	r30, 0x01	; 1
     b3a:	22 e2       	ldi	r18, 0x22	; 34
     b3c:	20 83       	st	Z, r18
     b3e:	31 97       	sbiw	r30, 0x01	; 1
     b40:	a3 e3       	ldi	r26, 0x33	; 51
     b42:	a0 83       	st	Z, r26
     b44:	31 97       	sbiw	r30, 0x01	; 1
     b46:	60 83       	st	Z, r22
     b48:	31 97       	sbiw	r30, 0x01	; 1
     b4a:	70 83       	st	Z, r23
     b4c:	31 97       	sbiw	r30, 0x01	; 1
     b4e:	10 82       	st	Z, r1
     b50:	31 97       	sbiw	r30, 0x01	; 1
     b52:	60 e8       	ldi	r22, 0x80	; 128
     b54:	60 83       	st	Z, r22
     b56:	31 97       	sbiw	r30, 0x01	; 1
     b58:	10 82       	st	Z, r1
     b5a:	31 97       	sbiw	r30, 0x01	; 1
     b5c:	62 e0       	ldi	r22, 0x02	; 2
     b5e:	60 83       	st	Z, r22
     b60:	31 97       	sbiw	r30, 0x01	; 1
     b62:	63 e0       	ldi	r22, 0x03	; 3
     b64:	60 83       	st	Z, r22
     b66:	31 97       	sbiw	r30, 0x01	; 1
     b68:	64 e0       	ldi	r22, 0x04	; 4
     b6a:	60 83       	st	Z, r22
     b6c:	31 97       	sbiw	r30, 0x01	; 1
     b6e:	65 e0       	ldi	r22, 0x05	; 5
     b70:	60 83       	st	Z, r22
     b72:	31 97       	sbiw	r30, 0x01	; 1
     b74:	66 e0       	ldi	r22, 0x06	; 6
     b76:	60 83       	st	Z, r22
     b78:	31 97       	sbiw	r30, 0x01	; 1
     b7a:	67 e0       	ldi	r22, 0x07	; 7
     b7c:	60 83       	st	Z, r22
     b7e:	31 97       	sbiw	r30, 0x01	; 1
     b80:	68 e0       	ldi	r22, 0x08	; 8
     b82:	60 83       	st	Z, r22
     b84:	31 97       	sbiw	r30, 0x01	; 1
     b86:	69 e0       	ldi	r22, 0x09	; 9
     b88:	60 83       	st	Z, r22
     b8a:	31 97       	sbiw	r30, 0x01	; 1
     b8c:	60 e1       	ldi	r22, 0x10	; 16
     b8e:	60 83       	st	Z, r22
     b90:	31 97       	sbiw	r30, 0x01	; 1
     b92:	30 83       	st	Z, r19
     b94:	31 97       	sbiw	r30, 0x01	; 1
     b96:	32 e1       	ldi	r19, 0x12	; 18
     b98:	30 83       	st	Z, r19
     b9a:	31 97       	sbiw	r30, 0x01	; 1
     b9c:	33 e1       	ldi	r19, 0x13	; 19
     b9e:	30 83       	st	Z, r19
     ba0:	31 97       	sbiw	r30, 0x01	; 1
     ba2:	34 e1       	ldi	r19, 0x14	; 20
     ba4:	30 83       	st	Z, r19
     ba6:	31 97       	sbiw	r30, 0x01	; 1
     ba8:	35 e1       	ldi	r19, 0x15	; 21
     baa:	30 83       	st	Z, r19
     bac:	31 97       	sbiw	r30, 0x01	; 1
     bae:	36 e1       	ldi	r19, 0x16	; 22
     bb0:	30 83       	st	Z, r19
     bb2:	31 97       	sbiw	r30, 0x01	; 1
     bb4:	37 e1       	ldi	r19, 0x17	; 23
     bb6:	30 83       	st	Z, r19
     bb8:	31 97       	sbiw	r30, 0x01	; 1
     bba:	38 e1       	ldi	r19, 0x18	; 24
     bbc:	30 83       	st	Z, r19
     bbe:	31 97       	sbiw	r30, 0x01	; 1
     bc0:	39 e1       	ldi	r19, 0x19	; 25
     bc2:	30 83       	st	Z, r19
     bc4:	31 97       	sbiw	r30, 0x01	; 1
     bc6:	30 e2       	ldi	r19, 0x20	; 32
     bc8:	30 83       	st	Z, r19
     bca:	31 97       	sbiw	r30, 0x01	; 1
     bcc:	31 e2       	ldi	r19, 0x21	; 33
     bce:	30 83       	st	Z, r19
     bd0:	31 97       	sbiw	r30, 0x01	; 1
     bd2:	20 83       	st	Z, r18
     bd4:	31 97       	sbiw	r30, 0x01	; 1
     bd6:	23 e2       	ldi	r18, 0x23	; 35
     bd8:	20 83       	st	Z, r18
     bda:	31 97       	sbiw	r30, 0x01	; 1
     bdc:	40 83       	st	Z, r20
     bde:	31 97       	sbiw	r30, 0x01	; 1
     be0:	50 83       	st	Z, r21
     be2:	31 97       	sbiw	r30, 0x01	; 1
     be4:	26 e2       	ldi	r18, 0x26	; 38
     be6:	20 83       	st	Z, r18
     be8:	31 97       	sbiw	r30, 0x01	; 1
     bea:	27 e2       	ldi	r18, 0x27	; 39
     bec:	20 83       	st	Z, r18
     bee:	31 97       	sbiw	r30, 0x01	; 1
     bf0:	28 e2       	ldi	r18, 0x28	; 40
     bf2:	20 83       	st	Z, r18
     bf4:	31 97       	sbiw	r30, 0x01	; 1
     bf6:	29 e2       	ldi	r18, 0x29	; 41
     bf8:	20 83       	st	Z, r18
     bfa:	31 97       	sbiw	r30, 0x01	; 1
     bfc:	20 e3       	ldi	r18, 0x30	; 48
     bfe:	20 83       	st	Z, r18
     c00:	31 97       	sbiw	r30, 0x01	; 1
     c02:	21 e3       	ldi	r18, 0x31	; 49
     c04:	20 83       	st	Z, r18
     c06:	86 97       	sbiw	r24, 0x26	; 38
     c08:	08 95       	ret

00000c0a <xPortStartScheduler>:
     c0a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     c0e:	85 ee       	ldi	r24, 0xE5	; 229
     c10:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     c14:	8b e0       	ldi	r24, 0x0B	; 11
     c16:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     c1a:	ef e6       	ldi	r30, 0x6F	; 111
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	80 81       	ld	r24, Z
     c20:	82 60       	ori	r24, 0x02	; 2
     c22:	80 83       	st	Z, r24
     c24:	a0 91 c2 07 	lds	r26, 0x07C2	; 0x8007c2 <pxCurrentTCB>
     c28:	b0 91 c3 07 	lds	r27, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
     c2c:	cd 91       	ld	r28, X+
     c2e:	cd bf       	out	0x3d, r28	; 61
     c30:	dd 91       	ld	r29, X+
     c32:	de bf       	out	0x3e, r29	; 62
     c34:	ff 91       	pop	r31
     c36:	ef 91       	pop	r30
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	bf 91       	pop	r27
     c3e:	af 91       	pop	r26
     c40:	9f 91       	pop	r25
     c42:	8f 91       	pop	r24
     c44:	7f 91       	pop	r23
     c46:	6f 91       	pop	r22
     c48:	5f 91       	pop	r21
     c4a:	4f 91       	pop	r20
     c4c:	3f 91       	pop	r19
     c4e:	2f 91       	pop	r18
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	ff 90       	pop	r15
     c56:	ef 90       	pop	r14
     c58:	df 90       	pop	r13
     c5a:	cf 90       	pop	r12
     c5c:	bf 90       	pop	r11
     c5e:	af 90       	pop	r10
     c60:	9f 90       	pop	r9
     c62:	8f 90       	pop	r8
     c64:	7f 90       	pop	r7
     c66:	6f 90       	pop	r6
     c68:	5f 90       	pop	r5
     c6a:	4f 90       	pop	r4
     c6c:	3f 90       	pop	r3
     c6e:	2f 90       	pop	r2
     c70:	1f 90       	pop	r1
     c72:	0f 90       	pop	r0
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	0f 90       	pop	r0
     c78:	08 95       	ret
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	08 95       	ret

00000c7e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     c7e:	0f 92       	push	r0
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	f8 94       	cli
     c84:	0f 92       	push	r0
     c86:	1f 92       	push	r1
     c88:	11 24       	eor	r1, r1
     c8a:	2f 92       	push	r2
     c8c:	3f 92       	push	r3
     c8e:	4f 92       	push	r4
     c90:	5f 92       	push	r5
     c92:	6f 92       	push	r6
     c94:	7f 92       	push	r7
     c96:	8f 92       	push	r8
     c98:	9f 92       	push	r9
     c9a:	af 92       	push	r10
     c9c:	bf 92       	push	r11
     c9e:	cf 92       	push	r12
     ca0:	df 92       	push	r13
     ca2:	ef 92       	push	r14
     ca4:	ff 92       	push	r15
     ca6:	0f 93       	push	r16
     ca8:	1f 93       	push	r17
     caa:	2f 93       	push	r18
     cac:	3f 93       	push	r19
     cae:	4f 93       	push	r20
     cb0:	5f 93       	push	r21
     cb2:	6f 93       	push	r22
     cb4:	7f 93       	push	r23
     cb6:	8f 93       	push	r24
     cb8:	9f 93       	push	r25
     cba:	af 93       	push	r26
     cbc:	bf 93       	push	r27
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
     cc2:	ef 93       	push	r30
     cc4:	ff 93       	push	r31
     cc6:	a0 91 c2 07 	lds	r26, 0x07C2	; 0x8007c2 <pxCurrentTCB>
     cca:	b0 91 c3 07 	lds	r27, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
     cce:	0d b6       	in	r0, 0x3d	; 61
     cd0:	0d 92       	st	X+, r0
     cd2:	0e b6       	in	r0, 0x3e	; 62
     cd4:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     cd6:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     cda:	a0 91 c2 07 	lds	r26, 0x07C2	; 0x8007c2 <pxCurrentTCB>
     cde:	b0 91 c3 07 	lds	r27, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
     ce2:	cd 91       	ld	r28, X+
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	dd 91       	ld	r29, X+
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	ff 91       	pop	r31
     cec:	ef 91       	pop	r30
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	bf 91       	pop	r27
     cf4:	af 91       	pop	r26
     cf6:	9f 91       	pop	r25
     cf8:	8f 91       	pop	r24
     cfa:	7f 91       	pop	r23
     cfc:	6f 91       	pop	r22
     cfe:	5f 91       	pop	r21
     d00:	4f 91       	pop	r20
     d02:	3f 91       	pop	r19
     d04:	2f 91       	pop	r18
     d06:	1f 91       	pop	r17
     d08:	0f 91       	pop	r16
     d0a:	ff 90       	pop	r15
     d0c:	ef 90       	pop	r14
     d0e:	df 90       	pop	r13
     d10:	cf 90       	pop	r12
     d12:	bf 90       	pop	r11
     d14:	af 90       	pop	r10
     d16:	9f 90       	pop	r9
     d18:	8f 90       	pop	r8
     d1a:	7f 90       	pop	r7
     d1c:	6f 90       	pop	r6
     d1e:	5f 90       	pop	r5
     d20:	4f 90       	pop	r4
     d22:	3f 90       	pop	r3
     d24:	2f 90       	pop	r2
     d26:	1f 90       	pop	r1
     d28:	0f 90       	pop	r0
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	0f 90       	pop	r0

	asm volatile ( "ret" );
     d2e:	08 95       	ret

00000d30 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     d30:	0f 92       	push	r0
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	0f 92       	push	r0
     d38:	1f 92       	push	r1
     d3a:	11 24       	eor	r1, r1
     d3c:	2f 92       	push	r2
     d3e:	3f 92       	push	r3
     d40:	4f 92       	push	r4
     d42:	5f 92       	push	r5
     d44:	6f 92       	push	r6
     d46:	7f 92       	push	r7
     d48:	8f 92       	push	r8
     d4a:	9f 92       	push	r9
     d4c:	af 92       	push	r10
     d4e:	bf 92       	push	r11
     d50:	cf 92       	push	r12
     d52:	df 92       	push	r13
     d54:	ef 92       	push	r14
     d56:	ff 92       	push	r15
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	2f 93       	push	r18
     d5e:	3f 93       	push	r19
     d60:	4f 93       	push	r20
     d62:	5f 93       	push	r21
     d64:	6f 93       	push	r22
     d66:	7f 93       	push	r23
     d68:	8f 93       	push	r24
     d6a:	9f 93       	push	r25
     d6c:	af 93       	push	r26
     d6e:	bf 93       	push	r27
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	ef 93       	push	r30
     d76:	ff 93       	push	r31
     d78:	a0 91 c2 07 	lds	r26, 0x07C2	; 0x8007c2 <pxCurrentTCB>
     d7c:	b0 91 c3 07 	lds	r27, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
     d80:	0d b6       	in	r0, 0x3d	; 61
     d82:	0d 92       	st	X+, r0
     d84:	0e b6       	in	r0, 0x3e	; 62
     d86:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     d88:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <xTaskIncrementTick>
     d8c:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     d8e:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     d92:	a0 91 c2 07 	lds	r26, 0x07C2	; 0x8007c2 <pxCurrentTCB>
     d96:	b0 91 c3 07 	lds	r27, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
     d9a:	cd 91       	ld	r28, X+
     d9c:	cd bf       	out	0x3d, r28	; 61
     d9e:	dd 91       	ld	r29, X+
     da0:	de bf       	out	0x3e, r29	; 62
     da2:	ff 91       	pop	r31
     da4:	ef 91       	pop	r30
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	bf 91       	pop	r27
     dac:	af 91       	pop	r26
     dae:	9f 91       	pop	r25
     db0:	8f 91       	pop	r24
     db2:	7f 91       	pop	r23
     db4:	6f 91       	pop	r22
     db6:	5f 91       	pop	r21
     db8:	4f 91       	pop	r20
     dba:	3f 91       	pop	r19
     dbc:	2f 91       	pop	r18
     dbe:	1f 91       	pop	r17
     dc0:	0f 91       	pop	r16
     dc2:	ff 90       	pop	r15
     dc4:	ef 90       	pop	r14
     dc6:	df 90       	pop	r13
     dc8:	cf 90       	pop	r12
     dca:	bf 90       	pop	r11
     dcc:	af 90       	pop	r10
     dce:	9f 90       	pop	r9
     dd0:	8f 90       	pop	r8
     dd2:	7f 90       	pop	r7
     dd4:	6f 90       	pop	r6
     dd6:	5f 90       	pop	r5
     dd8:	4f 90       	pop	r4
     dda:	3f 90       	pop	r3
     ddc:	2f 90       	pop	r2
     dde:	1f 90       	pop	r1
     de0:	0f 90       	pop	r0
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	0f 90       	pop	r0

	asm volatile ( "ret" );
     de6:	08 95       	ret

00000de8 <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
     de8:	0e 94 98 06 	call	0xd30	; 0xd30 <vPortYieldFromTick>
		asm volatile ( "reti" );
     dec:	18 95       	reti

00000dee <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
     df4:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     df8:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <pucAlignedHeap.1965>
     dfc:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <pucAlignedHeap.1965+0x1>
     e00:	89 2b       	or	r24, r25
     e02:	31 f4       	brne	.+12     	; 0xe10 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     e04:	8c e7       	ldi	r24, 0x7C	; 124
     e06:	93 e0       	ldi	r25, 0x03	; 3
     e08:	90 93 78 03 	sts	0x0378, r25	; 0x800378 <pucAlignedHeap.1965+0x1>
     e0c:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <pucAlignedHeap.1965>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     e10:	20 91 79 03 	lds	r18, 0x0379	; 0x800379 <xNextFreeByte>
     e14:	30 91 7a 03 	lds	r19, 0x037A	; 0x80037a <xNextFreeByte+0x1>
     e18:	ce 01       	movw	r24, r28
     e1a:	82 0f       	add	r24, r18
     e1c:	93 1f       	adc	r25, r19
     e1e:	87 3e       	cpi	r24, 0xE7	; 231
     e20:	43 e0       	ldi	r20, 0x03	; 3
     e22:	94 07       	cpc	r25, r20
     e24:	70 f4       	brcc	.+28     	; 0xe42 <pvPortMalloc+0x54>
     e26:	28 17       	cp	r18, r24
     e28:	39 07       	cpc	r19, r25
     e2a:	70 f4       	brcc	.+28     	; 0xe48 <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     e2c:	c0 91 77 03 	lds	r28, 0x0377	; 0x800377 <pucAlignedHeap.1965>
     e30:	d0 91 78 03 	lds	r29, 0x0378	; 0x800378 <pucAlignedHeap.1965+0x1>
     e34:	c2 0f       	add	r28, r18
     e36:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
     e38:	90 93 7a 03 	sts	0x037A, r25	; 0x80037a <xNextFreeByte+0x1>
     e3c:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <xNextFreeByte>
     e40:	05 c0       	rjmp	.+10     	; 0xe4c <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     e42:	c0 e0       	ldi	r28, 0x00	; 0
     e44:	d0 e0       	ldi	r29, 0x00	; 0
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <pvPortMalloc+0x5e>
     e48:	c0 e0       	ldi	r28, 0x00	; 0
     e4a:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     e4c:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     e50:	ce 01       	movw	r24, r28
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	08 95       	ret

00000e58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     e58:	08 95       	ret

00000e5a <serial_new_instance>:
			_serial_tx_int_on(handle->ser_UDR);
			return BUFFER_OK;
		}
	}
	return BUFFER_FULL;
}
     e5a:	4f 92       	push	r4
     e5c:	5f 92       	push	r5
     e5e:	6f 92       	push	r6
     e60:	7f 92       	push	r7
     e62:	8f 92       	push	r8
     e64:	9f 92       	push	r9
     e66:	af 92       	push	r10
     e68:	bf 92       	push	r11
     e6a:	cf 92       	push	r12
     e6c:	df 92       	push	r13
     e6e:	ff 92       	push	r15
     e70:	0f 93       	push	r16
     e72:	1f 93       	push	r17
     e74:	cf 93       	push	r28
     e76:	df 93       	push	r29
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	f8 2e       	mov	r15, r24
     e7e:	2a 01       	movw	r4, r20
     e80:	3b 01       	movw	r6, r22
     e82:	88 e0       	ldi	r24, 0x08	; 8
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0e 94 19 11 	call	0x2232	; 0x2232 <malloc>
     e8a:	8c 01       	movw	r16, r24
     e8c:	8f 2d       	mov	r24, r15
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	fc 01       	movw	r30, r24
     e96:	ed 59       	subi	r30, 0x9D	; 157
     e98:	f8 4f       	sbci	r31, 0xF8	; 248
     e9a:	11 83       	std	Z+1, r17	; 0x01
     e9c:	00 83       	st	Z, r16
     e9e:	fc 01       	movw	r30, r24
     ea0:	e6 5f       	subi	r30, 0xF6	; 246
     ea2:	fe 4f       	sbci	r31, 0xFE	; 254
     ea4:	80 81       	ld	r24, Z
     ea6:	91 81       	ldd	r25, Z+1	; 0x01
     ea8:	d8 01       	movw	r26, r16
     eaa:	11 96       	adiw	r26, 0x01	; 1
     eac:	9c 93       	st	X, r25
     eae:	8e 93       	st	-X, r24
     eb0:	13 96       	adiw	r26, 0x03	; 3
     eb2:	bc 92       	st	X, r11
     eb4:	ae 92       	st	-X, r10
     eb6:	12 97       	sbiw	r26, 0x02	; 2
     eb8:	15 96       	adiw	r26, 0x05	; 5
     eba:	dc 92       	st	X, r13
     ebc:	ce 92       	st	-X, r12
     ebe:	14 97       	sbiw	r26, 0x04	; 4
     ec0:	17 96       	adiw	r26, 0x07	; 7
     ec2:	9c 92       	st	X, r9
     ec4:	8e 92       	st	-X, r8
     ec6:	16 97       	sbiw	r26, 0x06	; 6
     ec8:	ff b6       	in	r15, 0x3f	; 63
     eca:	f8 94       	cli
     ecc:	ed 91       	ld	r30, X+
     ece:	fc 91       	ld	r31, X
     ed0:	11 97       	sbiw	r26, 0x01	; 1
     ed2:	36 97       	sbiw	r30, 0x06	; 6
     ed4:	80 81       	ld	r24, Z
     ed6:	82 60       	ori	r24, 0x02	; 2
     ed8:	80 83       	st	Z, r24
     eda:	cd 90       	ld	r12, X+
     edc:	dc 90       	ld	r13, X
     ede:	d3 01       	movw	r26, r6
     ee0:	c2 01       	movw	r24, r4
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	aa 1f       	adc	r26, r26
     ee8:	bb 1f       	adc	r27, r27
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	aa 1f       	adc	r26, r26
     ef0:	bb 1f       	adc	r27, r27
     ef2:	9c 01       	movw	r18, r24
     ef4:	ad 01       	movw	r20, r26
     ef6:	22 0f       	add	r18, r18
     ef8:	33 1f       	adc	r19, r19
     efa:	44 1f       	adc	r20, r20
     efc:	55 1f       	adc	r21, r21
     efe:	60 e0       	ldi	r22, 0x00	; 0
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	81 ee       	ldi	r24, 0xE1	; 225
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__udivmodsi4>
     f0a:	21 50       	subi	r18, 0x01	; 1
     f0c:	f6 01       	movw	r30, r12
     f0e:	32 97       	sbiw	r30, 0x02	; 2
     f10:	20 83       	st	Z, r18
     f12:	d8 01       	movw	r26, r16
     f14:	ed 91       	ld	r30, X+
     f16:	fc 91       	ld	r31, X
     f18:	11 97       	sbiw	r26, 0x01	; 1
     f1a:	35 97       	sbiw	r30, 0x05	; 5
     f1c:	88 e9       	ldi	r24, 0x98	; 152
     f1e:	80 83       	st	Z, r24
     f20:	ed 91       	ld	r30, X+
     f22:	fc 91       	ld	r31, X
     f24:	34 97       	sbiw	r30, 0x04	; 4
     f26:	86 e0       	ldi	r24, 0x06	; 6
     f28:	80 83       	st	Z, r24
     f2a:	ff be       	out	0x3f, r15	; 63
     f2c:	c8 01       	movw	r24, r16
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	1f 91       	pop	r17
     f34:	0f 91       	pop	r16
     f36:	ff 90       	pop	r15
     f38:	df 90       	pop	r13
     f3a:	cf 90       	pop	r12
     f3c:	bf 90       	pop	r11
     f3e:	af 90       	pop	r10
     f40:	9f 90       	pop	r9
     f42:	8f 90       	pop	r8
     f44:	7f 90       	pop	r7
     f46:	6f 90       	pop	r6
     f48:	5f 90       	pop	r5
     f4a:	4f 90       	pop	r4
     f4c:	08 95       	ret

00000f4e <serial_send_bytes>:

/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
     f4e:	ef 92       	push	r14
     f50:	ff 92       	push	r15
     f52:	0f 93       	push	r16
     f54:	1f 93       	push	r17
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
     f5a:	fc 01       	movw	r30, r24
     f5c:	a2 81       	ldd	r26, Z+2	; 0x02
     f5e:	b3 81       	ldd	r27, Z+3	; 0x03
     f60:	10 97       	sbiw	r26, 0x00	; 0
     f62:	79 f0       	breq	.+30     	; 0xf82 <serial_send_bytes+0x34>
     f64:	e4 2f       	mov	r30, r20
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	92 96       	adiw	r26, 0x22	; 34
     f6a:	5c 91       	ld	r21, X
     f6c:	20 e2       	ldi	r18, 0x20	; 32
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	25 1b       	sub	r18, r21
     f72:	31 09       	sbc	r19, r1
     f74:	2e 17       	cp	r18, r30
     f76:	3f 07       	cpc	r19, r31
     f78:	1c f1       	brlt	.+70     	; 0xfc0 <serial_send_bytes+0x72>
     f7a:	7c 01       	movw	r14, r24
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
     f7c:	41 11       	cpse	r20, r1
     f7e:	04 c0       	rjmp	.+8      	; 0xf88 <serial_send_bytes+0x3a>
     f80:	16 c0       	rjmp	.+44     	; 0xfae <serial_send_bytes+0x60>

/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
     f82:	42 30       	cpi	r20, 0x02	; 2
     f84:	f8 f4       	brcc	.+62     	; 0xfc4 <serial_send_bytes+0x76>
     f86:	f9 cf       	rjmp	.-14     	; 0xf7a <serial_send_bytes+0x2c>
     f88:	eb 01       	movw	r28, r22
     f8a:	41 50       	subi	r20, 0x01	; 1
     f8c:	04 2f       	mov	r16, r20
     f8e:	10 e0       	ldi	r17, 0x00	; 0
     f90:	0f 5f       	subi	r16, 0xFF	; 255
     f92:	1f 4f       	sbci	r17, 0xFF	; 255
     f94:	06 0f       	add	r16, r22
     f96:	17 1f       	adc	r17, r23
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
     f98:	69 91       	ld	r22, Y+
     f9a:	d7 01       	movw	r26, r14
     f9c:	12 96       	adiw	r26, 0x02	; 2
     f9e:	8d 91       	ld	r24, X+
     fa0:	9c 91       	ld	r25, X
     fa2:	13 97       	sbiw	r26, 0x03	; 3
     fa4:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <buffer_put_item>
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
     fa8:	c0 17       	cp	r28, r16
     faa:	d1 07       	cpc	r29, r17
     fac:	a9 f7       	brne	.-22     	; 0xf98 <serial_send_bytes+0x4a>
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
     fae:	d7 01       	movw	r26, r14
     fb0:	ed 91       	ld	r30, X+
     fb2:	fc 91       	ld	r31, X
SREG = _sreg;


/*-----------------------------------------------------------*/
static void _serial_tx_int_on(volatile uint8_t *UDR_reg) {
	*(UDR_reg  - UCSRB_off) |= serTX_INT_ENABLE;
     fb4:	35 97       	sbiw	r30, 0x05	; 5
     fb6:	80 81       	ld	r24, Z
     fb8:	80 62       	ori	r24, 0x20	; 32
     fba:	80 83       	st	Z, r24
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	03 c0       	rjmp	.+6      	; 0xfc6 <serial_send_bytes+0x78>
/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
		return BUFFER_FULL;
     fc0:	82 e0       	ldi	r24, 0x02	; 2
     fc2:	01 c0       	rjmp	.+2      	; 0xfc6 <serial_send_bytes+0x78>
     fc4:	82 e0       	ldi	r24, 0x02	; 2
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
}
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	1f 91       	pop	r17
     fcc:	0f 91       	pop	r16
     fce:	ff 90       	pop	r15
     fd0:	ef 90       	pop	r14
     fd2:	08 95       	ret

00000fd4 <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
     fd4:	1f 92       	push	r1
     fd6:	0f 92       	push	r0
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	0f 92       	push	r0
     fdc:	11 24       	eor	r1, r1
     fde:	2f 93       	push	r18
     fe0:	3f 93       	push	r19
     fe2:	4f 93       	push	r20
     fe4:	5f 93       	push	r21
     fe6:	6f 93       	push	r22
     fe8:	7f 93       	push	r23
     fea:	8f 93       	push	r24
     fec:	9f 93       	push	r25
     fee:	af 93       	push	r26
     ff0:	bf 93       	push	r27
     ff2:	cf 93       	push	r28
     ff4:	ef 93       	push	r30
     ff6:	ff 93       	push	r31
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
     ff8:	e0 91 63 07 	lds	r30, 0x0763	; 0x800763 <_ser_handle>
     ffc:	f0 91 64 07 	lds	r31, 0x0764	; 0x800764 <_ser_handle+0x1>
    1000:	30 97       	sbiw	r30, 0x00	; 0
    1002:	a1 f0       	breq	.+40     	; 0x102c <__vector_20+0x58>
		item = UDR0;
    1004:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    1008:	6c 2f       	mov	r22, r28
    100a:	84 81       	ldd	r24, Z+4	; 0x04
    100c:	95 81       	ldd	r25, Z+5	; 0x05
    100e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    1012:	80 91 63 07 	lds	r24, 0x0763	; 0x800763 <_ser_handle>
    1016:	90 91 64 07 	lds	r25, 0x0764	; 0x800764 <_ser_handle+0x1>
    101a:	dc 01       	movw	r26, r24
    101c:	16 96       	adiw	r26, 0x06	; 6
    101e:	ed 91       	ld	r30, X+
    1020:	fc 91       	ld	r31, X
    1022:	17 97       	sbiw	r26, 0x07	; 7
    1024:	30 97       	sbiw	r30, 0x00	; 0
    1026:	11 f0       	breq	.+4      	; 0x102c <__vector_20+0x58>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    1028:	6c 2f       	mov	r22, r28
    102a:	09 95       	icall
		}
	}
}
    102c:	ff 91       	pop	r31
    102e:	ef 91       	pop	r30
    1030:	cf 91       	pop	r28
    1032:	bf 91       	pop	r27
    1034:	af 91       	pop	r26
    1036:	9f 91       	pop	r25
    1038:	8f 91       	pop	r24
    103a:	7f 91       	pop	r23
    103c:	6f 91       	pop	r22
    103e:	5f 91       	pop	r21
    1040:	4f 91       	pop	r20
    1042:	3f 91       	pop	r19
    1044:	2f 91       	pop	r18
    1046:	0f 90       	pop	r0
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	0f 90       	pop	r0
    104c:	1f 90       	pop	r1
    104e:	18 95       	reti

00001050 <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    1050:	1f 92       	push	r1
    1052:	0f 92       	push	r0
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	0f 92       	push	r0
    1058:	11 24       	eor	r1, r1
    105a:	2f 93       	push	r18
    105c:	3f 93       	push	r19
    105e:	4f 93       	push	r20
    1060:	5f 93       	push	r21
    1062:	6f 93       	push	r22
    1064:	7f 93       	push	r23
    1066:	8f 93       	push	r24
    1068:	9f 93       	push	r25
    106a:	af 93       	push	r26
    106c:	bf 93       	push	r27
    106e:	ef 93       	push	r30
    1070:	ff 93       	push	r31
    1072:	cf 93       	push	r28
    1074:	df 93       	push	r29
    1076:	1f 92       	push	r1
    1078:	cd b7       	in	r28, 0x3d	; 61
    107a:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    107c:	e0 91 63 07 	lds	r30, 0x0763	; 0x800763 <_ser_handle>
    1080:	f0 91 64 07 	lds	r31, 0x0764	; 0x800764 <_ser_handle+0x1>
    1084:	30 97       	sbiw	r30, 0x00	; 0
    1086:	99 f0       	breq	.+38     	; 0x10ae <__vector_21+0x5e>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    1088:	be 01       	movw	r22, r28
    108a:	6f 5f       	subi	r22, 0xFF	; 255
    108c:	7f 4f       	sbci	r23, 0xFF	; 255
    108e:	82 81       	ldd	r24, Z+2	; 0x02
    1090:	93 81       	ldd	r25, Z+3	; 0x03
    1092:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <buffer_get_item>
    1096:	81 11       	cpse	r24, r1
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <__vector_21+0x52>
			UDR0 = item;
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    10a0:	0b c0       	rjmp	.+22     	; 0x10b8 <__vector_21+0x68>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    10a2:	e1 ec       	ldi	r30, 0xC1	; 193
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	8f 7d       	andi	r24, 0xDF	; 223
    10aa:	80 83       	st	Z, r24
    10ac:	05 c0       	rjmp	.+10     	; 0x10b8 <__vector_21+0x68>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    10ae:	e1 ec       	ldi	r30, 0xC1	; 193
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	8f 7d       	andi	r24, 0xDF	; 223
    10b6:	80 83       	st	Z, r24
	}
}
    10b8:	0f 90       	pop	r0
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	ff 91       	pop	r31
    10c0:	ef 91       	pop	r30
    10c2:	bf 91       	pop	r27
    10c4:	af 91       	pop	r26
    10c6:	9f 91       	pop	r25
    10c8:	8f 91       	pop	r24
    10ca:	7f 91       	pop	r23
    10cc:	6f 91       	pop	r22
    10ce:	5f 91       	pop	r21
    10d0:	4f 91       	pop	r20
    10d2:	3f 91       	pop	r19
    10d4:	2f 91       	pop	r18
    10d6:	0f 90       	pop	r0
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	0f 90       	pop	r0
    10dc:	1f 90       	pop	r1
    10de:	18 95       	reti

000010e0 <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    10e0:	1f 92       	push	r1
    10e2:	0f 92       	push	r0
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	0f 92       	push	r0
    10e8:	11 24       	eor	r1, r1
    10ea:	2f 93       	push	r18
    10ec:	3f 93       	push	r19
    10ee:	4f 93       	push	r20
    10f0:	5f 93       	push	r21
    10f2:	6f 93       	push	r22
    10f4:	7f 93       	push	r23
    10f6:	8f 93       	push	r24
    10f8:	9f 93       	push	r25
    10fa:	af 93       	push	r26
    10fc:	bf 93       	push	r27
    10fe:	cf 93       	push	r28
    1100:	ef 93       	push	r30
    1102:	ff 93       	push	r31
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    1104:	e0 91 65 07 	lds	r30, 0x0765	; 0x800765 <_ser_handle+0x2>
    1108:	f0 91 66 07 	lds	r31, 0x0766	; 0x800766 <_ser_handle+0x3>
    110c:	30 97       	sbiw	r30, 0x00	; 0
    110e:	a1 f0       	breq	.+40     	; 0x1138 <__vector_28+0x58>
		item = UDR1;
    1110:	c0 91 ce 00 	lds	r28, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    1114:	6c 2f       	mov	r22, r28
    1116:	84 81       	ldd	r24, Z+4	; 0x04
    1118:	95 81       	ldd	r25, Z+5	; 0x05
    111a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    111e:	80 91 65 07 	lds	r24, 0x0765	; 0x800765 <_ser_handle+0x2>
    1122:	90 91 66 07 	lds	r25, 0x0766	; 0x800766 <_ser_handle+0x3>
    1126:	dc 01       	movw	r26, r24
    1128:	16 96       	adiw	r26, 0x06	; 6
    112a:	ed 91       	ld	r30, X+
    112c:	fc 91       	ld	r31, X
    112e:	17 97       	sbiw	r26, 0x07	; 7
    1130:	30 97       	sbiw	r30, 0x00	; 0
    1132:	11 f0       	breq	.+4      	; 0x1138 <__vector_28+0x58>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    1134:	6c 2f       	mov	r22, r28
    1136:	09 95       	icall
		}
	}
}
    1138:	ff 91       	pop	r31
    113a:	ef 91       	pop	r30
    113c:	cf 91       	pop	r28
    113e:	bf 91       	pop	r27
    1140:	af 91       	pop	r26
    1142:	9f 91       	pop	r25
    1144:	8f 91       	pop	r24
    1146:	7f 91       	pop	r23
    1148:	6f 91       	pop	r22
    114a:	5f 91       	pop	r21
    114c:	4f 91       	pop	r20
    114e:	3f 91       	pop	r19
    1150:	2f 91       	pop	r18
    1152:	0f 90       	pop	r0
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	0f 90       	pop	r0
    1158:	1f 90       	pop	r1
    115a:	18 95       	reti

0000115c <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    115c:	1f 92       	push	r1
    115e:	0f 92       	push	r0
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	0f 92       	push	r0
    1164:	11 24       	eor	r1, r1
    1166:	2f 93       	push	r18
    1168:	3f 93       	push	r19
    116a:	4f 93       	push	r20
    116c:	5f 93       	push	r21
    116e:	6f 93       	push	r22
    1170:	7f 93       	push	r23
    1172:	8f 93       	push	r24
    1174:	9f 93       	push	r25
    1176:	af 93       	push	r26
    1178:	bf 93       	push	r27
    117a:	ef 93       	push	r30
    117c:	ff 93       	push	r31
    117e:	cf 93       	push	r28
    1180:	df 93       	push	r29
    1182:	1f 92       	push	r1
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    1188:	e0 91 65 07 	lds	r30, 0x0765	; 0x800765 <_ser_handle+0x2>
    118c:	f0 91 66 07 	lds	r31, 0x0766	; 0x800766 <_ser_handle+0x3>
    1190:	30 97       	sbiw	r30, 0x00	; 0
    1192:	99 f0       	breq	.+38     	; 0x11ba <__vector_29+0x5e>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    1194:	be 01       	movw	r22, r28
    1196:	6f 5f       	subi	r22, 0xFF	; 255
    1198:	7f 4f       	sbci	r23, 0xFF	; 255
    119a:	82 81       	ldd	r24, Z+2	; 0x02
    119c:	93 81       	ldd	r25, Z+3	; 0x03
    119e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <buffer_get_item>
    11a2:	81 11       	cpse	r24, r1
    11a4:	04 c0       	rjmp	.+8      	; 0x11ae <__vector_29+0x52>
			UDR1 = item;
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    11ac:	0b c0       	rjmp	.+22     	; 0x11c4 <__vector_29+0x68>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    11ae:	e9 ec       	ldi	r30, 0xC9	; 201
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	8f 7d       	andi	r24, 0xDF	; 223
    11b6:	80 83       	st	Z, r24
    11b8:	05 c0       	rjmp	.+10     	; 0x11c4 <__vector_29+0x68>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    11ba:	e9 ec       	ldi	r30, 0xC9	; 201
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	8f 7d       	andi	r24, 0xDF	; 223
    11c2:	80 83       	st	Z, r24
	}
}
    11c4:	0f 90       	pop	r0
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	ff 91       	pop	r31
    11cc:	ef 91       	pop	r30
    11ce:	bf 91       	pop	r27
    11d0:	af 91       	pop	r26
    11d2:	9f 91       	pop	r25
    11d4:	8f 91       	pop	r24
    11d6:	7f 91       	pop	r23
    11d8:	6f 91       	pop	r22
    11da:	5f 91       	pop	r21
    11dc:	4f 91       	pop	r20
    11de:	3f 91       	pop	r19
    11e0:	2f 91       	pop	r18
    11e2:	0f 90       	pop	r0
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	0f 90       	pop	r0
    11e8:	1f 90       	pop	r1
    11ea:	18 95       	reti

000011ec <prvCopyDataToQueue>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    11ec:	0f 93       	push	r16
    11ee:	1f 93       	push	r17
    11f0:	cf 93       	push	r28
    11f2:	df 93       	push	r29
    11f4:	ec 01       	movw	r28, r24
    11f6:	04 2f       	mov	r16, r20
    11f8:	1a 8d       	ldd	r17, Y+26	; 0x1a
    11fa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    11fc:	81 11       	cpse	r24, r1
    11fe:	0c c0       	rjmp	.+24     	; 0x1218 <prvCopyDataToQueue+0x2c>
    1200:	88 81       	ld	r24, Y
    1202:	99 81       	ldd	r25, Y+1	; 0x01
    1204:	89 2b       	or	r24, r25
    1206:	09 f0       	breq	.+2      	; 0x120a <prvCopyDataToQueue+0x1e>
    1208:	44 c0       	rjmp	.+136    	; 0x1292 <prvCopyDataToQueue+0xa6>
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	9b 81       	ldd	r25, Y+3	; 0x03
    120e:	0e 94 a5 10 	call	0x214a	; 0x214a <xTaskPriorityDisinherit>
    1212:	1b 82       	std	Y+3, r1	; 0x03
    1214:	1a 82       	std	Y+2, r1	; 0x02
    1216:	44 c0       	rjmp	.+136    	; 0x12a0 <prvCopyDataToQueue+0xb4>
    1218:	41 11       	cpse	r20, r1
    121a:	18 c0       	rjmp	.+48     	; 0x124c <prvCopyDataToQueue+0x60>
    121c:	48 2f       	mov	r20, r24
    121e:	50 e0       	ldi	r21, 0x00	; 0
    1220:	8c 81       	ldd	r24, Y+4	; 0x04
    1222:	9d 81       	ldd	r25, Y+5	; 0x05
    1224:	0e 94 a2 12 	call	0x2544	; 0x2544 <memcpy>
    1228:	2c 8d       	ldd	r18, Y+28	; 0x1c
    122a:	8c 81       	ldd	r24, Y+4	; 0x04
    122c:	9d 81       	ldd	r25, Y+5	; 0x05
    122e:	82 0f       	add	r24, r18
    1230:	91 1d       	adc	r25, r1
    1232:	9d 83       	std	Y+5, r25	; 0x05
    1234:	8c 83       	std	Y+4, r24	; 0x04
    1236:	2a 81       	ldd	r18, Y+2	; 0x02
    1238:	3b 81       	ldd	r19, Y+3	; 0x03
    123a:	82 17       	cp	r24, r18
    123c:	93 07       	cpc	r25, r19
    123e:	58 f1       	brcs	.+86     	; 0x1296 <prvCopyDataToQueue+0xaa>
    1240:	88 81       	ld	r24, Y
    1242:	99 81       	ldd	r25, Y+1	; 0x01
    1244:	9d 83       	std	Y+5, r25	; 0x05
    1246:	8c 83       	std	Y+4, r24	; 0x04
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	2a c0       	rjmp	.+84     	; 0x12a0 <prvCopyDataToQueue+0xb4>
    124c:	48 2f       	mov	r20, r24
    124e:	50 e0       	ldi	r21, 0x00	; 0
    1250:	8e 81       	ldd	r24, Y+6	; 0x06
    1252:	9f 81       	ldd	r25, Y+7	; 0x07
    1254:	0e 94 a2 12 	call	0x2544	; 0x2544 <memcpy>
    1258:	8c 8d       	ldd	r24, Y+28	; 0x1c
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	91 95       	neg	r25
    125e:	81 95       	neg	r24
    1260:	91 09       	sbc	r25, r1
    1262:	2e 81       	ldd	r18, Y+6	; 0x06
    1264:	3f 81       	ldd	r19, Y+7	; 0x07
    1266:	28 0f       	add	r18, r24
    1268:	39 1f       	adc	r19, r25
    126a:	3f 83       	std	Y+7, r19	; 0x07
    126c:	2e 83       	std	Y+6, r18	; 0x06
    126e:	48 81       	ld	r20, Y
    1270:	59 81       	ldd	r21, Y+1	; 0x01
    1272:	24 17       	cp	r18, r20
    1274:	35 07       	cpc	r19, r21
    1276:	30 f4       	brcc	.+12     	; 0x1284 <prvCopyDataToQueue+0x98>
    1278:	2a 81       	ldd	r18, Y+2	; 0x02
    127a:	3b 81       	ldd	r19, Y+3	; 0x03
    127c:	82 0f       	add	r24, r18
    127e:	93 1f       	adc	r25, r19
    1280:	9f 83       	std	Y+7, r25	; 0x07
    1282:	8e 83       	std	Y+6, r24	; 0x06
    1284:	02 30       	cpi	r16, 0x02	; 2
    1286:	49 f4       	brne	.+18     	; 0x129a <prvCopyDataToQueue+0xae>
    1288:	11 23       	and	r17, r17
    128a:	49 f0       	breq	.+18     	; 0x129e <prvCopyDataToQueue+0xb2>
    128c:	11 50       	subi	r17, 0x01	; 1
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	07 c0       	rjmp	.+14     	; 0x12a0 <prvCopyDataToQueue+0xb4>
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	05 c0       	rjmp	.+10     	; 0x12a0 <prvCopyDataToQueue+0xb4>
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	03 c0       	rjmp	.+6      	; 0x12a0 <prvCopyDataToQueue+0xb4>
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	01 c0       	rjmp	.+2      	; 0x12a0 <prvCopyDataToQueue+0xb4>
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	1f 5f       	subi	r17, 0xFF	; 255
    12a2:	1a 8f       	std	Y+26, r17	; 0x1a
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	1f 91       	pop	r17
    12aa:	0f 91       	pop	r16
    12ac:	08 95       	ret

000012ae <prvCopyDataFromQueue>:
    12ae:	fc 01       	movw	r30, r24
    12b0:	44 8d       	ldd	r20, Z+28	; 0x1c
    12b2:	44 23       	and	r20, r20
    12b4:	a9 f0       	breq	.+42     	; 0x12e0 <prvCopyDataFromQueue+0x32>
    12b6:	50 e0       	ldi	r21, 0x00	; 0
    12b8:	26 81       	ldd	r18, Z+6	; 0x06
    12ba:	37 81       	ldd	r19, Z+7	; 0x07
    12bc:	24 0f       	add	r18, r20
    12be:	35 1f       	adc	r19, r21
    12c0:	37 83       	std	Z+7, r19	; 0x07
    12c2:	26 83       	std	Z+6, r18	; 0x06
    12c4:	82 81       	ldd	r24, Z+2	; 0x02
    12c6:	93 81       	ldd	r25, Z+3	; 0x03
    12c8:	28 17       	cp	r18, r24
    12ca:	39 07       	cpc	r19, r25
    12cc:	20 f0       	brcs	.+8      	; 0x12d6 <prvCopyDataFromQueue+0x28>
    12ce:	80 81       	ld	r24, Z
    12d0:	91 81       	ldd	r25, Z+1	; 0x01
    12d2:	97 83       	std	Z+7, r25	; 0x07
    12d4:	86 83       	std	Z+6, r24	; 0x06
    12d6:	cb 01       	movw	r24, r22
    12d8:	66 81       	ldd	r22, Z+6	; 0x06
    12da:	77 81       	ldd	r23, Z+7	; 0x07
    12dc:	0e 94 a2 12 	call	0x2544	; 0x2544 <memcpy>
    12e0:	08 95       	ret

000012e2 <prvUnlockQueue>:
    12e2:	ef 92       	push	r14
    12e4:	ff 92       	push	r15
    12e6:	0f 93       	push	r16
    12e8:	1f 93       	push	r17
    12ea:	cf 93       	push	r28
    12ec:	8c 01       	movw	r16, r24
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	0f 92       	push	r0
    12f4:	fc 01       	movw	r30, r24
    12f6:	c6 8d       	ldd	r28, Z+30	; 0x1e
    12f8:	1c 16       	cp	r1, r28
    12fa:	ac f4       	brge	.+42     	; 0x1326 <prvUnlockQueue+0x44>
    12fc:	81 89       	ldd	r24, Z+17	; 0x11
    12fe:	81 11       	cpse	r24, r1
    1300:	06 c0       	rjmp	.+12     	; 0x130e <prvUnlockQueue+0x2c>
    1302:	11 c0       	rjmp	.+34     	; 0x1326 <prvUnlockQueue+0x44>
    1304:	f8 01       	movw	r30, r16
    1306:	91 89       	ldd	r25, Z+17	; 0x11
    1308:	91 11       	cpse	r25, r1
    130a:	05 c0       	rjmp	.+10     	; 0x1316 <prvUnlockQueue+0x34>
    130c:	0c c0       	rjmp	.+24     	; 0x1326 <prvUnlockQueue+0x44>
    130e:	78 01       	movw	r14, r16
    1310:	f1 e1       	ldi	r31, 0x11	; 17
    1312:	ef 0e       	add	r14, r31
    1314:	f1 1c       	adc	r15, r1
    1316:	c7 01       	movw	r24, r14
    1318:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <xTaskRemoveFromEventList>
    131c:	81 11       	cpse	r24, r1
    131e:	0e 94 3f 10 	call	0x207e	; 0x207e <vTaskMissedYield>
    1322:	c1 50       	subi	r28, 0x01	; 1
    1324:	79 f7       	brne	.-34     	; 0x1304 <prvUnlockQueue+0x22>
    1326:	8f ef       	ldi	r24, 0xFF	; 255
    1328:	f8 01       	movw	r30, r16
    132a:	86 8f       	std	Z+30, r24	; 0x1e
    132c:	0f 90       	pop	r0
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	f8 94       	cli
    1334:	0f 92       	push	r0
    1336:	c5 8d       	ldd	r28, Z+29	; 0x1d
    1338:	1c 16       	cp	r1, r28
    133a:	ac f4       	brge	.+42     	; 0x1366 <prvUnlockQueue+0x84>
    133c:	80 85       	ldd	r24, Z+8	; 0x08
    133e:	81 11       	cpse	r24, r1
    1340:	06 c0       	rjmp	.+12     	; 0x134e <prvUnlockQueue+0x6c>
    1342:	11 c0       	rjmp	.+34     	; 0x1366 <prvUnlockQueue+0x84>
    1344:	f8 01       	movw	r30, r16
    1346:	90 85       	ldd	r25, Z+8	; 0x08
    1348:	91 11       	cpse	r25, r1
    134a:	05 c0       	rjmp	.+10     	; 0x1356 <prvUnlockQueue+0x74>
    134c:	0c c0       	rjmp	.+24     	; 0x1366 <prvUnlockQueue+0x84>
    134e:	78 01       	movw	r14, r16
    1350:	f8 e0       	ldi	r31, 0x08	; 8
    1352:	ef 0e       	add	r14, r31
    1354:	f1 1c       	adc	r15, r1
    1356:	c7 01       	movw	r24, r14
    1358:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <xTaskRemoveFromEventList>
    135c:	81 11       	cpse	r24, r1
    135e:	0e 94 3f 10 	call	0x207e	; 0x207e <vTaskMissedYield>
    1362:	c1 50       	subi	r28, 0x01	; 1
    1364:	79 f7       	brne	.-34     	; 0x1344 <prvUnlockQueue+0x62>
    1366:	8f ef       	ldi	r24, 0xFF	; 255
    1368:	f8 01       	movw	r30, r16
    136a:	85 8f       	std	Z+29, r24	; 0x1d
    136c:	0f 90       	pop	r0
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	cf 91       	pop	r28
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	ff 90       	pop	r15
    1378:	ef 90       	pop	r14
    137a:	08 95       	ret

0000137c <xQueueGenericReset>:
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	ec 01       	movw	r28, r24
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	0f 92       	push	r0
    1388:	48 81       	ld	r20, Y
    138a:	59 81       	ldd	r21, Y+1	; 0x01
    138c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1392:	72 9f       	mul	r23, r18
    1394:	c0 01       	movw	r24, r0
    1396:	73 9f       	mul	r23, r19
    1398:	90 0d       	add	r25, r0
    139a:	11 24       	eor	r1, r1
    139c:	fa 01       	movw	r30, r20
    139e:	e8 0f       	add	r30, r24
    13a0:	f9 1f       	adc	r31, r25
    13a2:	fb 83       	std	Y+3, r31	; 0x03
    13a4:	ea 83       	std	Y+2, r30	; 0x02
    13a6:	1a 8e       	std	Y+26, r1	; 0x1a
    13a8:	5d 83       	std	Y+5, r21	; 0x05
    13aa:	4c 83       	std	Y+4, r20	; 0x04
    13ac:	82 1b       	sub	r24, r18
    13ae:	93 0b       	sbc	r25, r19
    13b0:	84 0f       	add	r24, r20
    13b2:	95 1f       	adc	r25, r21
    13b4:	9f 83       	std	Y+7, r25	; 0x07
    13b6:	8e 83       	std	Y+6, r24	; 0x06
    13b8:	8f ef       	ldi	r24, 0xFF	; 255
    13ba:	8d 8f       	std	Y+29, r24	; 0x1d
    13bc:	8e 8f       	std	Y+30, r24	; 0x1e
    13be:	61 11       	cpse	r22, r1
    13c0:	0c c0       	rjmp	.+24     	; 0x13da <xQueueGenericReset+0x5e>
    13c2:	88 85       	ldd	r24, Y+8	; 0x08
    13c4:	88 23       	and	r24, r24
    13c6:	89 f0       	breq	.+34     	; 0x13ea <xQueueGenericReset+0x6e>
    13c8:	ce 01       	movw	r24, r28
    13ca:	08 96       	adiw	r24, 0x08	; 8
    13cc:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <xTaskRemoveFromEventList>
    13d0:	88 23       	and	r24, r24
    13d2:	59 f0       	breq	.+22     	; 0x13ea <xQueueGenericReset+0x6e>
    13d4:	0e 94 3f 06 	call	0xc7e	; 0xc7e <vPortYield>
    13d8:	08 c0       	rjmp	.+16     	; 0x13ea <xQueueGenericReset+0x6e>
    13da:	ce 01       	movw	r24, r28
    13dc:	08 96       	adiw	r24, 0x08	; 8
    13de:	0e 94 0f 05 	call	0xa1e	; 0xa1e <vListInitialise>
    13e2:	ce 01       	movw	r24, r28
    13e4:	41 96       	adiw	r24, 0x11	; 17
    13e6:	0e 94 0f 05 	call	0xa1e	; 0xa1e <vListInitialise>
    13ea:	0f 90       	pop	r0
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	08 95       	ret

000013f6 <xQueueGenericCreate>:
    13f6:	ff 92       	push	r15
    13f8:	0f 93       	push	r16
    13fa:	1f 93       	push	r17
    13fc:	cf 93       	push	r28
    13fe:	df 93       	push	r29
    1400:	08 2f       	mov	r16, r24
    1402:	16 2f       	mov	r17, r22
    1404:	f4 2e       	mov	r15, r20
    1406:	66 23       	and	r22, r22
    1408:	c9 f0       	breq	.+50     	; 0x143c <xQueueGenericCreate+0x46>
    140a:	86 9f       	mul	r24, r22
    140c:	c0 01       	movw	r24, r0
    140e:	11 24       	eor	r1, r1
    1410:	81 96       	adiw	r24, 0x21	; 33
    1412:	0e 94 f7 06 	call	0xdee	; 0xdee <pvPortMalloc>
    1416:	ec 01       	movw	r28, r24
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	49 f4       	brne	.+18     	; 0x142e <xQueueGenericCreate+0x38>
    141c:	16 c0       	rjmp	.+44     	; 0x144a <xQueueGenericCreate+0x54>
    141e:	0b 8f       	std	Y+27, r16	; 0x1b
    1420:	1c 8f       	std	Y+28, r17	; 0x1c
    1422:	61 e0       	ldi	r22, 0x01	; 1
    1424:	ce 01       	movw	r24, r28
    1426:	0e 94 be 09 	call	0x137c	; 0x137c <xQueueGenericReset>
    142a:	f8 a2       	std	Y+32, r15	; 0x20
    142c:	0e c0       	rjmp	.+28     	; 0x144a <xQueueGenericCreate+0x54>
    142e:	81 96       	adiw	r24, 0x21	; 33
    1430:	99 83       	std	Y+1, r25	; 0x01
    1432:	88 83       	st	Y, r24
    1434:	f4 cf       	rjmp	.-24     	; 0x141e <xQueueGenericCreate+0x28>
    1436:	d9 83       	std	Y+1, r29	; 0x01
    1438:	c8 83       	st	Y, r28
    143a:	f1 cf       	rjmp	.-30     	; 0x141e <xQueueGenericCreate+0x28>
    143c:	81 e2       	ldi	r24, 0x21	; 33
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	0e 94 f7 06 	call	0xdee	; 0xdee <pvPortMalloc>
    1444:	ec 01       	movw	r28, r24
    1446:	89 2b       	or	r24, r25
    1448:	b1 f7       	brne	.-20     	; 0x1436 <xQueueGenericCreate+0x40>
    144a:	ce 01       	movw	r24, r28
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	1f 91       	pop	r17
    1452:	0f 91       	pop	r16
    1454:	ff 90       	pop	r15
    1456:	08 95       	ret

00001458 <xQueueGenericSend>:
    1458:	9f 92       	push	r9
    145a:	af 92       	push	r10
    145c:	bf 92       	push	r11
    145e:	cf 92       	push	r12
    1460:	df 92       	push	r13
    1462:	ef 92       	push	r14
    1464:	ff 92       	push	r15
    1466:	0f 93       	push	r16
    1468:	1f 93       	push	r17
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	00 d0       	rcall	.+0      	; 0x1470 <xQueueGenericSend+0x18>
    1470:	00 d0       	rcall	.+0      	; 0x1472 <xQueueGenericSend+0x1a>
    1472:	1f 92       	push	r1
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	8c 01       	movw	r16, r24
    147a:	6b 01       	movw	r12, r22
    147c:	5d 83       	std	Y+5, r21	; 0x05
    147e:	4c 83       	std	Y+4, r20	; 0x04
    1480:	a2 2e       	mov	r10, r18
    1482:	b1 2c       	mov	r11, r1
    1484:	99 24       	eor	r9, r9
    1486:	93 94       	inc	r9
    1488:	7c 01       	movw	r14, r24
    148a:	88 e0       	ldi	r24, 0x08	; 8
    148c:	e8 0e       	add	r14, r24
    148e:	f1 1c       	adc	r15, r1
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	0f 92       	push	r0
    1496:	f8 01       	movw	r30, r16
    1498:	32 8d       	ldd	r19, Z+26	; 0x1a
    149a:	93 8d       	ldd	r25, Z+27	; 0x1b
    149c:	39 17       	cp	r19, r25
    149e:	18 f0       	brcs	.+6      	; 0x14a6 <xQueueGenericSend+0x4e>
    14a0:	f2 e0       	ldi	r31, 0x02	; 2
    14a2:	af 12       	cpse	r10, r31
    14a4:	19 c0       	rjmp	.+50     	; 0x14d8 <xQueueGenericSend+0x80>
    14a6:	4a 2d       	mov	r20, r10
    14a8:	b6 01       	movw	r22, r12
    14aa:	c8 01       	movw	r24, r16
    14ac:	0e 94 f6 08 	call	0x11ec	; 0x11ec <prvCopyDataToQueue>
    14b0:	f8 01       	movw	r30, r16
    14b2:	91 89       	ldd	r25, Z+17	; 0x11
    14b4:	99 23       	and	r25, r25
    14b6:	49 f0       	breq	.+18     	; 0x14ca <xQueueGenericSend+0x72>
    14b8:	c8 01       	movw	r24, r16
    14ba:	41 96       	adiw	r24, 0x11	; 17
    14bc:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <xTaskRemoveFromEventList>
    14c0:	88 23       	and	r24, r24
    14c2:	31 f0       	breq	.+12     	; 0x14d0 <xQueueGenericSend+0x78>
    14c4:	0e 94 3f 06 	call	0xc7e	; 0xc7e <vPortYield>
    14c8:	03 c0       	rjmp	.+6      	; 0x14d0 <xQueueGenericSend+0x78>
    14ca:	81 11       	cpse	r24, r1
    14cc:	0e 94 3f 06 	call	0xc7e	; 0xc7e <vPortYield>
    14d0:	0f 90       	pop	r0
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	50 c0       	rjmp	.+160    	; 0x1578 <xQueueGenericSend+0x120>
    14d8:	ec 81       	ldd	r30, Y+4	; 0x04
    14da:	fd 81       	ldd	r31, Y+5	; 0x05
    14dc:	ef 2b       	or	r30, r31
    14de:	21 f4       	brne	.+8      	; 0x14e8 <xQueueGenericSend+0x90>
    14e0:	0f 90       	pop	r0
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	48 c0       	rjmp	.+144    	; 0x1578 <xQueueGenericSend+0x120>
    14e8:	b1 10       	cpse	r11, r1
    14ea:	05 c0       	rjmp	.+10     	; 0x14f6 <xQueueGenericSend+0x9e>
    14ec:	ce 01       	movw	r24, r28
    14ee:	01 96       	adiw	r24, 0x01	; 1
    14f0:	0e 94 02 10 	call	0x2004	; 0x2004 <vTaskSetTimeOutState>
    14f4:	b9 2c       	mov	r11, r9
    14f6:	0f 90       	pop	r0
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <vTaskSuspendAll>
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	f8 94       	cli
    1502:	0f 92       	push	r0
    1504:	f8 01       	movw	r30, r16
    1506:	85 8d       	ldd	r24, Z+29	; 0x1d
    1508:	8f 3f       	cpi	r24, 0xFF	; 255
    150a:	09 f4       	brne	.+2      	; 0x150e <xQueueGenericSend+0xb6>
    150c:	15 8e       	std	Z+29, r1	; 0x1d
    150e:	f8 01       	movw	r30, r16
    1510:	86 8d       	ldd	r24, Z+30	; 0x1e
    1512:	8f 3f       	cpi	r24, 0xFF	; 255
    1514:	09 f4       	brne	.+2      	; 0x1518 <xQueueGenericSend+0xc0>
    1516:	16 8e       	std	Z+30, r1	; 0x1e
    1518:	0f 90       	pop	r0
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	be 01       	movw	r22, r28
    151e:	6c 5f       	subi	r22, 0xFC	; 252
    1520:	7f 4f       	sbci	r23, 0xFF	; 255
    1522:	ce 01       	movw	r24, r28
    1524:	01 96       	adiw	r24, 0x01	; 1
    1526:	0e 94 0d 10 	call	0x201a	; 0x201a <xTaskCheckForTimeOut>
    152a:	81 11       	cpse	r24, r1
    152c:	1f c0       	rjmp	.+62     	; 0x156c <xQueueGenericSend+0x114>
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	0f 92       	push	r0
    1534:	f8 01       	movw	r30, r16
    1536:	92 8d       	ldd	r25, Z+26	; 0x1a
    1538:	0f 90       	pop	r0
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	83 8d       	ldd	r24, Z+27	; 0x1b
    153e:	98 13       	cpse	r25, r24
    1540:	0f c0       	rjmp	.+30     	; 0x1560 <xQueueGenericSend+0x108>
    1542:	6c 81       	ldd	r22, Y+4	; 0x04
    1544:	7d 81       	ldd	r23, Y+5	; 0x05
    1546:	c7 01       	movw	r24, r14
    1548:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <vTaskPlaceOnEventList>
    154c:	c8 01       	movw	r24, r16
    154e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <prvUnlockQueue>
    1552:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <xTaskResumeAll>
    1556:	81 11       	cpse	r24, r1
    1558:	9b cf       	rjmp	.-202    	; 0x1490 <xQueueGenericSend+0x38>
    155a:	0e 94 3f 06 	call	0xc7e	; 0xc7e <vPortYield>
    155e:	98 cf       	rjmp	.-208    	; 0x1490 <xQueueGenericSend+0x38>
    1560:	c8 01       	movw	r24, r16
    1562:	0e 94 71 09 	call	0x12e2	; 0x12e2 <prvUnlockQueue>
    1566:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <xTaskResumeAll>
    156a:	92 cf       	rjmp	.-220    	; 0x1490 <xQueueGenericSend+0x38>
    156c:	c8 01       	movw	r24, r16
    156e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <prvUnlockQueue>
    1572:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <xTaskResumeAll>
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	df 91       	pop	r29
    1584:	cf 91       	pop	r28
    1586:	1f 91       	pop	r17
    1588:	0f 91       	pop	r16
    158a:	ff 90       	pop	r15
    158c:	ef 90       	pop	r14
    158e:	df 90       	pop	r13
    1590:	cf 90       	pop	r12
    1592:	bf 90       	pop	r11
    1594:	af 90       	pop	r10
    1596:	9f 90       	pop	r9
    1598:	08 95       	ret

0000159a <xQueueCreateMutex>:
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	48 2f       	mov	r20, r24
    15a0:	60 e0       	ldi	r22, 0x00	; 0
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <xQueueGenericCreate>
    15a8:	ec 01       	movw	r28, r24
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	61 f0       	breq	.+24     	; 0x15c6 <xQueueCreateMutex+0x2c>
    15ae:	1b 82       	std	Y+3, r1	; 0x03
    15b0:	1a 82       	std	Y+2, r1	; 0x02
    15b2:	19 82       	std	Y+1, r1	; 0x01
    15b4:	18 82       	st	Y, r1
    15b6:	1e 82       	std	Y+6, r1	; 0x06
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	40 e0       	ldi	r20, 0x00	; 0
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	60 e0       	ldi	r22, 0x00	; 0
    15c0:	70 e0       	ldi	r23, 0x00	; 0
    15c2:	0e 94 2c 0a 	call	0x1458	; 0x1458 <xQueueGenericSend>
    15c6:	ce 01       	movw	r24, r28
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	08 95       	ret

000015ce <xQueueGenericSendFromISR>:
    15ce:	ef 92       	push	r14
    15d0:	ff 92       	push	r15
    15d2:	0f 93       	push	r16
    15d4:	1f 93       	push	r17
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
    15da:	8a 01       	movw	r16, r20
    15dc:	fc 01       	movw	r30, r24
    15de:	52 8d       	ldd	r21, Z+26	; 0x1a
    15e0:	33 8d       	ldd	r19, Z+27	; 0x1b
    15e2:	53 17       	cp	r21, r19
    15e4:	10 f0       	brcs	.+4      	; 0x15ea <xQueueGenericSendFromISR+0x1c>
    15e6:	22 30       	cpi	r18, 0x02	; 2
    15e8:	f1 f4       	brne	.+60     	; 0x1626 <xQueueGenericSendFromISR+0x58>
    15ea:	42 2f       	mov	r20, r18
    15ec:	78 01       	movw	r14, r16
    15ee:	ec 01       	movw	r28, r24
    15f0:	1e 8d       	ldd	r17, Y+30	; 0x1e
    15f2:	0e 94 f6 08 	call	0x11ec	; 0x11ec <prvCopyDataToQueue>
    15f6:	1f 3f       	cpi	r17, 0xFF	; 255
    15f8:	81 f4       	brne	.+32     	; 0x161a <xQueueGenericSendFromISR+0x4c>
    15fa:	89 89       	ldd	r24, Y+17	; 0x11
    15fc:	88 23       	and	r24, r24
    15fe:	a9 f0       	breq	.+42     	; 0x162a <xQueueGenericSendFromISR+0x5c>
    1600:	ce 01       	movw	r24, r28
    1602:	41 96       	adiw	r24, 0x11	; 17
    1604:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <xTaskRemoveFromEventList>
    1608:	88 23       	and	r24, r24
    160a:	89 f0       	breq	.+34     	; 0x162e <xQueueGenericSendFromISR+0x60>
    160c:	e1 14       	cp	r14, r1
    160e:	f1 04       	cpc	r15, r1
    1610:	81 f0       	breq	.+32     	; 0x1632 <xQueueGenericSendFromISR+0x64>
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	f7 01       	movw	r30, r14
    1616:	80 83       	st	Z, r24
    1618:	0d c0       	rjmp	.+26     	; 0x1634 <xQueueGenericSendFromISR+0x66>
    161a:	ff 24       	eor	r15, r15
    161c:	f3 94       	inc	r15
    161e:	f1 0e       	add	r15, r17
    1620:	fe 8e       	std	Y+30, r15	; 0x1e
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	07 c0       	rjmp	.+14     	; 0x1634 <xQueueGenericSendFromISR+0x66>
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	05 c0       	rjmp	.+10     	; 0x1634 <xQueueGenericSendFromISR+0x66>
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	03 c0       	rjmp	.+6      	; 0x1634 <xQueueGenericSendFromISR+0x66>
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	01 c0       	rjmp	.+2      	; 0x1634 <xQueueGenericSendFromISR+0x66>
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	df 91       	pop	r29
    1636:	cf 91       	pop	r28
    1638:	1f 91       	pop	r17
    163a:	0f 91       	pop	r16
    163c:	ff 90       	pop	r15
    163e:	ef 90       	pop	r14
    1640:	08 95       	ret

00001642 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    1642:	8f 92       	push	r8
    1644:	9f 92       	push	r9
    1646:	af 92       	push	r10
    1648:	bf 92       	push	r11
    164a:	cf 92       	push	r12
    164c:	df 92       	push	r13
    164e:	ef 92       	push	r14
    1650:	ff 92       	push	r15
    1652:	0f 93       	push	r16
    1654:	1f 93       	push	r17
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	00 d0       	rcall	.+0      	; 0x165c <xQueueGenericReceive+0x1a>
    165c:	00 d0       	rcall	.+0      	; 0x165e <xQueueGenericReceive+0x1c>
    165e:	1f 92       	push	r1
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	8c 01       	movw	r16, r24
    1666:	5b 01       	movw	r10, r22
    1668:	5d 83       	std	Y+5, r21	; 0x05
    166a:	4c 83       	std	Y+4, r20	; 0x04
    166c:	82 2e       	mov	r8, r18
BaseType_t xEntryTimeSet = pdFALSE;
    166e:	e1 2c       	mov	r14, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    1670:	99 24       	eor	r9, r9
    1672:	93 94       	inc	r9
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1674:	6c 01       	movw	r12, r24
    1676:	81 e1       	ldi	r24, 0x11	; 17
    1678:	c8 0e       	add	r12, r24
    167a:	d1 1c       	adc	r13, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1682:	f8 01       	movw	r30, r16
    1684:	f2 8c       	ldd	r15, Z+26	; 0x1a

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1686:	ff 20       	and	r15, r15
    1688:	91 f1       	breq	.+100    	; 0x16ee <xQueueGenericReceive+0xac>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    168a:	c6 80       	ldd	r12, Z+6	; 0x06
    168c:	d7 80       	ldd	r13, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    168e:	b5 01       	movw	r22, r10
    1690:	c8 01       	movw	r24, r16
    1692:	0e 94 57 09 	call	0x12ae	; 0x12ae <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    1696:	81 10       	cpse	r8, r1
    1698:	19 c0       	rjmp	.+50     	; 0x16cc <xQueueGenericReceive+0x8a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    169a:	fa 94       	dec	r15
    169c:	f8 01       	movw	r30, r16
    169e:	f2 8e       	std	Z+26, r15	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    16a0:	80 81       	ld	r24, Z
    16a2:	91 81       	ldd	r25, Z+1	; 0x01
    16a4:	89 2b       	or	r24, r25
    16a6:	29 f4       	brne	.+10     	; 0x16b2 <xQueueGenericReceive+0x70>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    16a8:	0e 94 e5 10 	call	0x21ca	; 0x21ca <pvTaskIncrementMutexHeldCount>
    16ac:	f8 01       	movw	r30, r16
    16ae:	93 83       	std	Z+3, r25	; 0x03
    16b0:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    16b2:	f8 01       	movw	r30, r16
    16b4:	80 85       	ldd	r24, Z+8	; 0x08
    16b6:	88 23       	and	r24, r24
    16b8:	b1 f0       	breq	.+44     	; 0x16e6 <xQueueGenericReceive+0xa4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    16ba:	c8 01       	movw	r24, r16
    16bc:	08 96       	adiw	r24, 0x08	; 8
    16be:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <xTaskRemoveFromEventList>
    16c2:	88 23       	and	r24, r24
    16c4:	81 f0       	breq	.+32     	; 0x16e6 <xQueueGenericReceive+0xa4>
						{
							queueYIELD_IF_USING_PREEMPTION();
    16c6:	0e 94 3f 06 	call	0xc7e	; 0xc7e <vPortYield>
    16ca:	0d c0       	rjmp	.+26     	; 0x16e6 <xQueueGenericReceive+0xa4>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    16cc:	f8 01       	movw	r30, r16
    16ce:	d7 82       	std	Z+7, r13	; 0x07
    16d0:	c6 82       	std	Z+6, r12	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    16d2:	81 89       	ldd	r24, Z+17	; 0x11
    16d4:	88 23       	and	r24, r24
    16d6:	39 f0       	breq	.+14     	; 0x16e6 <xQueueGenericReceive+0xa4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    16d8:	c8 01       	movw	r24, r16
    16da:	41 96       	adiw	r24, 0x11	; 17
    16dc:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <xTaskRemoveFromEventList>
    16e0:	81 11       	cpse	r24, r1
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    16e2:	0e 94 3f 06 	call	0xc7e	; 0xc7e <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    16e6:	0f 90       	pop	r0
    16e8:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	64 c0       	rjmp	.+200    	; 0x17b6 <xQueueGenericReceive+0x174>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    16ee:	4c 81       	ldd	r20, Y+4	; 0x04
    16f0:	5d 81       	ldd	r21, Y+5	; 0x05
    16f2:	45 2b       	or	r20, r21
    16f4:	21 f4       	brne	.+8      	; 0x16fe <xQueueGenericReceive+0xbc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    16f6:	0f 90       	pop	r0
    16f8:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	5c c0       	rjmp	.+184    	; 0x17b6 <xQueueGenericReceive+0x174>
				}
				else if( xEntryTimeSet == pdFALSE )
    16fe:	e1 10       	cpse	r14, r1
    1700:	05 c0       	rjmp	.+10     	; 0x170c <xQueueGenericReceive+0xca>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1702:	ce 01       	movw	r24, r28
    1704:	01 96       	adiw	r24, 0x01	; 1
    1706:	0e 94 02 10 	call	0x2004	; 0x2004 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    170a:	e9 2c       	mov	r14, r9
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    170c:	0f 90       	pop	r0
    170e:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1710:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	0f 92       	push	r0
    171a:	f8 01       	movw	r30, r16
    171c:	85 8d       	ldd	r24, Z+29	; 0x1d
    171e:	8f 3f       	cpi	r24, 0xFF	; 255
    1720:	09 f4       	brne	.+2      	; 0x1724 <xQueueGenericReceive+0xe2>
    1722:	15 8e       	std	Z+29, r1	; 0x1d
    1724:	f8 01       	movw	r30, r16
    1726:	96 8d       	ldd	r25, Z+30	; 0x1e
    1728:	9f 3f       	cpi	r25, 0xFF	; 255
    172a:	09 f4       	brne	.+2      	; 0x172e <xQueueGenericReceive+0xec>
    172c:	16 8e       	std	Z+30, r1	; 0x1e
    172e:	0f 90       	pop	r0
    1730:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1732:	be 01       	movw	r22, r28
    1734:	6c 5f       	subi	r22, 0xFC	; 252
    1736:	7f 4f       	sbci	r23, 0xFF	; 255
    1738:	ce 01       	movw	r24, r28
    173a:	01 96       	adiw	r24, 0x01	; 1
    173c:	0e 94 0d 10 	call	0x201a	; 0x201a <xTaskCheckForTimeOut>
    1740:	81 11       	cpse	r24, r1
    1742:	2b c0       	rjmp	.+86     	; 0x179a <xQueueGenericReceive+0x158>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    174a:	f8 01       	movw	r30, r16
    174c:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    174e:	0f 90       	pop	r0
    1750:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1752:	81 11       	cpse	r24, r1
    1754:	1c c0       	rjmp	.+56     	; 0x178e <xQueueGenericReceive+0x14c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1756:	80 81       	ld	r24, Z
    1758:	91 81       	ldd	r25, Z+1	; 0x01
    175a:	89 2b       	or	r24, r25
    175c:	49 f4       	brne	.+18     	; 0x1770 <xQueueGenericReceive+0x12e>
					{
						taskENTER_CRITICAL();
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    1764:	82 81       	ldd	r24, Z+2	; 0x02
    1766:	93 81       	ldd	r25, Z+3	; 0x03
    1768:	0e 94 43 10 	call	0x2086	; 0x2086 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    176c:	0f 90       	pop	r0
    176e:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1770:	6c 81       	ldd	r22, Y+4	; 0x04
    1772:	7d 81       	ldd	r23, Y+5	; 0x05
    1774:	c6 01       	movw	r24, r12
    1776:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    177a:	c8 01       	movw	r24, r16
    177c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1780:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <xTaskResumeAll>
    1784:	81 11       	cpse	r24, r1
    1786:	7a cf       	rjmp	.-268    	; 0x167c <xQueueGenericReceive+0x3a>
				{
					portYIELD_WITHIN_API();
    1788:	0e 94 3f 06 	call	0xc7e	; 0xc7e <vPortYield>
    178c:	77 cf       	rjmp	.-274    	; 0x167c <xQueueGenericReceive+0x3a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    178e:	c8 01       	movw	r24, r16
    1790:	0e 94 71 09 	call	0x12e2	; 0x12e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1794:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <xTaskResumeAll>
    1798:	71 cf       	rjmp	.-286    	; 0x167c <xQueueGenericReceive+0x3a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    179a:	c8 01       	movw	r24, r16
    179c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    17a0:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <xTaskResumeAll>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    17a4:	0f b6       	in	r0, 0x3f	; 63
    17a6:	f8 94       	cli
    17a8:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    17aa:	f8 01       	movw	r30, r16
    17ac:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    17ae:	0f 90       	pop	r0
    17b0:	0f be       	out	0x3f, r0	; 63
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    17b2:	81 11       	cpse	r24, r1
    17b4:	63 cf       	rjmp	.-314    	; 0x167c <xQueueGenericReceive+0x3a>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	1f 91       	pop	r17
    17c6:	0f 91       	pop	r16
    17c8:	ff 90       	pop	r15
    17ca:	ef 90       	pop	r14
    17cc:	df 90       	pop	r13
    17ce:	cf 90       	pop	r12
    17d0:	bf 90       	pop	r11
    17d2:	af 90       	pop	r10
    17d4:	9f 90       	pop	r9
    17d6:	8f 90       	pop	r8
    17d8:	08 95       	ret

000017da <prvResetNextTaskUnblockTime>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
    17da:	e0 91 8a 07 	lds	r30, 0x078A	; 0x80078a <pxDelayedTaskList>
    17de:	f0 91 8b 07 	lds	r31, 0x078B	; 0x80078b <pxDelayedTaskList+0x1>
    17e2:	80 81       	ld	r24, Z
    17e4:	81 11       	cpse	r24, r1
    17e6:	07 c0       	rjmp	.+14     	; 0x17f6 <prvResetNextTaskUnblockTime+0x1c>
    17e8:	8f ef       	ldi	r24, 0xFF	; 255
    17ea:	9f ef       	ldi	r25, 0xFF	; 255
    17ec:	90 93 6b 07 	sts	0x076B, r25	; 0x80076b <xNextTaskUnblockTime+0x1>
    17f0:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <xNextTaskUnblockTime>
    17f4:	08 95       	ret
    17f6:	e0 91 8a 07 	lds	r30, 0x078A	; 0x80078a <pxDelayedTaskList>
    17fa:	f0 91 8b 07 	lds	r31, 0x078B	; 0x80078b <pxDelayedTaskList+0x1>
    17fe:	05 80       	ldd	r0, Z+5	; 0x05
    1800:	f6 81       	ldd	r31, Z+6	; 0x06
    1802:	e0 2d       	mov	r30, r0
    1804:	06 80       	ldd	r0, Z+6	; 0x06
    1806:	f7 81       	ldd	r31, Z+7	; 0x07
    1808:	e0 2d       	mov	r30, r0
    180a:	82 81       	ldd	r24, Z+2	; 0x02
    180c:	93 81       	ldd	r25, Z+3	; 0x03
    180e:	90 93 6b 07 	sts	0x076B, r25	; 0x80076b <xNextTaskUnblockTime+0x1>
    1812:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <xNextTaskUnblockTime>
    1816:	08 95       	ret

00001818 <prvAddCurrentTaskToDelayedList>:
    1818:	0f 93       	push	r16
    181a:	1f 93       	push	r17
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
    1820:	ec 01       	movw	r28, r24
    1822:	00 91 72 07 	lds	r16, 0x0772	; 0x800772 <xTickCount>
    1826:	10 91 73 07 	lds	r17, 0x0773	; 0x800773 <xTickCount+0x1>
    182a:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    182e:	90 91 c3 07 	lds	r25, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    1832:	02 96       	adiw	r24, 0x02	; 2
    1834:	0e 94 73 05 	call	0xae6	; 0xae6 <uxListRemove>
    1838:	c0 0f       	add	r28, r16
    183a:	d1 1f       	adc	r29, r17
    183c:	e0 91 c2 07 	lds	r30, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    1840:	f0 91 c3 07 	lds	r31, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    1844:	d3 83       	std	Z+3, r29	; 0x03
    1846:	c2 83       	std	Z+2, r28	; 0x02
    1848:	c0 17       	cp	r28, r16
    184a:	d1 07       	cpc	r29, r17
    184c:	68 f4       	brcc	.+26     	; 0x1868 <prvAddCurrentTaskToDelayedList+0x50>
    184e:	60 91 c2 07 	lds	r22, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    1852:	70 91 c3 07 	lds	r23, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    1856:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <pxOverflowDelayedTaskList>
    185a:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <pxOverflowDelayedTaskList+0x1>
    185e:	6e 5f       	subi	r22, 0xFE	; 254
    1860:	7f 4f       	sbci	r23, 0xFF	; 255
    1862:	0e 94 42 05 	call	0xa84	; 0xa84 <vListInsert>
    1866:	17 c0       	rjmp	.+46     	; 0x1896 <prvAddCurrentTaskToDelayedList+0x7e>
    1868:	60 91 c2 07 	lds	r22, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    186c:	70 91 c3 07 	lds	r23, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    1870:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <pxDelayedTaskList>
    1874:	90 91 8b 07 	lds	r25, 0x078B	; 0x80078b <pxDelayedTaskList+0x1>
    1878:	6e 5f       	subi	r22, 0xFE	; 254
    187a:	7f 4f       	sbci	r23, 0xFF	; 255
    187c:	0e 94 42 05 	call	0xa84	; 0xa84 <vListInsert>
    1880:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <xNextTaskUnblockTime>
    1884:	90 91 6b 07 	lds	r25, 0x076B	; 0x80076b <xNextTaskUnblockTime+0x1>
    1888:	c8 17       	cp	r28, r24
    188a:	d9 07       	cpc	r29, r25
    188c:	20 f4       	brcc	.+8      	; 0x1896 <prvAddCurrentTaskToDelayedList+0x7e>
    188e:	d0 93 6b 07 	sts	0x076B, r29	; 0x80076b <xNextTaskUnblockTime+0x1>
    1892:	c0 93 6a 07 	sts	0x076A, r28	; 0x80076a <xNextTaskUnblockTime>
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	1f 91       	pop	r17
    189c:	0f 91       	pop	r16
    189e:	08 95       	ret

000018a0 <xTaskCreate>:
    18a0:	4f 92       	push	r4
    18a2:	5f 92       	push	r5
    18a4:	6f 92       	push	r6
    18a6:	7f 92       	push	r7
    18a8:	8f 92       	push	r8
    18aa:	9f 92       	push	r9
    18ac:	af 92       	push	r10
    18ae:	bf 92       	push	r11
    18b0:	cf 92       	push	r12
    18b2:	df 92       	push	r13
    18b4:	ef 92       	push	r14
    18b6:	ff 92       	push	r15
    18b8:	0f 93       	push	r16
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	4c 01       	movw	r8, r24
    18c0:	eb 01       	movw	r28, r22
    18c2:	6a 01       	movw	r12, r20
    18c4:	29 01       	movw	r4, r18
    18c6:	ca 01       	movw	r24, r20
    18c8:	0e 94 f7 06 	call	0xdee	; 0xdee <pvPortMalloc>
    18cc:	5c 01       	movw	r10, r24
    18ce:	89 2b       	or	r24, r25
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <xTaskCreate+0x34>
    18d2:	ec c0       	rjmp	.+472    	; 0x1aac <xTaskCreate+0x20c>
    18d4:	8c e2       	ldi	r24, 0x2C	; 44
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	0e 94 f7 06 	call	0xdee	; 0xdee <pvPortMalloc>
    18dc:	3c 01       	movw	r6, r24
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	b9 f0       	breq	.+46     	; 0x1910 <xTaskCreate+0x70>
    18e2:	fc 01       	movw	r30, r24
    18e4:	b0 8e       	std	Z+24, r11	; 0x18
    18e6:	a7 8a       	std	Z+23, r10	; 0x17
    18e8:	a6 01       	movw	r20, r12
    18ea:	65 ea       	ldi	r22, 0xA5	; 165
    18ec:	70 e0       	ldi	r23, 0x00	; 0
    18ee:	c5 01       	movw	r24, r10
    18f0:	0e 94 ab 12 	call	0x2556	; 0x2556 <memset>
    18f4:	f1 e0       	ldi	r31, 0x01	; 1
    18f6:	cf 1a       	sub	r12, r31
    18f8:	d1 08       	sbc	r13, r1
    18fa:	f3 01       	movw	r30, r6
    18fc:	87 89       	ldd	r24, Z+23	; 0x17
    18fe:	90 8d       	ldd	r25, Z+24	; 0x18
    1900:	c8 0e       	add	r12, r24
    1902:	d9 1e       	adc	r13, r25
    1904:	88 81       	ld	r24, Y
    1906:	81 8f       	std	Z+25, r24	; 0x19
    1908:	88 81       	ld	r24, Y
    190a:	81 11       	cpse	r24, r1
    190c:	05 c0       	rjmp	.+10     	; 0x1918 <xTaskCreate+0x78>
    190e:	14 c0       	rjmp	.+40     	; 0x1938 <xTaskCreate+0x98>
    1910:	c5 01       	movw	r24, r10
    1912:	0e 94 2c 07 	call	0xe58	; 0xe58 <vPortFree>
    1916:	ca c0       	rjmp	.+404    	; 0x1aac <xTaskCreate+0x20c>
    1918:	d3 01       	movw	r26, r6
    191a:	5a 96       	adiw	r26, 0x1a	; 26
    191c:	fe 01       	movw	r30, r28
    191e:	31 96       	adiw	r30, 0x01	; 1
    1920:	9e 01       	movw	r18, r28
    1922:	28 5f       	subi	r18, 0xF8	; 248
    1924:	3f 4f       	sbci	r19, 0xFF	; 255
    1926:	ef 01       	movw	r28, r30
    1928:	81 91       	ld	r24, Z+
    192a:	8d 93       	st	X+, r24
    192c:	88 81       	ld	r24, Y
    192e:	88 23       	and	r24, r24
    1930:	19 f0       	breq	.+6      	; 0x1938 <xTaskCreate+0x98>
    1932:	e2 17       	cp	r30, r18
    1934:	f3 07       	cpc	r31, r19
    1936:	b9 f7       	brne	.-18     	; 0x1926 <xTaskCreate+0x86>
    1938:	f3 01       	movw	r30, r6
    193a:	10 a2       	std	Z+32, r1	; 0x20
    193c:	04 30       	cpi	r16, 0x04	; 4
    193e:	08 f0       	brcs	.+2      	; 0x1942 <xTaskCreate+0xa2>
    1940:	03 e0       	ldi	r16, 0x03	; 3
    1942:	f3 01       	movw	r30, r6
    1944:	06 8b       	std	Z+22, r16	; 0x16
    1946:	03 a3       	std	Z+35, r16	; 0x23
    1948:	14 a2       	std	Z+36, r1	; 0x24
    194a:	e3 01       	movw	r28, r6
    194c:	22 96       	adiw	r28, 0x02	; 2
    194e:	ce 01       	movw	r24, r28
    1950:	0e 94 1d 05 	call	0xa3a	; 0xa3a <vListInitialiseItem>
    1954:	c3 01       	movw	r24, r6
    1956:	0c 96       	adiw	r24, 0x0c	; 12
    1958:	0e 94 1d 05 	call	0xa3a	; 0xa3a <vListInitialiseItem>
    195c:	f3 01       	movw	r30, r6
    195e:	71 86       	std	Z+9, r7	; 0x09
    1960:	60 86       	std	Z+8, r6	; 0x08
    1962:	84 e0       	ldi	r24, 0x04	; 4
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	80 1b       	sub	r24, r16
    1968:	91 09       	sbc	r25, r1
    196a:	95 87       	std	Z+13, r25	; 0x0d
    196c:	84 87       	std	Z+12, r24	; 0x0c
    196e:	73 8a       	std	Z+19, r7	; 0x13
    1970:	62 8a       	std	Z+18, r6	; 0x12
    1972:	16 a2       	std	Z+38, r1	; 0x26
    1974:	15 a2       	std	Z+37, r1	; 0x25
    1976:	17 a2       	std	Z+39, r1	; 0x27
    1978:	10 a6       	std	Z+40, r1	; 0x28
    197a:	11 a6       	std	Z+41, r1	; 0x29
    197c:	12 a6       	std	Z+42, r1	; 0x2a
    197e:	13 a6       	std	Z+43, r1	; 0x2b
    1980:	a2 01       	movw	r20, r4
    1982:	b4 01       	movw	r22, r8
    1984:	c6 01       	movw	r24, r12
    1986:	0e 94 99 05 	call	0xb32	; 0xb32 <pxPortInitialiseStack>
    198a:	f3 01       	movw	r30, r6
    198c:	91 83       	std	Z+1, r25	; 0x01
    198e:	80 83       	st	Z, r24
    1990:	e1 14       	cp	r14, r1
    1992:	f1 04       	cpc	r15, r1
    1994:	19 f0       	breq	.+6      	; 0x199c <xTaskCreate+0xfc>
    1996:	f7 01       	movw	r30, r14
    1998:	71 82       	std	Z+1, r7	; 0x01
    199a:	60 82       	st	Z, r6
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	0f 92       	push	r0
    19a2:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <uxCurrentNumberOfTasks>
    19a6:	8f 5f       	subi	r24, 0xFF	; 255
    19a8:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <uxCurrentNumberOfTasks>
    19ac:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    19b0:	90 91 c3 07 	lds	r25, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    19b4:	89 2b       	or	r24, r25
    19b6:	a9 f5       	brne	.+106    	; 0x1a22 <xTaskCreate+0x182>
    19b8:	70 92 c3 07 	sts	0x07C3, r7	; 0x8007c3 <pxCurrentTCB+0x1>
    19bc:	60 92 c2 07 	sts	0x07C2, r6	; 0x8007c2 <pxCurrentTCB>
    19c0:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <uxCurrentNumberOfTasks>
    19c4:	81 30       	cpi	r24, 0x01	; 1
    19c6:	f1 f5       	brne	.+124    	; 0x1a44 <xTaskCreate+0x1a4>
    19c8:	8e e9       	ldi	r24, 0x9E	; 158
    19ca:	97 e0       	ldi	r25, 0x07	; 7
    19cc:	0e 94 0f 05 	call	0xa1e	; 0xa1e <vListInitialise>
    19d0:	87 ea       	ldi	r24, 0xA7	; 167
    19d2:	97 e0       	ldi	r25, 0x07	; 7
    19d4:	0e 94 0f 05 	call	0xa1e	; 0xa1e <vListInitialise>
    19d8:	80 eb       	ldi	r24, 0xB0	; 176
    19da:	97 e0       	ldi	r25, 0x07	; 7
    19dc:	0e 94 0f 05 	call	0xa1e	; 0xa1e <vListInitialise>
    19e0:	89 eb       	ldi	r24, 0xB9	; 185
    19e2:	97 e0       	ldi	r25, 0x07	; 7
    19e4:	0e 94 0f 05 	call	0xa1e	; 0xa1e <vListInitialise>
    19e8:	85 e9       	ldi	r24, 0x95	; 149
    19ea:	97 e0       	ldi	r25, 0x07	; 7
    19ec:	0e 94 0f 05 	call	0xa1e	; 0xa1e <vListInitialise>
    19f0:	8c e8       	ldi	r24, 0x8C	; 140
    19f2:	97 e0       	ldi	r25, 0x07	; 7
    19f4:	0e 94 0f 05 	call	0xa1e	; 0xa1e <vListInitialise>
    19f8:	8f e7       	ldi	r24, 0x7F	; 127
    19fa:	97 e0       	ldi	r25, 0x07	; 7
    19fc:	0e 94 0f 05 	call	0xa1e	; 0xa1e <vListInitialise>
    1a00:	86 e7       	ldi	r24, 0x76	; 118
    1a02:	97 e0       	ldi	r25, 0x07	; 7
    1a04:	0e 94 0f 05 	call	0xa1e	; 0xa1e <vListInitialise>
    1a08:	85 e9       	ldi	r24, 0x95	; 149
    1a0a:	97 e0       	ldi	r25, 0x07	; 7
    1a0c:	90 93 8b 07 	sts	0x078B, r25	; 0x80078b <pxDelayedTaskList+0x1>
    1a10:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <pxDelayedTaskList>
    1a14:	8c e8       	ldi	r24, 0x8C	; 140
    1a16:	97 e0       	ldi	r25, 0x07	; 7
    1a18:	90 93 89 07 	sts	0x0789, r25	; 0x800789 <pxOverflowDelayedTaskList+0x1>
    1a1c:	80 93 88 07 	sts	0x0788, r24	; 0x800788 <pxOverflowDelayedTaskList>
    1a20:	11 c0       	rjmp	.+34     	; 0x1a44 <xTaskCreate+0x1a4>
    1a22:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <xSchedulerRunning>
    1a26:	81 11       	cpse	r24, r1
    1a28:	0d c0       	rjmp	.+26     	; 0x1a44 <xTaskCreate+0x1a4>
    1a2a:	e0 91 c2 07 	lds	r30, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    1a2e:	f0 91 c3 07 	lds	r31, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    1a32:	96 89       	ldd	r25, Z+22	; 0x16
    1a34:	f3 01       	movw	r30, r6
    1a36:	86 89       	ldd	r24, Z+22	; 0x16
    1a38:	89 17       	cp	r24, r25
    1a3a:	20 f0       	brcs	.+8      	; 0x1a44 <xTaskCreate+0x1a4>
    1a3c:	70 92 c3 07 	sts	0x07C3, r7	; 0x8007c3 <pxCurrentTCB+0x1>
    1a40:	60 92 c2 07 	sts	0x07C2, r6	; 0x8007c2 <pxCurrentTCB>
    1a44:	80 91 6c 07 	lds	r24, 0x076C	; 0x80076c <uxTaskNumber>
    1a48:	8f 5f       	subi	r24, 0xFF	; 255
    1a4a:	80 93 6c 07 	sts	0x076C, r24	; 0x80076c <uxTaskNumber>
    1a4e:	f3 01       	movw	r30, r6
    1a50:	81 a3       	std	Z+33, r24	; 0x21
    1a52:	86 89       	ldd	r24, Z+22	; 0x16
    1a54:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <uxTopReadyPriority>
    1a58:	98 17       	cp	r25, r24
    1a5a:	10 f4       	brcc	.+4      	; 0x1a60 <xTaskCreate+0x1c0>
    1a5c:	80 93 71 07 	sts	0x0771, r24	; 0x800771 <uxTopReadyPriority>
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	9c 01       	movw	r18, r24
    1a64:	22 0f       	add	r18, r18
    1a66:	33 1f       	adc	r19, r19
    1a68:	22 0f       	add	r18, r18
    1a6a:	33 1f       	adc	r19, r19
    1a6c:	22 0f       	add	r18, r18
    1a6e:	33 1f       	adc	r19, r19
    1a70:	82 0f       	add	r24, r18
    1a72:	93 1f       	adc	r25, r19
    1a74:	be 01       	movw	r22, r28
    1a76:	82 56       	subi	r24, 0x62	; 98
    1a78:	98 4f       	sbci	r25, 0xF8	; 248
    1a7a:	0e 94 21 05 	call	0xa42	; 0xa42 <vListInsertEnd>
    1a7e:	0f 90       	pop	r0
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <xSchedulerRunning>
    1a86:	88 23       	and	r24, r24
    1a88:	69 f0       	breq	.+26     	; 0x1aa4 <xTaskCreate+0x204>
    1a8a:	e0 91 c2 07 	lds	r30, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    1a8e:	f0 91 c3 07 	lds	r31, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    1a92:	96 89       	ldd	r25, Z+22	; 0x16
    1a94:	f3 01       	movw	r30, r6
    1a96:	86 89       	ldd	r24, Z+22	; 0x16
    1a98:	98 17       	cp	r25, r24
    1a9a:	30 f4       	brcc	.+12     	; 0x1aa8 <xTaskCreate+0x208>
    1a9c:	0e 94 3f 06 	call	0xc7e	; 0xc7e <vPortYield>
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	05 c0       	rjmp	.+10     	; 0x1aae <xTaskCreate+0x20e>
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	03 c0       	rjmp	.+6      	; 0x1aae <xTaskCreate+0x20e>
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	01 c0       	rjmp	.+2      	; 0x1aae <xTaskCreate+0x20e>
    1aac:	8f ef       	ldi	r24, 0xFF	; 255
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	0f 91       	pop	r16
    1ab4:	ff 90       	pop	r15
    1ab6:	ef 90       	pop	r14
    1ab8:	df 90       	pop	r13
    1aba:	cf 90       	pop	r12
    1abc:	bf 90       	pop	r11
    1abe:	af 90       	pop	r10
    1ac0:	9f 90       	pop	r9
    1ac2:	8f 90       	pop	r8
    1ac4:	7f 90       	pop	r7
    1ac6:	6f 90       	pop	r6
    1ac8:	5f 90       	pop	r5
    1aca:	4f 90       	pop	r4
    1acc:	08 95       	ret

00001ace <vTaskStartScheduler>:
    1ace:	ef 92       	push	r14
    1ad0:	ff 92       	push	r15
    1ad2:	0f 93       	push	r16
    1ad4:	0f 2e       	mov	r0, r31
    1ad6:	f8 e6       	ldi	r31, 0x68	; 104
    1ad8:	ef 2e       	mov	r14, r31
    1ada:	f7 e0       	ldi	r31, 0x07	; 7
    1adc:	ff 2e       	mov	r15, r31
    1ade:	f0 2d       	mov	r31, r0
    1ae0:	00 e0       	ldi	r16, 0x00	; 0
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	45 e5       	ldi	r20, 0x55	; 85
    1ae8:	50 e0       	ldi	r21, 0x00	; 0
    1aea:	6c e5       	ldi	r22, 0x5C	; 92
    1aec:	71 e0       	ldi	r23, 0x01	; 1
    1aee:	85 ee       	ldi	r24, 0xE5	; 229
    1af0:	9e e0       	ldi	r25, 0x0E	; 14
    1af2:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <xTaskCreate>
    1af6:	81 30       	cpi	r24, 0x01	; 1
    1af8:	81 f4       	brne	.+32     	; 0x1b1a <vTaskStartScheduler+0x4c>
    1afa:	f8 94       	cli
    1afc:	8f ef       	ldi	r24, 0xFF	; 255
    1afe:	9f ef       	ldi	r25, 0xFF	; 255
    1b00:	90 93 6b 07 	sts	0x076B, r25	; 0x80076b <xNextTaskUnblockTime+0x1>
    1b04:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <xNextTaskUnblockTime>
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	80 93 70 07 	sts	0x0770, r24	; 0x800770 <xSchedulerRunning>
    1b0e:	10 92 73 07 	sts	0x0773, r1	; 0x800773 <xTickCount+0x1>
    1b12:	10 92 72 07 	sts	0x0772, r1	; 0x800772 <xTickCount>
    1b16:	0e 94 05 06 	call	0xc0a	; 0xc0a <xPortStartScheduler>
    1b1a:	0f 91       	pop	r16
    1b1c:	ff 90       	pop	r15
    1b1e:	ef 90       	pop	r14
    1b20:	08 95       	ret

00001b22 <vTaskSuspendAll>:
    1b22:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <uxSchedulerSuspended>
    1b26:	8f 5f       	subi	r24, 0xFF	; 255
    1b28:	80 93 67 07 	sts	0x0767, r24	; 0x800767 <uxSchedulerSuspended>
    1b2c:	08 95       	ret

00001b2e <xTaskIncrementTick>:
    1b2e:	cf 92       	push	r12
    1b30:	df 92       	push	r13
    1b32:	ef 92       	push	r14
    1b34:	ff 92       	push	r15
    1b36:	0f 93       	push	r16
    1b38:	1f 93       	push	r17
    1b3a:	cf 93       	push	r28
    1b3c:	df 93       	push	r29
    1b3e:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <uxSchedulerSuspended>
    1b42:	81 11       	cpse	r24, r1
    1b44:	99 c0       	rjmp	.+306    	; 0x1c78 <xTaskIncrementTick+0x14a>
    1b46:	e0 90 72 07 	lds	r14, 0x0772	; 0x800772 <xTickCount>
    1b4a:	f0 90 73 07 	lds	r15, 0x0773	; 0x800773 <xTickCount+0x1>
    1b4e:	8f ef       	ldi	r24, 0xFF	; 255
    1b50:	e8 1a       	sub	r14, r24
    1b52:	f8 0a       	sbc	r15, r24
    1b54:	f0 92 73 07 	sts	0x0773, r15	; 0x800773 <xTickCount+0x1>
    1b58:	e0 92 72 07 	sts	0x0772, r14	; 0x800772 <xTickCount>
    1b5c:	e1 14       	cp	r14, r1
    1b5e:	f1 04       	cpc	r15, r1
    1b60:	b9 f4       	brne	.+46     	; 0x1b90 <xTaskIncrementTick+0x62>
    1b62:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <pxDelayedTaskList>
    1b66:	90 91 8b 07 	lds	r25, 0x078B	; 0x80078b <pxDelayedTaskList+0x1>
    1b6a:	20 91 88 07 	lds	r18, 0x0788	; 0x800788 <pxOverflowDelayedTaskList>
    1b6e:	30 91 89 07 	lds	r19, 0x0789	; 0x800789 <pxOverflowDelayedTaskList+0x1>
    1b72:	30 93 8b 07 	sts	0x078B, r19	; 0x80078b <pxDelayedTaskList+0x1>
    1b76:	20 93 8a 07 	sts	0x078A, r18	; 0x80078a <pxDelayedTaskList>
    1b7a:	90 93 89 07 	sts	0x0789, r25	; 0x800789 <pxOverflowDelayedTaskList+0x1>
    1b7e:	80 93 88 07 	sts	0x0788, r24	; 0x800788 <pxOverflowDelayedTaskList>
    1b82:	80 91 6d 07 	lds	r24, 0x076D	; 0x80076d <xNumOfOverflows>
    1b86:	8f 5f       	subi	r24, 0xFF	; 255
    1b88:	80 93 6d 07 	sts	0x076D, r24	; 0x80076d <xNumOfOverflows>
    1b8c:	0e 94 ed 0b 	call	0x17da	; 0x17da <prvResetNextTaskUnblockTime>
    1b90:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <xNextTaskUnblockTime>
    1b94:	90 91 6b 07 	lds	r25, 0x076B	; 0x80076b <xNextTaskUnblockTime+0x1>
    1b98:	e8 16       	cp	r14, r24
    1b9a:	f9 06       	cpc	r15, r25
    1b9c:	10 f4       	brcc	.+4      	; 0x1ba2 <xTaskIncrementTick+0x74>
    1b9e:	d1 2c       	mov	r13, r1
    1ba0:	53 c0       	rjmp	.+166    	; 0x1c48 <xTaskIncrementTick+0x11a>
    1ba2:	d1 2c       	mov	r13, r1
    1ba4:	cc 24       	eor	r12, r12
    1ba6:	c3 94       	inc	r12
    1ba8:	e0 91 8a 07 	lds	r30, 0x078A	; 0x80078a <pxDelayedTaskList>
    1bac:	f0 91 8b 07 	lds	r31, 0x078B	; 0x80078b <pxDelayedTaskList+0x1>
    1bb0:	90 81       	ld	r25, Z
    1bb2:	91 11       	cpse	r25, r1
    1bb4:	07 c0       	rjmp	.+14     	; 0x1bc4 <xTaskIncrementTick+0x96>
    1bb6:	8f ef       	ldi	r24, 0xFF	; 255
    1bb8:	9f ef       	ldi	r25, 0xFF	; 255
    1bba:	90 93 6b 07 	sts	0x076B, r25	; 0x80076b <xNextTaskUnblockTime+0x1>
    1bbe:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <xNextTaskUnblockTime>
    1bc2:	42 c0       	rjmp	.+132    	; 0x1c48 <xTaskIncrementTick+0x11a>
    1bc4:	e0 91 8a 07 	lds	r30, 0x078A	; 0x80078a <pxDelayedTaskList>
    1bc8:	f0 91 8b 07 	lds	r31, 0x078B	; 0x80078b <pxDelayedTaskList+0x1>
    1bcc:	05 80       	ldd	r0, Z+5	; 0x05
    1bce:	f6 81       	ldd	r31, Z+6	; 0x06
    1bd0:	e0 2d       	mov	r30, r0
    1bd2:	c6 81       	ldd	r28, Z+6	; 0x06
    1bd4:	d7 81       	ldd	r29, Z+7	; 0x07
    1bd6:	2a 81       	ldd	r18, Y+2	; 0x02
    1bd8:	3b 81       	ldd	r19, Y+3	; 0x03
    1bda:	e2 16       	cp	r14, r18
    1bdc:	f3 06       	cpc	r15, r19
    1bde:	28 f4       	brcc	.+10     	; 0x1bea <xTaskIncrementTick+0xbc>
    1be0:	30 93 6b 07 	sts	0x076B, r19	; 0x80076b <xNextTaskUnblockTime+0x1>
    1be4:	20 93 6a 07 	sts	0x076A, r18	; 0x80076a <xNextTaskUnblockTime>
    1be8:	2f c0       	rjmp	.+94     	; 0x1c48 <xTaskIncrementTick+0x11a>
    1bea:	8e 01       	movw	r16, r28
    1bec:	0e 5f       	subi	r16, 0xFE	; 254
    1bee:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf0:	c8 01       	movw	r24, r16
    1bf2:	0e 94 73 05 	call	0xae6	; 0xae6 <uxListRemove>
    1bf6:	8c 89       	ldd	r24, Y+20	; 0x14
    1bf8:	9d 89       	ldd	r25, Y+21	; 0x15
    1bfa:	89 2b       	or	r24, r25
    1bfc:	21 f0       	breq	.+8      	; 0x1c06 <xTaskIncrementTick+0xd8>
    1bfe:	ce 01       	movw	r24, r28
    1c00:	0c 96       	adiw	r24, 0x0c	; 12
    1c02:	0e 94 73 05 	call	0xae6	; 0xae6 <uxListRemove>
    1c06:	2e 89       	ldd	r18, Y+22	; 0x16
    1c08:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <uxTopReadyPriority>
    1c0c:	82 17       	cp	r24, r18
    1c0e:	10 f4       	brcc	.+4      	; 0x1c14 <xTaskIncrementTick+0xe6>
    1c10:	20 93 71 07 	sts	0x0771, r18	; 0x800771 <uxTopReadyPriority>
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	c9 01       	movw	r24, r18
    1c18:	88 0f       	add	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	88 0f       	add	r24, r24
    1c1e:	99 1f       	adc	r25, r25
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	82 0f       	add	r24, r18
    1c26:	93 1f       	adc	r25, r19
    1c28:	b8 01       	movw	r22, r16
    1c2a:	82 56       	subi	r24, 0x62	; 98
    1c2c:	98 4f       	sbci	r25, 0xF8	; 248
    1c2e:	0e 94 21 05 	call	0xa42	; 0xa42 <vListInsertEnd>
    1c32:	e0 91 c2 07 	lds	r30, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    1c36:	f0 91 c3 07 	lds	r31, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    1c3a:	9e 89       	ldd	r25, Y+22	; 0x16
    1c3c:	86 89       	ldd	r24, Z+22	; 0x16
    1c3e:	98 17       	cp	r25, r24
    1c40:	08 f4       	brcc	.+2      	; 0x1c44 <xTaskIncrementTick+0x116>
    1c42:	b2 cf       	rjmp	.-156    	; 0x1ba8 <xTaskIncrementTick+0x7a>
    1c44:	dc 2c       	mov	r13, r12
    1c46:	b0 cf       	rjmp	.-160    	; 0x1ba8 <xTaskIncrementTick+0x7a>
    1c48:	e0 91 c2 07 	lds	r30, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    1c4c:	f0 91 c3 07 	lds	r31, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    1c50:	86 89       	ldd	r24, Z+22	; 0x16
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	fc 01       	movw	r30, r24
    1c56:	ee 0f       	add	r30, r30
    1c58:	ff 1f       	adc	r31, r31
    1c5a:	ee 0f       	add	r30, r30
    1c5c:	ff 1f       	adc	r31, r31
    1c5e:	ee 0f       	add	r30, r30
    1c60:	ff 1f       	adc	r31, r31
    1c62:	8e 0f       	add	r24, r30
    1c64:	9f 1f       	adc	r25, r31
    1c66:	fc 01       	movw	r30, r24
    1c68:	e2 56       	subi	r30, 0x62	; 98
    1c6a:	f8 4f       	sbci	r31, 0xF8	; 248
    1c6c:	80 81       	ld	r24, Z
    1c6e:	82 30       	cpi	r24, 0x02	; 2
    1c70:	48 f0       	brcs	.+18     	; 0x1c84 <xTaskIncrementTick+0x156>
    1c72:	dd 24       	eor	r13, r13
    1c74:	d3 94       	inc	r13
    1c76:	06 c0       	rjmp	.+12     	; 0x1c84 <xTaskIncrementTick+0x156>
    1c78:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <uxPendedTicks>
    1c7c:	8f 5f       	subi	r24, 0xFF	; 255
    1c7e:	80 93 6f 07 	sts	0x076F, r24	; 0x80076f <uxPendedTicks>
    1c82:	d1 2c       	mov	r13, r1
    1c84:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <xYieldPending>
    1c88:	88 23       	and	r24, r24
    1c8a:	11 f0       	breq	.+4      	; 0x1c90 <xTaskIncrementTick+0x162>
    1c8c:	dd 24       	eor	r13, r13
    1c8e:	d3 94       	inc	r13
    1c90:	8d 2d       	mov	r24, r13
    1c92:	df 91       	pop	r29
    1c94:	cf 91       	pop	r28
    1c96:	1f 91       	pop	r17
    1c98:	0f 91       	pop	r16
    1c9a:	ff 90       	pop	r15
    1c9c:	ef 90       	pop	r14
    1c9e:	df 90       	pop	r13
    1ca0:	cf 90       	pop	r12
    1ca2:	08 95       	ret

00001ca4 <xTaskResumeAll>:
    1ca4:	df 92       	push	r13
    1ca6:	ef 92       	push	r14
    1ca8:	ff 92       	push	r15
    1caa:	0f 93       	push	r16
    1cac:	1f 93       	push	r17
    1cae:	cf 93       	push	r28
    1cb0:	df 93       	push	r29
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	0f 92       	push	r0
    1cb8:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <uxSchedulerSuspended>
    1cbc:	81 50       	subi	r24, 0x01	; 1
    1cbe:	80 93 67 07 	sts	0x0767, r24	; 0x800767 <uxSchedulerSuspended>
    1cc2:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <uxSchedulerSuspended>
    1cc6:	81 11       	cpse	r24, r1
    1cc8:	5f c0       	rjmp	.+190    	; 0x1d88 <xTaskResumeAll+0xe4>
    1cca:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <uxCurrentNumberOfTasks>
    1cce:	81 11       	cpse	r24, r1
    1cd0:	33 c0       	rjmp	.+102    	; 0x1d38 <xTaskResumeAll+0x94>
    1cd2:	5d c0       	rjmp	.+186    	; 0x1d8e <xTaskResumeAll+0xea>
    1cd4:	d7 01       	movw	r26, r14
    1cd6:	15 96       	adiw	r26, 0x05	; 5
    1cd8:	ed 91       	ld	r30, X+
    1cda:	fc 91       	ld	r31, X
    1cdc:	16 97       	sbiw	r26, 0x06	; 6
    1cde:	c6 81       	ldd	r28, Z+6	; 0x06
    1ce0:	d7 81       	ldd	r29, Z+7	; 0x07
    1ce2:	ce 01       	movw	r24, r28
    1ce4:	0c 96       	adiw	r24, 0x0c	; 12
    1ce6:	0e 94 73 05 	call	0xae6	; 0xae6 <uxListRemove>
    1cea:	8e 01       	movw	r16, r28
    1cec:	0e 5f       	subi	r16, 0xFE	; 254
    1cee:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf0:	c8 01       	movw	r24, r16
    1cf2:	0e 94 73 05 	call	0xae6	; 0xae6 <uxListRemove>
    1cf6:	2e 89       	ldd	r18, Y+22	; 0x16
    1cf8:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <uxTopReadyPriority>
    1cfc:	82 17       	cp	r24, r18
    1cfe:	10 f4       	brcc	.+4      	; 0x1d04 <xTaskResumeAll+0x60>
    1d00:	20 93 71 07 	sts	0x0771, r18	; 0x800771 <uxTopReadyPriority>
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	c9 01       	movw	r24, r18
    1d08:	88 0f       	add	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	88 0f       	add	r24, r24
    1d0e:	99 1f       	adc	r25, r25
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	82 0f       	add	r24, r18
    1d16:	93 1f       	adc	r25, r19
    1d18:	b8 01       	movw	r22, r16
    1d1a:	82 56       	subi	r24, 0x62	; 98
    1d1c:	98 4f       	sbci	r25, 0xF8	; 248
    1d1e:	0e 94 21 05 	call	0xa42	; 0xa42 <vListInsertEnd>
    1d22:	e0 91 c2 07 	lds	r30, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    1d26:	f0 91 c3 07 	lds	r31, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    1d2a:	9e 89       	ldd	r25, Y+22	; 0x16
    1d2c:	86 89       	ldd	r24, Z+22	; 0x16
    1d2e:	98 17       	cp	r25, r24
    1d30:	68 f0       	brcs	.+26     	; 0x1d4c <xTaskResumeAll+0xa8>
    1d32:	d0 92 6e 07 	sts	0x076E, r13	; 0x80076e <xYieldPending>
    1d36:	0a c0       	rjmp	.+20     	; 0x1d4c <xTaskResumeAll+0xa8>
    1d38:	c0 e0       	ldi	r28, 0x00	; 0
    1d3a:	d0 e0       	ldi	r29, 0x00	; 0
    1d3c:	0f 2e       	mov	r0, r31
    1d3e:	ff e7       	ldi	r31, 0x7F	; 127
    1d40:	ef 2e       	mov	r14, r31
    1d42:	f7 e0       	ldi	r31, 0x07	; 7
    1d44:	ff 2e       	mov	r15, r31
    1d46:	f0 2d       	mov	r31, r0
    1d48:	dd 24       	eor	r13, r13
    1d4a:	d3 94       	inc	r13
    1d4c:	f7 01       	movw	r30, r14
    1d4e:	80 81       	ld	r24, Z
    1d50:	81 11       	cpse	r24, r1
    1d52:	c0 cf       	rjmp	.-128    	; 0x1cd4 <xTaskResumeAll+0x30>
    1d54:	cd 2b       	or	r28, r29
    1d56:	11 f0       	breq	.+4      	; 0x1d5c <xTaskResumeAll+0xb8>
    1d58:	0e 94 ed 0b 	call	0x17da	; 0x17da <prvResetNextTaskUnblockTime>
    1d5c:	c0 91 6f 07 	lds	r28, 0x076F	; 0x80076f <uxPendedTicks>
    1d60:	cc 23       	and	r28, r28
    1d62:	51 f0       	breq	.+20     	; 0x1d78 <xTaskResumeAll+0xd4>
    1d64:	d1 e0       	ldi	r29, 0x01	; 1
    1d66:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <xTaskIncrementTick>
    1d6a:	81 11       	cpse	r24, r1
    1d6c:	d0 93 6e 07 	sts	0x076E, r29	; 0x80076e <xYieldPending>
    1d70:	c1 50       	subi	r28, 0x01	; 1
    1d72:	c9 f7       	brne	.-14     	; 0x1d66 <xTaskResumeAll+0xc2>
    1d74:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <uxPendedTicks>
    1d78:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <xYieldPending>
    1d7c:	88 23       	and	r24, r24
    1d7e:	31 f0       	breq	.+12     	; 0x1d8c <xTaskResumeAll+0xe8>
    1d80:	0e 94 3f 06 	call	0xc7e	; 0xc7e <vPortYield>
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	03 c0       	rjmp	.+6      	; 0x1d8e <xTaskResumeAll+0xea>
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	01 c0       	rjmp	.+2      	; 0x1d8e <xTaskResumeAll+0xea>
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	0f 90       	pop	r0
    1d90:	0f be       	out	0x3f, r0	; 63
    1d92:	df 91       	pop	r29
    1d94:	cf 91       	pop	r28
    1d96:	1f 91       	pop	r17
    1d98:	0f 91       	pop	r16
    1d9a:	ff 90       	pop	r15
    1d9c:	ef 90       	pop	r14
    1d9e:	df 90       	pop	r13
    1da0:	08 95       	ret

00001da2 <vTaskDelay>:
    1da2:	cf 93       	push	r28
    1da4:	df 93       	push	r29
    1da6:	ec 01       	movw	r28, r24
    1da8:	89 2b       	or	r24, r25
    1daa:	51 f0       	breq	.+20     	; 0x1dc0 <vTaskDelay+0x1e>
    1dac:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <vTaskSuspendAll>
    1db0:	60 e0       	ldi	r22, 0x00	; 0
    1db2:	ce 01       	movw	r24, r28
    1db4:	0e 94 0c 0c 	call	0x1818	; 0x1818 <prvAddCurrentTaskToDelayedList>
    1db8:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <xTaskResumeAll>
    1dbc:	81 11       	cpse	r24, r1
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <vTaskDelay+0x22>
    1dc0:	0e 94 3f 06 	call	0xc7e	; 0xc7e <vPortYield>
    1dc4:	df 91       	pop	r29
    1dc6:	cf 91       	pop	r28
    1dc8:	08 95       	ret

00001dca <prvIdleTask>:
    1dca:	06 e7       	ldi	r16, 0x76	; 118
    1dcc:	17 e0       	ldi	r17, 0x07	; 7
    1dce:	0f 2e       	mov	r0, r31
    1dd0:	fe e9       	ldi	r31, 0x9E	; 158
    1dd2:	ef 2e       	mov	r14, r31
    1dd4:	f7 e0       	ldi	r31, 0x07	; 7
    1dd6:	ff 2e       	mov	r15, r31
    1dd8:	f0 2d       	mov	r31, r0
    1dda:	29 c0       	rjmp	.+82     	; 0x1e2e <prvIdleTask+0x64>
    1ddc:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <vTaskSuspendAll>
    1de0:	d8 01       	movw	r26, r16
    1de2:	cc 91       	ld	r28, X
    1de4:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <xTaskResumeAll>
    1de8:	cc 23       	and	r28, r28
    1dea:	09 f1       	breq	.+66     	; 0x1e2e <prvIdleTask+0x64>
    1dec:	0f b6       	in	r0, 0x3f	; 63
    1dee:	f8 94       	cli
    1df0:	0f 92       	push	r0
    1df2:	d8 01       	movw	r26, r16
    1df4:	15 96       	adiw	r26, 0x05	; 5
    1df6:	ed 91       	ld	r30, X+
    1df8:	fc 91       	ld	r31, X
    1dfa:	16 97       	sbiw	r26, 0x06	; 6
    1dfc:	c6 81       	ldd	r28, Z+6	; 0x06
    1dfe:	d7 81       	ldd	r29, Z+7	; 0x07
    1e00:	ce 01       	movw	r24, r28
    1e02:	02 96       	adiw	r24, 0x02	; 2
    1e04:	0e 94 73 05 	call	0xae6	; 0xae6 <uxListRemove>
    1e08:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <uxCurrentNumberOfTasks>
    1e0c:	81 50       	subi	r24, 0x01	; 1
    1e0e:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <uxCurrentNumberOfTasks>
    1e12:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <uxDeletedTasksWaitingCleanUp>
    1e16:	81 50       	subi	r24, 0x01	; 1
    1e18:	80 93 75 07 	sts	0x0775, r24	; 0x800775 <uxDeletedTasksWaitingCleanUp>
    1e1c:	0f 90       	pop	r0
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	8f 89       	ldd	r24, Y+23	; 0x17
    1e22:	98 8d       	ldd	r25, Y+24	; 0x18
    1e24:	0e 94 2c 07 	call	0xe58	; 0xe58 <vPortFree>
    1e28:	ce 01       	movw	r24, r28
    1e2a:	0e 94 2c 07 	call	0xe58	; 0xe58 <vPortFree>
    1e2e:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <uxDeletedTasksWaitingCleanUp>
    1e32:	81 11       	cpse	r24, r1
    1e34:	d3 cf       	rjmp	.-90     	; 0x1ddc <prvIdleTask+0x12>
    1e36:	f7 01       	movw	r30, r14
    1e38:	80 81       	ld	r24, Z
    1e3a:	82 30       	cpi	r24, 0x02	; 2
    1e3c:	10 f0       	brcs	.+4      	; 0x1e42 <prvIdleTask+0x78>
    1e3e:	0e 94 3f 06 	call	0xc7e	; 0xc7e <vPortYield>
    1e42:	0e 94 ee 03 	call	0x7dc	; 0x7dc <vApplicationIdleHook>
    1e46:	f3 cf       	rjmp	.-26     	; 0x1e2e <prvIdleTask+0x64>

00001e48 <vTaskSetApplicationTaskTag>:
    1e48:	00 97       	sbiw	r24, 0x00	; 0
    1e4a:	21 f4       	brne	.+8      	; 0x1e54 <vTaskSetApplicationTaskTag+0xc>
    1e4c:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    1e50:	90 91 c3 07 	lds	r25, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    1e54:	0f b6       	in	r0, 0x3f	; 63
    1e56:	f8 94       	cli
    1e58:	0f 92       	push	r0
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	76 a3       	std	Z+38, r23	; 0x26
    1e5e:	65 a3       	std	Z+37, r22	; 0x25
    1e60:	0f 90       	pop	r0
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	08 95       	ret

00001e66 <vTaskSwitchContext>:
    1e66:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <uxSchedulerSuspended>
    1e6a:	88 23       	and	r24, r24
    1e6c:	21 f0       	breq	.+8      	; 0x1e76 <vTaskSwitchContext+0x10>
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <xYieldPending>
    1e74:	08 95       	ret
    1e76:	10 92 6e 07 	sts	0x076E, r1	; 0x80076e <xYieldPending>
    1e7a:	e0 91 c2 07 	lds	r30, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    1e7e:	f0 91 c3 07 	lds	r31, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    1e82:	85 a1       	ldd	r24, Z+37	; 0x25
    1e84:	0e 94 c8 04 	call	0x990	; 0x990 <switch_out>
    1e88:	20 91 71 07 	lds	r18, 0x0771	; 0x800771 <uxTopReadyPriority>
    1e8c:	82 2f       	mov	r24, r18
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	fc 01       	movw	r30, r24
    1e92:	ee 0f       	add	r30, r30
    1e94:	ff 1f       	adc	r31, r31
    1e96:	ee 0f       	add	r30, r30
    1e98:	ff 1f       	adc	r31, r31
    1e9a:	ee 0f       	add	r30, r30
    1e9c:	ff 1f       	adc	r31, r31
    1e9e:	e8 0f       	add	r30, r24
    1ea0:	f9 1f       	adc	r31, r25
    1ea2:	e2 56       	subi	r30, 0x62	; 98
    1ea4:	f8 4f       	sbci	r31, 0xF8	; 248
    1ea6:	30 81       	ld	r19, Z
    1ea8:	31 11       	cpse	r19, r1
    1eaa:	11 c0       	rjmp	.+34     	; 0x1ece <vTaskSwitchContext+0x68>
    1eac:	21 50       	subi	r18, 0x01	; 1
    1eae:	82 2f       	mov	r24, r18
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	fc 01       	movw	r30, r24
    1eb4:	ee 0f       	add	r30, r30
    1eb6:	ff 1f       	adc	r31, r31
    1eb8:	ee 0f       	add	r30, r30
    1eba:	ff 1f       	adc	r31, r31
    1ebc:	ee 0f       	add	r30, r30
    1ebe:	ff 1f       	adc	r31, r31
    1ec0:	e8 0f       	add	r30, r24
    1ec2:	f9 1f       	adc	r31, r25
    1ec4:	e2 56       	subi	r30, 0x62	; 98
    1ec6:	f8 4f       	sbci	r31, 0xF8	; 248
    1ec8:	30 81       	ld	r19, Z
    1eca:	33 23       	and	r19, r19
    1ecc:	79 f3       	breq	.-34     	; 0x1eac <vTaskSwitchContext+0x46>
    1ece:	ac 01       	movw	r20, r24
    1ed0:	44 0f       	add	r20, r20
    1ed2:	55 1f       	adc	r21, r21
    1ed4:	44 0f       	add	r20, r20
    1ed6:	55 1f       	adc	r21, r21
    1ed8:	44 0f       	add	r20, r20
    1eda:	55 1f       	adc	r21, r21
    1edc:	48 0f       	add	r20, r24
    1ede:	59 1f       	adc	r21, r25
    1ee0:	da 01       	movw	r26, r20
    1ee2:	a2 56       	subi	r26, 0x62	; 98
    1ee4:	b8 4f       	sbci	r27, 0xF8	; 248
    1ee6:	11 96       	adiw	r26, 0x01	; 1
    1ee8:	ed 91       	ld	r30, X+
    1eea:	fc 91       	ld	r31, X
    1eec:	12 97       	sbiw	r26, 0x02	; 2
    1eee:	02 80       	ldd	r0, Z+2	; 0x02
    1ef0:	f3 81       	ldd	r31, Z+3	; 0x03
    1ef2:	e0 2d       	mov	r30, r0
    1ef4:	12 96       	adiw	r26, 0x02	; 2
    1ef6:	fc 93       	st	X, r31
    1ef8:	ee 93       	st	-X, r30
    1efa:	11 97       	sbiw	r26, 0x01	; 1
    1efc:	4f 55       	subi	r20, 0x5F	; 95
    1efe:	58 4f       	sbci	r21, 0xF8	; 248
    1f00:	e4 17       	cp	r30, r20
    1f02:	f5 07       	cpc	r31, r21
    1f04:	29 f4       	brne	.+10     	; 0x1f10 <vTaskSwitchContext+0xaa>
    1f06:	42 81       	ldd	r20, Z+2	; 0x02
    1f08:	53 81       	ldd	r21, Z+3	; 0x03
    1f0a:	fd 01       	movw	r30, r26
    1f0c:	52 83       	std	Z+2, r21	; 0x02
    1f0e:	41 83       	std	Z+1, r20	; 0x01
    1f10:	fc 01       	movw	r30, r24
    1f12:	ee 0f       	add	r30, r30
    1f14:	ff 1f       	adc	r31, r31
    1f16:	ee 0f       	add	r30, r30
    1f18:	ff 1f       	adc	r31, r31
    1f1a:	ee 0f       	add	r30, r30
    1f1c:	ff 1f       	adc	r31, r31
    1f1e:	8e 0f       	add	r24, r30
    1f20:	9f 1f       	adc	r25, r31
    1f22:	fc 01       	movw	r30, r24
    1f24:	e2 56       	subi	r30, 0x62	; 98
    1f26:	f8 4f       	sbci	r31, 0xF8	; 248
    1f28:	01 80       	ldd	r0, Z+1	; 0x01
    1f2a:	f2 81       	ldd	r31, Z+2	; 0x02
    1f2c:	e0 2d       	mov	r30, r0
    1f2e:	86 81       	ldd	r24, Z+6	; 0x06
    1f30:	97 81       	ldd	r25, Z+7	; 0x07
    1f32:	90 93 c3 07 	sts	0x07C3, r25	; 0x8007c3 <pxCurrentTCB+0x1>
    1f36:	80 93 c2 07 	sts	0x07C2, r24	; 0x8007c2 <pxCurrentTCB>
    1f3a:	20 93 71 07 	sts	0x0771, r18	; 0x800771 <uxTopReadyPriority>
    1f3e:	e0 91 c2 07 	lds	r30, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    1f42:	f0 91 c3 07 	lds	r31, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    1f46:	85 a1       	ldd	r24, Z+37	; 0x25
    1f48:	0e 94 bd 04 	call	0x97a	; 0x97a <switch_in>
    1f4c:	08 95       	ret

00001f4e <vTaskPlaceOnEventList>:
    1f4e:	cf 93       	push	r28
    1f50:	df 93       	push	r29
    1f52:	eb 01       	movw	r28, r22
    1f54:	20 91 c2 07 	lds	r18, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    1f58:	30 91 c3 07 	lds	r19, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    1f5c:	b9 01       	movw	r22, r18
    1f5e:	64 5f       	subi	r22, 0xF4	; 244
    1f60:	7f 4f       	sbci	r23, 0xFF	; 255
    1f62:	0e 94 42 05 	call	0xa84	; 0xa84 <vListInsert>
    1f66:	61 e0       	ldi	r22, 0x01	; 1
    1f68:	ce 01       	movw	r24, r28
    1f6a:	0e 94 0c 0c 	call	0x1818	; 0x1818 <prvAddCurrentTaskToDelayedList>
    1f6e:	df 91       	pop	r29
    1f70:	cf 91       	pop	r28
    1f72:	08 95       	ret

00001f74 <xTaskRemoveFromEventList>:
    1f74:	0f 93       	push	r16
    1f76:	1f 93       	push	r17
    1f78:	cf 93       	push	r28
    1f7a:	df 93       	push	r29
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	15 96       	adiw	r26, 0x05	; 5
    1f80:	ed 91       	ld	r30, X+
    1f82:	fc 91       	ld	r31, X
    1f84:	16 97       	sbiw	r26, 0x06	; 6
    1f86:	c6 81       	ldd	r28, Z+6	; 0x06
    1f88:	d7 81       	ldd	r29, Z+7	; 0x07
    1f8a:	8e 01       	movw	r16, r28
    1f8c:	04 5f       	subi	r16, 0xF4	; 244
    1f8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f90:	c8 01       	movw	r24, r16
    1f92:	0e 94 73 05 	call	0xae6	; 0xae6 <uxListRemove>
    1f96:	80 91 67 07 	lds	r24, 0x0767	; 0x800767 <uxSchedulerSuspended>
    1f9a:	81 11       	cpse	r24, r1
    1f9c:	1c c0       	rjmp	.+56     	; 0x1fd6 <xTaskRemoveFromEventList+0x62>
    1f9e:	0a 50       	subi	r16, 0x0A	; 10
    1fa0:	11 09       	sbc	r17, r1
    1fa2:	c8 01       	movw	r24, r16
    1fa4:	0e 94 73 05 	call	0xae6	; 0xae6 <uxListRemove>
    1fa8:	2e 89       	ldd	r18, Y+22	; 0x16
    1faa:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <uxTopReadyPriority>
    1fae:	82 17       	cp	r24, r18
    1fb0:	10 f4       	brcc	.+4      	; 0x1fb6 <xTaskRemoveFromEventList+0x42>
    1fb2:	20 93 71 07 	sts	0x0771, r18	; 0x800771 <uxTopReadyPriority>
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	c9 01       	movw	r24, r18
    1fba:	88 0f       	add	r24, r24
    1fbc:	99 1f       	adc	r25, r25
    1fbe:	88 0f       	add	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	88 0f       	add	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	82 0f       	add	r24, r18
    1fc8:	93 1f       	adc	r25, r19
    1fca:	b8 01       	movw	r22, r16
    1fcc:	82 56       	subi	r24, 0x62	; 98
    1fce:	98 4f       	sbci	r25, 0xF8	; 248
    1fd0:	0e 94 21 05 	call	0xa42	; 0xa42 <vListInsertEnd>
    1fd4:	05 c0       	rjmp	.+10     	; 0x1fe0 <xTaskRemoveFromEventList+0x6c>
    1fd6:	b8 01       	movw	r22, r16
    1fd8:	8f e7       	ldi	r24, 0x7F	; 127
    1fda:	97 e0       	ldi	r25, 0x07	; 7
    1fdc:	0e 94 21 05 	call	0xa42	; 0xa42 <vListInsertEnd>
    1fe0:	e0 91 c2 07 	lds	r30, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    1fe4:	f0 91 c3 07 	lds	r31, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    1fe8:	9e 89       	ldd	r25, Y+22	; 0x16
    1fea:	86 89       	ldd	r24, Z+22	; 0x16
    1fec:	89 17       	cp	r24, r25
    1fee:	20 f4       	brcc	.+8      	; 0x1ff8 <xTaskRemoveFromEventList+0x84>
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <xYieldPending>
    1ff6:	01 c0       	rjmp	.+2      	; 0x1ffa <xTaskRemoveFromEventList+0x86>
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	df 91       	pop	r29
    1ffc:	cf 91       	pop	r28
    1ffe:	1f 91       	pop	r17
    2000:	0f 91       	pop	r16
    2002:	08 95       	ret

00002004 <vTaskSetTimeOutState>:
    2004:	20 91 6d 07 	lds	r18, 0x076D	; 0x80076d <xNumOfOverflows>
    2008:	fc 01       	movw	r30, r24
    200a:	20 83       	st	Z, r18
    200c:	20 91 72 07 	lds	r18, 0x0772	; 0x800772 <xTickCount>
    2010:	30 91 73 07 	lds	r19, 0x0773	; 0x800773 <xTickCount+0x1>
    2014:	32 83       	std	Z+2, r19	; 0x02
    2016:	21 83       	std	Z+1, r18	; 0x01
    2018:	08 95       	ret

0000201a <xTaskCheckForTimeOut>:
    201a:	cf 93       	push	r28
    201c:	df 93       	push	r29
    201e:	fc 01       	movw	r30, r24
    2020:	0f b6       	in	r0, 0x3f	; 63
    2022:	f8 94       	cli
    2024:	0f 92       	push	r0
    2026:	20 91 72 07 	lds	r18, 0x0772	; 0x800772 <xTickCount>
    202a:	30 91 73 07 	lds	r19, 0x0773	; 0x800773 <xTickCount+0x1>
    202e:	80 91 6d 07 	lds	r24, 0x076D	; 0x80076d <xNumOfOverflows>
    2032:	90 81       	ld	r25, Z
    2034:	98 17       	cp	r25, r24
    2036:	29 f0       	breq	.+10     	; 0x2042 <xTaskCheckForTimeOut+0x28>
    2038:	81 81       	ldd	r24, Z+1	; 0x01
    203a:	92 81       	ldd	r25, Z+2	; 0x02
    203c:	28 17       	cp	r18, r24
    203e:	39 07       	cpc	r19, r25
    2040:	b0 f4       	brcc	.+44     	; 0x206e <xTaskCheckForTimeOut+0x54>
    2042:	a1 81       	ldd	r26, Z+1	; 0x01
    2044:	b2 81       	ldd	r27, Z+2	; 0x02
    2046:	eb 01       	movw	r28, r22
    2048:	48 81       	ld	r20, Y
    204a:	59 81       	ldd	r21, Y+1	; 0x01
    204c:	c9 01       	movw	r24, r18
    204e:	8a 1b       	sub	r24, r26
    2050:	9b 0b       	sbc	r25, r27
    2052:	84 17       	cp	r24, r20
    2054:	95 07       	cpc	r25, r21
    2056:	68 f4       	brcc	.+26     	; 0x2072 <xTaskCheckForTimeOut+0x58>
    2058:	cf 01       	movw	r24, r30
    205a:	a2 1b       	sub	r26, r18
    205c:	b3 0b       	sbc	r27, r19
    205e:	4a 0f       	add	r20, r26
    2060:	5b 1f       	adc	r21, r27
    2062:	59 83       	std	Y+1, r21	; 0x01
    2064:	48 83       	st	Y, r20
    2066:	0e 94 02 10 	call	0x2004	; 0x2004 <vTaskSetTimeOutState>
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	03 c0       	rjmp	.+6      	; 0x2074 <xTaskCheckForTimeOut+0x5a>
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	01 c0       	rjmp	.+2      	; 0x2074 <xTaskCheckForTimeOut+0x5a>
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	0f 90       	pop	r0
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	df 91       	pop	r29
    207a:	cf 91       	pop	r28
    207c:	08 95       	ret

0000207e <vTaskMissedYield>:
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <xYieldPending>
    2084:	08 95       	ret

00002086 <vTaskPriorityInherit>:
    2086:	0f 93       	push	r16
    2088:	1f 93       	push	r17
    208a:	cf 93       	push	r28
    208c:	df 93       	push	r29
    208e:	fc 01       	movw	r30, r24
    2090:	89 2b       	or	r24, r25
    2092:	09 f4       	brne	.+2      	; 0x2096 <vTaskPriorityInherit+0x10>
    2094:	55 c0       	rjmp	.+170    	; 0x2140 <vTaskPriorityInherit+0xba>
    2096:	26 89       	ldd	r18, Z+22	; 0x16
    2098:	a0 91 c2 07 	lds	r26, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    209c:	b0 91 c3 07 	lds	r27, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    20a0:	56 96       	adiw	r26, 0x16	; 22
    20a2:	8c 91       	ld	r24, X
    20a4:	28 17       	cp	r18, r24
    20a6:	08 f0       	brcs	.+2      	; 0x20aa <vTaskPriorityInherit+0x24>
    20a8:	4b c0       	rjmp	.+150    	; 0x2140 <vTaskPriorityInherit+0xba>
    20aa:	84 85       	ldd	r24, Z+12	; 0x0c
    20ac:	95 85       	ldd	r25, Z+13	; 0x0d
    20ae:	99 23       	and	r25, r25
    20b0:	64 f0       	brlt	.+24     	; 0x20ca <vTaskPriorityInherit+0x44>
    20b2:	a0 91 c2 07 	lds	r26, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    20b6:	b0 91 c3 07 	lds	r27, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    20ba:	56 96       	adiw	r26, 0x16	; 22
    20bc:	3c 91       	ld	r19, X
    20be:	84 e0       	ldi	r24, 0x04	; 4
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	83 1b       	sub	r24, r19
    20c4:	91 09       	sbc	r25, r1
    20c6:	95 87       	std	Z+13, r25	; 0x0d
    20c8:	84 87       	std	Z+12, r24	; 0x0c
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	c9 01       	movw	r24, r18
    20ce:	88 0f       	add	r24, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	88 0f       	add	r24, r24
    20d4:	99 1f       	adc	r25, r25
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	28 0f       	add	r18, r24
    20dc:	39 1f       	adc	r19, r25
    20de:	22 56       	subi	r18, 0x62	; 98
    20e0:	38 4f       	sbci	r19, 0xF8	; 248
    20e2:	82 85       	ldd	r24, Z+10	; 0x0a
    20e4:	93 85       	ldd	r25, Z+11	; 0x0b
    20e6:	82 17       	cp	r24, r18
    20e8:	93 07       	cpc	r25, r19
    20ea:	19 f5       	brne	.+70     	; 0x2132 <vTaskPriorityInherit+0xac>
    20ec:	8f 01       	movw	r16, r30
    20ee:	ef 01       	movw	r28, r30
    20f0:	22 96       	adiw	r28, 0x02	; 2
    20f2:	ce 01       	movw	r24, r28
    20f4:	0e 94 73 05 	call	0xae6	; 0xae6 <uxListRemove>
    20f8:	e0 91 c2 07 	lds	r30, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    20fc:	f0 91 c3 07 	lds	r31, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    2100:	26 89       	ldd	r18, Z+22	; 0x16
    2102:	f8 01       	movw	r30, r16
    2104:	26 8b       	std	Z+22, r18	; 0x16
    2106:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <uxTopReadyPriority>
    210a:	82 17       	cp	r24, r18
    210c:	10 f4       	brcc	.+4      	; 0x2112 <vTaskPriorityInherit+0x8c>
    210e:	20 93 71 07 	sts	0x0771, r18	; 0x800771 <uxTopReadyPriority>
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	c9 01       	movw	r24, r18
    2116:	88 0f       	add	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	88 0f       	add	r24, r24
    211c:	99 1f       	adc	r25, r25
    211e:	88 0f       	add	r24, r24
    2120:	99 1f       	adc	r25, r25
    2122:	82 0f       	add	r24, r18
    2124:	93 1f       	adc	r25, r19
    2126:	be 01       	movw	r22, r28
    2128:	82 56       	subi	r24, 0x62	; 98
    212a:	98 4f       	sbci	r25, 0xF8	; 248
    212c:	0e 94 21 05 	call	0xa42	; 0xa42 <vListInsertEnd>
    2130:	07 c0       	rjmp	.+14     	; 0x2140 <vTaskPriorityInherit+0xba>
    2132:	a0 91 c2 07 	lds	r26, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    2136:	b0 91 c3 07 	lds	r27, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    213a:	56 96       	adiw	r26, 0x16	; 22
    213c:	8c 91       	ld	r24, X
    213e:	86 8b       	std	Z+22, r24	; 0x16
    2140:	df 91       	pop	r29
    2142:	cf 91       	pop	r28
    2144:	1f 91       	pop	r17
    2146:	0f 91       	pop	r16
    2148:	08 95       	ret

0000214a <xTaskPriorityDisinherit>:
    214a:	0f 93       	push	r16
    214c:	1f 93       	push	r17
    214e:	cf 93       	push	r28
    2150:	df 93       	push	r29
    2152:	fc 01       	movw	r30, r24
    2154:	89 2b       	or	r24, r25
    2156:	79 f1       	breq	.+94     	; 0x21b6 <xTaskPriorityDisinherit+0x6c>
    2158:	84 a1       	ldd	r24, Z+36	; 0x24
    215a:	81 50       	subi	r24, 0x01	; 1
    215c:	84 a3       	std	Z+36, r24	; 0x24
    215e:	26 89       	ldd	r18, Z+22	; 0x16
    2160:	93 a1       	ldd	r25, Z+35	; 0x23
    2162:	29 17       	cp	r18, r25
    2164:	51 f1       	breq	.+84     	; 0x21ba <xTaskPriorityDisinherit+0x70>
    2166:	81 11       	cpse	r24, r1
    2168:	2a c0       	rjmp	.+84     	; 0x21be <xTaskPriorityDisinherit+0x74>
    216a:	ef 01       	movw	r28, r30
    216c:	8f 01       	movw	r16, r30
    216e:	0e 5f       	subi	r16, 0xFE	; 254
    2170:	1f 4f       	sbci	r17, 0xFF	; 255
    2172:	c8 01       	movw	r24, r16
    2174:	0e 94 73 05 	call	0xae6	; 0xae6 <uxListRemove>
    2178:	2b a1       	ldd	r18, Y+35	; 0x23
    217a:	2e 8b       	std	Y+22, r18	; 0x16
    217c:	44 e0       	ldi	r20, 0x04	; 4
    217e:	50 e0       	ldi	r21, 0x00	; 0
    2180:	42 1b       	sub	r20, r18
    2182:	51 09       	sbc	r21, r1
    2184:	5d 87       	std	Y+13, r21	; 0x0d
    2186:	4c 87       	std	Y+12, r20	; 0x0c
    2188:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <uxTopReadyPriority>
    218c:	82 17       	cp	r24, r18
    218e:	10 f4       	brcc	.+4      	; 0x2194 <xTaskPriorityDisinherit+0x4a>
    2190:	20 93 71 07 	sts	0x0771, r18	; 0x800771 <uxTopReadyPriority>
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	c9 01       	movw	r24, r18
    2198:	88 0f       	add	r24, r24
    219a:	99 1f       	adc	r25, r25
    219c:	88 0f       	add	r24, r24
    219e:	99 1f       	adc	r25, r25
    21a0:	88 0f       	add	r24, r24
    21a2:	99 1f       	adc	r25, r25
    21a4:	82 0f       	add	r24, r18
    21a6:	93 1f       	adc	r25, r19
    21a8:	b8 01       	movw	r22, r16
    21aa:	82 56       	subi	r24, 0x62	; 98
    21ac:	98 4f       	sbci	r25, 0xF8	; 248
    21ae:	0e 94 21 05 	call	0xa42	; 0xa42 <vListInsertEnd>
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	05 c0       	rjmp	.+10     	; 0x21c0 <xTaskPriorityDisinherit+0x76>
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	03 c0       	rjmp	.+6      	; 0x21c0 <xTaskPriorityDisinherit+0x76>
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	01 c0       	rjmp	.+2      	; 0x21c0 <xTaskPriorityDisinherit+0x76>
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	df 91       	pop	r29
    21c2:	cf 91       	pop	r28
    21c4:	1f 91       	pop	r17
    21c6:	0f 91       	pop	r16
    21c8:	08 95       	ret

000021ca <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    21ca:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    21ce:	90 91 c3 07 	lds	r25, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    21d2:	89 2b       	or	r24, r25
    21d4:	39 f0       	breq	.+14     	; 0x21e4 <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    21d6:	e0 91 c2 07 	lds	r30, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    21da:	f0 91 c3 07 	lds	r31, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
    21de:	84 a1       	ldd	r24, Z+36	; 0x24
    21e0:	8f 5f       	subi	r24, 0xFF	; 255
    21e2:	84 a3       	std	Z+36, r24	; 0x24
		}

		return pxCurrentTCB;
    21e4:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <pxCurrentTCB>
    21e8:	90 91 c3 07 	lds	r25, 0x07C3	; 0x8007c3 <pxCurrentTCB+0x1>
	}
    21ec:	08 95       	ret

000021ee <__udivmodsi4>:
    21ee:	a1 e2       	ldi	r26, 0x21	; 33
    21f0:	1a 2e       	mov	r1, r26
    21f2:	aa 1b       	sub	r26, r26
    21f4:	bb 1b       	sub	r27, r27
    21f6:	fd 01       	movw	r30, r26
    21f8:	0d c0       	rjmp	.+26     	; 0x2214 <__udivmodsi4_ep>

000021fa <__udivmodsi4_loop>:
    21fa:	aa 1f       	adc	r26, r26
    21fc:	bb 1f       	adc	r27, r27
    21fe:	ee 1f       	adc	r30, r30
    2200:	ff 1f       	adc	r31, r31
    2202:	a2 17       	cp	r26, r18
    2204:	b3 07       	cpc	r27, r19
    2206:	e4 07       	cpc	r30, r20
    2208:	f5 07       	cpc	r31, r21
    220a:	20 f0       	brcs	.+8      	; 0x2214 <__udivmodsi4_ep>
    220c:	a2 1b       	sub	r26, r18
    220e:	b3 0b       	sbc	r27, r19
    2210:	e4 0b       	sbc	r30, r20
    2212:	f5 0b       	sbc	r31, r21

00002214 <__udivmodsi4_ep>:
    2214:	66 1f       	adc	r22, r22
    2216:	77 1f       	adc	r23, r23
    2218:	88 1f       	adc	r24, r24
    221a:	99 1f       	adc	r25, r25
    221c:	1a 94       	dec	r1
    221e:	69 f7       	brne	.-38     	; 0x21fa <__udivmodsi4_loop>
    2220:	60 95       	com	r22
    2222:	70 95       	com	r23
    2224:	80 95       	com	r24
    2226:	90 95       	com	r25
    2228:	9b 01       	movw	r18, r22
    222a:	ac 01       	movw	r20, r24
    222c:	bd 01       	movw	r22, r26
    222e:	cf 01       	movw	r24, r30
    2230:	08 95       	ret

00002232 <malloc>:
    2232:	cf 93       	push	r28
    2234:	df 93       	push	r29
    2236:	82 30       	cpi	r24, 0x02	; 2
    2238:	91 05       	cpc	r25, r1
    223a:	10 f4       	brcc	.+4      	; 0x2240 <malloc+0xe>
    223c:	82 e0       	ldi	r24, 0x02	; 2
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	e0 91 c6 07 	lds	r30, 0x07C6	; 0x8007c6 <__flp>
    2244:	f0 91 c7 07 	lds	r31, 0x07C7	; 0x8007c7 <__flp+0x1>
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	c0 e0       	ldi	r28, 0x00	; 0
    224e:	d0 e0       	ldi	r29, 0x00	; 0
    2250:	30 97       	sbiw	r30, 0x00	; 0
    2252:	11 f1       	breq	.+68     	; 0x2298 <malloc+0x66>
    2254:	40 81       	ld	r20, Z
    2256:	51 81       	ldd	r21, Z+1	; 0x01
    2258:	48 17       	cp	r20, r24
    225a:	59 07       	cpc	r21, r25
    225c:	c0 f0       	brcs	.+48     	; 0x228e <malloc+0x5c>
    225e:	48 17       	cp	r20, r24
    2260:	59 07       	cpc	r21, r25
    2262:	61 f4       	brne	.+24     	; 0x227c <malloc+0x4a>
    2264:	82 81       	ldd	r24, Z+2	; 0x02
    2266:	93 81       	ldd	r25, Z+3	; 0x03
    2268:	20 97       	sbiw	r28, 0x00	; 0
    226a:	19 f0       	breq	.+6      	; 0x2272 <malloc+0x40>
    226c:	9b 83       	std	Y+3, r25	; 0x03
    226e:	8a 83       	std	Y+2, r24	; 0x02
    2270:	2b c0       	rjmp	.+86     	; 0x22c8 <malloc+0x96>
    2272:	90 93 c7 07 	sts	0x07C7, r25	; 0x8007c7 <__flp+0x1>
    2276:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__flp>
    227a:	26 c0       	rjmp	.+76     	; 0x22c8 <malloc+0x96>
    227c:	21 15       	cp	r18, r1
    227e:	31 05       	cpc	r19, r1
    2280:	19 f0       	breq	.+6      	; 0x2288 <malloc+0x56>
    2282:	42 17       	cp	r20, r18
    2284:	53 07       	cpc	r21, r19
    2286:	18 f4       	brcc	.+6      	; 0x228e <malloc+0x5c>
    2288:	9a 01       	movw	r18, r20
    228a:	be 01       	movw	r22, r28
    228c:	df 01       	movw	r26, r30
    228e:	ef 01       	movw	r28, r30
    2290:	02 80       	ldd	r0, Z+2	; 0x02
    2292:	f3 81       	ldd	r31, Z+3	; 0x03
    2294:	e0 2d       	mov	r30, r0
    2296:	dc cf       	rjmp	.-72     	; 0x2250 <malloc+0x1e>
    2298:	21 15       	cp	r18, r1
    229a:	31 05       	cpc	r19, r1
    229c:	09 f1       	breq	.+66     	; 0x22e0 <malloc+0xae>
    229e:	28 1b       	sub	r18, r24
    22a0:	39 0b       	sbc	r19, r25
    22a2:	24 30       	cpi	r18, 0x04	; 4
    22a4:	31 05       	cpc	r19, r1
    22a6:	90 f4       	brcc	.+36     	; 0x22cc <malloc+0x9a>
    22a8:	12 96       	adiw	r26, 0x02	; 2
    22aa:	8d 91       	ld	r24, X+
    22ac:	9c 91       	ld	r25, X
    22ae:	13 97       	sbiw	r26, 0x03	; 3
    22b0:	61 15       	cp	r22, r1
    22b2:	71 05       	cpc	r23, r1
    22b4:	21 f0       	breq	.+8      	; 0x22be <malloc+0x8c>
    22b6:	fb 01       	movw	r30, r22
    22b8:	93 83       	std	Z+3, r25	; 0x03
    22ba:	82 83       	std	Z+2, r24	; 0x02
    22bc:	04 c0       	rjmp	.+8      	; 0x22c6 <malloc+0x94>
    22be:	90 93 c7 07 	sts	0x07C7, r25	; 0x8007c7 <__flp+0x1>
    22c2:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <__flp>
    22c6:	fd 01       	movw	r30, r26
    22c8:	32 96       	adiw	r30, 0x02	; 2
    22ca:	44 c0       	rjmp	.+136    	; 0x2354 <malloc+0x122>
    22cc:	fd 01       	movw	r30, r26
    22ce:	e2 0f       	add	r30, r18
    22d0:	f3 1f       	adc	r31, r19
    22d2:	81 93       	st	Z+, r24
    22d4:	91 93       	st	Z+, r25
    22d6:	22 50       	subi	r18, 0x02	; 2
    22d8:	31 09       	sbc	r19, r1
    22da:	2d 93       	st	X+, r18
    22dc:	3c 93       	st	X, r19
    22de:	3a c0       	rjmp	.+116    	; 0x2354 <malloc+0x122>
    22e0:	20 91 c4 07 	lds	r18, 0x07C4	; 0x8007c4 <__brkval>
    22e4:	30 91 c5 07 	lds	r19, 0x07C5	; 0x8007c5 <__brkval+0x1>
    22e8:	23 2b       	or	r18, r19
    22ea:	41 f4       	brne	.+16     	; 0x22fc <malloc+0xca>
    22ec:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    22f0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    22f4:	30 93 c5 07 	sts	0x07C5, r19	; 0x8007c5 <__brkval+0x1>
    22f8:	20 93 c4 07 	sts	0x07C4, r18	; 0x8007c4 <__brkval>
    22fc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2300:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2304:	21 15       	cp	r18, r1
    2306:	31 05       	cpc	r19, r1
    2308:	41 f4       	brne	.+16     	; 0x231a <malloc+0xe8>
    230a:	2d b7       	in	r18, 0x3d	; 61
    230c:	3e b7       	in	r19, 0x3e	; 62
    230e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2312:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2316:	24 1b       	sub	r18, r20
    2318:	35 0b       	sbc	r19, r21
    231a:	e0 91 c4 07 	lds	r30, 0x07C4	; 0x8007c4 <__brkval>
    231e:	f0 91 c5 07 	lds	r31, 0x07C5	; 0x8007c5 <__brkval+0x1>
    2322:	e2 17       	cp	r30, r18
    2324:	f3 07       	cpc	r31, r19
    2326:	a0 f4       	brcc	.+40     	; 0x2350 <malloc+0x11e>
    2328:	2e 1b       	sub	r18, r30
    232a:	3f 0b       	sbc	r19, r31
    232c:	28 17       	cp	r18, r24
    232e:	39 07       	cpc	r19, r25
    2330:	78 f0       	brcs	.+30     	; 0x2350 <malloc+0x11e>
    2332:	ac 01       	movw	r20, r24
    2334:	4e 5f       	subi	r20, 0xFE	; 254
    2336:	5f 4f       	sbci	r21, 0xFF	; 255
    2338:	24 17       	cp	r18, r20
    233a:	35 07       	cpc	r19, r21
    233c:	48 f0       	brcs	.+18     	; 0x2350 <malloc+0x11e>
    233e:	4e 0f       	add	r20, r30
    2340:	5f 1f       	adc	r21, r31
    2342:	50 93 c5 07 	sts	0x07C5, r21	; 0x8007c5 <__brkval+0x1>
    2346:	40 93 c4 07 	sts	0x07C4, r20	; 0x8007c4 <__brkval>
    234a:	81 93       	st	Z+, r24
    234c:	91 93       	st	Z+, r25
    234e:	02 c0       	rjmp	.+4      	; 0x2354 <malloc+0x122>
    2350:	e0 e0       	ldi	r30, 0x00	; 0
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	cf 01       	movw	r24, r30
    2356:	df 91       	pop	r29
    2358:	cf 91       	pop	r28
    235a:	08 95       	ret

0000235c <free>:
    235c:	0f 93       	push	r16
    235e:	1f 93       	push	r17
    2360:	cf 93       	push	r28
    2362:	df 93       	push	r29
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	09 f4       	brne	.+2      	; 0x236a <free+0xe>
    2368:	8c c0       	rjmp	.+280    	; 0x2482 <free+0x126>
    236a:	fc 01       	movw	r30, r24
    236c:	32 97       	sbiw	r30, 0x02	; 2
    236e:	13 82       	std	Z+3, r1	; 0x03
    2370:	12 82       	std	Z+2, r1	; 0x02
    2372:	00 91 c6 07 	lds	r16, 0x07C6	; 0x8007c6 <__flp>
    2376:	10 91 c7 07 	lds	r17, 0x07C7	; 0x8007c7 <__flp+0x1>
    237a:	01 15       	cp	r16, r1
    237c:	11 05       	cpc	r17, r1
    237e:	81 f4       	brne	.+32     	; 0x23a0 <free+0x44>
    2380:	20 81       	ld	r18, Z
    2382:	31 81       	ldd	r19, Z+1	; 0x01
    2384:	82 0f       	add	r24, r18
    2386:	93 1f       	adc	r25, r19
    2388:	20 91 c4 07 	lds	r18, 0x07C4	; 0x8007c4 <__brkval>
    238c:	30 91 c5 07 	lds	r19, 0x07C5	; 0x8007c5 <__brkval+0x1>
    2390:	28 17       	cp	r18, r24
    2392:	39 07       	cpc	r19, r25
    2394:	79 f5       	brne	.+94     	; 0x23f4 <free+0x98>
    2396:	f0 93 c5 07 	sts	0x07C5, r31	; 0x8007c5 <__brkval+0x1>
    239a:	e0 93 c4 07 	sts	0x07C4, r30	; 0x8007c4 <__brkval>
    239e:	71 c0       	rjmp	.+226    	; 0x2482 <free+0x126>
    23a0:	d8 01       	movw	r26, r16
    23a2:	40 e0       	ldi	r20, 0x00	; 0
    23a4:	50 e0       	ldi	r21, 0x00	; 0
    23a6:	ae 17       	cp	r26, r30
    23a8:	bf 07       	cpc	r27, r31
    23aa:	50 f4       	brcc	.+20     	; 0x23c0 <free+0x64>
    23ac:	12 96       	adiw	r26, 0x02	; 2
    23ae:	2d 91       	ld	r18, X+
    23b0:	3c 91       	ld	r19, X
    23b2:	13 97       	sbiw	r26, 0x03	; 3
    23b4:	ad 01       	movw	r20, r26
    23b6:	21 15       	cp	r18, r1
    23b8:	31 05       	cpc	r19, r1
    23ba:	09 f1       	breq	.+66     	; 0x23fe <free+0xa2>
    23bc:	d9 01       	movw	r26, r18
    23be:	f3 cf       	rjmp	.-26     	; 0x23a6 <free+0x4a>
    23c0:	9d 01       	movw	r18, r26
    23c2:	da 01       	movw	r26, r20
    23c4:	33 83       	std	Z+3, r19	; 0x03
    23c6:	22 83       	std	Z+2, r18	; 0x02
    23c8:	60 81       	ld	r22, Z
    23ca:	71 81       	ldd	r23, Z+1	; 0x01
    23cc:	86 0f       	add	r24, r22
    23ce:	97 1f       	adc	r25, r23
    23d0:	82 17       	cp	r24, r18
    23d2:	93 07       	cpc	r25, r19
    23d4:	69 f4       	brne	.+26     	; 0x23f0 <free+0x94>
    23d6:	ec 01       	movw	r28, r24
    23d8:	28 81       	ld	r18, Y
    23da:	39 81       	ldd	r19, Y+1	; 0x01
    23dc:	26 0f       	add	r18, r22
    23de:	37 1f       	adc	r19, r23
    23e0:	2e 5f       	subi	r18, 0xFE	; 254
    23e2:	3f 4f       	sbci	r19, 0xFF	; 255
    23e4:	31 83       	std	Z+1, r19	; 0x01
    23e6:	20 83       	st	Z, r18
    23e8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ea:	9b 81       	ldd	r25, Y+3	; 0x03
    23ec:	93 83       	std	Z+3, r25	; 0x03
    23ee:	82 83       	std	Z+2, r24	; 0x02
    23f0:	45 2b       	or	r20, r21
    23f2:	29 f4       	brne	.+10     	; 0x23fe <free+0xa2>
    23f4:	f0 93 c7 07 	sts	0x07C7, r31	; 0x8007c7 <__flp+0x1>
    23f8:	e0 93 c6 07 	sts	0x07C6, r30	; 0x8007c6 <__flp>
    23fc:	42 c0       	rjmp	.+132    	; 0x2482 <free+0x126>
    23fe:	13 96       	adiw	r26, 0x03	; 3
    2400:	fc 93       	st	X, r31
    2402:	ee 93       	st	-X, r30
    2404:	12 97       	sbiw	r26, 0x02	; 2
    2406:	ed 01       	movw	r28, r26
    2408:	49 91       	ld	r20, Y+
    240a:	59 91       	ld	r21, Y+
    240c:	9e 01       	movw	r18, r28
    240e:	24 0f       	add	r18, r20
    2410:	35 1f       	adc	r19, r21
    2412:	e2 17       	cp	r30, r18
    2414:	f3 07       	cpc	r31, r19
    2416:	71 f4       	brne	.+28     	; 0x2434 <free+0xd8>
    2418:	80 81       	ld	r24, Z
    241a:	91 81       	ldd	r25, Z+1	; 0x01
    241c:	84 0f       	add	r24, r20
    241e:	95 1f       	adc	r25, r21
    2420:	02 96       	adiw	r24, 0x02	; 2
    2422:	11 96       	adiw	r26, 0x01	; 1
    2424:	9c 93       	st	X, r25
    2426:	8e 93       	st	-X, r24
    2428:	82 81       	ldd	r24, Z+2	; 0x02
    242a:	93 81       	ldd	r25, Z+3	; 0x03
    242c:	13 96       	adiw	r26, 0x03	; 3
    242e:	9c 93       	st	X, r25
    2430:	8e 93       	st	-X, r24
    2432:	12 97       	sbiw	r26, 0x02	; 2
    2434:	e0 e0       	ldi	r30, 0x00	; 0
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	d8 01       	movw	r26, r16
    243a:	12 96       	adiw	r26, 0x02	; 2
    243c:	8d 91       	ld	r24, X+
    243e:	9c 91       	ld	r25, X
    2440:	13 97       	sbiw	r26, 0x03	; 3
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	19 f0       	breq	.+6      	; 0x244c <free+0xf0>
    2446:	f8 01       	movw	r30, r16
    2448:	8c 01       	movw	r16, r24
    244a:	f6 cf       	rjmp	.-20     	; 0x2438 <free+0xdc>
    244c:	8d 91       	ld	r24, X+
    244e:	9c 91       	ld	r25, X
    2450:	98 01       	movw	r18, r16
    2452:	2e 5f       	subi	r18, 0xFE	; 254
    2454:	3f 4f       	sbci	r19, 0xFF	; 255
    2456:	82 0f       	add	r24, r18
    2458:	93 1f       	adc	r25, r19
    245a:	20 91 c4 07 	lds	r18, 0x07C4	; 0x8007c4 <__brkval>
    245e:	30 91 c5 07 	lds	r19, 0x07C5	; 0x8007c5 <__brkval+0x1>
    2462:	28 17       	cp	r18, r24
    2464:	39 07       	cpc	r19, r25
    2466:	69 f4       	brne	.+26     	; 0x2482 <free+0x126>
    2468:	30 97       	sbiw	r30, 0x00	; 0
    246a:	29 f4       	brne	.+10     	; 0x2476 <free+0x11a>
    246c:	10 92 c7 07 	sts	0x07C7, r1	; 0x8007c7 <__flp+0x1>
    2470:	10 92 c6 07 	sts	0x07C6, r1	; 0x8007c6 <__flp>
    2474:	02 c0       	rjmp	.+4      	; 0x247a <free+0x11e>
    2476:	13 82       	std	Z+3, r1	; 0x03
    2478:	12 82       	std	Z+2, r1	; 0x02
    247a:	10 93 c5 07 	sts	0x07C5, r17	; 0x8007c5 <__brkval+0x1>
    247e:	00 93 c4 07 	sts	0x07C4, r16	; 0x8007c4 <__brkval>
    2482:	df 91       	pop	r29
    2484:	cf 91       	pop	r28
    2486:	1f 91       	pop	r17
    2488:	0f 91       	pop	r16
    248a:	08 95       	ret

0000248c <do_rand>:
    248c:	8f 92       	push	r8
    248e:	9f 92       	push	r9
    2490:	af 92       	push	r10
    2492:	bf 92       	push	r11
    2494:	cf 92       	push	r12
    2496:	df 92       	push	r13
    2498:	ef 92       	push	r14
    249a:	ff 92       	push	r15
    249c:	cf 93       	push	r28
    249e:	df 93       	push	r29
    24a0:	ec 01       	movw	r28, r24
    24a2:	68 81       	ld	r22, Y
    24a4:	79 81       	ldd	r23, Y+1	; 0x01
    24a6:	8a 81       	ldd	r24, Y+2	; 0x02
    24a8:	9b 81       	ldd	r25, Y+3	; 0x03
    24aa:	61 15       	cp	r22, r1
    24ac:	71 05       	cpc	r23, r1
    24ae:	81 05       	cpc	r24, r1
    24b0:	91 05       	cpc	r25, r1
    24b2:	21 f4       	brne	.+8      	; 0x24bc <do_rand+0x30>
    24b4:	64 e2       	ldi	r22, 0x24	; 36
    24b6:	79 ed       	ldi	r23, 0xD9	; 217
    24b8:	8b e5       	ldi	r24, 0x5B	; 91
    24ba:	97 e0       	ldi	r25, 0x07	; 7
    24bc:	2d e1       	ldi	r18, 0x1D	; 29
    24be:	33 ef       	ldi	r19, 0xF3	; 243
    24c0:	41 e0       	ldi	r20, 0x01	; 1
    24c2:	50 e0       	ldi	r21, 0x00	; 0
    24c4:	0e 94 b2 12 	call	0x2564	; 0x2564 <__divmodsi4>
    24c8:	49 01       	movw	r8, r18
    24ca:	5a 01       	movw	r10, r20
    24cc:	9b 01       	movw	r18, r22
    24ce:	ac 01       	movw	r20, r24
    24d0:	a7 ea       	ldi	r26, 0xA7	; 167
    24d2:	b1 e4       	ldi	r27, 0x41	; 65
    24d4:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__muluhisi3>
    24d8:	6b 01       	movw	r12, r22
    24da:	7c 01       	movw	r14, r24
    24dc:	ac ee       	ldi	r26, 0xEC	; 236
    24de:	b4 ef       	ldi	r27, 0xF4	; 244
    24e0:	a5 01       	movw	r20, r10
    24e2:	94 01       	movw	r18, r8
    24e4:	0e 94 df 12 	call	0x25be	; 0x25be <__mulohisi3>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	8c 0d       	add	r24, r12
    24ee:	9d 1d       	adc	r25, r13
    24f0:	ae 1d       	adc	r26, r14
    24f2:	bf 1d       	adc	r27, r15
    24f4:	b7 ff       	sbrs	r27, 7
    24f6:	03 c0       	rjmp	.+6      	; 0x24fe <do_rand+0x72>
    24f8:	01 97       	sbiw	r24, 0x01	; 1
    24fa:	a1 09       	sbc	r26, r1
    24fc:	b0 48       	sbci	r27, 0x80	; 128
    24fe:	88 83       	st	Y, r24
    2500:	99 83       	std	Y+1, r25	; 0x01
    2502:	aa 83       	std	Y+2, r26	; 0x02
    2504:	bb 83       	std	Y+3, r27	; 0x03
    2506:	9f 77       	andi	r25, 0x7F	; 127
    2508:	df 91       	pop	r29
    250a:	cf 91       	pop	r28
    250c:	ff 90       	pop	r15
    250e:	ef 90       	pop	r14
    2510:	df 90       	pop	r13
    2512:	cf 90       	pop	r12
    2514:	bf 90       	pop	r11
    2516:	af 90       	pop	r10
    2518:	9f 90       	pop	r9
    251a:	8f 90       	pop	r8
    251c:	08 95       	ret

0000251e <rand_r>:
    251e:	0e 94 46 12 	call	0x248c	; 0x248c <do_rand>
    2522:	08 95       	ret

00002524 <rand>:
    2524:	86 e0       	ldi	r24, 0x06	; 6
    2526:	91 e0       	ldi	r25, 0x01	; 1
    2528:	0e 94 46 12 	call	0x248c	; 0x248c <do_rand>
    252c:	08 95       	ret

0000252e <srand>:
    252e:	a0 e0       	ldi	r26, 0x00	; 0
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    2536:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    253a:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    253e:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    2542:	08 95       	ret

00002544 <memcpy>:
    2544:	fb 01       	movw	r30, r22
    2546:	dc 01       	movw	r26, r24
    2548:	02 c0       	rjmp	.+4      	; 0x254e <memcpy+0xa>
    254a:	01 90       	ld	r0, Z+
    254c:	0d 92       	st	X+, r0
    254e:	41 50       	subi	r20, 0x01	; 1
    2550:	50 40       	sbci	r21, 0x00	; 0
    2552:	d8 f7       	brcc	.-10     	; 0x254a <memcpy+0x6>
    2554:	08 95       	ret

00002556 <memset>:
    2556:	dc 01       	movw	r26, r24
    2558:	01 c0       	rjmp	.+2      	; 0x255c <memset+0x6>
    255a:	6d 93       	st	X+, r22
    255c:	41 50       	subi	r20, 0x01	; 1
    255e:	50 40       	sbci	r21, 0x00	; 0
    2560:	e0 f7       	brcc	.-8      	; 0x255a <memset+0x4>
    2562:	08 95       	ret

00002564 <__divmodsi4>:
    2564:	05 2e       	mov	r0, r21
    2566:	97 fb       	bst	r25, 7
    2568:	1e f4       	brtc	.+6      	; 0x2570 <__divmodsi4+0xc>
    256a:	00 94       	com	r0
    256c:	0e 94 c9 12 	call	0x2592	; 0x2592 <__negsi2>
    2570:	57 fd       	sbrc	r21, 7
    2572:	07 d0       	rcall	.+14     	; 0x2582 <__divmodsi4_neg2>
    2574:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__udivmodsi4>
    2578:	07 fc       	sbrc	r0, 7
    257a:	03 d0       	rcall	.+6      	; 0x2582 <__divmodsi4_neg2>
    257c:	4e f4       	brtc	.+18     	; 0x2590 <__divmodsi4_exit>
    257e:	0c 94 c9 12 	jmp	0x2592	; 0x2592 <__negsi2>

00002582 <__divmodsi4_neg2>:
    2582:	50 95       	com	r21
    2584:	40 95       	com	r20
    2586:	30 95       	com	r19
    2588:	21 95       	neg	r18
    258a:	3f 4f       	sbci	r19, 0xFF	; 255
    258c:	4f 4f       	sbci	r20, 0xFF	; 255
    258e:	5f 4f       	sbci	r21, 0xFF	; 255

00002590 <__divmodsi4_exit>:
    2590:	08 95       	ret

00002592 <__negsi2>:
    2592:	90 95       	com	r25
    2594:	80 95       	com	r24
    2596:	70 95       	com	r23
    2598:	61 95       	neg	r22
    259a:	7f 4f       	sbci	r23, 0xFF	; 255
    259c:	8f 4f       	sbci	r24, 0xFF	; 255
    259e:	9f 4f       	sbci	r25, 0xFF	; 255
    25a0:	08 95       	ret

000025a2 <__muluhisi3>:
    25a2:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__umulhisi3>
    25a6:	a5 9f       	mul	r26, r21
    25a8:	90 0d       	add	r25, r0
    25aa:	b4 9f       	mul	r27, r20
    25ac:	90 0d       	add	r25, r0
    25ae:	a4 9f       	mul	r26, r20
    25b0:	80 0d       	add	r24, r0
    25b2:	91 1d       	adc	r25, r1
    25b4:	11 24       	eor	r1, r1
    25b6:	08 95       	ret

000025b8 <__mulshisi3>:
    25b8:	b7 ff       	sbrs	r27, 7
    25ba:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <__muluhisi3>

000025be <__mulohisi3>:
    25be:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__muluhisi3>
    25c2:	82 1b       	sub	r24, r18
    25c4:	93 0b       	sbc	r25, r19
    25c6:	08 95       	ret

000025c8 <__umulhisi3>:
    25c8:	a2 9f       	mul	r26, r18
    25ca:	b0 01       	movw	r22, r0
    25cc:	b3 9f       	mul	r27, r19
    25ce:	c0 01       	movw	r24, r0
    25d0:	a3 9f       	mul	r26, r19
    25d2:	70 0d       	add	r23, r0
    25d4:	81 1d       	adc	r24, r1
    25d6:	11 24       	eor	r1, r1
    25d8:	91 1d       	adc	r25, r1
    25da:	b2 9f       	mul	r27, r18
    25dc:	70 0d       	add	r23, r0
    25de:	81 1d       	adc	r24, r1
    25e0:	11 24       	eor	r1, r1
    25e2:	91 1d       	adc	r25, r1
    25e4:	08 95       	ret

000025e6 <_exit>:
    25e6:	f8 94       	cli

000025e8 <__stop_program>:
    25e8:	ff cf       	rjmp	.-2      	; 0x25e8 <__stop_program>
