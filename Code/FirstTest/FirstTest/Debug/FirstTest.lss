
FirstTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  00002768  000027fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002768  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000066c  00800166  00800166  00002862  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002862  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002894  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a0  00000000  00000000  000028d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005903  00000000  00000000  00002d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001264  00000000  00000000  00008677  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000030c0  00000000  00000000  000098db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f18  00000000  00000000  0000c99c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019bb  00000000  00000000  0000d8b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005743  00000000  00000000  0000f26f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005d8  00000000  00000000  000149b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <__vector_13>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__vector_16>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 a9 08 	jmp	0x1152	; 0x1152 <__vector_20>
      54:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <__vector_21>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__vector_28>
      74:	0c 94 6d 09 	jmp	0x12da	; 0x12da <__vector_29>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e8 e6       	ldi	r30, 0x68	; 104
      90:	f7 e2       	ldi	r31, 0x27	; 39
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a6 36       	cpi	r26, 0x66	; 102
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	27 e0       	ldi	r18, 0x07	; 7
      a0:	a6 e6       	ldi	r26, 0x66	; 102
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a2 3d       	cpi	r26, 0xD2	; 210
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 ae 04 	call	0x95c	; 0x95c <main>
      b2:	0c 94 b2 13 	jmp	0x2764	; 0x2764 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <obstacles_task>:
{

}
//-----------------------------------------
void comReceiver_task(void *pvParameters)
{
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	00 d0       	rcall	.+0      	; 0xc0 <obstacles_task+0x6>
      c0:	00 d0       	rcall	.+0      	; 0xc2 <obstacles_task+0x8>
      c2:	cd b7       	in	r28, 0x3d	; 61
      c4:	de b7       	in	r29, 0x3e	; 62
      c6:	62 e0       	ldi	r22, 0x02	; 2
      c8:	70 e0       	ldi	r23, 0x00	; 0
      ca:	80 e0       	ldi	r24, 0x00	; 0
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <vTaskSetApplicationTaskTag>
      d2:	0f 2e       	mov	r0, r31
      d4:	fb ef       	ldi	r31, 0xFB	; 251
      d6:	6f 2e       	mov	r6, r31
      d8:	f1 e0       	ldi	r31, 0x01	; 1
      da:	7f 2e       	mov	r7, r31
      dc:	f0 2d       	mov	r31, r0
      de:	33 24       	eor	r3, r3
      e0:	33 94       	inc	r3
      e2:	21 2c       	mov	r2, r1
      e4:	0f 2e       	mov	r0, r31
      e6:	f9 e1       	ldi	r31, 0x19	; 25
      e8:	af 2e       	mov	r10, r31
      ea:	f3 e0       	ldi	r31, 0x03	; 3
      ec:	bf 2e       	mov	r11, r31
      ee:	f0 2d       	mov	r31, r0
      f0:	0f 2e       	mov	r0, r31
      f2:	ff ef       	ldi	r31, 0xFF	; 255
      f4:	8f 2e       	mov	r8, r31
      f6:	f1 e0       	ldi	r31, 0x01	; 1
      f8:	9f 2e       	mov	r9, r31
      fa:	f0 2d       	mov	r31, r0
      fc:	0f 2e       	mov	r0, r31
      fe:	f7 e1       	ldi	r31, 0x17	; 23
     100:	cf 2e       	mov	r12, r31
     102:	f3 e0       	ldi	r31, 0x03	; 3
     104:	df 2e       	mov	r13, r31
     106:	f0 2d       	mov	r31, r0
     108:	19 82       	std	Y+1, r1	; 0x01
     10a:	1a 82       	std	Y+2, r1	; 0x02
     10c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <stop>
     110:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <stop+0x1>
     114:	00 97       	sbiw	r24, 0x00	; 0
     116:	f1 f7       	brne	.-4      	; 0x114 <obstacles_task+0x5a>
     118:	d3 01       	movw	r26, r6
     11a:	8d 91       	ld	r24, X+
     11c:	9c 91       	ld	r25, X
     11e:	11 97       	sbiw	r26, 0x01	; 1
     120:	9c 01       	movw	r18, r24
     122:	22 0f       	add	r18, r18
     124:	33 1f       	adc	r19, r19
     126:	88 0f       	add	r24, r24
     128:	99 1f       	adc	r25, r25
     12a:	88 0f       	add	r24, r24
     12c:	99 1f       	adc	r25, r25
     12e:	88 0f       	add	r24, r24
     130:	99 1f       	adc	r25, r25
     132:	82 0f       	add	r24, r18
     134:	93 1f       	adc	r25, r19
     136:	12 96       	adiw	r26, 0x02	; 2
     138:	ed 91       	ld	r30, X+
     13a:	fc 91       	ld	r31, X
     13c:	13 97       	sbiw	r26, 0x03	; 3
     13e:	8e 0f       	add	r24, r30
     140:	9f 1f       	adc	r25, r31
     142:	fc 01       	movw	r30, r24
     144:	ea 59       	subi	r30, 0x9A	; 154
     146:	fe 4f       	sbci	r31, 0xFE	; 254
     148:	80 81       	ld	r24, Z
     14a:	81 11       	cpse	r24, r1
     14c:	97 c0       	rjmp	.+302    	; 0x27c <obstacles_task+0x1c2>
     14e:	0f 2e       	mov	r0, r31
     150:	f7 e6       	ldi	r31, 0x67	; 103
     152:	ef 2e       	mov	r14, r31
     154:	f1 e0       	ldi	r31, 0x01	; 1
     156:	ff 2e       	mov	r15, r31
     158:	f0 2d       	mov	r31, r0
     15a:	41 e0       	ldi	r20, 0x01	; 1
     15c:	52 e0       	ldi	r21, 0x02	; 2
     15e:	b7 01       	movw	r22, r14
     160:	0e c0       	rjmp	.+28     	; 0x17e <obstacles_task+0xc4>
     162:	8d 91       	ld	r24, X+
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	81 93       	st	Z+, r24
     168:	91 93       	st	Z+, r25
     16a:	e2 17       	cp	r30, r18
     16c:	f3 07       	cpc	r31, r19
     16e:	c9 f7       	brne	.-14     	; 0x162 <obstacles_task+0xa8>
     170:	66 5f       	subi	r22, 0xF6	; 246
     172:	7f 4f       	sbci	r23, 0xFF	; 255
     174:	4c 5e       	subi	r20, 0xEC	; 236
     176:	5f 4f       	sbci	r21, 0xFF	; 255
     178:	4a 15       	cp	r20, r10
     17a:	5b 05       	cpc	r21, r11
     17c:	31 f0       	breq	.+12     	; 0x18a <obstacles_task+0xd0>
     17e:	9a 01       	movw	r18, r20
     180:	2e 5e       	subi	r18, 0xEE	; 238
     182:	3f 4f       	sbci	r19, 0xFF	; 255
     184:	fa 01       	movw	r30, r20
     186:	db 01       	movw	r26, r22
     188:	ec cf       	rjmp	.-40     	; 0x162 <obstacles_task+0xa8>
     18a:	e3 e1       	ldi	r30, 0x13	; 19
     18c:	f2 e0       	ldi	r31, 0x02	; 2
     18e:	43 2c       	mov	r4, r3
     190:	52 2c       	mov	r5, r2
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	10 e0       	ldi	r17, 0x00	; 0
     196:	fc 83       	std	Y+4, r31	; 0x04
     198:	eb 83       	std	Y+3, r30	; 0x03
     19a:	0e 94 51 13 	call	0x26a2	; 0x26a2 <rand>
     19e:	81 70       	andi	r24, 0x01	; 1
     1a0:	90 78       	andi	r25, 0x80	; 128
     1a2:	99 23       	and	r25, r25
     1a4:	24 f4       	brge	.+8      	; 0x1ae <obstacles_task+0xf4>
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	8e 6f       	ori	r24, 0xFE	; 254
     1aa:	9f 6f       	ori	r25, 0xFF	; 255
     1ac:	01 96       	adiw	r24, 0x01	; 1
     1ae:	d4 01       	movw	r26, r8
     1b0:	8d 93       	st	X+, r24
     1b2:	9c 93       	st	X, r25
     1b4:	02 30       	cpi	r16, 0x02	; 2
     1b6:	11 05       	cpc	r17, r1
     1b8:	2c f0       	brlt	.+10     	; 0x1c4 <obstacles_task+0x10a>
     1ba:	bd e0       	ldi	r27, 0x0D	; 13
     1bc:	4b 16       	cp	r4, r27
     1be:	51 04       	cpc	r5, r1
     1c0:	d9 f4       	brne	.+54     	; 0x1f8 <obstacles_task+0x13e>
     1c2:	65 c0       	rjmp	.+202    	; 0x28e <obstacles_task+0x1d4>
     1c4:	0e 94 51 13 	call	0x26a2	; 0x26a2 <rand>
     1c8:	81 70       	andi	r24, 0x01	; 1
     1ca:	90 78       	andi	r25, 0x80	; 128
     1cc:	99 23       	and	r25, r25
     1ce:	24 f4       	brge	.+8      	; 0x1d8 <obstacles_task+0x11e>
     1d0:	01 97       	sbiw	r24, 0x01	; 1
     1d2:	8e 6f       	ori	r24, 0xFE	; 254
     1d4:	9f 6f       	ori	r25, 0xFF	; 255
     1d6:	01 96       	adiw	r24, 0x01	; 1
     1d8:	eb 81       	ldd	r30, Y+3	; 0x03
     1da:	fc 81       	ldd	r31, Y+4	; 0x04
     1dc:	91 83       	std	Z+1, r25	; 0x01
     1de:	80 83       	st	Z, r24
     1e0:	01 97       	sbiw	r24, 0x01	; 1
     1e2:	11 f4       	brne	.+4      	; 0x1e8 <obstacles_task+0x12e>
     1e4:	0f 5f       	subi	r16, 0xFF	; 255
     1e6:	1f 4f       	sbci	r17, 0xFF	; 255
     1e8:	c2 01       	movw	r24, r4
     1ea:	83 70       	andi	r24, 0x03	; 3
     1ec:	99 27       	eor	r25, r25
     1ee:	89 2b       	or	r24, r25
     1f0:	39 f4       	brne	.+14     	; 0x200 <obstacles_task+0x146>
     1f2:	09 81       	ldd	r16, Y+1	; 0x01
     1f4:	1a 81       	ldd	r17, Y+2	; 0x02
     1f6:	04 c0       	rjmp	.+8      	; 0x200 <obstacles_task+0x146>
     1f8:	ab 81       	ldd	r26, Y+3	; 0x03
     1fa:	bc 81       	ldd	r27, Y+4	; 0x04
     1fc:	1d 92       	st	X+, r1
     1fe:	1c 92       	st	X, r1
     200:	bf ef       	ldi	r27, 0xFF	; 255
     202:	4b 1a       	sub	r4, r27
     204:	5b 0a       	sbc	r5, r27
     206:	eb 81       	ldd	r30, Y+3	; 0x03
     208:	fc 81       	ldd	r31, Y+4	; 0x04
     20a:	74 96       	adiw	r30, 0x14	; 20
     20c:	fc 83       	std	Y+4, r31	; 0x04
     20e:	eb 83       	std	Y+3, r30	; 0x03
     210:	fe e0       	ldi	r31, 0x0E	; 14
     212:	4f 16       	cp	r4, r31
     214:	51 04       	cpc	r5, r1
     216:	09 f6       	brne	.-126    	; 0x19a <obstacles_task+0xe0>
     218:	a4 01       	movw	r20, r8
     21a:	0e c0       	rjmp	.+28     	; 0x238 <obstacles_task+0x17e>
     21c:	80 81       	ld	r24, Z
     21e:	32 96       	adiw	r30, 0x02	; 2
     220:	8d 93       	st	X+, r24
     222:	e2 17       	cp	r30, r18
     224:	f3 07       	cpc	r31, r19
     226:	d1 f7       	brne	.-12     	; 0x21c <obstacles_task+0x162>
     228:	4c 5e       	subi	r20, 0xEC	; 236
     22a:	5f 4f       	sbci	r21, 0xFF	; 255
     22c:	8a e0       	ldi	r24, 0x0A	; 10
     22e:	e8 0e       	add	r14, r24
     230:	f1 1c       	adc	r15, r1
     232:	4c 15       	cp	r20, r12
     234:	5d 05       	cpc	r21, r13
     236:	31 f0       	breq	.+12     	; 0x244 <obstacles_task+0x18a>
     238:	9a 01       	movw	r18, r20
     23a:	2e 5e       	subi	r18, 0xEE	; 238
     23c:	3f 4f       	sbci	r19, 0xFF	; 255
     23e:	d7 01       	movw	r26, r14
     240:	fa 01       	movw	r30, r20
     242:	ec cf       	rjmp	.-40     	; 0x21c <obstacles_task+0x162>
     244:	d3 01       	movw	r26, r6
     246:	8d 91       	ld	r24, X+
     248:	9c 91       	ld	r25, X
     24a:	11 97       	sbiw	r26, 0x01	; 1
     24c:	fc 01       	movw	r30, r24
     24e:	ee 0f       	add	r30, r30
     250:	ff 1f       	adc	r31, r31
     252:	88 0f       	add	r24, r24
     254:	99 1f       	adc	r25, r25
     256:	88 0f       	add	r24, r24
     258:	99 1f       	adc	r25, r25
     25a:	88 0f       	add	r24, r24
     25c:	99 1f       	adc	r25, r25
     25e:	e8 0f       	add	r30, r24
     260:	f9 1f       	adc	r31, r25
     262:	12 96       	adiw	r26, 0x02	; 2
     264:	8d 91       	ld	r24, X+
     266:	9c 91       	ld	r25, X
     268:	13 97       	sbiw	r26, 0x03	; 3
     26a:	e8 0f       	add	r30, r24
     26c:	f9 1f       	adc	r31, r25
     26e:	ee 0f       	add	r30, r30
     270:	ff 1f       	adc	r31, r31
     272:	e1 50       	subi	r30, 0x01	; 1
     274:	fe 4f       	sbci	r31, 0xFE	; 254
     276:	30 82       	st	Z, r3
     278:	21 82       	std	Z+1, r2	; 0x01
     27a:	04 c0       	rjmp	.+8      	; 0x284 <obstacles_task+0x1ca>
     27c:	30 92 0c 01 	sts	0x010C, r3	; 0x80010c <stop>
     280:	20 92 0d 01 	sts	0x010D, r2	; 0x80010d <stop+0x1>
     284:	88 ee       	ldi	r24, 0xE8	; 232
     286:	93 e0       	ldi	r25, 0x03	; 3
     288:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <vTaskDelay>
     28c:	3f cf       	rjmp	.-386    	; 0x10c <obstacles_task+0x52>
     28e:	0e 94 51 13 	call	0x26a2	; 0x26a2 <rand>
     292:	81 70       	andi	r24, 0x01	; 1
     294:	90 78       	andi	r25, 0x80	; 128
     296:	99 23       	and	r25, r25
     298:	24 f4       	brge	.+8      	; 0x2a2 <obstacles_task+0x1e8>
     29a:	01 97       	sbiw	r24, 0x01	; 1
     29c:	8e 6f       	ori	r24, 0xFE	; 254
     29e:	9f 6f       	ori	r25, 0xFF	; 255
     2a0:	01 96       	adiw	r24, 0x01	; 1
     2a2:	eb 81       	ldd	r30, Y+3	; 0x03
     2a4:	fc 81       	ldd	r31, Y+4	; 0x04
     2a6:	91 83       	std	Z+1, r25	; 0x01
     2a8:	80 83       	st	Z, r24
     2aa:	01 97       	sbiw	r24, 0x01	; 1
     2ac:	09 f0       	breq	.+2      	; 0x2b0 <obstacles_task+0x1f6>
     2ae:	b4 cf       	rjmp	.-152    	; 0x218 <obstacles_task+0x15e>
     2b0:	99 cf       	rjmp	.-206    	; 0x1e4 <obstacles_task+0x12a>

000002b2 <joystickSampler_task>:
     2b2:	cf 93       	push	r28
     2b4:	df 93       	push	r29
     2b6:	00 d0       	rcall	.+0      	; 0x2b8 <joystickSampler_task+0x6>
     2b8:	00 d0       	rcall	.+0      	; 0x2ba <joystickSampler_task+0x8>
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <joystickSampler_task+0xa>
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
     2c0:	65 e0       	ldi	r22, 0x05	; 5
     2c2:	70 e0       	ldi	r23, 0x00	; 0
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <vTaskSetApplicationTaskTag>
     2cc:	ee 24       	eor	r14, r14
     2ce:	e3 94       	inc	r14
     2d0:	f1 2c       	mov	r15, r1
     2d2:	0b ef       	ldi	r16, 0xFB	; 251
     2d4:	11 e0       	ldi	r17, 0x01	; 1
     2d6:	0f 2e       	mov	r0, r31
     2d8:	f3 e0       	ldi	r31, 0x03	; 3
     2da:	cf 2e       	mov	r12, r31
     2dc:	d1 2c       	mov	r13, r1
     2de:	f0 2d       	mov	r31, r0
     2e0:	68 94       	set
     2e2:	aa 24       	eor	r10, r10
     2e4:	a1 f8       	bld	r10, 1
     2e6:	b1 2c       	mov	r11, r1
     2e8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <stop>
     2ec:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <stop+0x1>
     2f0:	89 2b       	or	r24, r25
     2f2:	09 f0       	breq	.+2      	; 0x2f6 <joystickSampler_task+0x44>
     2f4:	4a c0       	rjmp	.+148    	; 0x38a <joystickSampler_task+0xd8>
     2f6:	f8 01       	movw	r30, r16
     2f8:	80 81       	ld	r24, Z
     2fa:	91 81       	ldd	r25, Z+1	; 0x01
     2fc:	9c 83       	std	Y+4, r25	; 0x04
     2fe:	8b 83       	std	Y+3, r24	; 0x03
     300:	82 81       	ldd	r24, Z+2	; 0x02
     302:	93 81       	ldd	r25, Z+3	; 0x03
     304:	9e 83       	std	Y+6, r25	; 0x06
     306:	8d 83       	std	Y+5, r24	; 0x05
     308:	30 99       	sbic	0x06, 0	; 6
     30a:	0e c0       	rjmp	.+28     	; 0x328 <joystickSampler_task+0x76>
     30c:	1a 82       	std	Y+2, r1	; 0x02
     30e:	19 82       	std	Y+1, r1	; 0x01
     310:	20 e0       	ldi	r18, 0x00	; 0
     312:	4f ef       	ldi	r20, 0xFF	; 255
     314:	5f ef       	ldi	r21, 0xFF	; 255
     316:	be 01       	movw	r22, r28
     318:	6f 5f       	subi	r22, 0xFF	; 255
     31a:	7f 4f       	sbci	r23, 0xFF	; 255
     31c:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <inputQueue>
     320:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <inputQueue+0x1>
     324:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <xQueueGenericSend>
     328:	31 99       	sbic	0x06, 1	; 6
     32a:	0e c0       	rjmp	.+28     	; 0x348 <joystickSampler_task+0x96>
     32c:	ba 82       	std	Y+2, r11	; 0x02
     32e:	a9 82       	std	Y+1, r10	; 0x01
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	4f ef       	ldi	r20, 0xFF	; 255
     334:	5f ef       	ldi	r21, 0xFF	; 255
     336:	be 01       	movw	r22, r28
     338:	6f 5f       	subi	r22, 0xFF	; 255
     33a:	7f 4f       	sbci	r23, 0xFF	; 255
     33c:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <inputQueue>
     340:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <inputQueue+0x1>
     344:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <xQueueGenericSend>
     348:	36 99       	sbic	0x06, 6	; 6
     34a:	0e c0       	rjmp	.+28     	; 0x368 <joystickSampler_task+0xb6>
     34c:	fa 82       	std	Y+2, r15	; 0x02
     34e:	e9 82       	std	Y+1, r14	; 0x01
     350:	20 e0       	ldi	r18, 0x00	; 0
     352:	4f ef       	ldi	r20, 0xFF	; 255
     354:	5f ef       	ldi	r21, 0xFF	; 255
     356:	be 01       	movw	r22, r28
     358:	6f 5f       	subi	r22, 0xFF	; 255
     35a:	7f 4f       	sbci	r23, 0xFF	; 255
     35c:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <inputQueue>
     360:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <inputQueue+0x1>
     364:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <xQueueGenericSend>
     368:	37 99       	sbic	0x06, 7	; 6
     36a:	15 c0       	rjmp	.+42     	; 0x396 <joystickSampler_task+0xe4>
     36c:	da 82       	std	Y+2, r13	; 0x02
     36e:	c9 82       	std	Y+1, r12	; 0x01
     370:	20 e0       	ldi	r18, 0x00	; 0
     372:	4f ef       	ldi	r20, 0xFF	; 255
     374:	5f ef       	ldi	r21, 0xFF	; 255
     376:	be 01       	movw	r22, r28
     378:	6f 5f       	subi	r22, 0xFF	; 255
     37a:	7f 4f       	sbci	r23, 0xFF	; 255
     37c:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <inputQueue>
     380:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <inputQueue+0x1>
     384:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <xQueueGenericSend>
     388:	06 c0       	rjmp	.+12     	; 0x396 <joystickSampler_task+0xe4>
     38a:	4b 99       	sbic	0x09, 3	; 9
     38c:	04 c0       	rjmp	.+8      	; 0x396 <joystickSampler_task+0xe4>
     38e:	f0 92 f4 01 	sts	0x01F4, r15	; 0x8001f4 <restart1+0x1>
     392:	e0 92 f3 01 	sts	0x01F3, r14	; 0x8001f3 <restart1>
     396:	84 e6       	ldi	r24, 0x64	; 100
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <vTaskDelay>
     39e:	a4 cf       	rjmp	.-184    	; 0x2e8 <joystickSampler_task+0x36>

000003a0 <update>:
     3a0:	cf 92       	push	r12
     3a2:	df 92       	push	r13
     3a4:	ef 92       	push	r14
     3a6:	ff 92       	push	r15
     3a8:	0f 93       	push	r16
     3aa:	1f 93       	push	r17
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	c7 e1       	ldi	r28, 0x17	; 23
     3b2:	d3 e0       	ldi	r29, 0x03	; 3
     3b4:	4f ef       	ldi	r20, 0xFF	; 255
     3b6:	51 e0       	ldi	r21, 0x01	; 1
     3b8:	07 e1       	ldi	r16, 0x17	; 23
     3ba:	13 e0       	ldi	r17, 0x03	; 3
     3bc:	c1 2c       	mov	r12, r1
     3be:	d1 2c       	mov	r13, r1
     3c0:	61 e0       	ldi	r22, 0x01	; 1
     3c2:	70 e0       	ldi	r23, 0x00	; 0
     3c4:	de 01       	movw	r26, r28
     3c6:	19 82       	std	Y+1, r1	; 0x01
     3c8:	18 82       	st	Y, r1
     3ca:	fa 01       	movw	r30, r20
     3cc:	8c 2d       	mov	r24, r12
     3ce:	9d 2d       	mov	r25, r13
     3d0:	21 91       	ld	r18, Z+
     3d2:	31 91       	ld	r19, Z+
     3d4:	21 30       	cpi	r18, 0x01	; 1
     3d6:	31 05       	cpc	r19, r1
     3d8:	79 f4       	brne	.+30     	; 0x3f8 <update+0x58>
     3da:	ed 90       	ld	r14, X+
     3dc:	fc 90       	ld	r15, X
     3de:	11 97       	sbiw	r26, 0x01	; 1
     3e0:	9b 01       	movw	r18, r22
     3e2:	08 2e       	mov	r0, r24
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <update+0x4a>
     3e6:	22 0f       	add	r18, r18
     3e8:	33 1f       	adc	r19, r19
     3ea:	0a 94       	dec	r0
     3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <update+0x46>
     3ee:	2e 29       	or	r18, r14
     3f0:	3f 29       	or	r19, r15
     3f2:	11 96       	adiw	r26, 0x01	; 1
     3f4:	3c 93       	st	X, r19
     3f6:	2e 93       	st	-X, r18
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	8a 30       	cpi	r24, 0x0A	; 10
     3fc:	91 05       	cpc	r25, r1
     3fe:	41 f7       	brne	.-48     	; 0x3d0 <update+0x30>
     400:	22 96       	adiw	r28, 0x02	; 2
     402:	4c 5e       	subi	r20, 0xEC	; 236
     404:	5f 4f       	sbci	r21, 0xFF	; 255
     406:	40 17       	cp	r20, r16
     408:	51 07       	cpc	r21, r17
     40a:	e1 f6       	brne	.-72     	; 0x3c4 <update+0x24>
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	1f 91       	pop	r17
     412:	0f 91       	pop	r16
     414:	ff 90       	pop	r15
     416:	ef 90       	pop	r14
     418:	df 90       	pop	r13
     41a:	cf 90       	pop	r12
     41c:	08 95       	ret

0000041e <moveCar>:
     41e:	81 30       	cpi	r24, 0x01	; 1
     420:	91 05       	cpc	r25, r1
     422:	09 f4       	brne	.+2      	; 0x426 <moveCar+0x8>
     424:	62 c0       	rjmp	.+196    	; 0x4ea <moveCar+0xcc>
     426:	40 f0       	brcs	.+16     	; 0x438 <moveCar+0x1a>
     428:	82 30       	cpi	r24, 0x02	; 2
     42a:	91 05       	cpc	r25, r1
     42c:	09 f4       	brne	.+2      	; 0x430 <moveCar+0x12>
     42e:	ba c0       	rjmp	.+372    	; 0x5a4 <moveCar+0x186>
     430:	03 97       	sbiw	r24, 0x03	; 3
     432:	09 f4       	brne	.+2      	; 0x436 <moveCar+0x18>
     434:	14 c1       	rjmp	.+552    	; 0x65e <moveCar+0x240>
     436:	08 95       	ret
     438:	db 01       	movw	r26, r22
     43a:	12 96       	adiw	r26, 0x02	; 2
     43c:	2d 91       	ld	r18, X+
     43e:	3c 91       	ld	r19, X
     440:	13 97       	sbiw	r26, 0x03	; 3
     442:	c9 01       	movw	r24, r18
     444:	01 96       	adiw	r24, 0x01	; 1
     446:	8a 30       	cpi	r24, 0x0A	; 10
     448:	91 05       	cpc	r25, r1
     44a:	08 f0       	brcs	.+2      	; 0x44e <moveCar+0x30>
     44c:	63 c1       	rjmp	.+710    	; 0x714 <moveCar+0x2f6>
     44e:	4d 91       	ld	r20, X+
     450:	5c 91       	ld	r21, X
     452:	da 01       	movw	r26, r20
     454:	aa 0f       	add	r26, r26
     456:	bb 1f       	adc	r27, r27
     458:	fa 01       	movw	r30, r20
     45a:	ee 0f       	add	r30, r30
     45c:	ff 1f       	adc	r31, r31
     45e:	ee 0f       	add	r30, r30
     460:	ff 1f       	adc	r31, r31
     462:	ee 0f       	add	r30, r30
     464:	ff 1f       	adc	r31, r31
     466:	ea 0f       	add	r30, r26
     468:	fb 1f       	adc	r31, r27
     46a:	e8 0f       	add	r30, r24
     46c:	f9 1f       	adc	r31, r25
     46e:	ee 0f       	add	r30, r30
     470:	ff 1f       	adc	r31, r31
     472:	e1 50       	subi	r30, 0x01	; 1
     474:	fe 4f       	sbci	r31, 0xFE	; 254
     476:	80 81       	ld	r24, Z
     478:	91 81       	ldd	r25, Z+1	; 0x01
     47a:	89 2b       	or	r24, r25
     47c:	09 f0       	breq	.+2      	; 0x480 <moveCar+0x62>
     47e:	4a c1       	rjmp	.+660    	; 0x714 <moveCar+0x2f6>
     480:	fd 01       	movw	r30, r26
     482:	44 0f       	add	r20, r20
     484:	55 1f       	adc	r21, r21
     486:	44 0f       	add	r20, r20
     488:	55 1f       	adc	r21, r21
     48a:	44 0f       	add	r20, r20
     48c:	55 1f       	adc	r21, r21
     48e:	e4 0f       	add	r30, r20
     490:	f5 1f       	adc	r31, r21
     492:	e2 0f       	add	r30, r18
     494:	f3 1f       	adc	r31, r19
     496:	ee 0f       	add	r30, r30
     498:	ff 1f       	adc	r31, r31
     49a:	e1 50       	subi	r30, 0x01	; 1
     49c:	fe 4f       	sbci	r31, 0xFE	; 254
     49e:	11 82       	std	Z+1, r1	; 0x01
     4a0:	10 82       	st	Z, r1
     4a2:	fb 01       	movw	r30, r22
     4a4:	20 81       	ld	r18, Z
     4a6:	31 81       	ldd	r19, Z+1	; 0x01
     4a8:	82 81       	ldd	r24, Z+2	; 0x02
     4aa:	93 81       	ldd	r25, Z+3	; 0x03
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	93 83       	std	Z+3, r25	; 0x03
     4b0:	82 83       	std	Z+2, r24	; 0x02
     4b2:	f9 01       	movw	r30, r18
     4b4:	ee 0f       	add	r30, r30
     4b6:	ff 1f       	adc	r31, r31
     4b8:	22 0f       	add	r18, r18
     4ba:	33 1f       	adc	r19, r19
     4bc:	22 0f       	add	r18, r18
     4be:	33 1f       	adc	r19, r19
     4c0:	22 0f       	add	r18, r18
     4c2:	33 1f       	adc	r19, r19
     4c4:	e2 0f       	add	r30, r18
     4c6:	f3 1f       	adc	r31, r19
     4c8:	e8 0f       	add	r30, r24
     4ca:	f9 1f       	adc	r31, r25
     4cc:	ee 0f       	add	r30, r30
     4ce:	ff 1f       	adc	r31, r31
     4d0:	e1 50       	subi	r30, 0x01	; 1
     4d2:	fe 4f       	sbci	r31, 0xFE	; 254
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	91 83       	std	Z+1, r25	; 0x01
     4da:	80 83       	st	Z, r24
     4dc:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <update>
     4e0:	88 ec       	ldi	r24, 0xC8	; 200
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <vTaskDelay>
     4e8:	08 95       	ret
     4ea:	db 01       	movw	r26, r22
     4ec:	12 96       	adiw	r26, 0x02	; 2
     4ee:	2d 91       	ld	r18, X+
     4f0:	3c 91       	ld	r19, X
     4f2:	13 97       	sbiw	r26, 0x03	; 3
     4f4:	21 15       	cp	r18, r1
     4f6:	31 05       	cpc	r19, r1
     4f8:	09 f4       	brne	.+2      	; 0x4fc <moveCar+0xde>
     4fa:	0c c1       	rjmp	.+536    	; 0x714 <moveCar+0x2f6>
     4fc:	4d 91       	ld	r20, X+
     4fe:	5c 91       	ld	r21, X
     500:	11 97       	sbiw	r26, 0x01	; 1
     502:	fa 01       	movw	r30, r20
     504:	ee 0f       	add	r30, r30
     506:	ff 1f       	adc	r31, r31
     508:	ca 01       	movw	r24, r20
     50a:	88 0f       	add	r24, r24
     50c:	99 1f       	adc	r25, r25
     50e:	88 0f       	add	r24, r24
     510:	99 1f       	adc	r25, r25
     512:	88 0f       	add	r24, r24
     514:	99 1f       	adc	r25, r25
     516:	e8 0f       	add	r30, r24
     518:	f9 1f       	adc	r31, r25
     51a:	e2 0f       	add	r30, r18
     51c:	f3 1f       	adc	r31, r19
     51e:	ee 0f       	add	r30, r30
     520:	ff 1f       	adc	r31, r31
     522:	e3 50       	subi	r30, 0x03	; 3
     524:	fe 4f       	sbci	r31, 0xFE	; 254
     526:	80 81       	ld	r24, Z
     528:	91 81       	ldd	r25, Z+1	; 0x01
     52a:	89 2b       	or	r24, r25
     52c:	09 f0       	breq	.+2      	; 0x530 <moveCar+0x112>
     52e:	f2 c0       	rjmp	.+484    	; 0x714 <moveCar+0x2f6>
     530:	fa 01       	movw	r30, r20
     532:	ee 0f       	add	r30, r30
     534:	ff 1f       	adc	r31, r31
     536:	44 0f       	add	r20, r20
     538:	55 1f       	adc	r21, r21
     53a:	44 0f       	add	r20, r20
     53c:	55 1f       	adc	r21, r21
     53e:	44 0f       	add	r20, r20
     540:	55 1f       	adc	r21, r21
     542:	e4 0f       	add	r30, r20
     544:	f5 1f       	adc	r31, r21
     546:	e2 0f       	add	r30, r18
     548:	f3 1f       	adc	r31, r19
     54a:	ee 0f       	add	r30, r30
     54c:	ff 1f       	adc	r31, r31
     54e:	e1 50       	subi	r30, 0x01	; 1
     550:	fe 4f       	sbci	r31, 0xFE	; 254
     552:	11 82       	std	Z+1, r1	; 0x01
     554:	10 82       	st	Z, r1
     556:	12 96       	adiw	r26, 0x02	; 2
     558:	8d 91       	ld	r24, X+
     55a:	9c 91       	ld	r25, X
     55c:	13 97       	sbiw	r26, 0x03	; 3
     55e:	01 97       	sbiw	r24, 0x01	; 1
     560:	13 96       	adiw	r26, 0x03	; 3
     562:	9c 93       	st	X, r25
     564:	8e 93       	st	-X, r24
     566:	12 97       	sbiw	r26, 0x02	; 2
     568:	2d 91       	ld	r18, X+
     56a:	3c 91       	ld	r19, X
     56c:	f9 01       	movw	r30, r18
     56e:	ee 0f       	add	r30, r30
     570:	ff 1f       	adc	r31, r31
     572:	22 0f       	add	r18, r18
     574:	33 1f       	adc	r19, r19
     576:	22 0f       	add	r18, r18
     578:	33 1f       	adc	r19, r19
     57a:	22 0f       	add	r18, r18
     57c:	33 1f       	adc	r19, r19
     57e:	e2 0f       	add	r30, r18
     580:	f3 1f       	adc	r31, r19
     582:	e8 0f       	add	r30, r24
     584:	f9 1f       	adc	r31, r25
     586:	ee 0f       	add	r30, r30
     588:	ff 1f       	adc	r31, r31
     58a:	e1 50       	subi	r30, 0x01	; 1
     58c:	fe 4f       	sbci	r31, 0xFE	; 254
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	91 83       	std	Z+1, r25	; 0x01
     594:	80 83       	st	Z, r24
     596:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <update>
     59a:	88 ec       	ldi	r24, 0xC8	; 200
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <vTaskDelay>
     5a2:	08 95       	ret
     5a4:	fb 01       	movw	r30, r22
     5a6:	20 81       	ld	r18, Z
     5a8:	31 81       	ldd	r19, Z+1	; 0x01
     5aa:	c9 01       	movw	r24, r18
     5ac:	01 96       	adiw	r24, 0x01	; 1
     5ae:	8e 30       	cpi	r24, 0x0E	; 14
     5b0:	91 05       	cpc	r25, r1
     5b2:	08 f0       	brcs	.+2      	; 0x5b6 <moveCar+0x198>
     5b4:	af c0       	rjmp	.+350    	; 0x714 <moveCar+0x2f6>
     5b6:	42 81       	ldd	r20, Z+2	; 0x02
     5b8:	53 81       	ldd	r21, Z+3	; 0x03
     5ba:	fc 01       	movw	r30, r24
     5bc:	ee 0f       	add	r30, r30
     5be:	ff 1f       	adc	r31, r31
     5c0:	88 0f       	add	r24, r24
     5c2:	99 1f       	adc	r25, r25
     5c4:	88 0f       	add	r24, r24
     5c6:	99 1f       	adc	r25, r25
     5c8:	88 0f       	add	r24, r24
     5ca:	99 1f       	adc	r25, r25
     5cc:	e8 0f       	add	r30, r24
     5ce:	f9 1f       	adc	r31, r25
     5d0:	e4 0f       	add	r30, r20
     5d2:	f5 1f       	adc	r31, r21
     5d4:	ee 0f       	add	r30, r30
     5d6:	ff 1f       	adc	r31, r31
     5d8:	e1 50       	subi	r30, 0x01	; 1
     5da:	fe 4f       	sbci	r31, 0xFE	; 254
     5dc:	80 81       	ld	r24, Z
     5de:	91 81       	ldd	r25, Z+1	; 0x01
     5e0:	89 2b       	or	r24, r25
     5e2:	09 f0       	breq	.+2      	; 0x5e6 <moveCar+0x1c8>
     5e4:	97 c0       	rjmp	.+302    	; 0x714 <moveCar+0x2f6>
     5e6:	c9 01       	movw	r24, r18
     5e8:	88 0f       	add	r24, r24
     5ea:	99 1f       	adc	r25, r25
     5ec:	22 0f       	add	r18, r18
     5ee:	33 1f       	adc	r19, r19
     5f0:	22 0f       	add	r18, r18
     5f2:	33 1f       	adc	r19, r19
     5f4:	22 0f       	add	r18, r18
     5f6:	33 1f       	adc	r19, r19
     5f8:	28 0f       	add	r18, r24
     5fa:	39 1f       	adc	r19, r25
     5fc:	f9 01       	movw	r30, r18
     5fe:	e4 0f       	add	r30, r20
     600:	f5 1f       	adc	r31, r21
     602:	ee 0f       	add	r30, r30
     604:	ff 1f       	adc	r31, r31
     606:	e1 50       	subi	r30, 0x01	; 1
     608:	fe 4f       	sbci	r31, 0xFE	; 254
     60a:	11 82       	std	Z+1, r1	; 0x01
     60c:	10 82       	st	Z, r1
     60e:	db 01       	movw	r26, r22
     610:	8d 91       	ld	r24, X+
     612:	9c 91       	ld	r25, X
     614:	11 97       	sbiw	r26, 0x01	; 1
     616:	01 96       	adiw	r24, 0x01	; 1
     618:	11 96       	adiw	r26, 0x01	; 1
     61a:	9c 93       	st	X, r25
     61c:	8e 93       	st	-X, r24
     61e:	12 96       	adiw	r26, 0x02	; 2
     620:	ed 91       	ld	r30, X+
     622:	fc 91       	ld	r31, X
     624:	13 97       	sbiw	r26, 0x03	; 3
     626:	9c 01       	movw	r18, r24
     628:	22 0f       	add	r18, r18
     62a:	33 1f       	adc	r19, r19
     62c:	88 0f       	add	r24, r24
     62e:	99 1f       	adc	r25, r25
     630:	88 0f       	add	r24, r24
     632:	99 1f       	adc	r25, r25
     634:	88 0f       	add	r24, r24
     636:	99 1f       	adc	r25, r25
     638:	82 0f       	add	r24, r18
     63a:	93 1f       	adc	r25, r19
     63c:	e8 0f       	add	r30, r24
     63e:	f9 1f       	adc	r31, r25
     640:	ee 0f       	add	r30, r30
     642:	ff 1f       	adc	r31, r31
     644:	e1 50       	subi	r30, 0x01	; 1
     646:	fe 4f       	sbci	r31, 0xFE	; 254
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	91 83       	std	Z+1, r25	; 0x01
     64e:	80 83       	st	Z, r24
     650:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <update>
     654:	88 ec       	ldi	r24, 0xC8	; 200
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <vTaskDelay>
     65c:	08 95       	ret
     65e:	fb 01       	movw	r30, r22
     660:	20 81       	ld	r18, Z
     662:	31 81       	ldd	r19, Z+1	; 0x01
     664:	21 15       	cp	r18, r1
     666:	31 05       	cpc	r19, r1
     668:	09 f4       	brne	.+2      	; 0x66c <moveCar+0x24e>
     66a:	54 c0       	rjmp	.+168    	; 0x714 <moveCar+0x2f6>
     66c:	42 81       	ldd	r20, Z+2	; 0x02
     66e:	53 81       	ldd	r21, Z+3	; 0x03
     670:	c9 01       	movw	r24, r18
     672:	01 97       	sbiw	r24, 0x01	; 1
     674:	fc 01       	movw	r30, r24
     676:	ee 0f       	add	r30, r30
     678:	ff 1f       	adc	r31, r31
     67a:	88 0f       	add	r24, r24
     67c:	99 1f       	adc	r25, r25
     67e:	88 0f       	add	r24, r24
     680:	99 1f       	adc	r25, r25
     682:	88 0f       	add	r24, r24
     684:	99 1f       	adc	r25, r25
     686:	e8 0f       	add	r30, r24
     688:	f9 1f       	adc	r31, r25
     68a:	e4 0f       	add	r30, r20
     68c:	f5 1f       	adc	r31, r21
     68e:	ee 0f       	add	r30, r30
     690:	ff 1f       	adc	r31, r31
     692:	e1 50       	subi	r30, 0x01	; 1
     694:	fe 4f       	sbci	r31, 0xFE	; 254
     696:	80 81       	ld	r24, Z
     698:	91 81       	ldd	r25, Z+1	; 0x01
     69a:	89 2b       	or	r24, r25
     69c:	d9 f5       	brne	.+118    	; 0x714 <moveCar+0x2f6>
     69e:	c9 01       	movw	r24, r18
     6a0:	88 0f       	add	r24, r24
     6a2:	99 1f       	adc	r25, r25
     6a4:	22 0f       	add	r18, r18
     6a6:	33 1f       	adc	r19, r19
     6a8:	22 0f       	add	r18, r18
     6aa:	33 1f       	adc	r19, r19
     6ac:	22 0f       	add	r18, r18
     6ae:	33 1f       	adc	r19, r19
     6b0:	28 0f       	add	r18, r24
     6b2:	39 1f       	adc	r19, r25
     6b4:	f9 01       	movw	r30, r18
     6b6:	e4 0f       	add	r30, r20
     6b8:	f5 1f       	adc	r31, r21
     6ba:	ee 0f       	add	r30, r30
     6bc:	ff 1f       	adc	r31, r31
     6be:	e1 50       	subi	r30, 0x01	; 1
     6c0:	fe 4f       	sbci	r31, 0xFE	; 254
     6c2:	11 82       	std	Z+1, r1	; 0x01
     6c4:	10 82       	st	Z, r1
     6c6:	db 01       	movw	r26, r22
     6c8:	8d 91       	ld	r24, X+
     6ca:	9c 91       	ld	r25, X
     6cc:	11 97       	sbiw	r26, 0x01	; 1
     6ce:	01 97       	sbiw	r24, 0x01	; 1
     6d0:	11 96       	adiw	r26, 0x01	; 1
     6d2:	9c 93       	st	X, r25
     6d4:	8e 93       	st	-X, r24
     6d6:	12 96       	adiw	r26, 0x02	; 2
     6d8:	ed 91       	ld	r30, X+
     6da:	fc 91       	ld	r31, X
     6dc:	13 97       	sbiw	r26, 0x03	; 3
     6de:	9c 01       	movw	r18, r24
     6e0:	22 0f       	add	r18, r18
     6e2:	33 1f       	adc	r19, r19
     6e4:	88 0f       	add	r24, r24
     6e6:	99 1f       	adc	r25, r25
     6e8:	88 0f       	add	r24, r24
     6ea:	99 1f       	adc	r25, r25
     6ec:	88 0f       	add	r24, r24
     6ee:	99 1f       	adc	r25, r25
     6f0:	82 0f       	add	r24, r18
     6f2:	93 1f       	adc	r25, r19
     6f4:	e8 0f       	add	r30, r24
     6f6:	f9 1f       	adc	r31, r25
     6f8:	ee 0f       	add	r30, r30
     6fa:	ff 1f       	adc	r31, r31
     6fc:	e1 50       	subi	r30, 0x01	; 1
     6fe:	fe 4f       	sbci	r31, 0xFE	; 254
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	91 83       	std	Z+1, r25	; 0x01
     706:	80 83       	st	Z, r24
     708:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <update>
     70c:	88 ec       	ldi	r24, 0xC8	; 200
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <vTaskDelay>
     714:	08 95       	ret

00000716 <gameLogic_task>:
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	00 d0       	rcall	.+0      	; 0x71c <gameLogic_task+0x6>
     71c:	00 d0       	rcall	.+0      	; 0x71e <gameLogic_task+0x8>
     71e:	00 d0       	rcall	.+0      	; 0x720 <gameLogic_task+0xa>
     720:	cd b7       	in	r28, 0x3d	; 61
     722:	de b7       	in	r29, 0x3e	; 62
     724:	64 e0       	ldi	r22, 0x04	; 4
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <vTaskSetApplicationTaskTag>
     730:	01 e0       	ldi	r16, 0x01	; 1
     732:	10 e0       	ldi	r17, 0x00	; 0
     734:	0f 2e       	mov	r0, r31
     736:	fb ef       	ldi	r31, 0xFB	; 251
     738:	ef 2e       	mov	r14, r31
     73a:	f1 e0       	ldi	r31, 0x01	; 1
     73c:	ff 2e       	mov	r15, r31
     73e:	f0 2d       	mov	r31, r0
     740:	0f 2e       	mov	r0, r31
     742:	f7 ef       	ldi	r31, 0xF7	; 247
     744:	cf 2e       	mov	r12, r31
     746:	f1 e0       	ldi	r31, 0x01	; 1
     748:	df 2e       	mov	r13, r31
     74a:	f0 2d       	mov	r31, r0
     74c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <stop>
     750:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <stop+0x1>
     754:	89 2b       	or	r24, r25
     756:	b9 f5       	brne	.+110    	; 0x7c6 <gameLogic_task+0xb0>
     758:	20 e0       	ldi	r18, 0x00	; 0
     75a:	4f ef       	ldi	r20, 0xFF	; 255
     75c:	5f ef       	ldi	r21, 0xFF	; 255
     75e:	be 01       	movw	r22, r28
     760:	6f 5f       	subi	r22, 0xFF	; 255
     762:	7f 4f       	sbci	r23, 0xFF	; 255
     764:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <inputQueue>
     768:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <inputQueue+0x1>
     76c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <xQueueGenericReceive>
     770:	88 23       	and	r24, r24
     772:	09 f4       	brne	.+2      	; 0x776 <gameLogic_task+0x60>
     774:	40 c0       	rjmp	.+128    	; 0x7f6 <gameLogic_task+0xe0>
     776:	8b 81       	ldd	r24, Y+3	; 0x03
     778:	9c 81       	ldd	r25, Y+4	; 0x04
     77a:	f7 01       	movw	r30, r14
     77c:	20 81       	ld	r18, Z
     77e:	31 81       	ldd	r19, Z+1	; 0x01
     780:	82 17       	cp	r24, r18
     782:	93 07       	cpc	r25, r19
     784:	69 f4       	brne	.+26     	; 0x7a0 <gameLogic_task+0x8a>
     786:	4d 81       	ldd	r20, Y+5	; 0x05
     788:	5e 81       	ldd	r21, Y+6	; 0x06
     78a:	22 81       	ldd	r18, Z+2	; 0x02
     78c:	33 81       	ldd	r19, Z+3	; 0x03
     78e:	42 17       	cp	r20, r18
     790:	53 07       	cpc	r21, r19
     792:	31 f4       	brne	.+12     	; 0x7a0 <gameLogic_task+0x8a>
     794:	b7 01       	movw	r22, r14
     796:	89 81       	ldd	r24, Y+1	; 0x01
     798:	9a 81       	ldd	r25, Y+2	; 0x02
     79a:	0e 94 0f 02 	call	0x41e	; 0x41e <moveCar>
     79e:	2b c0       	rjmp	.+86     	; 0x7f6 <gameLogic_task+0xe0>
     7a0:	f6 01       	movw	r30, r12
     7a2:	20 81       	ld	r18, Z
     7a4:	31 81       	ldd	r19, Z+1	; 0x01
     7a6:	82 17       	cp	r24, r18
     7a8:	93 07       	cpc	r25, r19
     7aa:	29 f5       	brne	.+74     	; 0x7f6 <gameLogic_task+0xe0>
     7ac:	2d 81       	ldd	r18, Y+5	; 0x05
     7ae:	3e 81       	ldd	r19, Y+6	; 0x06
     7b0:	82 81       	ldd	r24, Z+2	; 0x02
     7b2:	93 81       	ldd	r25, Z+3	; 0x03
     7b4:	28 17       	cp	r18, r24
     7b6:	39 07       	cpc	r19, r25
     7b8:	f1 f4       	brne	.+60     	; 0x7f6 <gameLogic_task+0xe0>
     7ba:	b6 01       	movw	r22, r12
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
     7be:	9a 81       	ldd	r25, Y+2	; 0x02
     7c0:	0e 94 0f 02 	call	0x41e	; 0x41e <moveCar>
     7c4:	18 c0       	rjmp	.+48     	; 0x7f6 <gameLogic_task+0xe0>
     7c6:	20 91 f3 01 	lds	r18, 0x01F3	; 0x8001f3 <restart1>
     7ca:	30 91 f4 01 	lds	r19, 0x01F4	; 0x8001f4 <restart1+0x1>
     7ce:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <restart2>
     7d2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <restart2+0x1>
     7d6:	82 0f       	add	r24, r18
     7d8:	93 1f       	adc	r25, r19
     7da:	02 97       	sbiw	r24, 0x02	; 2
     7dc:	61 f4       	brne	.+24     	; 0x7f6 <gameLogic_task+0xe0>
     7de:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <stop+0x1>
     7e2:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <stop>
     7e6:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <restart1+0x1>
     7ea:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <restart1>
     7ee:	10 93 0b 01 	sts	0x010B, r17	; 0x80010b <restart2+0x1>
     7f2:	00 93 0a 01 	sts	0x010A, r16	; 0x80010a <restart2>
     7f6:	86 e4       	ldi	r24, 0x46	; 70
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <vTaskDelay>
     7fe:	a6 cf       	rjmp	.-180    	; 0x74c <gameLogic_task+0x36>

00000800 <displayUpdater_task>:
     800:	63 e0       	ldi	r22, 0x03	; 3
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <vTaskSetApplicationTaskTag>
     80c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <update>
     810:	88 ee       	ldi	r24, 0xE8	; 232
     812:	93 e0       	ldi	r25, 0x03	; 3
     814:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <vTaskDelay>
     818:	f9 cf       	rjmp	.-14     	; 0x80c <displayUpdater_task+0xc>

0000081a <startup_task>:
     81a:	ef ef       	ldi	r30, 0xFF	; 255
     81c:	f1 e0       	ldi	r31, 0x01	; 1
     81e:	27 e1       	ldi	r18, 0x17	; 23
     820:	33 e0       	ldi	r19, 0x03	; 3
     822:	09 c0       	rjmp	.+18     	; 0x836 <startup_task+0x1c>
     824:	11 92       	st	Z+, r1
     826:	11 92       	st	Z+, r1
     828:	e8 17       	cp	r30, r24
     82a:	f9 07       	cpc	r31, r25
     82c:	d9 f7       	brne	.-10     	; 0x824 <startup_task+0xa>
     82e:	fc 01       	movw	r30, r24
     830:	28 17       	cp	r18, r24
     832:	39 07       	cpc	r19, r25
     834:	19 f0       	breq	.+6      	; 0x83c <startup_task+0x22>
     836:	cf 01       	movw	r24, r30
     838:	44 96       	adiw	r24, 0x14	; 20
     83a:	f4 cf       	rjmp	.-24     	; 0x824 <startup_task+0xa>
     83c:	eb ef       	ldi	r30, 0xFB	; 251
     83e:	f1 e0       	ldi	r31, 0x01	; 1
     840:	86 e0       	ldi	r24, 0x06	; 6
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	91 83       	std	Z+1, r25	; 0x01
     846:	80 83       	st	Z, r24
     848:	89 e0       	ldi	r24, 0x09	; 9
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	93 83       	std	Z+3, r25	; 0x03
     84e:	82 83       	std	Z+2, r24	; 0x02
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <myMatrix+0x8b>
     858:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <myMatrix+0x8a>
     85c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <update>
     860:	61 e0       	ldi	r22, 0x01	; 1
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <vTaskSetApplicationTaskTag>
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	0e 94 8c 0b 	call	0x1718	; 0x1718 <xQueueCreateMutex>
     872:	90 93 34 03 	sts	0x0334, r25	; 0x800334 <xMutex+0x1>
     876:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <xMutex>
     87a:	e1 2c       	mov	r14, r1
     87c:	f1 2c       	mov	r15, r1
     87e:	04 e0       	ldi	r16, 0x04	; 4
     880:	20 e0       	ldi	r18, 0x00	; 0
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	45 e5       	ldi	r20, 0x55	; 85
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	62 e1       	ldi	r22, 0x12	; 18
     88a:	71 e0       	ldi	r23, 0x01	; 1
     88c:	8d e5       	ldi	r24, 0x5D	; 93
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <xTaskCreate>
     894:	06 e0       	ldi	r16, 0x06	; 6
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	45 e5       	ldi	r20, 0x55	; 85
     89c:	50 e0       	ldi	r21, 0x00	; 0
     89e:	6c e1       	ldi	r22, 0x1C	; 28
     8a0:	71 e0       	ldi	r23, 0x01	; 1
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	94 e0       	ldi	r25, 0x04	; 4
     8a6:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <xTaskCreate>
     8aa:	03 e0       	ldi	r16, 0x03	; 3
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	45 e5       	ldi	r20, 0x55	; 85
     8b2:	50 e0       	ldi	r21, 0x00	; 0
     8b4:	6c e2       	ldi	r22, 0x2C	; 44
     8b6:	71 e0       	ldi	r23, 0x01	; 1
     8b8:	8b e8       	ldi	r24, 0x8B	; 139
     8ba:	93 e0       	ldi	r25, 0x03	; 3
     8bc:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <xTaskCreate>
     8c0:	02 e0       	ldi	r16, 0x02	; 2
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	45 e5       	ldi	r20, 0x55	; 85
     8c8:	50 e0       	ldi	r21, 0x00	; 0
     8ca:	67 e3       	ldi	r22, 0x37	; 55
     8cc:	71 e0       	ldi	r23, 0x01	; 1
     8ce:	89 e5       	ldi	r24, 0x59	; 89
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <xTaskCreate>
     8d6:	6f e0       	ldi	r22, 0x0F	; 15
     8d8:	88 e4       	ldi	r24, 0x48	; 72
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	0e 94 29 05 	call	0xa52	; 0xa52 <com_send_bytes>
     8e0:	ff cf       	rjmp	.-2      	; 0x8e0 <startup_task+0xc6>

000008e2 <prepare_shiftregister>:

// Prepare shift register setting SER = 1
void prepare_shiftregister()
{
	// Set SER to 1
	PORTD |= _BV(PORTD2);
     8e2:	5a 9a       	sbi	0x0b, 2	; 11
     8e4:	08 95       	ret

000008e6 <clock_shift_register_and_prepare_for_next_col>:

// clock shift-register
void clock_shift_register_and_prepare_for_next_col()
{
	// one SCK pulse
	PORTD |= _BV(PORTD5);
     8e6:	5d 9a       	sbi	0x0b, 5	; 11
	PORTD &= ~_BV(PORTD5);
     8e8:	5d 98       	cbi	0x0b, 5	; 11
	
	// one RCK pulse
	PORTD |= _BV(PORTD4);
     8ea:	5c 9a       	sbi	0x0b, 4	; 11
	PORTD &= ~_BV(PORTD4);
     8ec:	5c 98       	cbi	0x0b, 4	; 11
	
	// Set SER to 0 - for next column
	PORTD &= ~_BV(PORTD2);
     8ee:	5a 98       	cbi	0x0b, 2	; 11
     8f0:	08 95       	ret

000008f2 <load_col_value>:
}

// Load column value for column to show
void load_col_value(uint16_t col_value)
{
	PORTA = ~(col_value & 0xFF);
     8f2:	80 95       	com	r24
     8f4:	82 b9       	out	0x02, r24	; 2
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
     8f6:	85 b1       	in	r24, 0x05	; 5
     8f8:	83 60       	ori	r24, 0x03	; 3
     8fa:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~((col_value >> 8) & 0x03);
     8fc:	85 b1       	in	r24, 0x05	; 5
     8fe:	93 70       	andi	r25, 0x03	; 3
     900:	90 95       	com	r25
     902:	89 23       	and	r24, r25
     904:	85 b9       	out	0x05, r24	; 5
     906:	08 95       	ret

00000908 <handle_display>:
}

//-----------------------------------------
void handle_display(void)
{
     908:	cf 93       	push	r28
	static uint8_t col = 0;
	
	if (col == 0)
     90a:	c0 91 66 01 	lds	r28, 0x0166	; 0x800166 <__data_end>
     90e:	c1 11       	cpse	r28, r1
     910:	0e c0       	rjmp	.+28     	; 0x92e <handle_display+0x26>
	{
		prepare_shiftregister();
     912:	0e 94 71 04 	call	0x8e2	; 0x8e2 <prepare_shiftregister>
	}
	
	load_col_value(frame_buf[col]);
     916:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <frame_buf>
     91a:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <frame_buf+0x1>
     91e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
     922:	0e 94 73 04 	call	0x8e6	; 0x8e6 <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	col++;
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <__data_end>
     92c:	14 c0       	rjmp	.+40     	; 0x956 <handle_display+0x4e>
	if (col == 0)
	{
		prepare_shiftregister();
	}
	
	load_col_value(frame_buf[col]);
     92e:	ec 2f       	mov	r30, r28
     930:	f0 e0       	ldi	r31, 0x00	; 0
     932:	ee 0f       	add	r30, r30
     934:	ff 1f       	adc	r31, r31
     936:	e9 5e       	subi	r30, 0xE9	; 233
     938:	fc 4f       	sbci	r31, 0xFC	; 252
     93a:	80 81       	ld	r24, Z
     93c:	91 81       	ldd	r25, Z+1	; 0x01
     93e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
     942:	0e 94 73 04 	call	0x8e6	; 0x8e6 <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	col++;
     946:	cf 5f       	subi	r28, 0xFF	; 255
	if (col > 13)
     948:	ce 30       	cpi	r28, 0x0E	; 14
     94a:	18 f4       	brcc	.+6      	; 0x952 <handle_display+0x4a>
	load_col_value(frame_buf[col]);
	
	clock_shift_register_and_prepare_for_next_col();
	
	// count column up - prepare for next
	col++;
     94c:	c0 93 66 01 	sts	0x0166, r28	; 0x800166 <__data_end>
     950:	02 c0       	rjmp	.+4      	; 0x956 <handle_display+0x4e>
	if (col > 13)
	{
		col = 0;
     952:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <__data_end>
	}
}
     956:	cf 91       	pop	r28
     958:	08 95       	ret

0000095a <vApplicationIdleHook>:

//-----------------------------------------
void vApplicationIdleHook( void )
{
     95a:	08 95       	ret

0000095c <main>:
}

//-----------------------------------------
int main(void)
{	
	init_board();
     95c:	0e 94 32 05 	call	0xa64	; 0xa64 <init_board>
	inputQueue = xQueueCreate(20, sizeof(struct input));
     960:	40 e0       	ldi	r20, 0x00	; 0
     962:	66 e0       	ldi	r22, 0x06	; 6
     964:	84 e1       	ldi	r24, 0x14	; 20
     966:	0e 94 ba 0a 	call	0x1574	; 0x1574 <xQueueGenericCreate>
     96a:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <inputQueue+0x1>
     96e:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <inputQueue>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
     972:	5e 98       	cbi	0x0b, 6	; 11
	
	//Create task to blink gpio
	BaseType_t t1 = xTaskCreate(startup_task, (const char *)"Startup", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
     974:	e1 2c       	mov	r14, r1
     976:	f1 2c       	mov	r15, r1
     978:	00 e0       	ldi	r16, 0x00	; 0
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	45 e5       	ldi	r20, 0x55	; 85
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	68 e5       	ldi	r22, 0x58	; 88
     984:	71 e0       	ldi	r23, 0x01	; 1
     986:	8d e0       	ldi	r24, 0x0D	; 13
     988:	94 e0       	ldi	r25, 0x04	; 4
     98a:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <xTaskCreate>

	// Start the display handler timer
	init_display_timer(handle_display);
     98e:	84 e8       	ldi	r24, 0x84	; 132
     990:	94 e0       	ldi	r25, 0x04	; 4
     992:	0e 94 ee 04 	call	0x9dc	; 0x9dc <init_display_timer>
	
	sei();
     996:	78 94       	sei
	
	//Start the scheduler
	vTaskStartScheduler();
     998:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <vTaskStartScheduler>
	
	//Should never reach here
	while (1)
	{
	}
     99c:	ff cf       	rjmp	.-2      	; 0x99c <main+0x40>

0000099e <_com_call_back>:
	}
}

// ----------------------------------------------------------------------------------------------------------------------
void init_com(QueueHandle_t x_rx_queue) {
	_x_rx_com_queue = x_rx_queue;
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	00 d0       	rcall	.+0      	; 0x9a4 <_com_call_back+0x6>
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
     9a8:	6a 83       	std	Y+2, r22	; 0x02
     9aa:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <_x_rx_com_queue>
     9ae:	90 91 7e 03 	lds	r25, 0x037E	; 0x80037e <_x_rx_com_queue+0x1>
     9b2:	00 97       	sbiw	r24, 0x00	; 0
     9b4:	71 f0       	breq	.+28     	; 0x9d2 <_com_call_back+0x34>
     9b6:	19 82       	std	Y+1, r1	; 0x01
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	ae 01       	movw	r20, r28
     9bc:	4f 5f       	subi	r20, 0xFF	; 255
     9be:	5f 4f       	sbci	r21, 0xFF	; 255
     9c0:	be 01       	movw	r22, r28
     9c2:	6e 5f       	subi	r22, 0xFE	; 254
     9c4:	7f 4f       	sbci	r23, 0xFF	; 255
     9c6:	0e 94 a6 0b 	call	0x174c	; 0x174c <xQueueGenericSendFromISR>
     9ca:	89 81       	ldd	r24, Y+1	; 0x01
     9cc:	81 11       	cpse	r24, r1
     9ce:	0e 94 fe 06 	call	0xdfc	; 0xdfc <vPortYield>
     9d2:	0f 90       	pop	r0
     9d4:	0f 90       	pop	r0
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	08 95       	ret

000009dc <init_display_timer>:
}

// ----------------------------------------------------------------------------------------------------------------------
void init_display_timer(display_callback_ptr_t cb)
{
	cb_ptr = cb;
     9dc:	90 93 7c 03 	sts	0x037C, r25	; 0x80037c <cb_ptr+0x1>
     9e0:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <cb_ptr>
	
	// Setup timer T0 to CTC, ~1309 Hz
	OCR0A = 10;
     9e4:	8a e0       	ldi	r24, 0x0A	; 10
     9e6:	87 bd       	out	0x27, r24	; 39
	TCCR0A |= _BV(WGM01); // Mode 2
     9e8:	84 b5       	in	r24, 0x24	; 36
     9ea:	82 60       	ori	r24, 0x02	; 2
     9ec:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= _BV(OCIE0A); // Enable interrupt
     9ee:	ee e6       	ldi	r30, 0x6E	; 110
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	80 81       	ld	r24, Z
     9f4:	82 60       	ori	r24, 0x02	; 2
     9f6:	80 83       	st	Z, r24
	TCCR0B |= _BV(CS00) | _BV(CS02); // Prescaler 1024 - and start timer
     9f8:	85 b5       	in	r24, 0x25	; 37
     9fa:	85 60       	ori	r24, 0x05	; 5
     9fc:	85 bd       	out	0x25, r24	; 37
     9fe:	08 95       	ret

00000a00 <__vector_16>:
}

// ----------------------------------------------------------------------------------------------------------------------
//ISR for display timer
ISR(TIMER0_COMPA_vect)
{
     a00:	1f 92       	push	r1
     a02:	0f 92       	push	r0
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	0f 92       	push	r0
     a08:	11 24       	eor	r1, r1
     a0a:	2f 93       	push	r18
     a0c:	3f 93       	push	r19
     a0e:	4f 93       	push	r20
     a10:	5f 93       	push	r21
     a12:	6f 93       	push	r22
     a14:	7f 93       	push	r23
     a16:	8f 93       	push	r24
     a18:	9f 93       	push	r25
     a1a:	af 93       	push	r26
     a1c:	bf 93       	push	r27
     a1e:	ef 93       	push	r30
     a20:	ff 93       	push	r31
	if (cb_ptr)
     a22:	e0 91 7b 03 	lds	r30, 0x037B	; 0x80037b <cb_ptr>
     a26:	f0 91 7c 03 	lds	r31, 0x037C	; 0x80037c <cb_ptr+0x1>
     a2a:	30 97       	sbiw	r30, 0x00	; 0
     a2c:	09 f0       	breq	.+2      	; 0xa30 <__vector_16+0x30>
	{
		cb_ptr();
     a2e:	09 95       	icall
	}
}
     a30:	ff 91       	pop	r31
     a32:	ef 91       	pop	r30
     a34:	bf 91       	pop	r27
     a36:	af 91       	pop	r26
     a38:	9f 91       	pop	r25
     a3a:	8f 91       	pop	r24
     a3c:	7f 91       	pop	r23
     a3e:	6f 91       	pop	r22
     a40:	5f 91       	pop	r21
     a42:	4f 91       	pop	r20
     a44:	3f 91       	pop	r19
     a46:	2f 91       	pop	r18
     a48:	0f 90       	pop	r0
     a4a:	0f be       	out	0x3f, r0	; 63
     a4c:	0f 90       	pop	r0
     a4e:	1f 90       	pop	r1
     a50:	18 95       	reti

00000a52 <com_send_bytes>:

// ----------------------------------------------------------------------------------------------------------------------
void com_send_bytes(uint8_t *bytes, uint8_t len) {
     a52:	46 2f       	mov	r20, r22
	serial_send_bytes(_com_serial_instance, bytes, len);
     a54:	bc 01       	movw	r22, r24
     a56:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <_com_serial_instance>
     a5a:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <_com_serial_instance+0x1>
     a5e:	0e 94 66 08 	call	0x10cc	; 0x10cc <serial_send_bytes>
     a62:	08 95       	ret

00000a64 <init_board>:
}

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
     a64:	8f 92       	push	r8
     a66:	9f 92       	push	r9
     a68:	af 92       	push	r10
     a6a:	bf 92       	push	r11
     a6c:	cf 92       	push	r12
     a6e:	df 92       	push	r13
     a70:	ef 92       	push	r14
     a72:	0f 93       	push	r16
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
     a74:	88 e5       	ldi	r24, 0x58	; 88
     a76:	93 e0       	ldi	r25, 0x03	; 3
     a78:	0e 94 8b 05 	call	0xb16	; 0xb16 <buffer_init>
	buffer_init(&_com_tx_buffer);
     a7c:	85 e3       	ldi	r24, 0x35	; 53
     a7e:	93 e0       	ldi	r25, 0x03	; 3
     a80:	0e 94 8b 05 	call	0xb16	; 0xb16 <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
     a84:	0f 2e       	mov	r0, r31
     a86:	ff ec       	ldi	r31, 0xCF	; 207
     a88:	8f 2e       	mov	r8, r31
     a8a:	f4 e0       	ldi	r31, 0x04	; 4
     a8c:	9f 2e       	mov	r9, r31
     a8e:	f0 2d       	mov	r31, r0
     a90:	0f 2e       	mov	r0, r31
     a92:	f5 e3       	ldi	r31, 0x35	; 53
     a94:	af 2e       	mov	r10, r31
     a96:	f3 e0       	ldi	r31, 0x03	; 3
     a98:	bf 2e       	mov	r11, r31
     a9a:	f0 2d       	mov	r31, r0
     a9c:	0f 2e       	mov	r0, r31
     a9e:	f8 e5       	ldi	r31, 0x58	; 88
     aa0:	cf 2e       	mov	r12, r31
     aa2:	f3 e0       	ldi	r31, 0x03	; 3
     aa4:	df 2e       	mov	r13, r31
     aa6:	f0 2d       	mov	r31, r0
     aa8:	e1 2c       	mov	r14, r1
     aaa:	00 e0       	ldi	r16, 0x00	; 0
     aac:	23 e0       	ldi	r18, 0x03	; 3
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	52 ec       	ldi	r21, 0xC2	; 194
     ab2:	61 e0       	ldi	r22, 0x01	; 1
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <serial_new_instance>
     abc:	90 93 80 03 	sts	0x0380, r25	; 0x800380 <_com_serial_instance+0x1>
     ac0:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <_com_serial_instance>
	
	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
     ac4:	88 b1       	in	r24, 0x08	; 8
     ac6:	83 6c       	ori	r24, 0xC3	; 195
     ac8:	88 b9       	out	0x08, r24	; 8
	PORTD |= _BV(PORTD3);
     aca:	5b 9a       	sbi	0x0b, 3	; 11
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
     acc:	8a b1       	in	r24, 0x0a	; 10
     ace:	84 67       	ori	r24, 0x74	; 116
     ad0:	8a b9       	out	0x0a, r24	; 10
	// G (enable output) high
	PORTD |= _BV(PORTD6);
     ad2:	5e 9a       	sbi	0x0b, 6	; 11
	
	// Column pins to output
	DDRA |= 0xFF;
     ad4:	81 b1       	in	r24, 0x01	; 1
     ad6:	8f ef       	ldi	r24, 0xFF	; 255
     ad8:	81 b9       	out	0x01, r24	; 1
	DDRB |= _BV(DDB0) | _BV(DDB1);
     ada:	84 b1       	in	r24, 0x04	; 4
     adc:	83 60       	ori	r24, 0x03	; 3
     ade:	84 b9       	out	0x04, r24	; 4
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
     ae0:	84 b1       	in	r24, 0x04	; 4
     ae2:	8c 63       	ori	r24, 0x3C	; 60
     ae4:	84 b9       	out	0x04, r24	; 4
}
     ae6:	0f 91       	pop	r16
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	cf 90       	pop	r12
     aee:	bf 90       	pop	r11
     af0:	af 90       	pop	r10
     af2:	9f 90       	pop	r9
     af4:	8f 90       	pop	r8
     af6:	08 95       	ret

00000af8 <switch_in>:
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
		PORTB &= 0b11000011;
     af8:	95 b1       	in	r25, 0x05	; 5
     afa:	93 7c       	andi	r25, 0xC3	; 195
     afc:	95 b9       	out	0x05, r25	; 5
		PORTB |= task_no << 2;
     afe:	25 b1       	in	r18, 0x05	; 5
     b00:	34 e0       	ldi	r19, 0x04	; 4
     b02:	83 9f       	mul	r24, r19
     b04:	c0 01       	movw	r24, r0
     b06:	11 24       	eor	r1, r1
     b08:	82 2b       	or	r24, r18
     b0a:	85 b9       	out	0x05, r24	; 5
     b0c:	08 95       	ret

00000b0e <switch_out>:
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
		PORTB &= 0b11000011;
     b0e:	85 b1       	in	r24, 0x05	; 5
     b10:	83 7c       	andi	r24, 0xC3	; 195
     b12:	85 b9       	out	0x05, r24	; 5
     b14:	08 95       	ret

00000b16 <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
     b16:	fc 01       	movw	r30, r24
	buffer->in_i = 0;
     b18:	10 a2       	std	Z+32, r1	; 0x20
	buffer->out_i = 0;
     b1a:	11 a2       	std	Z+33, r1	; 0x21
	buffer->no_in_buffer = 0;
     b1c:	12 a2       	std	Z+34, r1	; 0x22
     b1e:	08 95       	ret

00000b20 <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
     b20:	fc 01       	movw	r30, r24
	if (buffer->no_in_buffer > 0) {
     b22:	82 a1       	ldd	r24, Z+34	; 0x22
     b24:	88 23       	and	r24, r24
     b26:	d9 f0       	breq	.+54     	; 0xb5e <buffer_get_item+0x3e>
		*item = buffer->storage[buffer->out_i];
     b28:	81 a1       	ldd	r24, Z+33	; 0x21
     b2a:	df 01       	movw	r26, r30
     b2c:	a8 0f       	add	r26, r24
     b2e:	b1 1d       	adc	r27, r1
     b30:	8c 91       	ld	r24, X
     b32:	db 01       	movw	r26, r22
     b34:	8c 93       	st	X, r24
		buffer->out_i = INCREMENT(buffer->out_i);
     b36:	21 a1       	ldd	r18, Z+33	; 0x21
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	2f 5f       	subi	r18, 0xFF	; 255
     b3c:	3f 4f       	sbci	r19, 0xFF	; 255
     b3e:	2f 71       	andi	r18, 0x1F	; 31
     b40:	30 78       	andi	r19, 0x80	; 128
     b42:	33 23       	and	r19, r19
     b44:	34 f4       	brge	.+12     	; 0xb52 <buffer_get_item+0x32>
     b46:	21 50       	subi	r18, 0x01	; 1
     b48:	31 09       	sbc	r19, r1
     b4a:	20 6e       	ori	r18, 0xE0	; 224
     b4c:	3f 6f       	ori	r19, 0xFF	; 255
     b4e:	2f 5f       	subi	r18, 0xFF	; 255
     b50:	3f 4f       	sbci	r19, 0xFF	; 255
     b52:	21 a3       	std	Z+33, r18	; 0x21
		buffer->no_in_buffer--;
     b54:	82 a1       	ldd	r24, Z+34	; 0x22
     b56:	81 50       	subi	r24, 0x01	; 1
     b58:	82 a3       	std	Z+34, r24	; 0x22
		return BUFFER_OK;
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	08 95       	ret
	}
	return BUFFER_EMPTY;
     b5e:	81 e0       	ldi	r24, 0x01	; 1
}
     b60:	08 95       	ret

00000b62 <buffer_put_item>:
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
	if (buffer->no_in_buffer<BUFFER_SIZE) {
     b62:	fc 01       	movw	r30, r24
     b64:	42 a1       	ldd	r20, Z+34	; 0x22
     b66:	40 32       	cpi	r20, 0x20	; 32
     b68:	b8 f4       	brcc	.+46     	; 0xb98 <buffer_put_item+0x36>
		buffer->storage[buffer->in_i] = item;
     b6a:	20 a1       	ldd	r18, Z+32	; 0x20
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	e2 0f       	add	r30, r18
     b70:	f3 1f       	adc	r31, r19
     b72:	60 83       	st	Z, r22
		buffer->in_i = INCREMENT(buffer->in_i);
     b74:	2f 5f       	subi	r18, 0xFF	; 255
     b76:	3f 4f       	sbci	r19, 0xFF	; 255
     b78:	2f 71       	andi	r18, 0x1F	; 31
     b7a:	30 78       	andi	r19, 0x80	; 128
     b7c:	33 23       	and	r19, r19
     b7e:	34 f4       	brge	.+12     	; 0xb8c <buffer_put_item+0x2a>
     b80:	21 50       	subi	r18, 0x01	; 1
     b82:	31 09       	sbc	r19, r1
     b84:	20 6e       	ori	r18, 0xE0	; 224
     b86:	3f 6f       	ori	r19, 0xFF	; 255
     b88:	2f 5f       	subi	r18, 0xFF	; 255
     b8a:	3f 4f       	sbci	r19, 0xFF	; 255
     b8c:	fc 01       	movw	r30, r24
     b8e:	20 a3       	std	Z+32, r18	; 0x20
		buffer->no_in_buffer++;
     b90:	4f 5f       	subi	r20, 0xFF	; 255
     b92:	42 a3       	std	Z+34, r20	; 0x22
		return BUFFER_OK;
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	08 95       	ret
	}
	return BUFFER_FULL;
     b98:	82 e0       	ldi	r24, 0x02	; 2
}
     b9a:	08 95       	ret

00000b9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     b9c:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     b9e:	03 96       	adiw	r24, 0x03	; 3
     ba0:	92 83       	std	Z+2, r25	; 0x02
     ba2:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     ba4:	2f ef       	ldi	r18, 0xFF	; 255
     ba6:	3f ef       	ldi	r19, 0xFF	; 255
     ba8:	34 83       	std	Z+4, r19	; 0x04
     baa:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     bac:	96 83       	std	Z+6, r25	; 0x06
     bae:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     bb0:	90 87       	std	Z+8, r25	; 0x08
     bb2:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     bb4:	10 82       	st	Z, r1
     bb6:	08 95       	ret

00000bb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     bb8:	fc 01       	movw	r30, r24
     bba:	11 86       	std	Z+9, r1	; 0x09
     bbc:	10 86       	std	Z+8, r1	; 0x08
     bbe:	08 95       	ret

00000bc0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	9c 01       	movw	r18, r24
     bc6:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     bc8:	dc 01       	movw	r26, r24
     bca:	11 96       	adiw	r26, 0x01	; 1
     bcc:	cd 91       	ld	r28, X+
     bce:	dc 91       	ld	r29, X
     bd0:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     bd2:	d3 83       	std	Z+3, r29	; 0x03
     bd4:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     bd6:	8c 81       	ldd	r24, Y+4	; 0x04
     bd8:	9d 81       	ldd	r25, Y+5	; 0x05
     bda:	95 83       	std	Z+5, r25	; 0x05
     bdc:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     bde:	8c 81       	ldd	r24, Y+4	; 0x04
     be0:	9d 81       	ldd	r25, Y+5	; 0x05
     be2:	dc 01       	movw	r26, r24
     be4:	13 96       	adiw	r26, 0x03	; 3
     be6:	7c 93       	st	X, r23
     be8:	6e 93       	st	-X, r22
     bea:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     bec:	7d 83       	std	Y+5, r23	; 0x05
     bee:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     bf0:	31 87       	std	Z+9, r19	; 0x09
     bf2:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     bf4:	f9 01       	movw	r30, r18
     bf6:	80 81       	ld	r24, Z
     bf8:	8f 5f       	subi	r24, 0xFF	; 255
     bfa:	80 83       	st	Z, r24
}
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	08 95       	ret

00000c02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     c08:	48 81       	ld	r20, Y
     c0a:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     c0c:	4f 3f       	cpi	r20, 0xFF	; 255
     c0e:	2f ef       	ldi	r18, 0xFF	; 255
     c10:	52 07       	cpc	r21, r18
     c12:	21 f4       	brne	.+8      	; 0xc1c <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     c14:	fc 01       	movw	r30, r24
     c16:	a7 81       	ldd	r26, Z+7	; 0x07
     c18:	b0 85       	ldd	r27, Z+8	; 0x08
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c1c:	dc 01       	movw	r26, r24
     c1e:	13 96       	adiw	r26, 0x03	; 3
     c20:	01 c0       	rjmp	.+2      	; 0xc24 <vListInsert+0x22>
     c22:	df 01       	movw	r26, r30
     c24:	12 96       	adiw	r26, 0x02	; 2
     c26:	ed 91       	ld	r30, X+
     c28:	fc 91       	ld	r31, X
     c2a:	13 97       	sbiw	r26, 0x03	; 3
     c2c:	20 81       	ld	r18, Z
     c2e:	31 81       	ldd	r19, Z+1	; 0x01
     c30:	42 17       	cp	r20, r18
     c32:	53 07       	cpc	r21, r19
     c34:	b0 f7       	brcc	.-20     	; 0xc22 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     c36:	12 96       	adiw	r26, 0x02	; 2
     c38:	ed 91       	ld	r30, X+
     c3a:	fc 91       	ld	r31, X
     c3c:	13 97       	sbiw	r26, 0x03	; 3
     c3e:	fb 83       	std	Y+3, r31	; 0x03
     c40:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     c42:	d5 83       	std	Z+5, r29	; 0x05
     c44:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     c46:	bd 83       	std	Y+5, r27	; 0x05
     c48:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     c4a:	13 96       	adiw	r26, 0x03	; 3
     c4c:	dc 93       	st	X, r29
     c4e:	ce 93       	st	-X, r28
     c50:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     c52:	99 87       	std	Y+9, r25	; 0x09
     c54:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     c56:	fc 01       	movw	r30, r24
     c58:	20 81       	ld	r18, Z
     c5a:	2f 5f       	subi	r18, 0xFF	; 255
     c5c:	20 83       	st	Z, r18
}
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	08 95       	ret

00000c64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     c6a:	a0 85       	ldd	r26, Z+8	; 0x08
     c6c:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     c6e:	c2 81       	ldd	r28, Z+2	; 0x02
     c70:	d3 81       	ldd	r29, Z+3	; 0x03
     c72:	84 81       	ldd	r24, Z+4	; 0x04
     c74:	95 81       	ldd	r25, Z+5	; 0x05
     c76:	9d 83       	std	Y+5, r25	; 0x05
     c78:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     c7a:	c4 81       	ldd	r28, Z+4	; 0x04
     c7c:	d5 81       	ldd	r29, Z+5	; 0x05
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	9b 83       	std	Y+3, r25	; 0x03
     c84:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     c86:	11 96       	adiw	r26, 0x01	; 1
     c88:	cd 91       	ld	r28, X+
     c8a:	dc 91       	ld	r29, X
     c8c:	12 97       	sbiw	r26, 0x02	; 2
     c8e:	ce 17       	cp	r28, r30
     c90:	df 07       	cpc	r29, r31
     c92:	31 f4       	brne	.+12     	; 0xca0 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     c94:	8c 81       	ldd	r24, Y+4	; 0x04
     c96:	9d 81       	ldd	r25, Y+5	; 0x05
     c98:	12 96       	adiw	r26, 0x02	; 2
     c9a:	9c 93       	st	X, r25
     c9c:	8e 93       	st	-X, r24
     c9e:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     ca0:	11 86       	std	Z+9, r1	; 0x09
     ca2:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     ca4:	8c 91       	ld	r24, X
     ca6:	81 50       	subi	r24, 0x01	; 1
     ca8:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	08 95       	ret

00000cb0 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     cb0:	31 e1       	ldi	r19, 0x11	; 17
     cb2:	fc 01       	movw	r30, r24
     cb4:	30 83       	st	Z, r19
     cb6:	31 97       	sbiw	r30, 0x01	; 1
     cb8:	22 e2       	ldi	r18, 0x22	; 34
     cba:	20 83       	st	Z, r18
     cbc:	31 97       	sbiw	r30, 0x01	; 1
     cbe:	a3 e3       	ldi	r26, 0x33	; 51
     cc0:	a0 83       	st	Z, r26
     cc2:	31 97       	sbiw	r30, 0x01	; 1
     cc4:	60 83       	st	Z, r22
     cc6:	31 97       	sbiw	r30, 0x01	; 1
     cc8:	70 83       	st	Z, r23
     cca:	31 97       	sbiw	r30, 0x01	; 1
     ccc:	10 82       	st	Z, r1
     cce:	31 97       	sbiw	r30, 0x01	; 1
     cd0:	60 e8       	ldi	r22, 0x80	; 128
     cd2:	60 83       	st	Z, r22
     cd4:	31 97       	sbiw	r30, 0x01	; 1
     cd6:	10 82       	st	Z, r1
     cd8:	31 97       	sbiw	r30, 0x01	; 1
     cda:	62 e0       	ldi	r22, 0x02	; 2
     cdc:	60 83       	st	Z, r22
     cde:	31 97       	sbiw	r30, 0x01	; 1
     ce0:	63 e0       	ldi	r22, 0x03	; 3
     ce2:	60 83       	st	Z, r22
     ce4:	31 97       	sbiw	r30, 0x01	; 1
     ce6:	64 e0       	ldi	r22, 0x04	; 4
     ce8:	60 83       	st	Z, r22
     cea:	31 97       	sbiw	r30, 0x01	; 1
     cec:	65 e0       	ldi	r22, 0x05	; 5
     cee:	60 83       	st	Z, r22
     cf0:	31 97       	sbiw	r30, 0x01	; 1
     cf2:	66 e0       	ldi	r22, 0x06	; 6
     cf4:	60 83       	st	Z, r22
     cf6:	31 97       	sbiw	r30, 0x01	; 1
     cf8:	67 e0       	ldi	r22, 0x07	; 7
     cfa:	60 83       	st	Z, r22
     cfc:	31 97       	sbiw	r30, 0x01	; 1
     cfe:	68 e0       	ldi	r22, 0x08	; 8
     d00:	60 83       	st	Z, r22
     d02:	31 97       	sbiw	r30, 0x01	; 1
     d04:	69 e0       	ldi	r22, 0x09	; 9
     d06:	60 83       	st	Z, r22
     d08:	31 97       	sbiw	r30, 0x01	; 1
     d0a:	60 e1       	ldi	r22, 0x10	; 16
     d0c:	60 83       	st	Z, r22
     d0e:	31 97       	sbiw	r30, 0x01	; 1
     d10:	30 83       	st	Z, r19
     d12:	31 97       	sbiw	r30, 0x01	; 1
     d14:	32 e1       	ldi	r19, 0x12	; 18
     d16:	30 83       	st	Z, r19
     d18:	31 97       	sbiw	r30, 0x01	; 1
     d1a:	33 e1       	ldi	r19, 0x13	; 19
     d1c:	30 83       	st	Z, r19
     d1e:	31 97       	sbiw	r30, 0x01	; 1
     d20:	34 e1       	ldi	r19, 0x14	; 20
     d22:	30 83       	st	Z, r19
     d24:	31 97       	sbiw	r30, 0x01	; 1
     d26:	35 e1       	ldi	r19, 0x15	; 21
     d28:	30 83       	st	Z, r19
     d2a:	31 97       	sbiw	r30, 0x01	; 1
     d2c:	36 e1       	ldi	r19, 0x16	; 22
     d2e:	30 83       	st	Z, r19
     d30:	31 97       	sbiw	r30, 0x01	; 1
     d32:	37 e1       	ldi	r19, 0x17	; 23
     d34:	30 83       	st	Z, r19
     d36:	31 97       	sbiw	r30, 0x01	; 1
     d38:	38 e1       	ldi	r19, 0x18	; 24
     d3a:	30 83       	st	Z, r19
     d3c:	31 97       	sbiw	r30, 0x01	; 1
     d3e:	39 e1       	ldi	r19, 0x19	; 25
     d40:	30 83       	st	Z, r19
     d42:	31 97       	sbiw	r30, 0x01	; 1
     d44:	30 e2       	ldi	r19, 0x20	; 32
     d46:	30 83       	st	Z, r19
     d48:	31 97       	sbiw	r30, 0x01	; 1
     d4a:	31 e2       	ldi	r19, 0x21	; 33
     d4c:	30 83       	st	Z, r19
     d4e:	31 97       	sbiw	r30, 0x01	; 1
     d50:	20 83       	st	Z, r18
     d52:	31 97       	sbiw	r30, 0x01	; 1
     d54:	23 e2       	ldi	r18, 0x23	; 35
     d56:	20 83       	st	Z, r18
     d58:	31 97       	sbiw	r30, 0x01	; 1
     d5a:	40 83       	st	Z, r20
     d5c:	31 97       	sbiw	r30, 0x01	; 1
     d5e:	50 83       	st	Z, r21
     d60:	31 97       	sbiw	r30, 0x01	; 1
     d62:	26 e2       	ldi	r18, 0x26	; 38
     d64:	20 83       	st	Z, r18
     d66:	31 97       	sbiw	r30, 0x01	; 1
     d68:	27 e2       	ldi	r18, 0x27	; 39
     d6a:	20 83       	st	Z, r18
     d6c:	31 97       	sbiw	r30, 0x01	; 1
     d6e:	28 e2       	ldi	r18, 0x28	; 40
     d70:	20 83       	st	Z, r18
     d72:	31 97       	sbiw	r30, 0x01	; 1
     d74:	29 e2       	ldi	r18, 0x29	; 41
     d76:	20 83       	st	Z, r18
     d78:	31 97       	sbiw	r30, 0x01	; 1
     d7a:	20 e3       	ldi	r18, 0x30	; 48
     d7c:	20 83       	st	Z, r18
     d7e:	31 97       	sbiw	r30, 0x01	; 1
     d80:	21 e3       	ldi	r18, 0x31	; 49
     d82:	20 83       	st	Z, r18
     d84:	86 97       	sbiw	r24, 0x26	; 38
     d86:	08 95       	ret

00000d88 <xPortStartScheduler>:
     d88:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     d8c:	85 ee       	ldi	r24, 0xE5	; 229
     d8e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     d92:	8b e0       	ldi	r24, 0x0B	; 11
     d94:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     d98:	ef e6       	ldi	r30, 0x6F	; 111
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
     d9e:	82 60       	ori	r24, 0x02	; 2
     da0:	80 83       	st	Z, r24
     da2:	a0 91 cc 07 	lds	r26, 0x07CC	; 0x8007cc <pxCurrentTCB>
     da6:	b0 91 cd 07 	lds	r27, 0x07CD	; 0x8007cd <pxCurrentTCB+0x1>
     daa:	cd 91       	ld	r28, X+
     dac:	cd bf       	out	0x3d, r28	; 61
     dae:	dd 91       	ld	r29, X+
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	ff 91       	pop	r31
     db4:	ef 91       	pop	r30
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	bf 91       	pop	r27
     dbc:	af 91       	pop	r26
     dbe:	9f 91       	pop	r25
     dc0:	8f 91       	pop	r24
     dc2:	7f 91       	pop	r23
     dc4:	6f 91       	pop	r22
     dc6:	5f 91       	pop	r21
     dc8:	4f 91       	pop	r20
     dca:	3f 91       	pop	r19
     dcc:	2f 91       	pop	r18
     dce:	1f 91       	pop	r17
     dd0:	0f 91       	pop	r16
     dd2:	ff 90       	pop	r15
     dd4:	ef 90       	pop	r14
     dd6:	df 90       	pop	r13
     dd8:	cf 90       	pop	r12
     dda:	bf 90       	pop	r11
     ddc:	af 90       	pop	r10
     dde:	9f 90       	pop	r9
     de0:	8f 90       	pop	r8
     de2:	7f 90       	pop	r7
     de4:	6f 90       	pop	r6
     de6:	5f 90       	pop	r5
     de8:	4f 90       	pop	r4
     dea:	3f 90       	pop	r3
     dec:	2f 90       	pop	r2
     dee:	1f 90       	pop	r1
     df0:	0f 90       	pop	r0
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	0f 90       	pop	r0
     df6:	08 95       	ret
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	08 95       	ret

00000dfc <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     dfc:	0f 92       	push	r0
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	0f 92       	push	r0
     e04:	1f 92       	push	r1
     e06:	11 24       	eor	r1, r1
     e08:	2f 92       	push	r2
     e0a:	3f 92       	push	r3
     e0c:	4f 92       	push	r4
     e0e:	5f 92       	push	r5
     e10:	6f 92       	push	r6
     e12:	7f 92       	push	r7
     e14:	8f 92       	push	r8
     e16:	9f 92       	push	r9
     e18:	af 92       	push	r10
     e1a:	bf 92       	push	r11
     e1c:	cf 92       	push	r12
     e1e:	df 92       	push	r13
     e20:	ef 92       	push	r14
     e22:	ff 92       	push	r15
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	2f 93       	push	r18
     e2a:	3f 93       	push	r19
     e2c:	4f 93       	push	r20
     e2e:	5f 93       	push	r21
     e30:	6f 93       	push	r22
     e32:	7f 93       	push	r23
     e34:	8f 93       	push	r24
     e36:	9f 93       	push	r25
     e38:	af 93       	push	r26
     e3a:	bf 93       	push	r27
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	ef 93       	push	r30
     e42:	ff 93       	push	r31
     e44:	a0 91 cc 07 	lds	r26, 0x07CC	; 0x8007cc <pxCurrentTCB>
     e48:	b0 91 cd 07 	lds	r27, 0x07CD	; 0x8007cd <pxCurrentTCB+0x1>
     e4c:	0d b6       	in	r0, 0x3d	; 61
     e4e:	0d 92       	st	X+, r0
     e50:	0e b6       	in	r0, 0x3e	; 62
     e52:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     e54:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     e58:	a0 91 cc 07 	lds	r26, 0x07CC	; 0x8007cc <pxCurrentTCB>
     e5c:	b0 91 cd 07 	lds	r27, 0x07CD	; 0x8007cd <pxCurrentTCB+0x1>
     e60:	cd 91       	ld	r28, X+
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	dd 91       	ld	r29, X+
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	ff 91       	pop	r31
     e6a:	ef 91       	pop	r30
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	bf 91       	pop	r27
     e72:	af 91       	pop	r26
     e74:	9f 91       	pop	r25
     e76:	8f 91       	pop	r24
     e78:	7f 91       	pop	r23
     e7a:	6f 91       	pop	r22
     e7c:	5f 91       	pop	r21
     e7e:	4f 91       	pop	r20
     e80:	3f 91       	pop	r19
     e82:	2f 91       	pop	r18
     e84:	1f 91       	pop	r17
     e86:	0f 91       	pop	r16
     e88:	ff 90       	pop	r15
     e8a:	ef 90       	pop	r14
     e8c:	df 90       	pop	r13
     e8e:	cf 90       	pop	r12
     e90:	bf 90       	pop	r11
     e92:	af 90       	pop	r10
     e94:	9f 90       	pop	r9
     e96:	8f 90       	pop	r8
     e98:	7f 90       	pop	r7
     e9a:	6f 90       	pop	r6
     e9c:	5f 90       	pop	r5
     e9e:	4f 90       	pop	r4
     ea0:	3f 90       	pop	r3
     ea2:	2f 90       	pop	r2
     ea4:	1f 90       	pop	r1
     ea6:	0f 90       	pop	r0
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	0f 90       	pop	r0

	asm volatile ( "ret" );
     eac:	08 95       	ret

00000eae <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     eae:	0f 92       	push	r0
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	f8 94       	cli
     eb4:	0f 92       	push	r0
     eb6:	1f 92       	push	r1
     eb8:	11 24       	eor	r1, r1
     eba:	2f 92       	push	r2
     ebc:	3f 92       	push	r3
     ebe:	4f 92       	push	r4
     ec0:	5f 92       	push	r5
     ec2:	6f 92       	push	r6
     ec4:	7f 92       	push	r7
     ec6:	8f 92       	push	r8
     ec8:	9f 92       	push	r9
     eca:	af 92       	push	r10
     ecc:	bf 92       	push	r11
     ece:	cf 92       	push	r12
     ed0:	df 92       	push	r13
     ed2:	ef 92       	push	r14
     ed4:	ff 92       	push	r15
     ed6:	0f 93       	push	r16
     ed8:	1f 93       	push	r17
     eda:	2f 93       	push	r18
     edc:	3f 93       	push	r19
     ede:	4f 93       	push	r20
     ee0:	5f 93       	push	r21
     ee2:	6f 93       	push	r22
     ee4:	7f 93       	push	r23
     ee6:	8f 93       	push	r24
     ee8:	9f 93       	push	r25
     eea:	af 93       	push	r26
     eec:	bf 93       	push	r27
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	ef 93       	push	r30
     ef4:	ff 93       	push	r31
     ef6:	a0 91 cc 07 	lds	r26, 0x07CC	; 0x8007cc <pxCurrentTCB>
     efa:	b0 91 cd 07 	lds	r27, 0x07CD	; 0x8007cd <pxCurrentTCB+0x1>
     efe:	0d b6       	in	r0, 0x3d	; 61
     f00:	0d 92       	st	X+, r0
     f02:	0e b6       	in	r0, 0x3e	; 62
     f04:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     f06:	0e 94 56 0e 	call	0x1cac	; 0x1cac <xTaskIncrementTick>
     f0a:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     f0c:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     f10:	a0 91 cc 07 	lds	r26, 0x07CC	; 0x8007cc <pxCurrentTCB>
     f14:	b0 91 cd 07 	lds	r27, 0x07CD	; 0x8007cd <pxCurrentTCB+0x1>
     f18:	cd 91       	ld	r28, X+
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	dd 91       	ld	r29, X+
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	ff 91       	pop	r31
     f22:	ef 91       	pop	r30
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	bf 91       	pop	r27
     f2a:	af 91       	pop	r26
     f2c:	9f 91       	pop	r25
     f2e:	8f 91       	pop	r24
     f30:	7f 91       	pop	r23
     f32:	6f 91       	pop	r22
     f34:	5f 91       	pop	r21
     f36:	4f 91       	pop	r20
     f38:	3f 91       	pop	r19
     f3a:	2f 91       	pop	r18
     f3c:	1f 91       	pop	r17
     f3e:	0f 91       	pop	r16
     f40:	ff 90       	pop	r15
     f42:	ef 90       	pop	r14
     f44:	df 90       	pop	r13
     f46:	cf 90       	pop	r12
     f48:	bf 90       	pop	r11
     f4a:	af 90       	pop	r10
     f4c:	9f 90       	pop	r9
     f4e:	8f 90       	pop	r8
     f50:	7f 90       	pop	r7
     f52:	6f 90       	pop	r6
     f54:	5f 90       	pop	r5
     f56:	4f 90       	pop	r4
     f58:	3f 90       	pop	r3
     f5a:	2f 90       	pop	r2
     f5c:	1f 90       	pop	r1
     f5e:	0f 90       	pop	r0
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	0f 90       	pop	r0

	asm volatile ( "ret" );
     f64:	08 95       	ret

00000f66 <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
     f66:	0e 94 57 07 	call	0xeae	; 0xeae <vPortYieldFromTick>
		asm volatile ( "reti" );
     f6a:	18 95       	reti

00000f6c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
     f72:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     f76:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <pucAlignedHeap.1965>
     f7a:	90 91 82 03 	lds	r25, 0x0382	; 0x800382 <pucAlignedHeap.1965+0x1>
     f7e:	89 2b       	or	r24, r25
     f80:	31 f4       	brne	.+12     	; 0xf8e <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     f82:	86 e8       	ldi	r24, 0x86	; 134
     f84:	93 e0       	ldi	r25, 0x03	; 3
     f86:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <pucAlignedHeap.1965+0x1>
     f8a:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <pucAlignedHeap.1965>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     f8e:	20 91 83 03 	lds	r18, 0x0383	; 0x800383 <xNextFreeByte>
     f92:	30 91 84 03 	lds	r19, 0x0384	; 0x800384 <xNextFreeByte+0x1>
     f96:	ce 01       	movw	r24, r28
     f98:	82 0f       	add	r24, r18
     f9a:	93 1f       	adc	r25, r19
     f9c:	87 3e       	cpi	r24, 0xE7	; 231
     f9e:	43 e0       	ldi	r20, 0x03	; 3
     fa0:	94 07       	cpc	r25, r20
     fa2:	70 f4       	brcc	.+28     	; 0xfc0 <pvPortMalloc+0x54>
     fa4:	28 17       	cp	r18, r24
     fa6:	39 07       	cpc	r19, r25
     fa8:	70 f4       	brcc	.+28     	; 0xfc6 <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     faa:	c0 91 81 03 	lds	r28, 0x0381	; 0x800381 <pucAlignedHeap.1965>
     fae:	d0 91 82 03 	lds	r29, 0x0382	; 0x800382 <pucAlignedHeap.1965+0x1>
     fb2:	c2 0f       	add	r28, r18
     fb4:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
     fb6:	90 93 84 03 	sts	0x0384, r25	; 0x800384 <xNextFreeByte+0x1>
     fba:	80 93 83 03 	sts	0x0383, r24	; 0x800383 <xNextFreeByte>
     fbe:	05 c0       	rjmp	.+10     	; 0xfca <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     fc0:	c0 e0       	ldi	r28, 0x00	; 0
     fc2:	d0 e0       	ldi	r29, 0x00	; 0
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <pvPortMalloc+0x5e>
     fc6:	c0 e0       	ldi	r28, 0x00	; 0
     fc8:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     fca:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     fce:	ce 01       	movw	r24, r28
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	08 95       	ret

00000fd6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     fd6:	08 95       	ret

00000fd8 <serial_new_instance>:
			_serial_tx_int_on(handle->ser_UDR);
			return BUFFER_OK;
		}
	}
	return BUFFER_FULL;
}
     fd8:	4f 92       	push	r4
     fda:	5f 92       	push	r5
     fdc:	6f 92       	push	r6
     fde:	7f 92       	push	r7
     fe0:	8f 92       	push	r8
     fe2:	9f 92       	push	r9
     fe4:	af 92       	push	r10
     fe6:	bf 92       	push	r11
     fe8:	cf 92       	push	r12
     fea:	df 92       	push	r13
     fec:	ff 92       	push	r15
     fee:	0f 93       	push	r16
     ff0:	1f 93       	push	r17
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	f8 2e       	mov	r15, r24
     ffc:	2a 01       	movw	r4, r20
     ffe:	3b 01       	movw	r6, r22
    1000:	88 e0       	ldi	r24, 0x08	; 8
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <malloc>
    1008:	8c 01       	movw	r16, r24
    100a:	8f 2d       	mov	r24, r15
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	fc 01       	movw	r30, r24
    1014:	e3 59       	subi	r30, 0x93	; 147
    1016:	f8 4f       	sbci	r31, 0xF8	; 248
    1018:	11 83       	std	Z+1, r17	; 0x01
    101a:	00 83       	st	Z, r16
    101c:	fc 01       	movw	r30, r24
    101e:	e2 5f       	subi	r30, 0xF2	; 242
    1020:	fe 4f       	sbci	r31, 0xFE	; 254
    1022:	80 81       	ld	r24, Z
    1024:	91 81       	ldd	r25, Z+1	; 0x01
    1026:	d8 01       	movw	r26, r16
    1028:	11 96       	adiw	r26, 0x01	; 1
    102a:	9c 93       	st	X, r25
    102c:	8e 93       	st	-X, r24
    102e:	13 96       	adiw	r26, 0x03	; 3
    1030:	bc 92       	st	X, r11
    1032:	ae 92       	st	-X, r10
    1034:	12 97       	sbiw	r26, 0x02	; 2
    1036:	15 96       	adiw	r26, 0x05	; 5
    1038:	dc 92       	st	X, r13
    103a:	ce 92       	st	-X, r12
    103c:	14 97       	sbiw	r26, 0x04	; 4
    103e:	17 96       	adiw	r26, 0x07	; 7
    1040:	9c 92       	st	X, r9
    1042:	8e 92       	st	-X, r8
    1044:	16 97       	sbiw	r26, 0x06	; 6
    1046:	ff b6       	in	r15, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	ed 91       	ld	r30, X+
    104c:	fc 91       	ld	r31, X
    104e:	11 97       	sbiw	r26, 0x01	; 1
    1050:	36 97       	sbiw	r30, 0x06	; 6
    1052:	80 81       	ld	r24, Z
    1054:	82 60       	ori	r24, 0x02	; 2
    1056:	80 83       	st	Z, r24
    1058:	cd 90       	ld	r12, X+
    105a:	dc 90       	ld	r13, X
    105c:	d3 01       	movw	r26, r6
    105e:	c2 01       	movw	r24, r4
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	aa 1f       	adc	r26, r26
    1066:	bb 1f       	adc	r27, r27
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	aa 1f       	adc	r26, r26
    106e:	bb 1f       	adc	r27, r27
    1070:	9c 01       	movw	r18, r24
    1072:	ad 01       	movw	r20, r26
    1074:	22 0f       	add	r18, r18
    1076:	33 1f       	adc	r19, r19
    1078:	44 1f       	adc	r20, r20
    107a:	55 1f       	adc	r21, r21
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	81 ee       	ldi	r24, 0xE1	; 225
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 b6 11 	call	0x236c	; 0x236c <__udivmodsi4>
    1088:	21 50       	subi	r18, 0x01	; 1
    108a:	f6 01       	movw	r30, r12
    108c:	32 97       	sbiw	r30, 0x02	; 2
    108e:	20 83       	st	Z, r18
    1090:	d8 01       	movw	r26, r16
    1092:	ed 91       	ld	r30, X+
    1094:	fc 91       	ld	r31, X
    1096:	11 97       	sbiw	r26, 0x01	; 1
    1098:	35 97       	sbiw	r30, 0x05	; 5
    109a:	88 e9       	ldi	r24, 0x98	; 152
    109c:	80 83       	st	Z, r24
    109e:	ed 91       	ld	r30, X+
    10a0:	fc 91       	ld	r31, X
    10a2:	34 97       	sbiw	r30, 0x04	; 4
    10a4:	86 e0       	ldi	r24, 0x06	; 6
    10a6:	80 83       	st	Z, r24
    10a8:	ff be       	out	0x3f, r15	; 63
    10aa:	c8 01       	movw	r24, r16
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	ff 90       	pop	r15
    10b6:	df 90       	pop	r13
    10b8:	cf 90       	pop	r12
    10ba:	bf 90       	pop	r11
    10bc:	af 90       	pop	r10
    10be:	9f 90       	pop	r9
    10c0:	8f 90       	pop	r8
    10c2:	7f 90       	pop	r7
    10c4:	6f 90       	pop	r6
    10c6:	5f 90       	pop	r5
    10c8:	4f 90       	pop	r4
    10ca:	08 95       	ret

000010cc <serial_send_bytes>:

/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
    10cc:	ef 92       	push	r14
    10ce:	ff 92       	push	r15
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
    10d8:	fc 01       	movw	r30, r24
    10da:	a2 81       	ldd	r26, Z+2	; 0x02
    10dc:	b3 81       	ldd	r27, Z+3	; 0x03
    10de:	10 97       	sbiw	r26, 0x00	; 0
    10e0:	79 f0       	breq	.+30     	; 0x1100 <serial_send_bytes+0x34>
    10e2:	e4 2f       	mov	r30, r20
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	92 96       	adiw	r26, 0x22	; 34
    10e8:	5c 91       	ld	r21, X
    10ea:	20 e2       	ldi	r18, 0x20	; 32
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	25 1b       	sub	r18, r21
    10f0:	31 09       	sbc	r19, r1
    10f2:	2e 17       	cp	r18, r30
    10f4:	3f 07       	cpc	r19, r31
    10f6:	1c f1       	brlt	.+70     	; 0x113e <serial_send_bytes+0x72>
    10f8:	7c 01       	movw	r14, r24
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    10fa:	41 11       	cpse	r20, r1
    10fc:	04 c0       	rjmp	.+8      	; 0x1106 <serial_send_bytes+0x3a>
    10fe:	16 c0       	rjmp	.+44     	; 0x112c <serial_send_bytes+0x60>

/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
    1100:	42 30       	cpi	r20, 0x02	; 2
    1102:	f8 f4       	brcc	.+62     	; 0x1142 <serial_send_bytes+0x76>
    1104:	f9 cf       	rjmp	.-14     	; 0x10f8 <serial_send_bytes+0x2c>
    1106:	eb 01       	movw	r28, r22
    1108:	41 50       	subi	r20, 0x01	; 1
    110a:	04 2f       	mov	r16, r20
    110c:	10 e0       	ldi	r17, 0x00	; 0
    110e:	0f 5f       	subi	r16, 0xFF	; 255
    1110:	1f 4f       	sbci	r17, 0xFF	; 255
    1112:	06 0f       	add	r16, r22
    1114:	17 1f       	adc	r17, r23
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
    1116:	69 91       	ld	r22, Y+
    1118:	d7 01       	movw	r26, r14
    111a:	12 96       	adiw	r26, 0x02	; 2
    111c:	8d 91       	ld	r24, X+
    111e:	9c 91       	ld	r25, X
    1120:	13 97       	sbiw	r26, 0x03	; 3
    1122:	0e 94 b1 05 	call	0xb62	; 0xb62 <buffer_put_item>
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    1126:	c0 17       	cp	r28, r16
    1128:	d1 07       	cpc	r29, r17
    112a:	a9 f7       	brne	.-22     	; 0x1116 <serial_send_bytes+0x4a>
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
    112c:	d7 01       	movw	r26, r14
    112e:	ed 91       	ld	r30, X+
    1130:	fc 91       	ld	r31, X
SREG = _sreg;


/*-----------------------------------------------------------*/
static void _serial_tx_int_on(volatile uint8_t *UDR_reg) {
	*(UDR_reg  - UCSRB_off) |= serTX_INT_ENABLE;
    1132:	35 97       	sbiw	r30, 0x05	; 5
    1134:	80 81       	ld	r24, Z
    1136:	80 62       	ori	r24, 0x20	; 32
    1138:	80 83       	st	Z, r24
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	03 c0       	rjmp	.+6      	; 0x1144 <serial_send_bytes+0x78>
/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
		return BUFFER_FULL;
    113e:	82 e0       	ldi	r24, 0x02	; 2
    1140:	01 c0       	rjmp	.+2      	; 0x1144 <serial_send_bytes+0x78>
    1142:	82 e0       	ldi	r24, 0x02	; 2
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
}
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	1f 91       	pop	r17
    114a:	0f 91       	pop	r16
    114c:	ff 90       	pop	r15
    114e:	ef 90       	pop	r14
    1150:	08 95       	ret

00001152 <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    1152:	1f 92       	push	r1
    1154:	0f 92       	push	r0
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	0f 92       	push	r0
    115a:	11 24       	eor	r1, r1
    115c:	2f 93       	push	r18
    115e:	3f 93       	push	r19
    1160:	4f 93       	push	r20
    1162:	5f 93       	push	r21
    1164:	6f 93       	push	r22
    1166:	7f 93       	push	r23
    1168:	8f 93       	push	r24
    116a:	9f 93       	push	r25
    116c:	af 93       	push	r26
    116e:	bf 93       	push	r27
    1170:	cf 93       	push	r28
    1172:	ef 93       	push	r30
    1174:	ff 93       	push	r31
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    1176:	e0 91 6d 07 	lds	r30, 0x076D	; 0x80076d <_ser_handle>
    117a:	f0 91 6e 07 	lds	r31, 0x076E	; 0x80076e <_ser_handle+0x1>
    117e:	30 97       	sbiw	r30, 0x00	; 0
    1180:	a1 f0       	breq	.+40     	; 0x11aa <__vector_20+0x58>
		item = UDR0;
    1182:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    1186:	6c 2f       	mov	r22, r28
    1188:	84 81       	ldd	r24, Z+4	; 0x04
    118a:	95 81       	ldd	r25, Z+5	; 0x05
    118c:	0e 94 b1 05 	call	0xb62	; 0xb62 <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    1190:	80 91 6d 07 	lds	r24, 0x076D	; 0x80076d <_ser_handle>
    1194:	90 91 6e 07 	lds	r25, 0x076E	; 0x80076e <_ser_handle+0x1>
    1198:	dc 01       	movw	r26, r24
    119a:	16 96       	adiw	r26, 0x06	; 6
    119c:	ed 91       	ld	r30, X+
    119e:	fc 91       	ld	r31, X
    11a0:	17 97       	sbiw	r26, 0x07	; 7
    11a2:	30 97       	sbiw	r30, 0x00	; 0
    11a4:	11 f0       	breq	.+4      	; 0x11aa <__vector_20+0x58>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    11a6:	6c 2f       	mov	r22, r28
    11a8:	09 95       	icall
		}
	}
}
    11aa:	ff 91       	pop	r31
    11ac:	ef 91       	pop	r30
    11ae:	cf 91       	pop	r28
    11b0:	bf 91       	pop	r27
    11b2:	af 91       	pop	r26
    11b4:	9f 91       	pop	r25
    11b6:	8f 91       	pop	r24
    11b8:	7f 91       	pop	r23
    11ba:	6f 91       	pop	r22
    11bc:	5f 91       	pop	r21
    11be:	4f 91       	pop	r20
    11c0:	3f 91       	pop	r19
    11c2:	2f 91       	pop	r18
    11c4:	0f 90       	pop	r0
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	0f 90       	pop	r0
    11ca:	1f 90       	pop	r1
    11cc:	18 95       	reti

000011ce <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    11ce:	1f 92       	push	r1
    11d0:	0f 92       	push	r0
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	0f 92       	push	r0
    11d6:	11 24       	eor	r1, r1
    11d8:	2f 93       	push	r18
    11da:	3f 93       	push	r19
    11dc:	4f 93       	push	r20
    11de:	5f 93       	push	r21
    11e0:	6f 93       	push	r22
    11e2:	7f 93       	push	r23
    11e4:	8f 93       	push	r24
    11e6:	9f 93       	push	r25
    11e8:	af 93       	push	r26
    11ea:	bf 93       	push	r27
    11ec:	ef 93       	push	r30
    11ee:	ff 93       	push	r31
    11f0:	cf 93       	push	r28
    11f2:	df 93       	push	r29
    11f4:	1f 92       	push	r1
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    11fa:	e0 91 6d 07 	lds	r30, 0x076D	; 0x80076d <_ser_handle>
    11fe:	f0 91 6e 07 	lds	r31, 0x076E	; 0x80076e <_ser_handle+0x1>
    1202:	30 97       	sbiw	r30, 0x00	; 0
    1204:	99 f0       	breq	.+38     	; 0x122c <__vector_21+0x5e>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    1206:	be 01       	movw	r22, r28
    1208:	6f 5f       	subi	r22, 0xFF	; 255
    120a:	7f 4f       	sbci	r23, 0xFF	; 255
    120c:	82 81       	ldd	r24, Z+2	; 0x02
    120e:	93 81       	ldd	r25, Z+3	; 0x03
    1210:	0e 94 90 05 	call	0xb20	; 0xb20 <buffer_get_item>
    1214:	81 11       	cpse	r24, r1
    1216:	04 c0       	rjmp	.+8      	; 0x1220 <__vector_21+0x52>
			UDR0 = item;
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    121e:	0b c0       	rjmp	.+22     	; 0x1236 <__vector_21+0x68>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    1220:	e1 ec       	ldi	r30, 0xC1	; 193
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	8f 7d       	andi	r24, 0xDF	; 223
    1228:	80 83       	st	Z, r24
    122a:	05 c0       	rjmp	.+10     	; 0x1236 <__vector_21+0x68>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    122c:	e1 ec       	ldi	r30, 0xC1	; 193
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	8f 7d       	andi	r24, 0xDF	; 223
    1234:	80 83       	st	Z, r24
	}
}
    1236:	0f 90       	pop	r0
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	ff 91       	pop	r31
    123e:	ef 91       	pop	r30
    1240:	bf 91       	pop	r27
    1242:	af 91       	pop	r26
    1244:	9f 91       	pop	r25
    1246:	8f 91       	pop	r24
    1248:	7f 91       	pop	r23
    124a:	6f 91       	pop	r22
    124c:	5f 91       	pop	r21
    124e:	4f 91       	pop	r20
    1250:	3f 91       	pop	r19
    1252:	2f 91       	pop	r18
    1254:	0f 90       	pop	r0
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	0f 90       	pop	r0
    125a:	1f 90       	pop	r1
    125c:	18 95       	reti

0000125e <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    125e:	1f 92       	push	r1
    1260:	0f 92       	push	r0
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	0f 92       	push	r0
    1266:	11 24       	eor	r1, r1
    1268:	2f 93       	push	r18
    126a:	3f 93       	push	r19
    126c:	4f 93       	push	r20
    126e:	5f 93       	push	r21
    1270:	6f 93       	push	r22
    1272:	7f 93       	push	r23
    1274:	8f 93       	push	r24
    1276:	9f 93       	push	r25
    1278:	af 93       	push	r26
    127a:	bf 93       	push	r27
    127c:	cf 93       	push	r28
    127e:	ef 93       	push	r30
    1280:	ff 93       	push	r31
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    1282:	e0 91 6f 07 	lds	r30, 0x076F	; 0x80076f <_ser_handle+0x2>
    1286:	f0 91 70 07 	lds	r31, 0x0770	; 0x800770 <_ser_handle+0x3>
    128a:	30 97       	sbiw	r30, 0x00	; 0
    128c:	a1 f0       	breq	.+40     	; 0x12b6 <__vector_28+0x58>
		item = UDR1;
    128e:	c0 91 ce 00 	lds	r28, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    1292:	6c 2f       	mov	r22, r28
    1294:	84 81       	ldd	r24, Z+4	; 0x04
    1296:	95 81       	ldd	r25, Z+5	; 0x05
    1298:	0e 94 b1 05 	call	0xb62	; 0xb62 <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    129c:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <_ser_handle+0x2>
    12a0:	90 91 70 07 	lds	r25, 0x0770	; 0x800770 <_ser_handle+0x3>
    12a4:	dc 01       	movw	r26, r24
    12a6:	16 96       	adiw	r26, 0x06	; 6
    12a8:	ed 91       	ld	r30, X+
    12aa:	fc 91       	ld	r31, X
    12ac:	17 97       	sbiw	r26, 0x07	; 7
    12ae:	30 97       	sbiw	r30, 0x00	; 0
    12b0:	11 f0       	breq	.+4      	; 0x12b6 <__vector_28+0x58>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    12b2:	6c 2f       	mov	r22, r28
    12b4:	09 95       	icall
		}
	}
}
    12b6:	ff 91       	pop	r31
    12b8:	ef 91       	pop	r30
    12ba:	cf 91       	pop	r28
    12bc:	bf 91       	pop	r27
    12be:	af 91       	pop	r26
    12c0:	9f 91       	pop	r25
    12c2:	8f 91       	pop	r24
    12c4:	7f 91       	pop	r23
    12c6:	6f 91       	pop	r22
    12c8:	5f 91       	pop	r21
    12ca:	4f 91       	pop	r20
    12cc:	3f 91       	pop	r19
    12ce:	2f 91       	pop	r18
    12d0:	0f 90       	pop	r0
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	0f 90       	pop	r0
    12d6:	1f 90       	pop	r1
    12d8:	18 95       	reti

000012da <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    12da:	1f 92       	push	r1
    12dc:	0f 92       	push	r0
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	0f 92       	push	r0
    12e2:	11 24       	eor	r1, r1
    12e4:	2f 93       	push	r18
    12e6:	3f 93       	push	r19
    12e8:	4f 93       	push	r20
    12ea:	5f 93       	push	r21
    12ec:	6f 93       	push	r22
    12ee:	7f 93       	push	r23
    12f0:	8f 93       	push	r24
    12f2:	9f 93       	push	r25
    12f4:	af 93       	push	r26
    12f6:	bf 93       	push	r27
    12f8:	ef 93       	push	r30
    12fa:	ff 93       	push	r31
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	1f 92       	push	r1
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    1306:	e0 91 6f 07 	lds	r30, 0x076F	; 0x80076f <_ser_handle+0x2>
    130a:	f0 91 70 07 	lds	r31, 0x0770	; 0x800770 <_ser_handle+0x3>
    130e:	30 97       	sbiw	r30, 0x00	; 0
    1310:	99 f0       	breq	.+38     	; 0x1338 <__vector_29+0x5e>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    1312:	be 01       	movw	r22, r28
    1314:	6f 5f       	subi	r22, 0xFF	; 255
    1316:	7f 4f       	sbci	r23, 0xFF	; 255
    1318:	82 81       	ldd	r24, Z+2	; 0x02
    131a:	93 81       	ldd	r25, Z+3	; 0x03
    131c:	0e 94 90 05 	call	0xb20	; 0xb20 <buffer_get_item>
    1320:	81 11       	cpse	r24, r1
    1322:	04 c0       	rjmp	.+8      	; 0x132c <__vector_29+0x52>
			UDR1 = item;
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    132a:	0b c0       	rjmp	.+22     	; 0x1342 <__vector_29+0x68>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    132c:	e9 ec       	ldi	r30, 0xC9	; 201
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	8f 7d       	andi	r24, 0xDF	; 223
    1334:	80 83       	st	Z, r24
    1336:	05 c0       	rjmp	.+10     	; 0x1342 <__vector_29+0x68>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    1338:	e9 ec       	ldi	r30, 0xC9	; 201
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	8f 7d       	andi	r24, 0xDF	; 223
    1340:	80 83       	st	Z, r24
	}
}
    1342:	0f 90       	pop	r0
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	ff 91       	pop	r31
    134a:	ef 91       	pop	r30
    134c:	bf 91       	pop	r27
    134e:	af 91       	pop	r26
    1350:	9f 91       	pop	r25
    1352:	8f 91       	pop	r24
    1354:	7f 91       	pop	r23
    1356:	6f 91       	pop	r22
    1358:	5f 91       	pop	r21
    135a:	4f 91       	pop	r20
    135c:	3f 91       	pop	r19
    135e:	2f 91       	pop	r18
    1360:	0f 90       	pop	r0
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	0f 90       	pop	r0
    1366:	1f 90       	pop	r1
    1368:	18 95       	reti

0000136a <prvCopyDataToQueue>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
    136a:	0f 93       	push	r16
    136c:	1f 93       	push	r17
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	ec 01       	movw	r28, r24
    1374:	04 2f       	mov	r16, r20
    1376:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1378:	8c 8d       	ldd	r24, Y+28	; 0x1c
    137a:	81 11       	cpse	r24, r1
    137c:	0c c0       	rjmp	.+24     	; 0x1396 <prvCopyDataToQueue+0x2c>
    137e:	88 81       	ld	r24, Y
    1380:	99 81       	ldd	r25, Y+1	; 0x01
    1382:	89 2b       	or	r24, r25
    1384:	09 f0       	breq	.+2      	; 0x1388 <prvCopyDataToQueue+0x1e>
    1386:	44 c0       	rjmp	.+136    	; 0x1410 <prvCopyDataToQueue+0xa6>
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	9b 81       	ldd	r25, Y+3	; 0x03
    138c:	0e 94 64 11 	call	0x22c8	; 0x22c8 <xTaskPriorityDisinherit>
    1390:	1b 82       	std	Y+3, r1	; 0x03
    1392:	1a 82       	std	Y+2, r1	; 0x02
    1394:	44 c0       	rjmp	.+136    	; 0x141e <prvCopyDataToQueue+0xb4>
    1396:	41 11       	cpse	r20, r1
    1398:	18 c0       	rjmp	.+48     	; 0x13ca <prvCopyDataToQueue+0x60>
    139a:	48 2f       	mov	r20, r24
    139c:	50 e0       	ldi	r21, 0x00	; 0
    139e:	8c 81       	ldd	r24, Y+4	; 0x04
    13a0:	9d 81       	ldd	r25, Y+5	; 0x05
    13a2:	0e 94 61 13 	call	0x26c2	; 0x26c2 <memcpy>
    13a6:	2c 8d       	ldd	r18, Y+28	; 0x1c
    13a8:	8c 81       	ldd	r24, Y+4	; 0x04
    13aa:	9d 81       	ldd	r25, Y+5	; 0x05
    13ac:	82 0f       	add	r24, r18
    13ae:	91 1d       	adc	r25, r1
    13b0:	9d 83       	std	Y+5, r25	; 0x05
    13b2:	8c 83       	std	Y+4, r24	; 0x04
    13b4:	2a 81       	ldd	r18, Y+2	; 0x02
    13b6:	3b 81       	ldd	r19, Y+3	; 0x03
    13b8:	82 17       	cp	r24, r18
    13ba:	93 07       	cpc	r25, r19
    13bc:	58 f1       	brcs	.+86     	; 0x1414 <prvCopyDataToQueue+0xaa>
    13be:	88 81       	ld	r24, Y
    13c0:	99 81       	ldd	r25, Y+1	; 0x01
    13c2:	9d 83       	std	Y+5, r25	; 0x05
    13c4:	8c 83       	std	Y+4, r24	; 0x04
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	2a c0       	rjmp	.+84     	; 0x141e <prvCopyDataToQueue+0xb4>
    13ca:	48 2f       	mov	r20, r24
    13cc:	50 e0       	ldi	r21, 0x00	; 0
    13ce:	8e 81       	ldd	r24, Y+6	; 0x06
    13d0:	9f 81       	ldd	r25, Y+7	; 0x07
    13d2:	0e 94 61 13 	call	0x26c2	; 0x26c2 <memcpy>
    13d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	91 95       	neg	r25
    13dc:	81 95       	neg	r24
    13de:	91 09       	sbc	r25, r1
    13e0:	2e 81       	ldd	r18, Y+6	; 0x06
    13e2:	3f 81       	ldd	r19, Y+7	; 0x07
    13e4:	28 0f       	add	r18, r24
    13e6:	39 1f       	adc	r19, r25
    13e8:	3f 83       	std	Y+7, r19	; 0x07
    13ea:	2e 83       	std	Y+6, r18	; 0x06
    13ec:	48 81       	ld	r20, Y
    13ee:	59 81       	ldd	r21, Y+1	; 0x01
    13f0:	24 17       	cp	r18, r20
    13f2:	35 07       	cpc	r19, r21
    13f4:	30 f4       	brcc	.+12     	; 0x1402 <prvCopyDataToQueue+0x98>
    13f6:	2a 81       	ldd	r18, Y+2	; 0x02
    13f8:	3b 81       	ldd	r19, Y+3	; 0x03
    13fa:	82 0f       	add	r24, r18
    13fc:	93 1f       	adc	r25, r19
    13fe:	9f 83       	std	Y+7, r25	; 0x07
    1400:	8e 83       	std	Y+6, r24	; 0x06
    1402:	02 30       	cpi	r16, 0x02	; 2
    1404:	49 f4       	brne	.+18     	; 0x1418 <prvCopyDataToQueue+0xae>
    1406:	11 23       	and	r17, r17
    1408:	49 f0       	breq	.+18     	; 0x141c <prvCopyDataToQueue+0xb2>
    140a:	11 50       	subi	r17, 0x01	; 1
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	07 c0       	rjmp	.+14     	; 0x141e <prvCopyDataToQueue+0xb4>
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	05 c0       	rjmp	.+10     	; 0x141e <prvCopyDataToQueue+0xb4>
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	03 c0       	rjmp	.+6      	; 0x141e <prvCopyDataToQueue+0xb4>
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	01 c0       	rjmp	.+2      	; 0x141e <prvCopyDataToQueue+0xb4>
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	1f 5f       	subi	r17, 0xFF	; 255
    1420:	1a 8f       	std	Y+26, r17	; 0x1a
    1422:	df 91       	pop	r29
    1424:	cf 91       	pop	r28
    1426:	1f 91       	pop	r17
    1428:	0f 91       	pop	r16
    142a:	08 95       	ret

0000142c <prvCopyDataFromQueue>:
    142c:	fc 01       	movw	r30, r24
    142e:	44 8d       	ldd	r20, Z+28	; 0x1c
    1430:	44 23       	and	r20, r20
    1432:	a9 f0       	breq	.+42     	; 0x145e <prvCopyDataFromQueue+0x32>
    1434:	50 e0       	ldi	r21, 0x00	; 0
    1436:	26 81       	ldd	r18, Z+6	; 0x06
    1438:	37 81       	ldd	r19, Z+7	; 0x07
    143a:	24 0f       	add	r18, r20
    143c:	35 1f       	adc	r19, r21
    143e:	37 83       	std	Z+7, r19	; 0x07
    1440:	26 83       	std	Z+6, r18	; 0x06
    1442:	82 81       	ldd	r24, Z+2	; 0x02
    1444:	93 81       	ldd	r25, Z+3	; 0x03
    1446:	28 17       	cp	r18, r24
    1448:	39 07       	cpc	r19, r25
    144a:	20 f0       	brcs	.+8      	; 0x1454 <prvCopyDataFromQueue+0x28>
    144c:	80 81       	ld	r24, Z
    144e:	91 81       	ldd	r25, Z+1	; 0x01
    1450:	97 83       	std	Z+7, r25	; 0x07
    1452:	86 83       	std	Z+6, r24	; 0x06
    1454:	cb 01       	movw	r24, r22
    1456:	66 81       	ldd	r22, Z+6	; 0x06
    1458:	77 81       	ldd	r23, Z+7	; 0x07
    145a:	0e 94 61 13 	call	0x26c2	; 0x26c2 <memcpy>
    145e:	08 95       	ret

00001460 <prvUnlockQueue>:
    1460:	ef 92       	push	r14
    1462:	ff 92       	push	r15
    1464:	0f 93       	push	r16
    1466:	1f 93       	push	r17
    1468:	cf 93       	push	r28
    146a:	8c 01       	movw	r16, r24
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	f8 94       	cli
    1470:	0f 92       	push	r0
    1472:	fc 01       	movw	r30, r24
    1474:	c6 8d       	ldd	r28, Z+30	; 0x1e
    1476:	1c 16       	cp	r1, r28
    1478:	ac f4       	brge	.+42     	; 0x14a4 <prvUnlockQueue+0x44>
    147a:	81 89       	ldd	r24, Z+17	; 0x11
    147c:	81 11       	cpse	r24, r1
    147e:	06 c0       	rjmp	.+12     	; 0x148c <prvUnlockQueue+0x2c>
    1480:	11 c0       	rjmp	.+34     	; 0x14a4 <prvUnlockQueue+0x44>
    1482:	f8 01       	movw	r30, r16
    1484:	91 89       	ldd	r25, Z+17	; 0x11
    1486:	91 11       	cpse	r25, r1
    1488:	05 c0       	rjmp	.+10     	; 0x1494 <prvUnlockQueue+0x34>
    148a:	0c c0       	rjmp	.+24     	; 0x14a4 <prvUnlockQueue+0x44>
    148c:	78 01       	movw	r14, r16
    148e:	f1 e1       	ldi	r31, 0x11	; 17
    1490:	ef 0e       	add	r14, r31
    1492:	f1 1c       	adc	r15, r1
    1494:	c7 01       	movw	r24, r14
    1496:	0e 94 79 10 	call	0x20f2	; 0x20f2 <xTaskRemoveFromEventList>
    149a:	81 11       	cpse	r24, r1
    149c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <vTaskMissedYield>
    14a0:	c1 50       	subi	r28, 0x01	; 1
    14a2:	79 f7       	brne	.-34     	; 0x1482 <prvUnlockQueue+0x22>
    14a4:	8f ef       	ldi	r24, 0xFF	; 255
    14a6:	f8 01       	movw	r30, r16
    14a8:	86 8f       	std	Z+30, r24	; 0x1e
    14aa:	0f 90       	pop	r0
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	0f 92       	push	r0
    14b4:	c5 8d       	ldd	r28, Z+29	; 0x1d
    14b6:	1c 16       	cp	r1, r28
    14b8:	ac f4       	brge	.+42     	; 0x14e4 <prvUnlockQueue+0x84>
    14ba:	80 85       	ldd	r24, Z+8	; 0x08
    14bc:	81 11       	cpse	r24, r1
    14be:	06 c0       	rjmp	.+12     	; 0x14cc <prvUnlockQueue+0x6c>
    14c0:	11 c0       	rjmp	.+34     	; 0x14e4 <prvUnlockQueue+0x84>
    14c2:	f8 01       	movw	r30, r16
    14c4:	90 85       	ldd	r25, Z+8	; 0x08
    14c6:	91 11       	cpse	r25, r1
    14c8:	05 c0       	rjmp	.+10     	; 0x14d4 <prvUnlockQueue+0x74>
    14ca:	0c c0       	rjmp	.+24     	; 0x14e4 <prvUnlockQueue+0x84>
    14cc:	78 01       	movw	r14, r16
    14ce:	f8 e0       	ldi	r31, 0x08	; 8
    14d0:	ef 0e       	add	r14, r31
    14d2:	f1 1c       	adc	r15, r1
    14d4:	c7 01       	movw	r24, r14
    14d6:	0e 94 79 10 	call	0x20f2	; 0x20f2 <xTaskRemoveFromEventList>
    14da:	81 11       	cpse	r24, r1
    14dc:	0e 94 fe 10 	call	0x21fc	; 0x21fc <vTaskMissedYield>
    14e0:	c1 50       	subi	r28, 0x01	; 1
    14e2:	79 f7       	brne	.-34     	; 0x14c2 <prvUnlockQueue+0x62>
    14e4:	8f ef       	ldi	r24, 0xFF	; 255
    14e6:	f8 01       	movw	r30, r16
    14e8:	85 8f       	std	Z+29, r24	; 0x1d
    14ea:	0f 90       	pop	r0
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	cf 91       	pop	r28
    14f0:	1f 91       	pop	r17
    14f2:	0f 91       	pop	r16
    14f4:	ff 90       	pop	r15
    14f6:	ef 90       	pop	r14
    14f8:	08 95       	ret

000014fa <xQueueGenericReset>:
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	ec 01       	movw	r28, r24
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	f8 94       	cli
    1504:	0f 92       	push	r0
    1506:	48 81       	ld	r20, Y
    1508:	59 81       	ldd	r21, Y+1	; 0x01
    150a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1510:	72 9f       	mul	r23, r18
    1512:	c0 01       	movw	r24, r0
    1514:	73 9f       	mul	r23, r19
    1516:	90 0d       	add	r25, r0
    1518:	11 24       	eor	r1, r1
    151a:	fa 01       	movw	r30, r20
    151c:	e8 0f       	add	r30, r24
    151e:	f9 1f       	adc	r31, r25
    1520:	fb 83       	std	Y+3, r31	; 0x03
    1522:	ea 83       	std	Y+2, r30	; 0x02
    1524:	1a 8e       	std	Y+26, r1	; 0x1a
    1526:	5d 83       	std	Y+5, r21	; 0x05
    1528:	4c 83       	std	Y+4, r20	; 0x04
    152a:	82 1b       	sub	r24, r18
    152c:	93 0b       	sbc	r25, r19
    152e:	84 0f       	add	r24, r20
    1530:	95 1f       	adc	r25, r21
    1532:	9f 83       	std	Y+7, r25	; 0x07
    1534:	8e 83       	std	Y+6, r24	; 0x06
    1536:	8f ef       	ldi	r24, 0xFF	; 255
    1538:	8d 8f       	std	Y+29, r24	; 0x1d
    153a:	8e 8f       	std	Y+30, r24	; 0x1e
    153c:	61 11       	cpse	r22, r1
    153e:	0c c0       	rjmp	.+24     	; 0x1558 <xQueueGenericReset+0x5e>
    1540:	88 85       	ldd	r24, Y+8	; 0x08
    1542:	88 23       	and	r24, r24
    1544:	89 f0       	breq	.+34     	; 0x1568 <xQueueGenericReset+0x6e>
    1546:	ce 01       	movw	r24, r28
    1548:	08 96       	adiw	r24, 0x08	; 8
    154a:	0e 94 79 10 	call	0x20f2	; 0x20f2 <xTaskRemoveFromEventList>
    154e:	88 23       	and	r24, r24
    1550:	59 f0       	breq	.+22     	; 0x1568 <xQueueGenericReset+0x6e>
    1552:	0e 94 fe 06 	call	0xdfc	; 0xdfc <vPortYield>
    1556:	08 c0       	rjmp	.+16     	; 0x1568 <xQueueGenericReset+0x6e>
    1558:	ce 01       	movw	r24, r28
    155a:	08 96       	adiw	r24, 0x08	; 8
    155c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vListInitialise>
    1560:	ce 01       	movw	r24, r28
    1562:	41 96       	adiw	r24, 0x11	; 17
    1564:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vListInitialise>
    1568:	0f 90       	pop	r0
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	08 95       	ret

00001574 <xQueueGenericCreate>:
    1574:	ff 92       	push	r15
    1576:	0f 93       	push	r16
    1578:	1f 93       	push	r17
    157a:	cf 93       	push	r28
    157c:	df 93       	push	r29
    157e:	08 2f       	mov	r16, r24
    1580:	16 2f       	mov	r17, r22
    1582:	f4 2e       	mov	r15, r20
    1584:	66 23       	and	r22, r22
    1586:	c9 f0       	breq	.+50     	; 0x15ba <xQueueGenericCreate+0x46>
    1588:	86 9f       	mul	r24, r22
    158a:	c0 01       	movw	r24, r0
    158c:	11 24       	eor	r1, r1
    158e:	81 96       	adiw	r24, 0x21	; 33
    1590:	0e 94 b6 07 	call	0xf6c	; 0xf6c <pvPortMalloc>
    1594:	ec 01       	movw	r28, r24
    1596:	00 97       	sbiw	r24, 0x00	; 0
    1598:	49 f4       	brne	.+18     	; 0x15ac <xQueueGenericCreate+0x38>
    159a:	16 c0       	rjmp	.+44     	; 0x15c8 <xQueueGenericCreate+0x54>
    159c:	0b 8f       	std	Y+27, r16	; 0x1b
    159e:	1c 8f       	std	Y+28, r17	; 0x1c
    15a0:	61 e0       	ldi	r22, 0x01	; 1
    15a2:	ce 01       	movw	r24, r28
    15a4:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <xQueueGenericReset>
    15a8:	f8 a2       	std	Y+32, r15	; 0x20
    15aa:	0e c0       	rjmp	.+28     	; 0x15c8 <xQueueGenericCreate+0x54>
    15ac:	81 96       	adiw	r24, 0x21	; 33
    15ae:	99 83       	std	Y+1, r25	; 0x01
    15b0:	88 83       	st	Y, r24
    15b2:	f4 cf       	rjmp	.-24     	; 0x159c <xQueueGenericCreate+0x28>
    15b4:	d9 83       	std	Y+1, r29	; 0x01
    15b6:	c8 83       	st	Y, r28
    15b8:	f1 cf       	rjmp	.-30     	; 0x159c <xQueueGenericCreate+0x28>
    15ba:	81 e2       	ldi	r24, 0x21	; 33
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	0e 94 b6 07 	call	0xf6c	; 0xf6c <pvPortMalloc>
    15c2:	ec 01       	movw	r28, r24
    15c4:	89 2b       	or	r24, r25
    15c6:	b1 f7       	brne	.-20     	; 0x15b4 <xQueueGenericCreate+0x40>
    15c8:	ce 01       	movw	r24, r28
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
    15ce:	1f 91       	pop	r17
    15d0:	0f 91       	pop	r16
    15d2:	ff 90       	pop	r15
    15d4:	08 95       	ret

000015d6 <xQueueGenericSend>:
    15d6:	9f 92       	push	r9
    15d8:	af 92       	push	r10
    15da:	bf 92       	push	r11
    15dc:	cf 92       	push	r12
    15de:	df 92       	push	r13
    15e0:	ef 92       	push	r14
    15e2:	ff 92       	push	r15
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <xQueueGenericSend+0x18>
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <xQueueGenericSend+0x1a>
    15f0:	1f 92       	push	r1
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	8c 01       	movw	r16, r24
    15f8:	6b 01       	movw	r12, r22
    15fa:	5d 83       	std	Y+5, r21	; 0x05
    15fc:	4c 83       	std	Y+4, r20	; 0x04
    15fe:	a2 2e       	mov	r10, r18
    1600:	b1 2c       	mov	r11, r1
    1602:	99 24       	eor	r9, r9
    1604:	93 94       	inc	r9
    1606:	7c 01       	movw	r14, r24
    1608:	88 e0       	ldi	r24, 0x08	; 8
    160a:	e8 0e       	add	r14, r24
    160c:	f1 1c       	adc	r15, r1
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	f8 94       	cli
    1612:	0f 92       	push	r0
    1614:	f8 01       	movw	r30, r16
    1616:	32 8d       	ldd	r19, Z+26	; 0x1a
    1618:	93 8d       	ldd	r25, Z+27	; 0x1b
    161a:	39 17       	cp	r19, r25
    161c:	18 f0       	brcs	.+6      	; 0x1624 <xQueueGenericSend+0x4e>
    161e:	f2 e0       	ldi	r31, 0x02	; 2
    1620:	af 12       	cpse	r10, r31
    1622:	19 c0       	rjmp	.+50     	; 0x1656 <xQueueGenericSend+0x80>
    1624:	4a 2d       	mov	r20, r10
    1626:	b6 01       	movw	r22, r12
    1628:	c8 01       	movw	r24, r16
    162a:	0e 94 b5 09 	call	0x136a	; 0x136a <prvCopyDataToQueue>
    162e:	f8 01       	movw	r30, r16
    1630:	91 89       	ldd	r25, Z+17	; 0x11
    1632:	99 23       	and	r25, r25
    1634:	49 f0       	breq	.+18     	; 0x1648 <xQueueGenericSend+0x72>
    1636:	c8 01       	movw	r24, r16
    1638:	41 96       	adiw	r24, 0x11	; 17
    163a:	0e 94 79 10 	call	0x20f2	; 0x20f2 <xTaskRemoveFromEventList>
    163e:	88 23       	and	r24, r24
    1640:	31 f0       	breq	.+12     	; 0x164e <xQueueGenericSend+0x78>
    1642:	0e 94 fe 06 	call	0xdfc	; 0xdfc <vPortYield>
    1646:	03 c0       	rjmp	.+6      	; 0x164e <xQueueGenericSend+0x78>
    1648:	81 11       	cpse	r24, r1
    164a:	0e 94 fe 06 	call	0xdfc	; 0xdfc <vPortYield>
    164e:	0f 90       	pop	r0
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	50 c0       	rjmp	.+160    	; 0x16f6 <xQueueGenericSend+0x120>
    1656:	ec 81       	ldd	r30, Y+4	; 0x04
    1658:	fd 81       	ldd	r31, Y+5	; 0x05
    165a:	ef 2b       	or	r30, r31
    165c:	21 f4       	brne	.+8      	; 0x1666 <xQueueGenericSend+0x90>
    165e:	0f 90       	pop	r0
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	48 c0       	rjmp	.+144    	; 0x16f6 <xQueueGenericSend+0x120>
    1666:	b1 10       	cpse	r11, r1
    1668:	05 c0       	rjmp	.+10     	; 0x1674 <xQueueGenericSend+0x9e>
    166a:	ce 01       	movw	r24, r28
    166c:	01 96       	adiw	r24, 0x01	; 1
    166e:	0e 94 c1 10 	call	0x2182	; 0x2182 <vTaskSetTimeOutState>
    1672:	b9 2c       	mov	r11, r9
    1674:	0f 90       	pop	r0
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <vTaskSuspendAll>
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	0f 92       	push	r0
    1682:	f8 01       	movw	r30, r16
    1684:	85 8d       	ldd	r24, Z+29	; 0x1d
    1686:	8f 3f       	cpi	r24, 0xFF	; 255
    1688:	09 f4       	brne	.+2      	; 0x168c <xQueueGenericSend+0xb6>
    168a:	15 8e       	std	Z+29, r1	; 0x1d
    168c:	f8 01       	movw	r30, r16
    168e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1690:	8f 3f       	cpi	r24, 0xFF	; 255
    1692:	09 f4       	brne	.+2      	; 0x1696 <xQueueGenericSend+0xc0>
    1694:	16 8e       	std	Z+30, r1	; 0x1e
    1696:	0f 90       	pop	r0
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	be 01       	movw	r22, r28
    169c:	6c 5f       	subi	r22, 0xFC	; 252
    169e:	7f 4f       	sbci	r23, 0xFF	; 255
    16a0:	ce 01       	movw	r24, r28
    16a2:	01 96       	adiw	r24, 0x01	; 1
    16a4:	0e 94 cc 10 	call	0x2198	; 0x2198 <xTaskCheckForTimeOut>
    16a8:	81 11       	cpse	r24, r1
    16aa:	1f c0       	rjmp	.+62     	; 0x16ea <xQueueGenericSend+0x114>
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	f8 94       	cli
    16b0:	0f 92       	push	r0
    16b2:	f8 01       	movw	r30, r16
    16b4:	92 8d       	ldd	r25, Z+26	; 0x1a
    16b6:	0f 90       	pop	r0
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	83 8d       	ldd	r24, Z+27	; 0x1b
    16bc:	98 13       	cpse	r25, r24
    16be:	0f c0       	rjmp	.+30     	; 0x16de <xQueueGenericSend+0x108>
    16c0:	6c 81       	ldd	r22, Y+4	; 0x04
    16c2:	7d 81       	ldd	r23, Y+5	; 0x05
    16c4:	c7 01       	movw	r24, r14
    16c6:	0e 94 66 10 	call	0x20cc	; 0x20cc <vTaskPlaceOnEventList>
    16ca:	c8 01       	movw	r24, r16
    16cc:	0e 94 30 0a 	call	0x1460	; 0x1460 <prvUnlockQueue>
    16d0:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <xTaskResumeAll>
    16d4:	81 11       	cpse	r24, r1
    16d6:	9b cf       	rjmp	.-202    	; 0x160e <xQueueGenericSend+0x38>
    16d8:	0e 94 fe 06 	call	0xdfc	; 0xdfc <vPortYield>
    16dc:	98 cf       	rjmp	.-208    	; 0x160e <xQueueGenericSend+0x38>
    16de:	c8 01       	movw	r24, r16
    16e0:	0e 94 30 0a 	call	0x1460	; 0x1460 <prvUnlockQueue>
    16e4:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <xTaskResumeAll>
    16e8:	92 cf       	rjmp	.-220    	; 0x160e <xQueueGenericSend+0x38>
    16ea:	c8 01       	movw	r24, r16
    16ec:	0e 94 30 0a 	call	0x1460	; 0x1460 <prvUnlockQueue>
    16f0:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <xTaskResumeAll>
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	df 91       	pop	r29
    1702:	cf 91       	pop	r28
    1704:	1f 91       	pop	r17
    1706:	0f 91       	pop	r16
    1708:	ff 90       	pop	r15
    170a:	ef 90       	pop	r14
    170c:	df 90       	pop	r13
    170e:	cf 90       	pop	r12
    1710:	bf 90       	pop	r11
    1712:	af 90       	pop	r10
    1714:	9f 90       	pop	r9
    1716:	08 95       	ret

00001718 <xQueueCreateMutex>:
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
    171c:	48 2f       	mov	r20, r24
    171e:	60 e0       	ldi	r22, 0x00	; 0
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	0e 94 ba 0a 	call	0x1574	; 0x1574 <xQueueGenericCreate>
    1726:	ec 01       	movw	r28, r24
    1728:	00 97       	sbiw	r24, 0x00	; 0
    172a:	61 f0       	breq	.+24     	; 0x1744 <xQueueCreateMutex+0x2c>
    172c:	1b 82       	std	Y+3, r1	; 0x03
    172e:	1a 82       	std	Y+2, r1	; 0x02
    1730:	19 82       	std	Y+1, r1	; 0x01
    1732:	18 82       	st	Y, r1
    1734:	1e 82       	std	Y+6, r1	; 0x06
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	40 e0       	ldi	r20, 0x00	; 0
    173a:	50 e0       	ldi	r21, 0x00	; 0
    173c:	60 e0       	ldi	r22, 0x00	; 0
    173e:	70 e0       	ldi	r23, 0x00	; 0
    1740:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <xQueueGenericSend>
    1744:	ce 01       	movw	r24, r28
    1746:	df 91       	pop	r29
    1748:	cf 91       	pop	r28
    174a:	08 95       	ret

0000174c <xQueueGenericSendFromISR>:
    174c:	ef 92       	push	r14
    174e:	ff 92       	push	r15
    1750:	0f 93       	push	r16
    1752:	1f 93       	push	r17
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	8a 01       	movw	r16, r20
    175a:	fc 01       	movw	r30, r24
    175c:	52 8d       	ldd	r21, Z+26	; 0x1a
    175e:	33 8d       	ldd	r19, Z+27	; 0x1b
    1760:	53 17       	cp	r21, r19
    1762:	10 f0       	brcs	.+4      	; 0x1768 <xQueueGenericSendFromISR+0x1c>
    1764:	22 30       	cpi	r18, 0x02	; 2
    1766:	f1 f4       	brne	.+60     	; 0x17a4 <xQueueGenericSendFromISR+0x58>
    1768:	42 2f       	mov	r20, r18
    176a:	78 01       	movw	r14, r16
    176c:	ec 01       	movw	r28, r24
    176e:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1770:	0e 94 b5 09 	call	0x136a	; 0x136a <prvCopyDataToQueue>
    1774:	1f 3f       	cpi	r17, 0xFF	; 255
    1776:	81 f4       	brne	.+32     	; 0x1798 <xQueueGenericSendFromISR+0x4c>
    1778:	89 89       	ldd	r24, Y+17	; 0x11
    177a:	88 23       	and	r24, r24
    177c:	a9 f0       	breq	.+42     	; 0x17a8 <xQueueGenericSendFromISR+0x5c>
    177e:	ce 01       	movw	r24, r28
    1780:	41 96       	adiw	r24, 0x11	; 17
    1782:	0e 94 79 10 	call	0x20f2	; 0x20f2 <xTaskRemoveFromEventList>
    1786:	88 23       	and	r24, r24
    1788:	89 f0       	breq	.+34     	; 0x17ac <xQueueGenericSendFromISR+0x60>
    178a:	e1 14       	cp	r14, r1
    178c:	f1 04       	cpc	r15, r1
    178e:	81 f0       	breq	.+32     	; 0x17b0 <xQueueGenericSendFromISR+0x64>
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	f7 01       	movw	r30, r14
    1794:	80 83       	st	Z, r24
    1796:	0d c0       	rjmp	.+26     	; 0x17b2 <xQueueGenericSendFromISR+0x66>
    1798:	ff 24       	eor	r15, r15
    179a:	f3 94       	inc	r15
    179c:	f1 0e       	add	r15, r17
    179e:	fe 8e       	std	Y+30, r15	; 0x1e
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	07 c0       	rjmp	.+14     	; 0x17b2 <xQueueGenericSendFromISR+0x66>
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	05 c0       	rjmp	.+10     	; 0x17b2 <xQueueGenericSendFromISR+0x66>
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	03 c0       	rjmp	.+6      	; 0x17b2 <xQueueGenericSendFromISR+0x66>
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	01 c0       	rjmp	.+2      	; 0x17b2 <xQueueGenericSendFromISR+0x66>
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	1f 91       	pop	r17
    17b8:	0f 91       	pop	r16
    17ba:	ff 90       	pop	r15
    17bc:	ef 90       	pop	r14
    17be:	08 95       	ret

000017c0 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    17c0:	8f 92       	push	r8
    17c2:	9f 92       	push	r9
    17c4:	af 92       	push	r10
    17c6:	bf 92       	push	r11
    17c8:	cf 92       	push	r12
    17ca:	df 92       	push	r13
    17cc:	ef 92       	push	r14
    17ce:	ff 92       	push	r15
    17d0:	0f 93       	push	r16
    17d2:	1f 93       	push	r17
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	00 d0       	rcall	.+0      	; 0x17da <xQueueGenericReceive+0x1a>
    17da:	00 d0       	rcall	.+0      	; 0x17dc <xQueueGenericReceive+0x1c>
    17dc:	1f 92       	push	r1
    17de:	cd b7       	in	r28, 0x3d	; 61
    17e0:	de b7       	in	r29, 0x3e	; 62
    17e2:	8c 01       	movw	r16, r24
    17e4:	5b 01       	movw	r10, r22
    17e6:	5d 83       	std	Y+5, r21	; 0x05
    17e8:	4c 83       	std	Y+4, r20	; 0x04
    17ea:	82 2e       	mov	r8, r18
BaseType_t xEntryTimeSet = pdFALSE;
    17ec:	e1 2c       	mov	r14, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    17ee:	99 24       	eor	r9, r9
    17f0:	93 94       	inc	r9
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    17f2:	6c 01       	movw	r12, r24
    17f4:	81 e1       	ldi	r24, 0x11	; 17
    17f6:	c8 0e       	add	r12, r24
    17f8:	d1 1c       	adc	r13, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	f8 94       	cli
    17fe:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1800:	f8 01       	movw	r30, r16
    1802:	f2 8c       	ldd	r15, Z+26	; 0x1a

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1804:	ff 20       	and	r15, r15
    1806:	91 f1       	breq	.+100    	; 0x186c <xQueueGenericReceive+0xac>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    1808:	c6 80       	ldd	r12, Z+6	; 0x06
    180a:	d7 80       	ldd	r13, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    180c:	b5 01       	movw	r22, r10
    180e:	c8 01       	movw	r24, r16
    1810:	0e 94 16 0a 	call	0x142c	; 0x142c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    1814:	81 10       	cpse	r8, r1
    1816:	19 c0       	rjmp	.+50     	; 0x184a <xQueueGenericReceive+0x8a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    1818:	fa 94       	dec	r15
    181a:	f8 01       	movw	r30, r16
    181c:	f2 8e       	std	Z+26, r15	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    181e:	80 81       	ld	r24, Z
    1820:	91 81       	ldd	r25, Z+1	; 0x01
    1822:	89 2b       	or	r24, r25
    1824:	29 f4       	brne	.+10     	; 0x1830 <xQueueGenericReceive+0x70>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    1826:	0e 94 a4 11 	call	0x2348	; 0x2348 <pvTaskIncrementMutexHeldCount>
    182a:	f8 01       	movw	r30, r16
    182c:	93 83       	std	Z+3, r25	; 0x03
    182e:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1830:	f8 01       	movw	r30, r16
    1832:	80 85       	ldd	r24, Z+8	; 0x08
    1834:	88 23       	and	r24, r24
    1836:	b1 f0       	breq	.+44     	; 0x1864 <xQueueGenericReceive+0xa4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1838:	c8 01       	movw	r24, r16
    183a:	08 96       	adiw	r24, 0x08	; 8
    183c:	0e 94 79 10 	call	0x20f2	; 0x20f2 <xTaskRemoveFromEventList>
    1840:	88 23       	and	r24, r24
    1842:	81 f0       	breq	.+32     	; 0x1864 <xQueueGenericReceive+0xa4>
						{
							queueYIELD_IF_USING_PREEMPTION();
    1844:	0e 94 fe 06 	call	0xdfc	; 0xdfc <vPortYield>
    1848:	0d c0       	rjmp	.+26     	; 0x1864 <xQueueGenericReceive+0xa4>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    184a:	f8 01       	movw	r30, r16
    184c:	d7 82       	std	Z+7, r13	; 0x07
    184e:	c6 82       	std	Z+6, r12	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1850:	81 89       	ldd	r24, Z+17	; 0x11
    1852:	88 23       	and	r24, r24
    1854:	39 f0       	breq	.+14     	; 0x1864 <xQueueGenericReceive+0xa4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1856:	c8 01       	movw	r24, r16
    1858:	41 96       	adiw	r24, 0x11	; 17
    185a:	0e 94 79 10 	call	0x20f2	; 0x20f2 <xTaskRemoveFromEventList>
    185e:	81 11       	cpse	r24, r1
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    1860:	0e 94 fe 06 	call	0xdfc	; 0xdfc <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    1864:	0f 90       	pop	r0
    1866:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	64 c0       	rjmp	.+200    	; 0x1934 <xQueueGenericReceive+0x174>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    186c:	4c 81       	ldd	r20, Y+4	; 0x04
    186e:	5d 81       	ldd	r21, Y+5	; 0x05
    1870:	45 2b       	or	r20, r21
    1872:	21 f4       	brne	.+8      	; 0x187c <xQueueGenericReceive+0xbc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1874:	0f 90       	pop	r0
    1876:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	5c c0       	rjmp	.+184    	; 0x1934 <xQueueGenericReceive+0x174>
				}
				else if( xEntryTimeSet == pdFALSE )
    187c:	e1 10       	cpse	r14, r1
    187e:	05 c0       	rjmp	.+10     	; 0x188a <xQueueGenericReceive+0xca>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1880:	ce 01       	movw	r24, r28
    1882:	01 96       	adiw	r24, 0x01	; 1
    1884:	0e 94 c1 10 	call	0x2182	; 0x2182 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1888:	e9 2c       	mov	r14, r9
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    188a:	0f 90       	pop	r0
    188c:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    188e:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	f8 94       	cli
    1896:	0f 92       	push	r0
    1898:	f8 01       	movw	r30, r16
    189a:	85 8d       	ldd	r24, Z+29	; 0x1d
    189c:	8f 3f       	cpi	r24, 0xFF	; 255
    189e:	09 f4       	brne	.+2      	; 0x18a2 <xQueueGenericReceive+0xe2>
    18a0:	15 8e       	std	Z+29, r1	; 0x1d
    18a2:	f8 01       	movw	r30, r16
    18a4:	96 8d       	ldd	r25, Z+30	; 0x1e
    18a6:	9f 3f       	cpi	r25, 0xFF	; 255
    18a8:	09 f4       	brne	.+2      	; 0x18ac <xQueueGenericReceive+0xec>
    18aa:	16 8e       	std	Z+30, r1	; 0x1e
    18ac:	0f 90       	pop	r0
    18ae:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    18b0:	be 01       	movw	r22, r28
    18b2:	6c 5f       	subi	r22, 0xFC	; 252
    18b4:	7f 4f       	sbci	r23, 0xFF	; 255
    18b6:	ce 01       	movw	r24, r28
    18b8:	01 96       	adiw	r24, 0x01	; 1
    18ba:	0e 94 cc 10 	call	0x2198	; 0x2198 <xTaskCheckForTimeOut>
    18be:	81 11       	cpse	r24, r1
    18c0:	2b c0       	rjmp	.+86     	; 0x1918 <xQueueGenericReceive+0x158>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    18c8:	f8 01       	movw	r30, r16
    18ca:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    18cc:	0f 90       	pop	r0
    18ce:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    18d0:	81 11       	cpse	r24, r1
    18d2:	1c c0       	rjmp	.+56     	; 0x190c <xQueueGenericReceive+0x14c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    18d4:	80 81       	ld	r24, Z
    18d6:	91 81       	ldd	r25, Z+1	; 0x01
    18d8:	89 2b       	or	r24, r25
    18da:	49 f4       	brne	.+18     	; 0x18ee <xQueueGenericReceive+0x12e>
					{
						taskENTER_CRITICAL();
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	f8 94       	cli
    18e0:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    18e2:	82 81       	ldd	r24, Z+2	; 0x02
    18e4:	93 81       	ldd	r25, Z+3	; 0x03
    18e6:	0e 94 02 11 	call	0x2204	; 0x2204 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    18ea:	0f 90       	pop	r0
    18ec:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    18ee:	6c 81       	ldd	r22, Y+4	; 0x04
    18f0:	7d 81       	ldd	r23, Y+5	; 0x05
    18f2:	c6 01       	movw	r24, r12
    18f4:	0e 94 66 10 	call	0x20cc	; 0x20cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    18f8:	c8 01       	movw	r24, r16
    18fa:	0e 94 30 0a 	call	0x1460	; 0x1460 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    18fe:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <xTaskResumeAll>
    1902:	81 11       	cpse	r24, r1
    1904:	7a cf       	rjmp	.-268    	; 0x17fa <xQueueGenericReceive+0x3a>
				{
					portYIELD_WITHIN_API();
    1906:	0e 94 fe 06 	call	0xdfc	; 0xdfc <vPortYield>
    190a:	77 cf       	rjmp	.-274    	; 0x17fa <xQueueGenericReceive+0x3a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    190c:	c8 01       	movw	r24, r16
    190e:	0e 94 30 0a 	call	0x1460	; 0x1460 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1912:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <xTaskResumeAll>
    1916:	71 cf       	rjmp	.-286    	; 0x17fa <xQueueGenericReceive+0x3a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1918:	c8 01       	movw	r24, r16
    191a:	0e 94 30 0a 	call	0x1460	; 0x1460 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    191e:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <xTaskResumeAll>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1928:	f8 01       	movw	r30, r16
    192a:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    192c:	0f 90       	pop	r0
    192e:	0f be       	out	0x3f, r0	; 63
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1930:	81 11       	cpse	r24, r1
    1932:	63 cf       	rjmp	.-314    	; 0x17fa <xQueueGenericReceive+0x3a>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	1f 91       	pop	r17
    1944:	0f 91       	pop	r16
    1946:	ff 90       	pop	r15
    1948:	ef 90       	pop	r14
    194a:	df 90       	pop	r13
    194c:	cf 90       	pop	r12
    194e:	bf 90       	pop	r11
    1950:	af 90       	pop	r10
    1952:	9f 90       	pop	r9
    1954:	8f 90       	pop	r8
    1956:	08 95       	ret

00001958 <prvResetNextTaskUnblockTime>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
    1958:	e0 91 94 07 	lds	r30, 0x0794	; 0x800794 <pxDelayedTaskList>
    195c:	f0 91 95 07 	lds	r31, 0x0795	; 0x800795 <pxDelayedTaskList+0x1>
    1960:	80 81       	ld	r24, Z
    1962:	81 11       	cpse	r24, r1
    1964:	07 c0       	rjmp	.+14     	; 0x1974 <prvResetNextTaskUnblockTime+0x1c>
    1966:	8f ef       	ldi	r24, 0xFF	; 255
    1968:	9f ef       	ldi	r25, 0xFF	; 255
    196a:	90 93 75 07 	sts	0x0775, r25	; 0x800775 <xNextTaskUnblockTime+0x1>
    196e:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <xNextTaskUnblockTime>
    1972:	08 95       	ret
    1974:	e0 91 94 07 	lds	r30, 0x0794	; 0x800794 <pxDelayedTaskList>
    1978:	f0 91 95 07 	lds	r31, 0x0795	; 0x800795 <pxDelayedTaskList+0x1>
    197c:	05 80       	ldd	r0, Z+5	; 0x05
    197e:	f6 81       	ldd	r31, Z+6	; 0x06
    1980:	e0 2d       	mov	r30, r0
    1982:	06 80       	ldd	r0, Z+6	; 0x06
    1984:	f7 81       	ldd	r31, Z+7	; 0x07
    1986:	e0 2d       	mov	r30, r0
    1988:	82 81       	ldd	r24, Z+2	; 0x02
    198a:	93 81       	ldd	r25, Z+3	; 0x03
    198c:	90 93 75 07 	sts	0x0775, r25	; 0x800775 <xNextTaskUnblockTime+0x1>
    1990:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <xNextTaskUnblockTime>
    1994:	08 95       	ret

00001996 <prvAddCurrentTaskToDelayedList>:
    1996:	0f 93       	push	r16
    1998:	1f 93       	push	r17
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	ec 01       	movw	r28, r24
    19a0:	00 91 7c 07 	lds	r16, 0x077C	; 0x80077c <xTickCount>
    19a4:	10 91 7d 07 	lds	r17, 0x077D	; 0x80077d <xTickCount+0x1>
    19a8:	80 91 cc 07 	lds	r24, 0x07CC	; 0x8007cc <pxCurrentTCB>
    19ac:	90 91 cd 07 	lds	r25, 0x07CD	; 0x8007cd <pxCurrentTCB+0x1>
    19b0:	02 96       	adiw	r24, 0x02	; 2
    19b2:	0e 94 32 06 	call	0xc64	; 0xc64 <uxListRemove>
    19b6:	c0 0f       	add	r28, r16
    19b8:	d1 1f       	adc	r29, r17
    19ba:	e0 91 cc 07 	lds	r30, 0x07CC	; 0x8007cc <pxCurrentTCB>
    19be:	f0 91 cd 07 	lds	r31, 0x07CD	; 0x8007cd <pxCurrentTCB+0x1>
    19c2:	d3 83       	std	Z+3, r29	; 0x03
    19c4:	c2 83       	std	Z+2, r28	; 0x02
    19c6:	c0 17       	cp	r28, r16
    19c8:	d1 07       	cpc	r29, r17
    19ca:	68 f4       	brcc	.+26     	; 0x19e6 <prvAddCurrentTaskToDelayedList+0x50>
    19cc:	60 91 cc 07 	lds	r22, 0x07CC	; 0x8007cc <pxCurrentTCB>
    19d0:	70 91 cd 07 	lds	r23, 0x07CD	; 0x8007cd <pxCurrentTCB+0x1>
    19d4:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <pxOverflowDelayedTaskList>
    19d8:	90 91 93 07 	lds	r25, 0x0793	; 0x800793 <pxOverflowDelayedTaskList+0x1>
    19dc:	6e 5f       	subi	r22, 0xFE	; 254
    19de:	7f 4f       	sbci	r23, 0xFF	; 255
    19e0:	0e 94 01 06 	call	0xc02	; 0xc02 <vListInsert>
    19e4:	17 c0       	rjmp	.+46     	; 0x1a14 <prvAddCurrentTaskToDelayedList+0x7e>
    19e6:	60 91 cc 07 	lds	r22, 0x07CC	; 0x8007cc <pxCurrentTCB>
    19ea:	70 91 cd 07 	lds	r23, 0x07CD	; 0x8007cd <pxCurrentTCB+0x1>
    19ee:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <pxDelayedTaskList>
    19f2:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <pxDelayedTaskList+0x1>
    19f6:	6e 5f       	subi	r22, 0xFE	; 254
    19f8:	7f 4f       	sbci	r23, 0xFF	; 255
    19fa:	0e 94 01 06 	call	0xc02	; 0xc02 <vListInsert>
    19fe:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <xNextTaskUnblockTime>
    1a02:	90 91 75 07 	lds	r25, 0x0775	; 0x800775 <xNextTaskUnblockTime+0x1>
    1a06:	c8 17       	cp	r28, r24
    1a08:	d9 07       	cpc	r29, r25
    1a0a:	20 f4       	brcc	.+8      	; 0x1a14 <prvAddCurrentTaskToDelayedList+0x7e>
    1a0c:	d0 93 75 07 	sts	0x0775, r29	; 0x800775 <xNextTaskUnblockTime+0x1>
    1a10:	c0 93 74 07 	sts	0x0774, r28	; 0x800774 <xNextTaskUnblockTime>
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	1f 91       	pop	r17
    1a1a:	0f 91       	pop	r16
    1a1c:	08 95       	ret

00001a1e <xTaskCreate>:
    1a1e:	4f 92       	push	r4
    1a20:	5f 92       	push	r5
    1a22:	6f 92       	push	r6
    1a24:	7f 92       	push	r7
    1a26:	8f 92       	push	r8
    1a28:	9f 92       	push	r9
    1a2a:	af 92       	push	r10
    1a2c:	bf 92       	push	r11
    1a2e:	cf 92       	push	r12
    1a30:	df 92       	push	r13
    1a32:	ef 92       	push	r14
    1a34:	ff 92       	push	r15
    1a36:	0f 93       	push	r16
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	4c 01       	movw	r8, r24
    1a3e:	eb 01       	movw	r28, r22
    1a40:	6a 01       	movw	r12, r20
    1a42:	29 01       	movw	r4, r18
    1a44:	ca 01       	movw	r24, r20
    1a46:	0e 94 b6 07 	call	0xf6c	; 0xf6c <pvPortMalloc>
    1a4a:	5c 01       	movw	r10, r24
    1a4c:	89 2b       	or	r24, r25
    1a4e:	09 f4       	brne	.+2      	; 0x1a52 <xTaskCreate+0x34>
    1a50:	ec c0       	rjmp	.+472    	; 0x1c2a <xTaskCreate+0x20c>
    1a52:	8c e2       	ldi	r24, 0x2C	; 44
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	0e 94 b6 07 	call	0xf6c	; 0xf6c <pvPortMalloc>
    1a5a:	3c 01       	movw	r6, r24
    1a5c:	00 97       	sbiw	r24, 0x00	; 0
    1a5e:	b9 f0       	breq	.+46     	; 0x1a8e <xTaskCreate+0x70>
    1a60:	fc 01       	movw	r30, r24
    1a62:	b0 8e       	std	Z+24, r11	; 0x18
    1a64:	a7 8a       	std	Z+23, r10	; 0x17
    1a66:	a6 01       	movw	r20, r12
    1a68:	65 ea       	ldi	r22, 0xA5	; 165
    1a6a:	70 e0       	ldi	r23, 0x00	; 0
    1a6c:	c5 01       	movw	r24, r10
    1a6e:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <memset>
    1a72:	f1 e0       	ldi	r31, 0x01	; 1
    1a74:	cf 1a       	sub	r12, r31
    1a76:	d1 08       	sbc	r13, r1
    1a78:	f3 01       	movw	r30, r6
    1a7a:	87 89       	ldd	r24, Z+23	; 0x17
    1a7c:	90 8d       	ldd	r25, Z+24	; 0x18
    1a7e:	c8 0e       	add	r12, r24
    1a80:	d9 1e       	adc	r13, r25
    1a82:	88 81       	ld	r24, Y
    1a84:	81 8f       	std	Z+25, r24	; 0x19
    1a86:	88 81       	ld	r24, Y
    1a88:	81 11       	cpse	r24, r1
    1a8a:	05 c0       	rjmp	.+10     	; 0x1a96 <xTaskCreate+0x78>
    1a8c:	14 c0       	rjmp	.+40     	; 0x1ab6 <xTaskCreate+0x98>
    1a8e:	c5 01       	movw	r24, r10
    1a90:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <vPortFree>
    1a94:	ca c0       	rjmp	.+404    	; 0x1c2a <xTaskCreate+0x20c>
    1a96:	d3 01       	movw	r26, r6
    1a98:	5a 96       	adiw	r26, 0x1a	; 26
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	31 96       	adiw	r30, 0x01	; 1
    1a9e:	9e 01       	movw	r18, r28
    1aa0:	28 5f       	subi	r18, 0xF8	; 248
    1aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa4:	ef 01       	movw	r28, r30
    1aa6:	81 91       	ld	r24, Z+
    1aa8:	8d 93       	st	X+, r24
    1aaa:	88 81       	ld	r24, Y
    1aac:	88 23       	and	r24, r24
    1aae:	19 f0       	breq	.+6      	; 0x1ab6 <xTaskCreate+0x98>
    1ab0:	e2 17       	cp	r30, r18
    1ab2:	f3 07       	cpc	r31, r19
    1ab4:	b9 f7       	brne	.-18     	; 0x1aa4 <xTaskCreate+0x86>
    1ab6:	f3 01       	movw	r30, r6
    1ab8:	10 a2       	std	Z+32, r1	; 0x20
    1aba:	04 30       	cpi	r16, 0x04	; 4
    1abc:	08 f0       	brcs	.+2      	; 0x1ac0 <xTaskCreate+0xa2>
    1abe:	03 e0       	ldi	r16, 0x03	; 3
    1ac0:	f3 01       	movw	r30, r6
    1ac2:	06 8b       	std	Z+22, r16	; 0x16
    1ac4:	03 a3       	std	Z+35, r16	; 0x23
    1ac6:	14 a2       	std	Z+36, r1	; 0x24
    1ac8:	e3 01       	movw	r28, r6
    1aca:	22 96       	adiw	r28, 0x02	; 2
    1acc:	ce 01       	movw	r24, r28
    1ace:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <vListInitialiseItem>
    1ad2:	c3 01       	movw	r24, r6
    1ad4:	0c 96       	adiw	r24, 0x0c	; 12
    1ad6:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <vListInitialiseItem>
    1ada:	f3 01       	movw	r30, r6
    1adc:	71 86       	std	Z+9, r7	; 0x09
    1ade:	60 86       	std	Z+8, r6	; 0x08
    1ae0:	84 e0       	ldi	r24, 0x04	; 4
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	80 1b       	sub	r24, r16
    1ae6:	91 09       	sbc	r25, r1
    1ae8:	95 87       	std	Z+13, r25	; 0x0d
    1aea:	84 87       	std	Z+12, r24	; 0x0c
    1aec:	73 8a       	std	Z+19, r7	; 0x13
    1aee:	62 8a       	std	Z+18, r6	; 0x12
    1af0:	16 a2       	std	Z+38, r1	; 0x26
    1af2:	15 a2       	std	Z+37, r1	; 0x25
    1af4:	17 a2       	std	Z+39, r1	; 0x27
    1af6:	10 a6       	std	Z+40, r1	; 0x28
    1af8:	11 a6       	std	Z+41, r1	; 0x29
    1afa:	12 a6       	std	Z+42, r1	; 0x2a
    1afc:	13 a6       	std	Z+43, r1	; 0x2b
    1afe:	a2 01       	movw	r20, r4
    1b00:	b4 01       	movw	r22, r8
    1b02:	c6 01       	movw	r24, r12
    1b04:	0e 94 58 06 	call	0xcb0	; 0xcb0 <pxPortInitialiseStack>
    1b08:	f3 01       	movw	r30, r6
    1b0a:	91 83       	std	Z+1, r25	; 0x01
    1b0c:	80 83       	st	Z, r24
    1b0e:	e1 14       	cp	r14, r1
    1b10:	f1 04       	cpc	r15, r1
    1b12:	19 f0       	breq	.+6      	; 0x1b1a <xTaskCreate+0xfc>
    1b14:	f7 01       	movw	r30, r14
    1b16:	71 82       	std	Z+1, r7	; 0x01
    1b18:	60 82       	st	Z, r6
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	f8 94       	cli
    1b1e:	0f 92       	push	r0
    1b20:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <uxCurrentNumberOfTasks>
    1b24:	8f 5f       	subi	r24, 0xFF	; 255
    1b26:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <uxCurrentNumberOfTasks>
    1b2a:	80 91 cc 07 	lds	r24, 0x07CC	; 0x8007cc <pxCurrentTCB>
    1b2e:	90 91 cd 07 	lds	r25, 0x07CD	; 0x8007cd <pxCurrentTCB+0x1>
    1b32:	89 2b       	or	r24, r25
    1b34:	a9 f5       	brne	.+106    	; 0x1ba0 <xTaskCreate+0x182>
    1b36:	70 92 cd 07 	sts	0x07CD, r7	; 0x8007cd <pxCurrentTCB+0x1>
    1b3a:	60 92 cc 07 	sts	0x07CC, r6	; 0x8007cc <pxCurrentTCB>
    1b3e:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <uxCurrentNumberOfTasks>
    1b42:	81 30       	cpi	r24, 0x01	; 1
    1b44:	f1 f5       	brne	.+124    	; 0x1bc2 <xTaskCreate+0x1a4>
    1b46:	88 ea       	ldi	r24, 0xA8	; 168
    1b48:	97 e0       	ldi	r25, 0x07	; 7
    1b4a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vListInitialise>
    1b4e:	81 eb       	ldi	r24, 0xB1	; 177
    1b50:	97 e0       	ldi	r25, 0x07	; 7
    1b52:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vListInitialise>
    1b56:	8a eb       	ldi	r24, 0xBA	; 186
    1b58:	97 e0       	ldi	r25, 0x07	; 7
    1b5a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vListInitialise>
    1b5e:	83 ec       	ldi	r24, 0xC3	; 195
    1b60:	97 e0       	ldi	r25, 0x07	; 7
    1b62:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vListInitialise>
    1b66:	8f e9       	ldi	r24, 0x9F	; 159
    1b68:	97 e0       	ldi	r25, 0x07	; 7
    1b6a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vListInitialise>
    1b6e:	86 e9       	ldi	r24, 0x96	; 150
    1b70:	97 e0       	ldi	r25, 0x07	; 7
    1b72:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vListInitialise>
    1b76:	89 e8       	ldi	r24, 0x89	; 137
    1b78:	97 e0       	ldi	r25, 0x07	; 7
    1b7a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vListInitialise>
    1b7e:	80 e8       	ldi	r24, 0x80	; 128
    1b80:	97 e0       	ldi	r25, 0x07	; 7
    1b82:	0e 94 ce 05 	call	0xb9c	; 0xb9c <vListInitialise>
    1b86:	8f e9       	ldi	r24, 0x9F	; 159
    1b88:	97 e0       	ldi	r25, 0x07	; 7
    1b8a:	90 93 95 07 	sts	0x0795, r25	; 0x800795 <pxDelayedTaskList+0x1>
    1b8e:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <pxDelayedTaskList>
    1b92:	86 e9       	ldi	r24, 0x96	; 150
    1b94:	97 e0       	ldi	r25, 0x07	; 7
    1b96:	90 93 93 07 	sts	0x0793, r25	; 0x800793 <pxOverflowDelayedTaskList+0x1>
    1b9a:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <pxOverflowDelayedTaskList>
    1b9e:	11 c0       	rjmp	.+34     	; 0x1bc2 <xTaskCreate+0x1a4>
    1ba0:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <xSchedulerRunning>
    1ba4:	81 11       	cpse	r24, r1
    1ba6:	0d c0       	rjmp	.+26     	; 0x1bc2 <xTaskCreate+0x1a4>
    1ba8:	e0 91 cc 07 	lds	r30, 0x07CC	; 0x8007cc <pxCurrentTCB>
    1bac:	f0 91 cd 07 	lds	r31, 0x07CD	; 0x8007cd <pxCurrentTCB+0x1>
    1bb0:	96 89       	ldd	r25, Z+22	; 0x16
    1bb2:	f3 01       	movw	r30, r6
    1bb4:	86 89       	ldd	r24, Z+22	; 0x16
    1bb6:	89 17       	cp	r24, r25
    1bb8:	20 f0       	brcs	.+8      	; 0x1bc2 <xTaskCreate+0x1a4>
    1bba:	70 92 cd 07 	sts	0x07CD, r7	; 0x8007cd <pxCurrentTCB+0x1>
    1bbe:	60 92 cc 07 	sts	0x07CC, r6	; 0x8007cc <pxCurrentTCB>
    1bc2:	80 91 76 07 	lds	r24, 0x0776	; 0x800776 <uxTaskNumber>
    1bc6:	8f 5f       	subi	r24, 0xFF	; 255
    1bc8:	80 93 76 07 	sts	0x0776, r24	; 0x800776 <uxTaskNumber>
    1bcc:	f3 01       	movw	r30, r6
    1bce:	81 a3       	std	Z+33, r24	; 0x21
    1bd0:	86 89       	ldd	r24, Z+22	; 0x16
    1bd2:	90 91 7b 07 	lds	r25, 0x077B	; 0x80077b <uxTopReadyPriority>
    1bd6:	98 17       	cp	r25, r24
    1bd8:	10 f4       	brcc	.+4      	; 0x1bde <xTaskCreate+0x1c0>
    1bda:	80 93 7b 07 	sts	0x077B, r24	; 0x80077b <uxTopReadyPriority>
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	9c 01       	movw	r18, r24
    1be2:	22 0f       	add	r18, r18
    1be4:	33 1f       	adc	r19, r19
    1be6:	22 0f       	add	r18, r18
    1be8:	33 1f       	adc	r19, r19
    1bea:	22 0f       	add	r18, r18
    1bec:	33 1f       	adc	r19, r19
    1bee:	82 0f       	add	r24, r18
    1bf0:	93 1f       	adc	r25, r19
    1bf2:	be 01       	movw	r22, r28
    1bf4:	88 55       	subi	r24, 0x58	; 88
    1bf6:	98 4f       	sbci	r25, 0xF8	; 248
    1bf8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <vListInsertEnd>
    1bfc:	0f 90       	pop	r0
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <xSchedulerRunning>
    1c04:	88 23       	and	r24, r24
    1c06:	69 f0       	breq	.+26     	; 0x1c22 <xTaskCreate+0x204>
    1c08:	e0 91 cc 07 	lds	r30, 0x07CC	; 0x8007cc <pxCurrentTCB>
    1c0c:	f0 91 cd 07 	lds	r31, 0x07CD	; 0x8007cd <pxCurrentTCB+0x1>
    1c10:	96 89       	ldd	r25, Z+22	; 0x16
    1c12:	f3 01       	movw	r30, r6
    1c14:	86 89       	ldd	r24, Z+22	; 0x16
    1c16:	98 17       	cp	r25, r24
    1c18:	30 f4       	brcc	.+12     	; 0x1c26 <xTaskCreate+0x208>
    1c1a:	0e 94 fe 06 	call	0xdfc	; 0xdfc <vPortYield>
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	05 c0       	rjmp	.+10     	; 0x1c2c <xTaskCreate+0x20e>
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	03 c0       	rjmp	.+6      	; 0x1c2c <xTaskCreate+0x20e>
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	01 c0       	rjmp	.+2      	; 0x1c2c <xTaskCreate+0x20e>
    1c2a:	8f ef       	ldi	r24, 0xFF	; 255
    1c2c:	df 91       	pop	r29
    1c2e:	cf 91       	pop	r28
    1c30:	0f 91       	pop	r16
    1c32:	ff 90       	pop	r15
    1c34:	ef 90       	pop	r14
    1c36:	df 90       	pop	r13
    1c38:	cf 90       	pop	r12
    1c3a:	bf 90       	pop	r11
    1c3c:	af 90       	pop	r10
    1c3e:	9f 90       	pop	r9
    1c40:	8f 90       	pop	r8
    1c42:	7f 90       	pop	r7
    1c44:	6f 90       	pop	r6
    1c46:	5f 90       	pop	r5
    1c48:	4f 90       	pop	r4
    1c4a:	08 95       	ret

00001c4c <vTaskStartScheduler>:
    1c4c:	ef 92       	push	r14
    1c4e:	ff 92       	push	r15
    1c50:	0f 93       	push	r16
    1c52:	0f 2e       	mov	r0, r31
    1c54:	f2 e7       	ldi	r31, 0x72	; 114
    1c56:	ef 2e       	mov	r14, r31
    1c58:	f7 e0       	ldi	r31, 0x07	; 7
    1c5a:	ff 2e       	mov	r15, r31
    1c5c:	f0 2d       	mov	r31, r0
    1c5e:	00 e0       	ldi	r16, 0x00	; 0
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	45 e5       	ldi	r20, 0x55	; 85
    1c66:	50 e0       	ldi	r21, 0x00	; 0
    1c68:	60 e6       	ldi	r22, 0x60	; 96
    1c6a:	71 e0       	ldi	r23, 0x01	; 1
    1c6c:	84 ea       	ldi	r24, 0xA4	; 164
    1c6e:	9f e0       	ldi	r25, 0x0F	; 15
    1c70:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <xTaskCreate>
    1c74:	81 30       	cpi	r24, 0x01	; 1
    1c76:	81 f4       	brne	.+32     	; 0x1c98 <vTaskStartScheduler+0x4c>
    1c78:	f8 94       	cli
    1c7a:	8f ef       	ldi	r24, 0xFF	; 255
    1c7c:	9f ef       	ldi	r25, 0xFF	; 255
    1c7e:	90 93 75 07 	sts	0x0775, r25	; 0x800775 <xNextTaskUnblockTime+0x1>
    1c82:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <xNextTaskUnblockTime>
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	80 93 7a 07 	sts	0x077A, r24	; 0x80077a <xSchedulerRunning>
    1c8c:	10 92 7d 07 	sts	0x077D, r1	; 0x80077d <xTickCount+0x1>
    1c90:	10 92 7c 07 	sts	0x077C, r1	; 0x80077c <xTickCount>
    1c94:	0e 94 c4 06 	call	0xd88	; 0xd88 <xPortStartScheduler>
    1c98:	0f 91       	pop	r16
    1c9a:	ff 90       	pop	r15
    1c9c:	ef 90       	pop	r14
    1c9e:	08 95       	ret

00001ca0 <vTaskSuspendAll>:
    1ca0:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <uxSchedulerSuspended>
    1ca4:	8f 5f       	subi	r24, 0xFF	; 255
    1ca6:	80 93 71 07 	sts	0x0771, r24	; 0x800771 <uxSchedulerSuspended>
    1caa:	08 95       	ret

00001cac <xTaskIncrementTick>:
    1cac:	cf 92       	push	r12
    1cae:	df 92       	push	r13
    1cb0:	ef 92       	push	r14
    1cb2:	ff 92       	push	r15
    1cb4:	0f 93       	push	r16
    1cb6:	1f 93       	push	r17
    1cb8:	cf 93       	push	r28
    1cba:	df 93       	push	r29
    1cbc:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <uxSchedulerSuspended>
    1cc0:	81 11       	cpse	r24, r1
    1cc2:	99 c0       	rjmp	.+306    	; 0x1df6 <xTaskIncrementTick+0x14a>
    1cc4:	e0 90 7c 07 	lds	r14, 0x077C	; 0x80077c <xTickCount>
    1cc8:	f0 90 7d 07 	lds	r15, 0x077D	; 0x80077d <xTickCount+0x1>
    1ccc:	8f ef       	ldi	r24, 0xFF	; 255
    1cce:	e8 1a       	sub	r14, r24
    1cd0:	f8 0a       	sbc	r15, r24
    1cd2:	f0 92 7d 07 	sts	0x077D, r15	; 0x80077d <xTickCount+0x1>
    1cd6:	e0 92 7c 07 	sts	0x077C, r14	; 0x80077c <xTickCount>
    1cda:	e1 14       	cp	r14, r1
    1cdc:	f1 04       	cpc	r15, r1
    1cde:	b9 f4       	brne	.+46     	; 0x1d0e <xTaskIncrementTick+0x62>
    1ce0:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <pxDelayedTaskList>
    1ce4:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <pxDelayedTaskList+0x1>
    1ce8:	20 91 92 07 	lds	r18, 0x0792	; 0x800792 <pxOverflowDelayedTaskList>
    1cec:	30 91 93 07 	lds	r19, 0x0793	; 0x800793 <pxOverflowDelayedTaskList+0x1>
    1cf0:	30 93 95 07 	sts	0x0795, r19	; 0x800795 <pxDelayedTaskList+0x1>
    1cf4:	20 93 94 07 	sts	0x0794, r18	; 0x800794 <pxDelayedTaskList>
    1cf8:	90 93 93 07 	sts	0x0793, r25	; 0x800793 <pxOverflowDelayedTaskList+0x1>
    1cfc:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <pxOverflowDelayedTaskList>
    1d00:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <xNumOfOverflows>
    1d04:	8f 5f       	subi	r24, 0xFF	; 255
    1d06:	80 93 77 07 	sts	0x0777, r24	; 0x800777 <xNumOfOverflows>
    1d0a:	0e 94 ac 0c 	call	0x1958	; 0x1958 <prvResetNextTaskUnblockTime>
    1d0e:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <xNextTaskUnblockTime>
    1d12:	90 91 75 07 	lds	r25, 0x0775	; 0x800775 <xNextTaskUnblockTime+0x1>
    1d16:	e8 16       	cp	r14, r24
    1d18:	f9 06       	cpc	r15, r25
    1d1a:	10 f4       	brcc	.+4      	; 0x1d20 <xTaskIncrementTick+0x74>
    1d1c:	d1 2c       	mov	r13, r1
    1d1e:	53 c0       	rjmp	.+166    	; 0x1dc6 <xTaskIncrementTick+0x11a>
    1d20:	d1 2c       	mov	r13, r1
    1d22:	cc 24       	eor	r12, r12
    1d24:	c3 94       	inc	r12
    1d26:	e0 91 94 07 	lds	r30, 0x0794	; 0x800794 <pxDelayedTaskList>
    1d2a:	f0 91 95 07 	lds	r31, 0x0795	; 0x800795 <pxDelayedTaskList+0x1>
    1d2e:	90 81       	ld	r25, Z
    1d30:	91 11       	cpse	r25, r1
    1d32:	07 c0       	rjmp	.+14     	; 0x1d42 <xTaskIncrementTick+0x96>
    1d34:	8f ef       	ldi	r24, 0xFF	; 255
    1d36:	9f ef       	ldi	r25, 0xFF	; 255
    1d38:	90 93 75 07 	sts	0x0775, r25	; 0x800775 <xNextTaskUnblockTime+0x1>
    1d3c:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <xNextTaskUnblockTime>
    1d40:	42 c0       	rjmp	.+132    	; 0x1dc6 <xTaskIncrementTick+0x11a>
    1d42:	e0 91 94 07 	lds	r30, 0x0794	; 0x800794 <pxDelayedTaskList>
    1d46:	f0 91 95 07 	lds	r31, 0x0795	; 0x800795 <pxDelayedTaskList+0x1>
    1d4a:	05 80       	ldd	r0, Z+5	; 0x05
    1d4c:	f6 81       	ldd	r31, Z+6	; 0x06
    1d4e:	e0 2d       	mov	r30, r0
    1d50:	c6 81       	ldd	r28, Z+6	; 0x06
    1d52:	d7 81       	ldd	r29, Z+7	; 0x07
    1d54:	2a 81       	ldd	r18, Y+2	; 0x02
    1d56:	3b 81       	ldd	r19, Y+3	; 0x03
    1d58:	e2 16       	cp	r14, r18
    1d5a:	f3 06       	cpc	r15, r19
    1d5c:	28 f4       	brcc	.+10     	; 0x1d68 <xTaskIncrementTick+0xbc>
    1d5e:	30 93 75 07 	sts	0x0775, r19	; 0x800775 <xNextTaskUnblockTime+0x1>
    1d62:	20 93 74 07 	sts	0x0774, r18	; 0x800774 <xNextTaskUnblockTime>
    1d66:	2f c0       	rjmp	.+94     	; 0x1dc6 <xTaskIncrementTick+0x11a>
    1d68:	8e 01       	movw	r16, r28
    1d6a:	0e 5f       	subi	r16, 0xFE	; 254
    1d6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6e:	c8 01       	movw	r24, r16
    1d70:	0e 94 32 06 	call	0xc64	; 0xc64 <uxListRemove>
    1d74:	8c 89       	ldd	r24, Y+20	; 0x14
    1d76:	9d 89       	ldd	r25, Y+21	; 0x15
    1d78:	89 2b       	or	r24, r25
    1d7a:	21 f0       	breq	.+8      	; 0x1d84 <xTaskIncrementTick+0xd8>
    1d7c:	ce 01       	movw	r24, r28
    1d7e:	0c 96       	adiw	r24, 0x0c	; 12
    1d80:	0e 94 32 06 	call	0xc64	; 0xc64 <uxListRemove>
    1d84:	2e 89       	ldd	r18, Y+22	; 0x16
    1d86:	80 91 7b 07 	lds	r24, 0x077B	; 0x80077b <uxTopReadyPriority>
    1d8a:	82 17       	cp	r24, r18
    1d8c:	10 f4       	brcc	.+4      	; 0x1d92 <xTaskIncrementTick+0xe6>
    1d8e:	20 93 7b 07 	sts	0x077B, r18	; 0x80077b <uxTopReadyPriority>
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	c9 01       	movw	r24, r18
    1d96:	88 0f       	add	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	88 0f       	add	r24, r24
    1da0:	99 1f       	adc	r25, r25
    1da2:	82 0f       	add	r24, r18
    1da4:	93 1f       	adc	r25, r19
    1da6:	b8 01       	movw	r22, r16
    1da8:	88 55       	subi	r24, 0x58	; 88
    1daa:	98 4f       	sbci	r25, 0xF8	; 248
    1dac:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <vListInsertEnd>
    1db0:	e0 91 cc 07 	lds	r30, 0x07CC	; 0x8007cc <pxCurrentTCB>
    1db4:	f0 91 cd 07 	lds	r31, 0x07CD	; 0x8007cd <pxCurrentTCB+0x1>
    1db8:	9e 89       	ldd	r25, Y+22	; 0x16
    1dba:	86 89       	ldd	r24, Z+22	; 0x16
    1dbc:	98 17       	cp	r25, r24
    1dbe:	08 f4       	brcc	.+2      	; 0x1dc2 <xTaskIncrementTick+0x116>
    1dc0:	b2 cf       	rjmp	.-156    	; 0x1d26 <xTaskIncrementTick+0x7a>
    1dc2:	dc 2c       	mov	r13, r12
    1dc4:	b0 cf       	rjmp	.-160    	; 0x1d26 <xTaskIncrementTick+0x7a>
    1dc6:	e0 91 cc 07 	lds	r30, 0x07CC	; 0x8007cc <pxCurrentTCB>
    1dca:	f0 91 cd 07 	lds	r31, 0x07CD	; 0x8007cd <pxCurrentTCB+0x1>
    1dce:	86 89       	ldd	r24, Z+22	; 0x16
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	fc 01       	movw	r30, r24
    1dd4:	ee 0f       	add	r30, r30
    1dd6:	ff 1f       	adc	r31, r31
    1dd8:	ee 0f       	add	r30, r30
    1dda:	ff 1f       	adc	r31, r31
    1ddc:	ee 0f       	add	r30, r30
    1dde:	ff 1f       	adc	r31, r31
    1de0:	8e 0f       	add	r24, r30
    1de2:	9f 1f       	adc	r25, r31
    1de4:	fc 01       	movw	r30, r24
    1de6:	e8 55       	subi	r30, 0x58	; 88
    1de8:	f8 4f       	sbci	r31, 0xF8	; 248
    1dea:	80 81       	ld	r24, Z
    1dec:	82 30       	cpi	r24, 0x02	; 2
    1dee:	48 f0       	brcs	.+18     	; 0x1e02 <xTaskIncrementTick+0x156>
    1df0:	dd 24       	eor	r13, r13
    1df2:	d3 94       	inc	r13
    1df4:	06 c0       	rjmp	.+12     	; 0x1e02 <xTaskIncrementTick+0x156>
    1df6:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <uxPendedTicks>
    1dfa:	8f 5f       	subi	r24, 0xFF	; 255
    1dfc:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <uxPendedTicks>
    1e00:	d1 2c       	mov	r13, r1
    1e02:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <xYieldPending>
    1e06:	88 23       	and	r24, r24
    1e08:	11 f0       	breq	.+4      	; 0x1e0e <xTaskIncrementTick+0x162>
    1e0a:	dd 24       	eor	r13, r13
    1e0c:	d3 94       	inc	r13
    1e0e:	8d 2d       	mov	r24, r13
    1e10:	df 91       	pop	r29
    1e12:	cf 91       	pop	r28
    1e14:	1f 91       	pop	r17
    1e16:	0f 91       	pop	r16
    1e18:	ff 90       	pop	r15
    1e1a:	ef 90       	pop	r14
    1e1c:	df 90       	pop	r13
    1e1e:	cf 90       	pop	r12
    1e20:	08 95       	ret

00001e22 <xTaskResumeAll>:
    1e22:	df 92       	push	r13
    1e24:	ef 92       	push	r14
    1e26:	ff 92       	push	r15
    1e28:	0f 93       	push	r16
    1e2a:	1f 93       	push	r17
    1e2c:	cf 93       	push	r28
    1e2e:	df 93       	push	r29
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	f8 94       	cli
    1e34:	0f 92       	push	r0
    1e36:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <uxSchedulerSuspended>
    1e3a:	81 50       	subi	r24, 0x01	; 1
    1e3c:	80 93 71 07 	sts	0x0771, r24	; 0x800771 <uxSchedulerSuspended>
    1e40:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <uxSchedulerSuspended>
    1e44:	81 11       	cpse	r24, r1
    1e46:	5f c0       	rjmp	.+190    	; 0x1f06 <xTaskResumeAll+0xe4>
    1e48:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <uxCurrentNumberOfTasks>
    1e4c:	81 11       	cpse	r24, r1
    1e4e:	33 c0       	rjmp	.+102    	; 0x1eb6 <xTaskResumeAll+0x94>
    1e50:	5d c0       	rjmp	.+186    	; 0x1f0c <xTaskResumeAll+0xea>
    1e52:	d7 01       	movw	r26, r14
    1e54:	15 96       	adiw	r26, 0x05	; 5
    1e56:	ed 91       	ld	r30, X+
    1e58:	fc 91       	ld	r31, X
    1e5a:	16 97       	sbiw	r26, 0x06	; 6
    1e5c:	c6 81       	ldd	r28, Z+6	; 0x06
    1e5e:	d7 81       	ldd	r29, Z+7	; 0x07
    1e60:	ce 01       	movw	r24, r28
    1e62:	0c 96       	adiw	r24, 0x0c	; 12
    1e64:	0e 94 32 06 	call	0xc64	; 0xc64 <uxListRemove>
    1e68:	8e 01       	movw	r16, r28
    1e6a:	0e 5f       	subi	r16, 0xFE	; 254
    1e6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6e:	c8 01       	movw	r24, r16
    1e70:	0e 94 32 06 	call	0xc64	; 0xc64 <uxListRemove>
    1e74:	2e 89       	ldd	r18, Y+22	; 0x16
    1e76:	80 91 7b 07 	lds	r24, 0x077B	; 0x80077b <uxTopReadyPriority>
    1e7a:	82 17       	cp	r24, r18
    1e7c:	10 f4       	brcc	.+4      	; 0x1e82 <xTaskResumeAll+0x60>
    1e7e:	20 93 7b 07 	sts	0x077B, r18	; 0x80077b <uxTopReadyPriority>
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	c9 01       	movw	r24, r18
    1e86:	88 0f       	add	r24, r24
    1e88:	99 1f       	adc	r25, r25
    1e8a:	88 0f       	add	r24, r24
    1e8c:	99 1f       	adc	r25, r25
    1e8e:	88 0f       	add	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	82 0f       	add	r24, r18
    1e94:	93 1f       	adc	r25, r19
    1e96:	b8 01       	movw	r22, r16
    1e98:	88 55       	subi	r24, 0x58	; 88
    1e9a:	98 4f       	sbci	r25, 0xF8	; 248
    1e9c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <vListInsertEnd>
    1ea0:	e0 91 cc 07 	lds	r30, 0x07CC	; 0x8007cc <pxCurrentTCB>
    1ea4:	f0 91 cd 07 	lds	r31, 0x07CD	; 0x8007cd <pxCurrentTCB+0x1>
    1ea8:	9e 89       	ldd	r25, Y+22	; 0x16
    1eaa:	86 89       	ldd	r24, Z+22	; 0x16
    1eac:	98 17       	cp	r25, r24
    1eae:	68 f0       	brcs	.+26     	; 0x1eca <xTaskResumeAll+0xa8>
    1eb0:	d0 92 78 07 	sts	0x0778, r13	; 0x800778 <xYieldPending>
    1eb4:	0a c0       	rjmp	.+20     	; 0x1eca <xTaskResumeAll+0xa8>
    1eb6:	c0 e0       	ldi	r28, 0x00	; 0
    1eb8:	d0 e0       	ldi	r29, 0x00	; 0
    1eba:	0f 2e       	mov	r0, r31
    1ebc:	f9 e8       	ldi	r31, 0x89	; 137
    1ebe:	ef 2e       	mov	r14, r31
    1ec0:	f7 e0       	ldi	r31, 0x07	; 7
    1ec2:	ff 2e       	mov	r15, r31
    1ec4:	f0 2d       	mov	r31, r0
    1ec6:	dd 24       	eor	r13, r13
    1ec8:	d3 94       	inc	r13
    1eca:	f7 01       	movw	r30, r14
    1ecc:	80 81       	ld	r24, Z
    1ece:	81 11       	cpse	r24, r1
    1ed0:	c0 cf       	rjmp	.-128    	; 0x1e52 <xTaskResumeAll+0x30>
    1ed2:	cd 2b       	or	r28, r29
    1ed4:	11 f0       	breq	.+4      	; 0x1eda <xTaskResumeAll+0xb8>
    1ed6:	0e 94 ac 0c 	call	0x1958	; 0x1958 <prvResetNextTaskUnblockTime>
    1eda:	c0 91 79 07 	lds	r28, 0x0779	; 0x800779 <uxPendedTicks>
    1ede:	cc 23       	and	r28, r28
    1ee0:	51 f0       	breq	.+20     	; 0x1ef6 <xTaskResumeAll+0xd4>
    1ee2:	d1 e0       	ldi	r29, 0x01	; 1
    1ee4:	0e 94 56 0e 	call	0x1cac	; 0x1cac <xTaskIncrementTick>
    1ee8:	81 11       	cpse	r24, r1
    1eea:	d0 93 78 07 	sts	0x0778, r29	; 0x800778 <xYieldPending>
    1eee:	c1 50       	subi	r28, 0x01	; 1
    1ef0:	c9 f7       	brne	.-14     	; 0x1ee4 <xTaskResumeAll+0xc2>
    1ef2:	10 92 79 07 	sts	0x0779, r1	; 0x800779 <uxPendedTicks>
    1ef6:	80 91 78 07 	lds	r24, 0x0778	; 0x800778 <xYieldPending>
    1efa:	88 23       	and	r24, r24
    1efc:	31 f0       	breq	.+12     	; 0x1f0a <xTaskResumeAll+0xe8>
    1efe:	0e 94 fe 06 	call	0xdfc	; 0xdfc <vPortYield>
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	03 c0       	rjmp	.+6      	; 0x1f0c <xTaskResumeAll+0xea>
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	01 c0       	rjmp	.+2      	; 0x1f0c <xTaskResumeAll+0xea>
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
    1f0c:	0f 90       	pop	r0
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	df 91       	pop	r29
    1f12:	cf 91       	pop	r28
    1f14:	1f 91       	pop	r17
    1f16:	0f 91       	pop	r16
    1f18:	ff 90       	pop	r15
    1f1a:	ef 90       	pop	r14
    1f1c:	df 90       	pop	r13
    1f1e:	08 95       	ret

00001f20 <vTaskDelay>:
    1f20:	cf 93       	push	r28
    1f22:	df 93       	push	r29
    1f24:	ec 01       	movw	r28, r24
    1f26:	89 2b       	or	r24, r25
    1f28:	51 f0       	breq	.+20     	; 0x1f3e <vTaskDelay+0x1e>
    1f2a:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <vTaskSuspendAll>
    1f2e:	60 e0       	ldi	r22, 0x00	; 0
    1f30:	ce 01       	movw	r24, r28
    1f32:	0e 94 cb 0c 	call	0x1996	; 0x1996 <prvAddCurrentTaskToDelayedList>
    1f36:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <xTaskResumeAll>
    1f3a:	81 11       	cpse	r24, r1
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <vTaskDelay+0x22>
    1f3e:	0e 94 fe 06 	call	0xdfc	; 0xdfc <vPortYield>
    1f42:	df 91       	pop	r29
    1f44:	cf 91       	pop	r28
    1f46:	08 95       	ret

00001f48 <prvIdleTask>:
    1f48:	00 e8       	ldi	r16, 0x80	; 128
    1f4a:	17 e0       	ldi	r17, 0x07	; 7
    1f4c:	0f 2e       	mov	r0, r31
    1f4e:	f8 ea       	ldi	r31, 0xA8	; 168
    1f50:	ef 2e       	mov	r14, r31
    1f52:	f7 e0       	ldi	r31, 0x07	; 7
    1f54:	ff 2e       	mov	r15, r31
    1f56:	f0 2d       	mov	r31, r0
    1f58:	29 c0       	rjmp	.+82     	; 0x1fac <prvIdleTask+0x64>
    1f5a:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <vTaskSuspendAll>
    1f5e:	d8 01       	movw	r26, r16
    1f60:	cc 91       	ld	r28, X
    1f62:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <xTaskResumeAll>
    1f66:	cc 23       	and	r28, r28
    1f68:	09 f1       	breq	.+66     	; 0x1fac <prvIdleTask+0x64>
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	0f 92       	push	r0
    1f70:	d8 01       	movw	r26, r16
    1f72:	15 96       	adiw	r26, 0x05	; 5
    1f74:	ed 91       	ld	r30, X+
    1f76:	fc 91       	ld	r31, X
    1f78:	16 97       	sbiw	r26, 0x06	; 6
    1f7a:	c6 81       	ldd	r28, Z+6	; 0x06
    1f7c:	d7 81       	ldd	r29, Z+7	; 0x07
    1f7e:	ce 01       	movw	r24, r28
    1f80:	02 96       	adiw	r24, 0x02	; 2
    1f82:	0e 94 32 06 	call	0xc64	; 0xc64 <uxListRemove>
    1f86:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <uxCurrentNumberOfTasks>
    1f8a:	81 50       	subi	r24, 0x01	; 1
    1f8c:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <uxCurrentNumberOfTasks>
    1f90:	80 91 7f 07 	lds	r24, 0x077F	; 0x80077f <uxDeletedTasksWaitingCleanUp>
    1f94:	81 50       	subi	r24, 0x01	; 1
    1f96:	80 93 7f 07 	sts	0x077F, r24	; 0x80077f <uxDeletedTasksWaitingCleanUp>
    1f9a:	0f 90       	pop	r0
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa2:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <vPortFree>
    1fa6:	ce 01       	movw	r24, r28
    1fa8:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <vPortFree>
    1fac:	80 91 7f 07 	lds	r24, 0x077F	; 0x80077f <uxDeletedTasksWaitingCleanUp>
    1fb0:	81 11       	cpse	r24, r1
    1fb2:	d3 cf       	rjmp	.-90     	; 0x1f5a <prvIdleTask+0x12>
    1fb4:	f7 01       	movw	r30, r14
    1fb6:	80 81       	ld	r24, Z
    1fb8:	82 30       	cpi	r24, 0x02	; 2
    1fba:	10 f0       	brcs	.+4      	; 0x1fc0 <prvIdleTask+0x78>
    1fbc:	0e 94 fe 06 	call	0xdfc	; 0xdfc <vPortYield>
    1fc0:	0e 94 ad 04 	call	0x95a	; 0x95a <vApplicationIdleHook>
    1fc4:	f3 cf       	rjmp	.-26     	; 0x1fac <prvIdleTask+0x64>

00001fc6 <vTaskSetApplicationTaskTag>:
    1fc6:	00 97       	sbiw	r24, 0x00	; 0
    1fc8:	21 f4       	brne	.+8      	; 0x1fd2 <vTaskSetApplicationTaskTag+0xc>
    1fca:	80 91 cc 07 	lds	r24, 0x07CC	; 0x8007cc <pxCurrentTCB>
    1fce:	90 91 cd 07 	lds	r25, 0x07CD	; 0x8007cd <pxCurrentTCB+0x1>
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	f8 94       	cli
    1fd6:	0f 92       	push	r0
    1fd8:	fc 01       	movw	r30, r24
    1fda:	76 a3       	std	Z+38, r23	; 0x26
    1fdc:	65 a3       	std	Z+37, r22	; 0x25
    1fde:	0f 90       	pop	r0
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	08 95       	ret

00001fe4 <vTaskSwitchContext>:
    1fe4:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <uxSchedulerSuspended>
    1fe8:	88 23       	and	r24, r24
    1fea:	21 f0       	breq	.+8      	; 0x1ff4 <vTaskSwitchContext+0x10>
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <xYieldPending>
    1ff2:	08 95       	ret
    1ff4:	10 92 78 07 	sts	0x0778, r1	; 0x800778 <xYieldPending>
    1ff8:	e0 91 cc 07 	lds	r30, 0x07CC	; 0x8007cc <pxCurrentTCB>
    1ffc:	f0 91 cd 07 	lds	r31, 0x07CD	; 0x8007cd <pxCurrentTCB+0x1>
    2000:	85 a1       	ldd	r24, Z+37	; 0x25
    2002:	0e 94 87 05 	call	0xb0e	; 0xb0e <switch_out>
    2006:	20 91 7b 07 	lds	r18, 0x077B	; 0x80077b <uxTopReadyPriority>
    200a:	82 2f       	mov	r24, r18
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	fc 01       	movw	r30, r24
    2010:	ee 0f       	add	r30, r30
    2012:	ff 1f       	adc	r31, r31
    2014:	ee 0f       	add	r30, r30
    2016:	ff 1f       	adc	r31, r31
    2018:	ee 0f       	add	r30, r30
    201a:	ff 1f       	adc	r31, r31
    201c:	e8 0f       	add	r30, r24
    201e:	f9 1f       	adc	r31, r25
    2020:	e8 55       	subi	r30, 0x58	; 88
    2022:	f8 4f       	sbci	r31, 0xF8	; 248
    2024:	30 81       	ld	r19, Z
    2026:	31 11       	cpse	r19, r1
    2028:	11 c0       	rjmp	.+34     	; 0x204c <vTaskSwitchContext+0x68>
    202a:	21 50       	subi	r18, 0x01	; 1
    202c:	82 2f       	mov	r24, r18
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	fc 01       	movw	r30, r24
    2032:	ee 0f       	add	r30, r30
    2034:	ff 1f       	adc	r31, r31
    2036:	ee 0f       	add	r30, r30
    2038:	ff 1f       	adc	r31, r31
    203a:	ee 0f       	add	r30, r30
    203c:	ff 1f       	adc	r31, r31
    203e:	e8 0f       	add	r30, r24
    2040:	f9 1f       	adc	r31, r25
    2042:	e8 55       	subi	r30, 0x58	; 88
    2044:	f8 4f       	sbci	r31, 0xF8	; 248
    2046:	30 81       	ld	r19, Z
    2048:	33 23       	and	r19, r19
    204a:	79 f3       	breq	.-34     	; 0x202a <vTaskSwitchContext+0x46>
    204c:	ac 01       	movw	r20, r24
    204e:	44 0f       	add	r20, r20
    2050:	55 1f       	adc	r21, r21
    2052:	44 0f       	add	r20, r20
    2054:	55 1f       	adc	r21, r21
    2056:	44 0f       	add	r20, r20
    2058:	55 1f       	adc	r21, r21
    205a:	48 0f       	add	r20, r24
    205c:	59 1f       	adc	r21, r25
    205e:	da 01       	movw	r26, r20
    2060:	a8 55       	subi	r26, 0x58	; 88
    2062:	b8 4f       	sbci	r27, 0xF8	; 248
    2064:	11 96       	adiw	r26, 0x01	; 1
    2066:	ed 91       	ld	r30, X+
    2068:	fc 91       	ld	r31, X
    206a:	12 97       	sbiw	r26, 0x02	; 2
    206c:	02 80       	ldd	r0, Z+2	; 0x02
    206e:	f3 81       	ldd	r31, Z+3	; 0x03
    2070:	e0 2d       	mov	r30, r0
    2072:	12 96       	adiw	r26, 0x02	; 2
    2074:	fc 93       	st	X, r31
    2076:	ee 93       	st	-X, r30
    2078:	11 97       	sbiw	r26, 0x01	; 1
    207a:	45 55       	subi	r20, 0x55	; 85
    207c:	58 4f       	sbci	r21, 0xF8	; 248
    207e:	e4 17       	cp	r30, r20
    2080:	f5 07       	cpc	r31, r21
    2082:	29 f4       	brne	.+10     	; 0x208e <vTaskSwitchContext+0xaa>
    2084:	42 81       	ldd	r20, Z+2	; 0x02
    2086:	53 81       	ldd	r21, Z+3	; 0x03
    2088:	fd 01       	movw	r30, r26
    208a:	52 83       	std	Z+2, r21	; 0x02
    208c:	41 83       	std	Z+1, r20	; 0x01
    208e:	fc 01       	movw	r30, r24
    2090:	ee 0f       	add	r30, r30
    2092:	ff 1f       	adc	r31, r31
    2094:	ee 0f       	add	r30, r30
    2096:	ff 1f       	adc	r31, r31
    2098:	ee 0f       	add	r30, r30
    209a:	ff 1f       	adc	r31, r31
    209c:	8e 0f       	add	r24, r30
    209e:	9f 1f       	adc	r25, r31
    20a0:	fc 01       	movw	r30, r24
    20a2:	e8 55       	subi	r30, 0x58	; 88
    20a4:	f8 4f       	sbci	r31, 0xF8	; 248
    20a6:	01 80       	ldd	r0, Z+1	; 0x01
    20a8:	f2 81       	ldd	r31, Z+2	; 0x02
    20aa:	e0 2d       	mov	r30, r0
    20ac:	86 81       	ldd	r24, Z+6	; 0x06
    20ae:	97 81       	ldd	r25, Z+7	; 0x07
    20b0:	90 93 cd 07 	sts	0x07CD, r25	; 0x8007cd <pxCurrentTCB+0x1>
    20b4:	80 93 cc 07 	sts	0x07CC, r24	; 0x8007cc <pxCurrentTCB>
    20b8:	20 93 7b 07 	sts	0x077B, r18	; 0x80077b <uxTopReadyPriority>
    20bc:	e0 91 cc 07 	lds	r30, 0x07CC	; 0x8007cc <pxCurrentTCB>
    20c0:	f0 91 cd 07 	lds	r31, 0x07CD	; 0x8007cd <pxCurrentTCB+0x1>
    20c4:	85 a1       	ldd	r24, Z+37	; 0x25
    20c6:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <switch_in>
    20ca:	08 95       	ret

000020cc <vTaskPlaceOnEventList>:
    20cc:	cf 93       	push	r28
    20ce:	df 93       	push	r29
    20d0:	eb 01       	movw	r28, r22
    20d2:	20 91 cc 07 	lds	r18, 0x07CC	; 0x8007cc <pxCurrentTCB>
    20d6:	30 91 cd 07 	lds	r19, 0x07CD	; 0x8007cd <pxCurrentTCB+0x1>
    20da:	b9 01       	movw	r22, r18
    20dc:	64 5f       	subi	r22, 0xF4	; 244
    20de:	7f 4f       	sbci	r23, 0xFF	; 255
    20e0:	0e 94 01 06 	call	0xc02	; 0xc02 <vListInsert>
    20e4:	61 e0       	ldi	r22, 0x01	; 1
    20e6:	ce 01       	movw	r24, r28
    20e8:	0e 94 cb 0c 	call	0x1996	; 0x1996 <prvAddCurrentTaskToDelayedList>
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	08 95       	ret

000020f2 <xTaskRemoveFromEventList>:
    20f2:	0f 93       	push	r16
    20f4:	1f 93       	push	r17
    20f6:	cf 93       	push	r28
    20f8:	df 93       	push	r29
    20fa:	dc 01       	movw	r26, r24
    20fc:	15 96       	adiw	r26, 0x05	; 5
    20fe:	ed 91       	ld	r30, X+
    2100:	fc 91       	ld	r31, X
    2102:	16 97       	sbiw	r26, 0x06	; 6
    2104:	c6 81       	ldd	r28, Z+6	; 0x06
    2106:	d7 81       	ldd	r29, Z+7	; 0x07
    2108:	8e 01       	movw	r16, r28
    210a:	04 5f       	subi	r16, 0xF4	; 244
    210c:	1f 4f       	sbci	r17, 0xFF	; 255
    210e:	c8 01       	movw	r24, r16
    2110:	0e 94 32 06 	call	0xc64	; 0xc64 <uxListRemove>
    2114:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <uxSchedulerSuspended>
    2118:	81 11       	cpse	r24, r1
    211a:	1c c0       	rjmp	.+56     	; 0x2154 <xTaskRemoveFromEventList+0x62>
    211c:	0a 50       	subi	r16, 0x0A	; 10
    211e:	11 09       	sbc	r17, r1
    2120:	c8 01       	movw	r24, r16
    2122:	0e 94 32 06 	call	0xc64	; 0xc64 <uxListRemove>
    2126:	2e 89       	ldd	r18, Y+22	; 0x16
    2128:	80 91 7b 07 	lds	r24, 0x077B	; 0x80077b <uxTopReadyPriority>
    212c:	82 17       	cp	r24, r18
    212e:	10 f4       	brcc	.+4      	; 0x2134 <xTaskRemoveFromEventList+0x42>
    2130:	20 93 7b 07 	sts	0x077B, r18	; 0x80077b <uxTopReadyPriority>
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	c9 01       	movw	r24, r18
    2138:	88 0f       	add	r24, r24
    213a:	99 1f       	adc	r25, r25
    213c:	88 0f       	add	r24, r24
    213e:	99 1f       	adc	r25, r25
    2140:	88 0f       	add	r24, r24
    2142:	99 1f       	adc	r25, r25
    2144:	82 0f       	add	r24, r18
    2146:	93 1f       	adc	r25, r19
    2148:	b8 01       	movw	r22, r16
    214a:	88 55       	subi	r24, 0x58	; 88
    214c:	98 4f       	sbci	r25, 0xF8	; 248
    214e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <vListInsertEnd>
    2152:	05 c0       	rjmp	.+10     	; 0x215e <xTaskRemoveFromEventList+0x6c>
    2154:	b8 01       	movw	r22, r16
    2156:	89 e8       	ldi	r24, 0x89	; 137
    2158:	97 e0       	ldi	r25, 0x07	; 7
    215a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <vListInsertEnd>
    215e:	e0 91 cc 07 	lds	r30, 0x07CC	; 0x8007cc <pxCurrentTCB>
    2162:	f0 91 cd 07 	lds	r31, 0x07CD	; 0x8007cd <pxCurrentTCB+0x1>
    2166:	9e 89       	ldd	r25, Y+22	; 0x16
    2168:	86 89       	ldd	r24, Z+22	; 0x16
    216a:	89 17       	cp	r24, r25
    216c:	20 f4       	brcc	.+8      	; 0x2176 <xTaskRemoveFromEventList+0x84>
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <xYieldPending>
    2174:	01 c0       	rjmp	.+2      	; 0x2178 <xTaskRemoveFromEventList+0x86>
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	df 91       	pop	r29
    217a:	cf 91       	pop	r28
    217c:	1f 91       	pop	r17
    217e:	0f 91       	pop	r16
    2180:	08 95       	ret

00002182 <vTaskSetTimeOutState>:
    2182:	20 91 77 07 	lds	r18, 0x0777	; 0x800777 <xNumOfOverflows>
    2186:	fc 01       	movw	r30, r24
    2188:	20 83       	st	Z, r18
    218a:	20 91 7c 07 	lds	r18, 0x077C	; 0x80077c <xTickCount>
    218e:	30 91 7d 07 	lds	r19, 0x077D	; 0x80077d <xTickCount+0x1>
    2192:	32 83       	std	Z+2, r19	; 0x02
    2194:	21 83       	std	Z+1, r18	; 0x01
    2196:	08 95       	ret

00002198 <xTaskCheckForTimeOut>:
    2198:	cf 93       	push	r28
    219a:	df 93       	push	r29
    219c:	fc 01       	movw	r30, r24
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	f8 94       	cli
    21a2:	0f 92       	push	r0
    21a4:	20 91 7c 07 	lds	r18, 0x077C	; 0x80077c <xTickCount>
    21a8:	30 91 7d 07 	lds	r19, 0x077D	; 0x80077d <xTickCount+0x1>
    21ac:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <xNumOfOverflows>
    21b0:	90 81       	ld	r25, Z
    21b2:	98 17       	cp	r25, r24
    21b4:	29 f0       	breq	.+10     	; 0x21c0 <xTaskCheckForTimeOut+0x28>
    21b6:	81 81       	ldd	r24, Z+1	; 0x01
    21b8:	92 81       	ldd	r25, Z+2	; 0x02
    21ba:	28 17       	cp	r18, r24
    21bc:	39 07       	cpc	r19, r25
    21be:	b0 f4       	brcc	.+44     	; 0x21ec <xTaskCheckForTimeOut+0x54>
    21c0:	a1 81       	ldd	r26, Z+1	; 0x01
    21c2:	b2 81       	ldd	r27, Z+2	; 0x02
    21c4:	eb 01       	movw	r28, r22
    21c6:	48 81       	ld	r20, Y
    21c8:	59 81       	ldd	r21, Y+1	; 0x01
    21ca:	c9 01       	movw	r24, r18
    21cc:	8a 1b       	sub	r24, r26
    21ce:	9b 0b       	sbc	r25, r27
    21d0:	84 17       	cp	r24, r20
    21d2:	95 07       	cpc	r25, r21
    21d4:	68 f4       	brcc	.+26     	; 0x21f0 <xTaskCheckForTimeOut+0x58>
    21d6:	cf 01       	movw	r24, r30
    21d8:	a2 1b       	sub	r26, r18
    21da:	b3 0b       	sbc	r27, r19
    21dc:	4a 0f       	add	r20, r26
    21de:	5b 1f       	adc	r21, r27
    21e0:	59 83       	std	Y+1, r21	; 0x01
    21e2:	48 83       	st	Y, r20
    21e4:	0e 94 c1 10 	call	0x2182	; 0x2182 <vTaskSetTimeOutState>
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	03 c0       	rjmp	.+6      	; 0x21f2 <xTaskCheckForTimeOut+0x5a>
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	01 c0       	rjmp	.+2      	; 0x21f2 <xTaskCheckForTimeOut+0x5a>
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	0f 90       	pop	r0
    21f4:	0f be       	out	0x3f, r0	; 63
    21f6:	df 91       	pop	r29
    21f8:	cf 91       	pop	r28
    21fa:	08 95       	ret

000021fc <vTaskMissedYield>:
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	80 93 78 07 	sts	0x0778, r24	; 0x800778 <xYieldPending>
    2202:	08 95       	ret

00002204 <vTaskPriorityInherit>:
    2204:	0f 93       	push	r16
    2206:	1f 93       	push	r17
    2208:	cf 93       	push	r28
    220a:	df 93       	push	r29
    220c:	fc 01       	movw	r30, r24
    220e:	89 2b       	or	r24, r25
    2210:	09 f4       	brne	.+2      	; 0x2214 <vTaskPriorityInherit+0x10>
    2212:	55 c0       	rjmp	.+170    	; 0x22be <vTaskPriorityInherit+0xba>
    2214:	26 89       	ldd	r18, Z+22	; 0x16
    2216:	a0 91 cc 07 	lds	r26, 0x07CC	; 0x8007cc <pxCurrentTCB>
    221a:	b0 91 cd 07 	lds	r27, 0x07CD	; 0x8007cd <pxCurrentTCB+0x1>
    221e:	56 96       	adiw	r26, 0x16	; 22
    2220:	8c 91       	ld	r24, X
    2222:	28 17       	cp	r18, r24
    2224:	08 f0       	brcs	.+2      	; 0x2228 <vTaskPriorityInherit+0x24>
    2226:	4b c0       	rjmp	.+150    	; 0x22be <vTaskPriorityInherit+0xba>
    2228:	84 85       	ldd	r24, Z+12	; 0x0c
    222a:	95 85       	ldd	r25, Z+13	; 0x0d
    222c:	99 23       	and	r25, r25
    222e:	64 f0       	brlt	.+24     	; 0x2248 <vTaskPriorityInherit+0x44>
    2230:	a0 91 cc 07 	lds	r26, 0x07CC	; 0x8007cc <pxCurrentTCB>
    2234:	b0 91 cd 07 	lds	r27, 0x07CD	; 0x8007cd <pxCurrentTCB+0x1>
    2238:	56 96       	adiw	r26, 0x16	; 22
    223a:	3c 91       	ld	r19, X
    223c:	84 e0       	ldi	r24, 0x04	; 4
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	83 1b       	sub	r24, r19
    2242:	91 09       	sbc	r25, r1
    2244:	95 87       	std	Z+13, r25	; 0x0d
    2246:	84 87       	std	Z+12, r24	; 0x0c
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	c9 01       	movw	r24, r18
    224c:	88 0f       	add	r24, r24
    224e:	99 1f       	adc	r25, r25
    2250:	88 0f       	add	r24, r24
    2252:	99 1f       	adc	r25, r25
    2254:	88 0f       	add	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	28 0f       	add	r18, r24
    225a:	39 1f       	adc	r19, r25
    225c:	28 55       	subi	r18, 0x58	; 88
    225e:	38 4f       	sbci	r19, 0xF8	; 248
    2260:	82 85       	ldd	r24, Z+10	; 0x0a
    2262:	93 85       	ldd	r25, Z+11	; 0x0b
    2264:	82 17       	cp	r24, r18
    2266:	93 07       	cpc	r25, r19
    2268:	19 f5       	brne	.+70     	; 0x22b0 <vTaskPriorityInherit+0xac>
    226a:	8f 01       	movw	r16, r30
    226c:	ef 01       	movw	r28, r30
    226e:	22 96       	adiw	r28, 0x02	; 2
    2270:	ce 01       	movw	r24, r28
    2272:	0e 94 32 06 	call	0xc64	; 0xc64 <uxListRemove>
    2276:	e0 91 cc 07 	lds	r30, 0x07CC	; 0x8007cc <pxCurrentTCB>
    227a:	f0 91 cd 07 	lds	r31, 0x07CD	; 0x8007cd <pxCurrentTCB+0x1>
    227e:	26 89       	ldd	r18, Z+22	; 0x16
    2280:	f8 01       	movw	r30, r16
    2282:	26 8b       	std	Z+22, r18	; 0x16
    2284:	80 91 7b 07 	lds	r24, 0x077B	; 0x80077b <uxTopReadyPriority>
    2288:	82 17       	cp	r24, r18
    228a:	10 f4       	brcc	.+4      	; 0x2290 <vTaskPriorityInherit+0x8c>
    228c:	20 93 7b 07 	sts	0x077B, r18	; 0x80077b <uxTopReadyPriority>
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	c9 01       	movw	r24, r18
    2294:	88 0f       	add	r24, r24
    2296:	99 1f       	adc	r25, r25
    2298:	88 0f       	add	r24, r24
    229a:	99 1f       	adc	r25, r25
    229c:	88 0f       	add	r24, r24
    229e:	99 1f       	adc	r25, r25
    22a0:	82 0f       	add	r24, r18
    22a2:	93 1f       	adc	r25, r19
    22a4:	be 01       	movw	r22, r28
    22a6:	88 55       	subi	r24, 0x58	; 88
    22a8:	98 4f       	sbci	r25, 0xF8	; 248
    22aa:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <vListInsertEnd>
    22ae:	07 c0       	rjmp	.+14     	; 0x22be <vTaskPriorityInherit+0xba>
    22b0:	a0 91 cc 07 	lds	r26, 0x07CC	; 0x8007cc <pxCurrentTCB>
    22b4:	b0 91 cd 07 	lds	r27, 0x07CD	; 0x8007cd <pxCurrentTCB+0x1>
    22b8:	56 96       	adiw	r26, 0x16	; 22
    22ba:	8c 91       	ld	r24, X
    22bc:	86 8b       	std	Z+22, r24	; 0x16
    22be:	df 91       	pop	r29
    22c0:	cf 91       	pop	r28
    22c2:	1f 91       	pop	r17
    22c4:	0f 91       	pop	r16
    22c6:	08 95       	ret

000022c8 <xTaskPriorityDisinherit>:
    22c8:	0f 93       	push	r16
    22ca:	1f 93       	push	r17
    22cc:	cf 93       	push	r28
    22ce:	df 93       	push	r29
    22d0:	fc 01       	movw	r30, r24
    22d2:	89 2b       	or	r24, r25
    22d4:	79 f1       	breq	.+94     	; 0x2334 <xTaskPriorityDisinherit+0x6c>
    22d6:	84 a1       	ldd	r24, Z+36	; 0x24
    22d8:	81 50       	subi	r24, 0x01	; 1
    22da:	84 a3       	std	Z+36, r24	; 0x24
    22dc:	26 89       	ldd	r18, Z+22	; 0x16
    22de:	93 a1       	ldd	r25, Z+35	; 0x23
    22e0:	29 17       	cp	r18, r25
    22e2:	51 f1       	breq	.+84     	; 0x2338 <xTaskPriorityDisinherit+0x70>
    22e4:	81 11       	cpse	r24, r1
    22e6:	2a c0       	rjmp	.+84     	; 0x233c <xTaskPriorityDisinherit+0x74>
    22e8:	ef 01       	movw	r28, r30
    22ea:	8f 01       	movw	r16, r30
    22ec:	0e 5f       	subi	r16, 0xFE	; 254
    22ee:	1f 4f       	sbci	r17, 0xFF	; 255
    22f0:	c8 01       	movw	r24, r16
    22f2:	0e 94 32 06 	call	0xc64	; 0xc64 <uxListRemove>
    22f6:	2b a1       	ldd	r18, Y+35	; 0x23
    22f8:	2e 8b       	std	Y+22, r18	; 0x16
    22fa:	44 e0       	ldi	r20, 0x04	; 4
    22fc:	50 e0       	ldi	r21, 0x00	; 0
    22fe:	42 1b       	sub	r20, r18
    2300:	51 09       	sbc	r21, r1
    2302:	5d 87       	std	Y+13, r21	; 0x0d
    2304:	4c 87       	std	Y+12, r20	; 0x0c
    2306:	80 91 7b 07 	lds	r24, 0x077B	; 0x80077b <uxTopReadyPriority>
    230a:	82 17       	cp	r24, r18
    230c:	10 f4       	brcc	.+4      	; 0x2312 <xTaskPriorityDisinherit+0x4a>
    230e:	20 93 7b 07 	sts	0x077B, r18	; 0x80077b <uxTopReadyPriority>
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	c9 01       	movw	r24, r18
    2316:	88 0f       	add	r24, r24
    2318:	99 1f       	adc	r25, r25
    231a:	88 0f       	add	r24, r24
    231c:	99 1f       	adc	r25, r25
    231e:	88 0f       	add	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	82 0f       	add	r24, r18
    2324:	93 1f       	adc	r25, r19
    2326:	b8 01       	movw	r22, r16
    2328:	88 55       	subi	r24, 0x58	; 88
    232a:	98 4f       	sbci	r25, 0xF8	; 248
    232c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <vListInsertEnd>
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	05 c0       	rjmp	.+10     	; 0x233e <xTaskPriorityDisinherit+0x76>
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	03 c0       	rjmp	.+6      	; 0x233e <xTaskPriorityDisinherit+0x76>
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	01 c0       	rjmp	.+2      	; 0x233e <xTaskPriorityDisinherit+0x76>
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	df 91       	pop	r29
    2340:	cf 91       	pop	r28
    2342:	1f 91       	pop	r17
    2344:	0f 91       	pop	r16
    2346:	08 95       	ret

00002348 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    2348:	80 91 cc 07 	lds	r24, 0x07CC	; 0x8007cc <pxCurrentTCB>
    234c:	90 91 cd 07 	lds	r25, 0x07CD	; 0x8007cd <pxCurrentTCB+0x1>
    2350:	89 2b       	or	r24, r25
    2352:	39 f0       	breq	.+14     	; 0x2362 <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    2354:	e0 91 cc 07 	lds	r30, 0x07CC	; 0x8007cc <pxCurrentTCB>
    2358:	f0 91 cd 07 	lds	r31, 0x07CD	; 0x8007cd <pxCurrentTCB+0x1>
    235c:	84 a1       	ldd	r24, Z+36	; 0x24
    235e:	8f 5f       	subi	r24, 0xFF	; 255
    2360:	84 a3       	std	Z+36, r24	; 0x24
		}

		return pxCurrentTCB;
    2362:	80 91 cc 07 	lds	r24, 0x07CC	; 0x8007cc <pxCurrentTCB>
    2366:	90 91 cd 07 	lds	r25, 0x07CD	; 0x8007cd <pxCurrentTCB+0x1>
	}
    236a:	08 95       	ret

0000236c <__udivmodsi4>:
    236c:	a1 e2       	ldi	r26, 0x21	; 33
    236e:	1a 2e       	mov	r1, r26
    2370:	aa 1b       	sub	r26, r26
    2372:	bb 1b       	sub	r27, r27
    2374:	fd 01       	movw	r30, r26
    2376:	0d c0       	rjmp	.+26     	; 0x2392 <__udivmodsi4_ep>

00002378 <__udivmodsi4_loop>:
    2378:	aa 1f       	adc	r26, r26
    237a:	bb 1f       	adc	r27, r27
    237c:	ee 1f       	adc	r30, r30
    237e:	ff 1f       	adc	r31, r31
    2380:	a2 17       	cp	r26, r18
    2382:	b3 07       	cpc	r27, r19
    2384:	e4 07       	cpc	r30, r20
    2386:	f5 07       	cpc	r31, r21
    2388:	20 f0       	brcs	.+8      	; 0x2392 <__udivmodsi4_ep>
    238a:	a2 1b       	sub	r26, r18
    238c:	b3 0b       	sbc	r27, r19
    238e:	e4 0b       	sbc	r30, r20
    2390:	f5 0b       	sbc	r31, r21

00002392 <__udivmodsi4_ep>:
    2392:	66 1f       	adc	r22, r22
    2394:	77 1f       	adc	r23, r23
    2396:	88 1f       	adc	r24, r24
    2398:	99 1f       	adc	r25, r25
    239a:	1a 94       	dec	r1
    239c:	69 f7       	brne	.-38     	; 0x2378 <__udivmodsi4_loop>
    239e:	60 95       	com	r22
    23a0:	70 95       	com	r23
    23a2:	80 95       	com	r24
    23a4:	90 95       	com	r25
    23a6:	9b 01       	movw	r18, r22
    23a8:	ac 01       	movw	r20, r24
    23aa:	bd 01       	movw	r22, r26
    23ac:	cf 01       	movw	r24, r30
    23ae:	08 95       	ret

000023b0 <malloc>:
    23b0:	cf 93       	push	r28
    23b2:	df 93       	push	r29
    23b4:	82 30       	cpi	r24, 0x02	; 2
    23b6:	91 05       	cpc	r25, r1
    23b8:	10 f4       	brcc	.+4      	; 0x23be <malloc+0xe>
    23ba:	82 e0       	ldi	r24, 0x02	; 2
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	e0 91 d0 07 	lds	r30, 0x07D0	; 0x8007d0 <__flp>
    23c2:	f0 91 d1 07 	lds	r31, 0x07D1	; 0x8007d1 <__flp+0x1>
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	c0 e0       	ldi	r28, 0x00	; 0
    23cc:	d0 e0       	ldi	r29, 0x00	; 0
    23ce:	30 97       	sbiw	r30, 0x00	; 0
    23d0:	11 f1       	breq	.+68     	; 0x2416 <malloc+0x66>
    23d2:	40 81       	ld	r20, Z
    23d4:	51 81       	ldd	r21, Z+1	; 0x01
    23d6:	48 17       	cp	r20, r24
    23d8:	59 07       	cpc	r21, r25
    23da:	c0 f0       	brcs	.+48     	; 0x240c <malloc+0x5c>
    23dc:	48 17       	cp	r20, r24
    23de:	59 07       	cpc	r21, r25
    23e0:	61 f4       	brne	.+24     	; 0x23fa <malloc+0x4a>
    23e2:	82 81       	ldd	r24, Z+2	; 0x02
    23e4:	93 81       	ldd	r25, Z+3	; 0x03
    23e6:	20 97       	sbiw	r28, 0x00	; 0
    23e8:	19 f0       	breq	.+6      	; 0x23f0 <malloc+0x40>
    23ea:	9b 83       	std	Y+3, r25	; 0x03
    23ec:	8a 83       	std	Y+2, r24	; 0x02
    23ee:	2b c0       	rjmp	.+86     	; 0x2446 <malloc+0x96>
    23f0:	90 93 d1 07 	sts	0x07D1, r25	; 0x8007d1 <__flp+0x1>
    23f4:	80 93 d0 07 	sts	0x07D0, r24	; 0x8007d0 <__flp>
    23f8:	26 c0       	rjmp	.+76     	; 0x2446 <malloc+0x96>
    23fa:	21 15       	cp	r18, r1
    23fc:	31 05       	cpc	r19, r1
    23fe:	19 f0       	breq	.+6      	; 0x2406 <malloc+0x56>
    2400:	42 17       	cp	r20, r18
    2402:	53 07       	cpc	r21, r19
    2404:	18 f4       	brcc	.+6      	; 0x240c <malloc+0x5c>
    2406:	9a 01       	movw	r18, r20
    2408:	be 01       	movw	r22, r28
    240a:	df 01       	movw	r26, r30
    240c:	ef 01       	movw	r28, r30
    240e:	02 80       	ldd	r0, Z+2	; 0x02
    2410:	f3 81       	ldd	r31, Z+3	; 0x03
    2412:	e0 2d       	mov	r30, r0
    2414:	dc cf       	rjmp	.-72     	; 0x23ce <malloc+0x1e>
    2416:	21 15       	cp	r18, r1
    2418:	31 05       	cpc	r19, r1
    241a:	09 f1       	breq	.+66     	; 0x245e <malloc+0xae>
    241c:	28 1b       	sub	r18, r24
    241e:	39 0b       	sbc	r19, r25
    2420:	24 30       	cpi	r18, 0x04	; 4
    2422:	31 05       	cpc	r19, r1
    2424:	90 f4       	brcc	.+36     	; 0x244a <malloc+0x9a>
    2426:	12 96       	adiw	r26, 0x02	; 2
    2428:	8d 91       	ld	r24, X+
    242a:	9c 91       	ld	r25, X
    242c:	13 97       	sbiw	r26, 0x03	; 3
    242e:	61 15       	cp	r22, r1
    2430:	71 05       	cpc	r23, r1
    2432:	21 f0       	breq	.+8      	; 0x243c <malloc+0x8c>
    2434:	fb 01       	movw	r30, r22
    2436:	93 83       	std	Z+3, r25	; 0x03
    2438:	82 83       	std	Z+2, r24	; 0x02
    243a:	04 c0       	rjmp	.+8      	; 0x2444 <malloc+0x94>
    243c:	90 93 d1 07 	sts	0x07D1, r25	; 0x8007d1 <__flp+0x1>
    2440:	80 93 d0 07 	sts	0x07D0, r24	; 0x8007d0 <__flp>
    2444:	fd 01       	movw	r30, r26
    2446:	32 96       	adiw	r30, 0x02	; 2
    2448:	44 c0       	rjmp	.+136    	; 0x24d2 <malloc+0x122>
    244a:	fd 01       	movw	r30, r26
    244c:	e2 0f       	add	r30, r18
    244e:	f3 1f       	adc	r31, r19
    2450:	81 93       	st	Z+, r24
    2452:	91 93       	st	Z+, r25
    2454:	22 50       	subi	r18, 0x02	; 2
    2456:	31 09       	sbc	r19, r1
    2458:	2d 93       	st	X+, r18
    245a:	3c 93       	st	X, r19
    245c:	3a c0       	rjmp	.+116    	; 0x24d2 <malloc+0x122>
    245e:	20 91 ce 07 	lds	r18, 0x07CE	; 0x8007ce <__brkval>
    2462:	30 91 cf 07 	lds	r19, 0x07CF	; 0x8007cf <__brkval+0x1>
    2466:	23 2b       	or	r18, r19
    2468:	41 f4       	brne	.+16     	; 0x247a <malloc+0xca>
    246a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    246e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2472:	30 93 cf 07 	sts	0x07CF, r19	; 0x8007cf <__brkval+0x1>
    2476:	20 93 ce 07 	sts	0x07CE, r18	; 0x8007ce <__brkval>
    247a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    247e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2482:	21 15       	cp	r18, r1
    2484:	31 05       	cpc	r19, r1
    2486:	41 f4       	brne	.+16     	; 0x2498 <malloc+0xe8>
    2488:	2d b7       	in	r18, 0x3d	; 61
    248a:	3e b7       	in	r19, 0x3e	; 62
    248c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2490:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2494:	24 1b       	sub	r18, r20
    2496:	35 0b       	sbc	r19, r21
    2498:	e0 91 ce 07 	lds	r30, 0x07CE	; 0x8007ce <__brkval>
    249c:	f0 91 cf 07 	lds	r31, 0x07CF	; 0x8007cf <__brkval+0x1>
    24a0:	e2 17       	cp	r30, r18
    24a2:	f3 07       	cpc	r31, r19
    24a4:	a0 f4       	brcc	.+40     	; 0x24ce <malloc+0x11e>
    24a6:	2e 1b       	sub	r18, r30
    24a8:	3f 0b       	sbc	r19, r31
    24aa:	28 17       	cp	r18, r24
    24ac:	39 07       	cpc	r19, r25
    24ae:	78 f0       	brcs	.+30     	; 0x24ce <malloc+0x11e>
    24b0:	ac 01       	movw	r20, r24
    24b2:	4e 5f       	subi	r20, 0xFE	; 254
    24b4:	5f 4f       	sbci	r21, 0xFF	; 255
    24b6:	24 17       	cp	r18, r20
    24b8:	35 07       	cpc	r19, r21
    24ba:	48 f0       	brcs	.+18     	; 0x24ce <malloc+0x11e>
    24bc:	4e 0f       	add	r20, r30
    24be:	5f 1f       	adc	r21, r31
    24c0:	50 93 cf 07 	sts	0x07CF, r21	; 0x8007cf <__brkval+0x1>
    24c4:	40 93 ce 07 	sts	0x07CE, r20	; 0x8007ce <__brkval>
    24c8:	81 93       	st	Z+, r24
    24ca:	91 93       	st	Z+, r25
    24cc:	02 c0       	rjmp	.+4      	; 0x24d2 <malloc+0x122>
    24ce:	e0 e0       	ldi	r30, 0x00	; 0
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	cf 01       	movw	r24, r30
    24d4:	df 91       	pop	r29
    24d6:	cf 91       	pop	r28
    24d8:	08 95       	ret

000024da <free>:
    24da:	0f 93       	push	r16
    24dc:	1f 93       	push	r17
    24de:	cf 93       	push	r28
    24e0:	df 93       	push	r29
    24e2:	00 97       	sbiw	r24, 0x00	; 0
    24e4:	09 f4       	brne	.+2      	; 0x24e8 <free+0xe>
    24e6:	8c c0       	rjmp	.+280    	; 0x2600 <free+0x126>
    24e8:	fc 01       	movw	r30, r24
    24ea:	32 97       	sbiw	r30, 0x02	; 2
    24ec:	13 82       	std	Z+3, r1	; 0x03
    24ee:	12 82       	std	Z+2, r1	; 0x02
    24f0:	00 91 d0 07 	lds	r16, 0x07D0	; 0x8007d0 <__flp>
    24f4:	10 91 d1 07 	lds	r17, 0x07D1	; 0x8007d1 <__flp+0x1>
    24f8:	01 15       	cp	r16, r1
    24fa:	11 05       	cpc	r17, r1
    24fc:	81 f4       	brne	.+32     	; 0x251e <free+0x44>
    24fe:	20 81       	ld	r18, Z
    2500:	31 81       	ldd	r19, Z+1	; 0x01
    2502:	82 0f       	add	r24, r18
    2504:	93 1f       	adc	r25, r19
    2506:	20 91 ce 07 	lds	r18, 0x07CE	; 0x8007ce <__brkval>
    250a:	30 91 cf 07 	lds	r19, 0x07CF	; 0x8007cf <__brkval+0x1>
    250e:	28 17       	cp	r18, r24
    2510:	39 07       	cpc	r19, r25
    2512:	79 f5       	brne	.+94     	; 0x2572 <free+0x98>
    2514:	f0 93 cf 07 	sts	0x07CF, r31	; 0x8007cf <__brkval+0x1>
    2518:	e0 93 ce 07 	sts	0x07CE, r30	; 0x8007ce <__brkval>
    251c:	71 c0       	rjmp	.+226    	; 0x2600 <free+0x126>
    251e:	d8 01       	movw	r26, r16
    2520:	40 e0       	ldi	r20, 0x00	; 0
    2522:	50 e0       	ldi	r21, 0x00	; 0
    2524:	ae 17       	cp	r26, r30
    2526:	bf 07       	cpc	r27, r31
    2528:	50 f4       	brcc	.+20     	; 0x253e <free+0x64>
    252a:	12 96       	adiw	r26, 0x02	; 2
    252c:	2d 91       	ld	r18, X+
    252e:	3c 91       	ld	r19, X
    2530:	13 97       	sbiw	r26, 0x03	; 3
    2532:	ad 01       	movw	r20, r26
    2534:	21 15       	cp	r18, r1
    2536:	31 05       	cpc	r19, r1
    2538:	09 f1       	breq	.+66     	; 0x257c <free+0xa2>
    253a:	d9 01       	movw	r26, r18
    253c:	f3 cf       	rjmp	.-26     	; 0x2524 <free+0x4a>
    253e:	9d 01       	movw	r18, r26
    2540:	da 01       	movw	r26, r20
    2542:	33 83       	std	Z+3, r19	; 0x03
    2544:	22 83       	std	Z+2, r18	; 0x02
    2546:	60 81       	ld	r22, Z
    2548:	71 81       	ldd	r23, Z+1	; 0x01
    254a:	86 0f       	add	r24, r22
    254c:	97 1f       	adc	r25, r23
    254e:	82 17       	cp	r24, r18
    2550:	93 07       	cpc	r25, r19
    2552:	69 f4       	brne	.+26     	; 0x256e <free+0x94>
    2554:	ec 01       	movw	r28, r24
    2556:	28 81       	ld	r18, Y
    2558:	39 81       	ldd	r19, Y+1	; 0x01
    255a:	26 0f       	add	r18, r22
    255c:	37 1f       	adc	r19, r23
    255e:	2e 5f       	subi	r18, 0xFE	; 254
    2560:	3f 4f       	sbci	r19, 0xFF	; 255
    2562:	31 83       	std	Z+1, r19	; 0x01
    2564:	20 83       	st	Z, r18
    2566:	8a 81       	ldd	r24, Y+2	; 0x02
    2568:	9b 81       	ldd	r25, Y+3	; 0x03
    256a:	93 83       	std	Z+3, r25	; 0x03
    256c:	82 83       	std	Z+2, r24	; 0x02
    256e:	45 2b       	or	r20, r21
    2570:	29 f4       	brne	.+10     	; 0x257c <free+0xa2>
    2572:	f0 93 d1 07 	sts	0x07D1, r31	; 0x8007d1 <__flp+0x1>
    2576:	e0 93 d0 07 	sts	0x07D0, r30	; 0x8007d0 <__flp>
    257a:	42 c0       	rjmp	.+132    	; 0x2600 <free+0x126>
    257c:	13 96       	adiw	r26, 0x03	; 3
    257e:	fc 93       	st	X, r31
    2580:	ee 93       	st	-X, r30
    2582:	12 97       	sbiw	r26, 0x02	; 2
    2584:	ed 01       	movw	r28, r26
    2586:	49 91       	ld	r20, Y+
    2588:	59 91       	ld	r21, Y+
    258a:	9e 01       	movw	r18, r28
    258c:	24 0f       	add	r18, r20
    258e:	35 1f       	adc	r19, r21
    2590:	e2 17       	cp	r30, r18
    2592:	f3 07       	cpc	r31, r19
    2594:	71 f4       	brne	.+28     	; 0x25b2 <free+0xd8>
    2596:	80 81       	ld	r24, Z
    2598:	91 81       	ldd	r25, Z+1	; 0x01
    259a:	84 0f       	add	r24, r20
    259c:	95 1f       	adc	r25, r21
    259e:	02 96       	adiw	r24, 0x02	; 2
    25a0:	11 96       	adiw	r26, 0x01	; 1
    25a2:	9c 93       	st	X, r25
    25a4:	8e 93       	st	-X, r24
    25a6:	82 81       	ldd	r24, Z+2	; 0x02
    25a8:	93 81       	ldd	r25, Z+3	; 0x03
    25aa:	13 96       	adiw	r26, 0x03	; 3
    25ac:	9c 93       	st	X, r25
    25ae:	8e 93       	st	-X, r24
    25b0:	12 97       	sbiw	r26, 0x02	; 2
    25b2:	e0 e0       	ldi	r30, 0x00	; 0
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	d8 01       	movw	r26, r16
    25b8:	12 96       	adiw	r26, 0x02	; 2
    25ba:	8d 91       	ld	r24, X+
    25bc:	9c 91       	ld	r25, X
    25be:	13 97       	sbiw	r26, 0x03	; 3
    25c0:	00 97       	sbiw	r24, 0x00	; 0
    25c2:	19 f0       	breq	.+6      	; 0x25ca <free+0xf0>
    25c4:	f8 01       	movw	r30, r16
    25c6:	8c 01       	movw	r16, r24
    25c8:	f6 cf       	rjmp	.-20     	; 0x25b6 <free+0xdc>
    25ca:	8d 91       	ld	r24, X+
    25cc:	9c 91       	ld	r25, X
    25ce:	98 01       	movw	r18, r16
    25d0:	2e 5f       	subi	r18, 0xFE	; 254
    25d2:	3f 4f       	sbci	r19, 0xFF	; 255
    25d4:	82 0f       	add	r24, r18
    25d6:	93 1f       	adc	r25, r19
    25d8:	20 91 ce 07 	lds	r18, 0x07CE	; 0x8007ce <__brkval>
    25dc:	30 91 cf 07 	lds	r19, 0x07CF	; 0x8007cf <__brkval+0x1>
    25e0:	28 17       	cp	r18, r24
    25e2:	39 07       	cpc	r19, r25
    25e4:	69 f4       	brne	.+26     	; 0x2600 <free+0x126>
    25e6:	30 97       	sbiw	r30, 0x00	; 0
    25e8:	29 f4       	brne	.+10     	; 0x25f4 <free+0x11a>
    25ea:	10 92 d1 07 	sts	0x07D1, r1	; 0x8007d1 <__flp+0x1>
    25ee:	10 92 d0 07 	sts	0x07D0, r1	; 0x8007d0 <__flp>
    25f2:	02 c0       	rjmp	.+4      	; 0x25f8 <free+0x11e>
    25f4:	13 82       	std	Z+3, r1	; 0x03
    25f6:	12 82       	std	Z+2, r1	; 0x02
    25f8:	10 93 cf 07 	sts	0x07CF, r17	; 0x8007cf <__brkval+0x1>
    25fc:	00 93 ce 07 	sts	0x07CE, r16	; 0x8007ce <__brkval>
    2600:	df 91       	pop	r29
    2602:	cf 91       	pop	r28
    2604:	1f 91       	pop	r17
    2606:	0f 91       	pop	r16
    2608:	08 95       	ret

0000260a <do_rand>:
    260a:	8f 92       	push	r8
    260c:	9f 92       	push	r9
    260e:	af 92       	push	r10
    2610:	bf 92       	push	r11
    2612:	cf 92       	push	r12
    2614:	df 92       	push	r13
    2616:	ef 92       	push	r14
    2618:	ff 92       	push	r15
    261a:	cf 93       	push	r28
    261c:	df 93       	push	r29
    261e:	ec 01       	movw	r28, r24
    2620:	68 81       	ld	r22, Y
    2622:	79 81       	ldd	r23, Y+1	; 0x01
    2624:	8a 81       	ldd	r24, Y+2	; 0x02
    2626:	9b 81       	ldd	r25, Y+3	; 0x03
    2628:	61 15       	cp	r22, r1
    262a:	71 05       	cpc	r23, r1
    262c:	81 05       	cpc	r24, r1
    262e:	91 05       	cpc	r25, r1
    2630:	21 f4       	brne	.+8      	; 0x263a <do_rand+0x30>
    2632:	64 e2       	ldi	r22, 0x24	; 36
    2634:	79 ed       	ldi	r23, 0xD9	; 217
    2636:	8b e5       	ldi	r24, 0x5B	; 91
    2638:	97 e0       	ldi	r25, 0x07	; 7
    263a:	2d e1       	ldi	r18, 0x1D	; 29
    263c:	33 ef       	ldi	r19, 0xF3	; 243
    263e:	41 e0       	ldi	r20, 0x01	; 1
    2640:	50 e0       	ldi	r21, 0x00	; 0
    2642:	0e 94 71 13 	call	0x26e2	; 0x26e2 <__divmodsi4>
    2646:	49 01       	movw	r8, r18
    2648:	5a 01       	movw	r10, r20
    264a:	9b 01       	movw	r18, r22
    264c:	ac 01       	movw	r20, r24
    264e:	a7 ea       	ldi	r26, 0xA7	; 167
    2650:	b1 e4       	ldi	r27, 0x41	; 65
    2652:	0e 94 90 13 	call	0x2720	; 0x2720 <__muluhisi3>
    2656:	6b 01       	movw	r12, r22
    2658:	7c 01       	movw	r14, r24
    265a:	ac ee       	ldi	r26, 0xEC	; 236
    265c:	b4 ef       	ldi	r27, 0xF4	; 244
    265e:	a5 01       	movw	r20, r10
    2660:	94 01       	movw	r18, r8
    2662:	0e 94 9e 13 	call	0x273c	; 0x273c <__mulohisi3>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	8c 0d       	add	r24, r12
    266c:	9d 1d       	adc	r25, r13
    266e:	ae 1d       	adc	r26, r14
    2670:	bf 1d       	adc	r27, r15
    2672:	b7 ff       	sbrs	r27, 7
    2674:	03 c0       	rjmp	.+6      	; 0x267c <do_rand+0x72>
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	a1 09       	sbc	r26, r1
    267a:	b0 48       	sbci	r27, 0x80	; 128
    267c:	88 83       	st	Y, r24
    267e:	99 83       	std	Y+1, r25	; 0x01
    2680:	aa 83       	std	Y+2, r26	; 0x02
    2682:	bb 83       	std	Y+3, r27	; 0x03
    2684:	9f 77       	andi	r25, 0x7F	; 127
    2686:	df 91       	pop	r29
    2688:	cf 91       	pop	r28
    268a:	ff 90       	pop	r15
    268c:	ef 90       	pop	r14
    268e:	df 90       	pop	r13
    2690:	cf 90       	pop	r12
    2692:	bf 90       	pop	r11
    2694:	af 90       	pop	r10
    2696:	9f 90       	pop	r9
    2698:	8f 90       	pop	r8
    269a:	08 95       	ret

0000269c <rand_r>:
    269c:	0e 94 05 13 	call	0x260a	; 0x260a <do_rand>
    26a0:	08 95       	ret

000026a2 <rand>:
    26a2:	86 e0       	ldi	r24, 0x06	; 6
    26a4:	91 e0       	ldi	r25, 0x01	; 1
    26a6:	0e 94 05 13 	call	0x260a	; 0x260a <do_rand>
    26aa:	08 95       	ret

000026ac <srand>:
    26ac:	a0 e0       	ldi	r26, 0x00	; 0
    26ae:	b0 e0       	ldi	r27, 0x00	; 0
    26b0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    26b4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    26b8:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    26bc:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    26c0:	08 95       	ret

000026c2 <memcpy>:
    26c2:	fb 01       	movw	r30, r22
    26c4:	dc 01       	movw	r26, r24
    26c6:	02 c0       	rjmp	.+4      	; 0x26cc <memcpy+0xa>
    26c8:	01 90       	ld	r0, Z+
    26ca:	0d 92       	st	X+, r0
    26cc:	41 50       	subi	r20, 0x01	; 1
    26ce:	50 40       	sbci	r21, 0x00	; 0
    26d0:	d8 f7       	brcc	.-10     	; 0x26c8 <memcpy+0x6>
    26d2:	08 95       	ret

000026d4 <memset>:
    26d4:	dc 01       	movw	r26, r24
    26d6:	01 c0       	rjmp	.+2      	; 0x26da <memset+0x6>
    26d8:	6d 93       	st	X+, r22
    26da:	41 50       	subi	r20, 0x01	; 1
    26dc:	50 40       	sbci	r21, 0x00	; 0
    26de:	e0 f7       	brcc	.-8      	; 0x26d8 <memset+0x4>
    26e0:	08 95       	ret

000026e2 <__divmodsi4>:
    26e2:	05 2e       	mov	r0, r21
    26e4:	97 fb       	bst	r25, 7
    26e6:	1e f4       	brtc	.+6      	; 0x26ee <__divmodsi4+0xc>
    26e8:	00 94       	com	r0
    26ea:	0e 94 88 13 	call	0x2710	; 0x2710 <__negsi2>
    26ee:	57 fd       	sbrc	r21, 7
    26f0:	07 d0       	rcall	.+14     	; 0x2700 <__divmodsi4_neg2>
    26f2:	0e 94 b6 11 	call	0x236c	; 0x236c <__udivmodsi4>
    26f6:	07 fc       	sbrc	r0, 7
    26f8:	03 d0       	rcall	.+6      	; 0x2700 <__divmodsi4_neg2>
    26fa:	4e f4       	brtc	.+18     	; 0x270e <__divmodsi4_exit>
    26fc:	0c 94 88 13 	jmp	0x2710	; 0x2710 <__negsi2>

00002700 <__divmodsi4_neg2>:
    2700:	50 95       	com	r21
    2702:	40 95       	com	r20
    2704:	30 95       	com	r19
    2706:	21 95       	neg	r18
    2708:	3f 4f       	sbci	r19, 0xFF	; 255
    270a:	4f 4f       	sbci	r20, 0xFF	; 255
    270c:	5f 4f       	sbci	r21, 0xFF	; 255

0000270e <__divmodsi4_exit>:
    270e:	08 95       	ret

00002710 <__negsi2>:
    2710:	90 95       	com	r25
    2712:	80 95       	com	r24
    2714:	70 95       	com	r23
    2716:	61 95       	neg	r22
    2718:	7f 4f       	sbci	r23, 0xFF	; 255
    271a:	8f 4f       	sbci	r24, 0xFF	; 255
    271c:	9f 4f       	sbci	r25, 0xFF	; 255
    271e:	08 95       	ret

00002720 <__muluhisi3>:
    2720:	0e 94 a3 13 	call	0x2746	; 0x2746 <__umulhisi3>
    2724:	a5 9f       	mul	r26, r21
    2726:	90 0d       	add	r25, r0
    2728:	b4 9f       	mul	r27, r20
    272a:	90 0d       	add	r25, r0
    272c:	a4 9f       	mul	r26, r20
    272e:	80 0d       	add	r24, r0
    2730:	91 1d       	adc	r25, r1
    2732:	11 24       	eor	r1, r1
    2734:	08 95       	ret

00002736 <__mulshisi3>:
    2736:	b7 ff       	sbrs	r27, 7
    2738:	0c 94 90 13 	jmp	0x2720	; 0x2720 <__muluhisi3>

0000273c <__mulohisi3>:
    273c:	0e 94 90 13 	call	0x2720	; 0x2720 <__muluhisi3>
    2740:	82 1b       	sub	r24, r18
    2742:	93 0b       	sbc	r25, r19
    2744:	08 95       	ret

00002746 <__umulhisi3>:
    2746:	a2 9f       	mul	r26, r18
    2748:	b0 01       	movw	r22, r0
    274a:	b3 9f       	mul	r27, r19
    274c:	c0 01       	movw	r24, r0
    274e:	a3 9f       	mul	r26, r19
    2750:	70 0d       	add	r23, r0
    2752:	81 1d       	adc	r24, r1
    2754:	11 24       	eor	r1, r1
    2756:	91 1d       	adc	r25, r1
    2758:	b2 9f       	mul	r27, r18
    275a:	70 0d       	add	r23, r0
    275c:	81 1d       	adc	r24, r1
    275e:	11 24       	eor	r1, r1
    2760:	91 1d       	adc	r25, r1
    2762:	08 95       	ret

00002764 <_exit>:
    2764:	f8 94       	cli

00002766 <__stop_program>:
    2766:	ff cf       	rjmp	.-2      	; 0x2766 <__stop_program>
