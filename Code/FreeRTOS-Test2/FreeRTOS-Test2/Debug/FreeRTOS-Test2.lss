
FreeRTOS-Test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00002c9a  00002d2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000008aa  0080015c  0080015c  00002d8a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002d8a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002dbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000548  00000000  00000000  00002dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007487  00000000  00000000  00003344  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c70  00000000  00000000  0000a7cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000037e7  00000000  00000000  0000c43b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001134  00000000  00000000  0000fc24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000210c  00000000  00000000  00010d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000066f6  00000000  00000000  00012e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000700  00000000  00000000  0001955a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 10 08 	jmp	0x1020	; 0x1020 <__vector_13>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 66 05 	jmp	0xacc	; 0xacc <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__vector_20>
      54:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__vector_28>
      74:	0c 94 87 09 	jmp	0x130e	; 0x130e <__vector_29>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	00 14       	cp	r0, r0
      7e:	00 14       	cp	r0, r0
      80:	00 14       	cp	r0, r0
      82:	3b 14       	cp	r3, r11
      84:	29 14       	cp	r2, r9
      86:	38 14       	cp	r3, r8
      88:	00 14       	cp	r0, r0
      8a:	00 14       	cp	r0, r0
      8c:	3b 14       	cp	r3, r11
      8e:	29 14       	cp	r2, r9

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf ef       	ldi	r28, 0xFF	; 255
      96:	d8 e0       	ldi	r29, 0x08	; 8
      98:	de bf       	out	0x3e, r29	; 62
      9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
      9c:	11 e0       	ldi	r17, 0x01	; 1
      9e:	a0 e0       	ldi	r26, 0x00	; 0
      a0:	b1 e0       	ldi	r27, 0x01	; 1
      a2:	ea e9       	ldi	r30, 0x9A	; 154
      a4:	fc e2       	ldi	r31, 0x2C	; 44
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 35       	cpi	r26, 0x5C	; 92
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	2a e0       	ldi	r18, 0x0A	; 10
      b4:	ac e5       	ldi	r26, 0x5C	; 92
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a6 30       	cpi	r26, 0x06	; 6
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <main>
      c6:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <obstacles_task>:
					//retransmit message - aka do nothing, cause there is a timeout
				}
			}

			vTaskDelay(10);
		}
      ce:	cf 93       	push	r28
      d0:	df 93       	push	r29
      d2:	00 d0       	rcall	.+0      	; 0xd4 <obstacles_task+0x6>
      d4:	00 d0       	rcall	.+0      	; 0xd6 <obstacles_task+0x8>
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	62 e0       	ldi	r22, 0x02	; 2
      dc:	70 e0       	ldi	r23, 0x00	; 0
      de:	80 e0       	ldi	r24, 0x00	; 0
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	0e 94 2a 10 	call	0x2054	; 0x2054 <vTaskSetApplicationTaskTag>
      e6:	0f 2e       	mov	r0, r31
      e8:	f5 e6       	ldi	r31, 0x65	; 101
      ea:	6f 2e       	mov	r6, r31
      ec:	f1 e0       	ldi	r31, 0x01	; 1
      ee:	7f 2e       	mov	r7, r31
      f0:	f0 2d       	mov	r31, r0
      f2:	33 24       	eor	r3, r3
      f4:	33 94       	inc	r3
      f6:	21 2c       	mov	r2, r1
      f8:	0f 2e       	mov	r0, r31
      fa:	f3 e8       	ldi	r31, 0x83	; 131
      fc:	af 2e       	mov	r10, r31
      fe:	f2 e0       	ldi	r31, 0x02	; 2
     100:	bf 2e       	mov	r11, r31
     102:	f0 2d       	mov	r31, r0
     104:	0f 2e       	mov	r0, r31
     106:	f9 e6       	ldi	r31, 0x69	; 105
     108:	8f 2e       	mov	r8, r31
     10a:	f1 e0       	ldi	r31, 0x01	; 1
     10c:	9f 2e       	mov	r9, r31
     10e:	f0 2d       	mov	r31, r0
     110:	0f 2e       	mov	r0, r31
     112:	f1 e8       	ldi	r31, 0x81	; 129
     114:	cf 2e       	mov	r12, r31
     116:	f2 e0       	ldi	r31, 0x02	; 2
     118:	df 2e       	mov	r13, r31
     11a:	f0 2d       	mov	r31, r0
     11c:	19 82       	std	Y+1, r1	; 0x01
     11e:	1a 82       	std	Y+2, r1	; 0x02
     120:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <stop>
     124:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <stop+0x1>
     128:	89 2b       	or	r24, r25
     12a:	09 f0       	breq	.+2      	; 0x12e <obstacles_task+0x60>
     12c:	cf c0       	rjmp	.+414    	; 0x2cc <obstacles_task+0x1fe>
     12e:	d3 01       	movw	r26, r6
     130:	8d 91       	ld	r24, X+
     132:	9c 91       	ld	r25, X
     134:	11 97       	sbiw	r26, 0x01	; 1
     136:	9c 01       	movw	r18, r24
     138:	22 0f       	add	r18, r18
     13a:	33 1f       	adc	r19, r19
     13c:	88 0f       	add	r24, r24
     13e:	99 1f       	adc	r25, r25
     140:	88 0f       	add	r24, r24
     142:	99 1f       	adc	r25, r25
     144:	88 0f       	add	r24, r24
     146:	99 1f       	adc	r25, r25
     148:	82 0f       	add	r24, r18
     14a:	93 1f       	adc	r25, r19
     14c:	12 96       	adiw	r26, 0x02	; 2
     14e:	ed 91       	ld	r30, X+
     150:	fc 91       	ld	r31, X
     152:	13 97       	sbiw	r26, 0x03	; 3
     154:	8e 0f       	add	r24, r30
     156:	9f 1f       	adc	r25, r31
     158:	fc 01       	movw	r30, r24
     15a:	e0 58       	subi	r30, 0x80	; 128
     15c:	fd 4f       	sbci	r31, 0xFD	; 253
     15e:	80 81       	ld	r24, Z
     160:	81 11       	cpse	r24, r1
     162:	b0 c0       	rjmp	.+352    	; 0x2c4 <obstacles_task+0x1f6>
     164:	20 e0       	ldi	r18, 0x00	; 0
     166:	4f ef       	ldi	r20, 0xFF	; 255
     168:	5f ef       	ldi	r21, 0xFF	; 255
     16a:	60 e0       	ldi	r22, 0x00	; 0
     16c:	70 e0       	ldi	r23, 0x00	; 0
     16e:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <xMutex>
     172:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <xMutex+0x1>
     176:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <xQueueGenericReceive>
     17a:	88 23       	and	r24, r24
     17c:	09 f4       	brne	.+2      	; 0x180 <obstacles_task+0xb2>
     17e:	a6 c0       	rjmp	.+332    	; 0x2cc <obstacles_task+0x1fe>
     180:	0f 2e       	mov	r0, r31
     182:	f1 e8       	ldi	r31, 0x81	; 129
     184:	ef 2e       	mov	r14, r31
     186:	f2 e0       	ldi	r31, 0x02	; 2
     188:	ff 2e       	mov	r15, r31
     18a:	f0 2d       	mov	r31, r0
     18c:	4b e6       	ldi	r20, 0x6B	; 107
     18e:	51 e0       	ldi	r21, 0x01	; 1
     190:	b7 01       	movw	r22, r14
     192:	0e c0       	rjmp	.+28     	; 0x1b0 <obstacles_task+0xe2>
     194:	8d 91       	ld	r24, X+
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	81 93       	st	Z+, r24
     19a:	91 93       	st	Z+, r25
     19c:	e2 17       	cp	r30, r18
     19e:	f3 07       	cpc	r31, r19
     1a0:	c9 f7       	brne	.-14     	; 0x194 <obstacles_task+0xc6>
     1a2:	66 5f       	subi	r22, 0xF6	; 246
     1a4:	7f 4f       	sbci	r23, 0xFF	; 255
     1a6:	4c 5e       	subi	r20, 0xEC	; 236
     1a8:	5f 4f       	sbci	r21, 0xFF	; 255
     1aa:	4a 15       	cp	r20, r10
     1ac:	5b 05       	cpc	r21, r11
     1ae:	31 f0       	breq	.+12     	; 0x1bc <obstacles_task+0xee>
     1b0:	9a 01       	movw	r18, r20
     1b2:	2e 5e       	subi	r18, 0xEE	; 238
     1b4:	3f 4f       	sbci	r19, 0xFF	; 255
     1b6:	fa 01       	movw	r30, r20
     1b8:	db 01       	movw	r26, r22
     1ba:	ec cf       	rjmp	.-40     	; 0x194 <obstacles_task+0xc6>
     1bc:	ed e7       	ldi	r30, 0x7D	; 125
     1be:	f1 e0       	ldi	r31, 0x01	; 1
     1c0:	43 2c       	mov	r4, r3
     1c2:	52 2c       	mov	r5, r2
     1c4:	00 e0       	ldi	r16, 0x00	; 0
     1c6:	10 e0       	ldi	r17, 0x00	; 0
     1c8:	fc 83       	std	Y+4, r31	; 0x04
     1ca:	eb 83       	std	Y+3, r30	; 0x03
     1cc:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <rand>
     1d0:	81 70       	andi	r24, 0x01	; 1
     1d2:	90 78       	andi	r25, 0x80	; 128
     1d4:	99 23       	and	r25, r25
     1d6:	24 f4       	brge	.+8      	; 0x1e0 <obstacles_task+0x112>
     1d8:	01 97       	sbiw	r24, 0x01	; 1
     1da:	8e 6f       	ori	r24, 0xFE	; 254
     1dc:	9f 6f       	ori	r25, 0xFF	; 255
     1de:	01 96       	adiw	r24, 0x01	; 1
     1e0:	d4 01       	movw	r26, r8
     1e2:	8d 93       	st	X+, r24
     1e4:	9c 93       	st	X, r25
     1e6:	02 30       	cpi	r16, 0x02	; 2
     1e8:	11 05       	cpc	r17, r1
     1ea:	2c f0       	brlt	.+10     	; 0x1f6 <obstacles_task+0x128>
     1ec:	bd e0       	ldi	r27, 0x0D	; 13
     1ee:	4b 16       	cp	r4, r27
     1f0:	51 04       	cpc	r5, r1
     1f2:	d9 f4       	brne	.+54     	; 0x22a <obstacles_task+0x15c>
     1f4:	70 c0       	rjmp	.+224    	; 0x2d6 <obstacles_task+0x208>
     1f6:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <rand>
     1fa:	81 70       	andi	r24, 0x01	; 1
     1fc:	90 78       	andi	r25, 0x80	; 128
     1fe:	99 23       	and	r25, r25
     200:	24 f4       	brge	.+8      	; 0x20a <obstacles_task+0x13c>
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	8e 6f       	ori	r24, 0xFE	; 254
     206:	9f 6f       	ori	r25, 0xFF	; 255
     208:	01 96       	adiw	r24, 0x01	; 1
     20a:	eb 81       	ldd	r30, Y+3	; 0x03
     20c:	fc 81       	ldd	r31, Y+4	; 0x04
     20e:	91 83       	std	Z+1, r25	; 0x01
     210:	80 83       	st	Z, r24
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	11 f4       	brne	.+4      	; 0x21a <obstacles_task+0x14c>
     216:	0f 5f       	subi	r16, 0xFF	; 255
     218:	1f 4f       	sbci	r17, 0xFF	; 255
     21a:	c2 01       	movw	r24, r4
     21c:	83 70       	andi	r24, 0x03	; 3
     21e:	99 27       	eor	r25, r25
     220:	89 2b       	or	r24, r25
     222:	39 f4       	brne	.+14     	; 0x232 <obstacles_task+0x164>
     224:	09 81       	ldd	r16, Y+1	; 0x01
     226:	1a 81       	ldd	r17, Y+2	; 0x02
     228:	04 c0       	rjmp	.+8      	; 0x232 <obstacles_task+0x164>
     22a:	ab 81       	ldd	r26, Y+3	; 0x03
     22c:	bc 81       	ldd	r27, Y+4	; 0x04
     22e:	1d 92       	st	X+, r1
     230:	1c 92       	st	X, r1
     232:	bf ef       	ldi	r27, 0xFF	; 255
     234:	4b 1a       	sub	r4, r27
     236:	5b 0a       	sbc	r5, r27
     238:	eb 81       	ldd	r30, Y+3	; 0x03
     23a:	fc 81       	ldd	r31, Y+4	; 0x04
     23c:	74 96       	adiw	r30, 0x14	; 20
     23e:	fc 83       	std	Y+4, r31	; 0x04
     240:	eb 83       	std	Y+3, r30	; 0x03
     242:	fe e0       	ldi	r31, 0x0E	; 14
     244:	4f 16       	cp	r4, r31
     246:	51 04       	cpc	r5, r1
     248:	09 f6       	brne	.-126    	; 0x1cc <obstacles_task+0xfe>
     24a:	a4 01       	movw	r20, r8
     24c:	0e c0       	rjmp	.+28     	; 0x26a <obstacles_task+0x19c>
     24e:	80 81       	ld	r24, Z
     250:	32 96       	adiw	r30, 0x02	; 2
     252:	8d 93       	st	X+, r24
     254:	e2 17       	cp	r30, r18
     256:	f3 07       	cpc	r31, r19
     258:	d1 f7       	brne	.-12     	; 0x24e <obstacles_task+0x180>
     25a:	4c 5e       	subi	r20, 0xEC	; 236
     25c:	5f 4f       	sbci	r21, 0xFF	; 255
     25e:	8a e0       	ldi	r24, 0x0A	; 10
     260:	e8 0e       	add	r14, r24
     262:	f1 1c       	adc	r15, r1
     264:	4c 15       	cp	r20, r12
     266:	5d 05       	cpc	r21, r13
     268:	31 f0       	breq	.+12     	; 0x276 <obstacles_task+0x1a8>
     26a:	9a 01       	movw	r18, r20
     26c:	2e 5e       	subi	r18, 0xEE	; 238
     26e:	3f 4f       	sbci	r19, 0xFF	; 255
     270:	d7 01       	movw	r26, r14
     272:	fa 01       	movw	r30, r20
     274:	ec cf       	rjmp	.-40     	; 0x24e <obstacles_task+0x180>
     276:	d3 01       	movw	r26, r6
     278:	8d 91       	ld	r24, X+
     27a:	9c 91       	ld	r25, X
     27c:	11 97       	sbiw	r26, 0x01	; 1
     27e:	fc 01       	movw	r30, r24
     280:	ee 0f       	add	r30, r30
     282:	ff 1f       	adc	r31, r31
     284:	88 0f       	add	r24, r24
     286:	99 1f       	adc	r25, r25
     288:	88 0f       	add	r24, r24
     28a:	99 1f       	adc	r25, r25
     28c:	88 0f       	add	r24, r24
     28e:	99 1f       	adc	r25, r25
     290:	e8 0f       	add	r30, r24
     292:	f9 1f       	adc	r31, r25
     294:	12 96       	adiw	r26, 0x02	; 2
     296:	8d 91       	ld	r24, X+
     298:	9c 91       	ld	r25, X
     29a:	13 97       	sbiw	r26, 0x03	; 3
     29c:	e8 0f       	add	r30, r24
     29e:	f9 1f       	adc	r31, r25
     2a0:	ee 0f       	add	r30, r30
     2a2:	ff 1f       	adc	r31, r31
     2a4:	e7 59       	subi	r30, 0x97	; 151
     2a6:	fe 4f       	sbci	r31, 0xFE	; 254
     2a8:	30 82       	st	Z, r3
     2aa:	21 82       	std	Z+1, r2	; 0x01
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	40 e0       	ldi	r20, 0x00	; 0
     2b0:	50 e0       	ldi	r21, 0x00	; 0
     2b2:	60 e0       	ldi	r22, 0x00	; 0
     2b4:	70 e0       	ldi	r23, 0x00	; 0
     2b6:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <xMutex>
     2ba:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <xMutex+0x1>
     2be:	0e 94 05 0b 	call	0x160a	; 0x160a <xQueueGenericSend>
     2c2:	04 c0       	rjmp	.+8      	; 0x2cc <obstacles_task+0x1fe>
     2c4:	30 92 5f 01 	sts	0x015F, r3	; 0x80015f <stop>
     2c8:	20 92 60 01 	sts	0x0160, r2	; 0x800160 <stop+0x1>
     2cc:	88 ee       	ldi	r24, 0xE8	; 232
     2ce:	93 e0       	ldi	r25, 0x03	; 3
     2d0:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <vTaskDelay>
     2d4:	25 cf       	rjmp	.-438    	; 0x120 <obstacles_task+0x52>
     2d6:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <rand>
     2da:	81 70       	andi	r24, 0x01	; 1
     2dc:	90 78       	andi	r25, 0x80	; 128
     2de:	99 23       	and	r25, r25
     2e0:	24 f4       	brge	.+8      	; 0x2ea <obstacles_task+0x21c>
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	8e 6f       	ori	r24, 0xFE	; 254
     2e6:	9f 6f       	ori	r25, 0xFF	; 255
     2e8:	01 96       	adiw	r24, 0x01	; 1
     2ea:	eb 81       	ldd	r30, Y+3	; 0x03
     2ec:	fc 81       	ldd	r31, Y+4	; 0x04
     2ee:	91 83       	std	Z+1, r25	; 0x01
     2f0:	80 83       	st	Z, r24
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	09 f0       	breq	.+2      	; 0x2f8 <obstacles_task+0x22a>
     2f6:	a9 cf       	rjmp	.-174    	; 0x24a <obstacles_task+0x17c>
     2f8:	8e cf       	rjmp	.-228    	; 0x216 <obstacles_task+0x148>

000002fa <joystickSampler_task>:
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	00 d0       	rcall	.+0      	; 0x300 <joystickSampler_task+0x6>
     300:	00 d0       	rcall	.+0      	; 0x302 <joystickSampler_task+0x8>
     302:	00 d0       	rcall	.+0      	; 0x304 <joystickSampler_task+0xa>
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
     308:	65 e0       	ldi	r22, 0x05	; 5
     30a:	70 e0       	ldi	r23, 0x00	; 0
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 2a 10 	call	0x2054	; 0x2054 <vTaskSetApplicationTaskTag>
     314:	ee 24       	eor	r14, r14
     316:	e3 94       	inc	r14
     318:	f1 2c       	mov	r15, r1
     31a:	05 e6       	ldi	r16, 0x65	; 101
     31c:	11 e0       	ldi	r17, 0x01	; 1
     31e:	0f 2e       	mov	r0, r31
     320:	f3 e0       	ldi	r31, 0x03	; 3
     322:	cf 2e       	mov	r12, r31
     324:	d1 2c       	mov	r13, r1
     326:	f0 2d       	mov	r31, r0
     328:	68 94       	set
     32a:	aa 24       	eor	r10, r10
     32c:	a1 f8       	bld	r10, 1
     32e:	b1 2c       	mov	r11, r1
     330:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <stop>
     334:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <stop+0x1>
     338:	89 2b       	or	r24, r25
     33a:	09 f0       	breq	.+2      	; 0x33e <joystickSampler_task+0x44>
     33c:	4a c0       	rjmp	.+148    	; 0x3d2 <joystickSampler_task+0xd8>
     33e:	f8 01       	movw	r30, r16
     340:	80 81       	ld	r24, Z
     342:	91 81       	ldd	r25, Z+1	; 0x01
     344:	9c 83       	std	Y+4, r25	; 0x04
     346:	8b 83       	std	Y+3, r24	; 0x03
     348:	82 81       	ldd	r24, Z+2	; 0x02
     34a:	93 81       	ldd	r25, Z+3	; 0x03
     34c:	9e 83       	std	Y+6, r25	; 0x06
     34e:	8d 83       	std	Y+5, r24	; 0x05
     350:	30 99       	sbic	0x06, 0	; 6
     352:	0e c0       	rjmp	.+28     	; 0x370 <joystickSampler_task+0x76>
     354:	1a 82       	std	Y+2, r1	; 0x02
     356:	19 82       	std	Y+1, r1	; 0x01
     358:	20 e0       	ldi	r18, 0x00	; 0
     35a:	4f ef       	ldi	r20, 0xFF	; 255
     35c:	5f ef       	ldi	r21, 0xFF	; 255
     35e:	be 01       	movw	r22, r28
     360:	6f 5f       	subi	r22, 0xFF	; 255
     362:	7f 4f       	sbci	r23, 0xFF	; 255
     364:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <xInputQueue>
     368:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <xInputQueue+0x1>
     36c:	0e 94 05 0b 	call	0x160a	; 0x160a <xQueueGenericSend>
     370:	31 99       	sbic	0x06, 1	; 6
     372:	0e c0       	rjmp	.+28     	; 0x390 <joystickSampler_task+0x96>
     374:	ba 82       	std	Y+2, r11	; 0x02
     376:	a9 82       	std	Y+1, r10	; 0x01
     378:	20 e0       	ldi	r18, 0x00	; 0
     37a:	4f ef       	ldi	r20, 0xFF	; 255
     37c:	5f ef       	ldi	r21, 0xFF	; 255
     37e:	be 01       	movw	r22, r28
     380:	6f 5f       	subi	r22, 0xFF	; 255
     382:	7f 4f       	sbci	r23, 0xFF	; 255
     384:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <xInputQueue>
     388:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <xInputQueue+0x1>
     38c:	0e 94 05 0b 	call	0x160a	; 0x160a <xQueueGenericSend>
     390:	36 99       	sbic	0x06, 6	; 6
     392:	0e c0       	rjmp	.+28     	; 0x3b0 <joystickSampler_task+0xb6>
     394:	fa 82       	std	Y+2, r15	; 0x02
     396:	e9 82       	std	Y+1, r14	; 0x01
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	4f ef       	ldi	r20, 0xFF	; 255
     39c:	5f ef       	ldi	r21, 0xFF	; 255
     39e:	be 01       	movw	r22, r28
     3a0:	6f 5f       	subi	r22, 0xFF	; 255
     3a2:	7f 4f       	sbci	r23, 0xFF	; 255
     3a4:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <xInputQueue>
     3a8:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <xInputQueue+0x1>
     3ac:	0e 94 05 0b 	call	0x160a	; 0x160a <xQueueGenericSend>
     3b0:	37 99       	sbic	0x06, 7	; 6
     3b2:	15 c0       	rjmp	.+42     	; 0x3de <joystickSampler_task+0xe4>
     3b4:	da 82       	std	Y+2, r13	; 0x02
     3b6:	c9 82       	std	Y+1, r12	; 0x01
     3b8:	20 e0       	ldi	r18, 0x00	; 0
     3ba:	4f ef       	ldi	r20, 0xFF	; 255
     3bc:	5f ef       	ldi	r21, 0xFF	; 255
     3be:	be 01       	movw	r22, r28
     3c0:	6f 5f       	subi	r22, 0xFF	; 255
     3c2:	7f 4f       	sbci	r23, 0xFF	; 255
     3c4:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <xInputQueue>
     3c8:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <xInputQueue+0x1>
     3cc:	0e 94 05 0b 	call	0x160a	; 0x160a <xQueueGenericSend>
     3d0:	06 c0       	rjmp	.+12     	; 0x3de <joystickSampler_task+0xe4>
     3d2:	4b 99       	sbic	0x09, 3	; 9
     3d4:	04 c0       	rjmp	.+8      	; 0x3de <joystickSampler_task+0xe4>
     3d6:	f0 92 5e 01 	sts	0x015E, r15	; 0x80015e <restart1+0x1>
     3da:	e0 92 5d 01 	sts	0x015D, r14	; 0x80015d <restart1>
     3de:	84 e6       	ldi	r24, 0x64	; 100
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <vTaskDelay>
     3e6:	a4 cf       	rjmp	.-184    	; 0x330 <joystickSampler_task+0x36>

000003e8 <update>:
     3e8:	cf 92       	push	r12
     3ea:	df 92       	push	r13
     3ec:	ef 92       	push	r14
     3ee:	ff 92       	push	r15
     3f0:	0f 93       	push	r16
     3f2:	1f 93       	push	r17
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	cd e0       	ldi	r28, 0x0D	; 13
     3fa:	d3 e0       	ldi	r29, 0x03	; 3
     3fc:	49 e6       	ldi	r20, 0x69	; 105
     3fe:	51 e0       	ldi	r21, 0x01	; 1
     400:	01 e8       	ldi	r16, 0x81	; 129
     402:	12 e0       	ldi	r17, 0x02	; 2
     404:	c1 2c       	mov	r12, r1
     406:	d1 2c       	mov	r13, r1
     408:	61 e0       	ldi	r22, 0x01	; 1
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	de 01       	movw	r26, r28
     40e:	19 82       	std	Y+1, r1	; 0x01
     410:	18 82       	st	Y, r1
     412:	fa 01       	movw	r30, r20
     414:	8c 2d       	mov	r24, r12
     416:	9d 2d       	mov	r25, r13
     418:	21 91       	ld	r18, Z+
     41a:	31 91       	ld	r19, Z+
     41c:	21 30       	cpi	r18, 0x01	; 1
     41e:	31 05       	cpc	r19, r1
     420:	79 f4       	brne	.+30     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     422:	ed 90       	ld	r14, X+
     424:	fc 90       	ld	r15, X
     426:	11 97       	sbiw	r26, 0x01	; 1
     428:	9b 01       	movw	r18, r22
     42a:	08 2e       	mov	r0, r24
     42c:	02 c0       	rjmp	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     42e:	22 0f       	add	r18, r18
     430:	33 1f       	adc	r19, r19
     432:	0a 94       	dec	r0
     434:	e2 f7       	brpl	.-8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     436:	2e 29       	or	r18, r14
     438:	3f 29       	or	r19, r15
     43a:	11 96       	adiw	r26, 0x01	; 1
     43c:	3c 93       	st	X, r19
     43e:	2e 93       	st	-X, r18
     440:	01 96       	adiw	r24, 0x01	; 1
     442:	8a 30       	cpi	r24, 0x0A	; 10
     444:	91 05       	cpc	r25, r1
     446:	41 f7       	brne	.-48     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     448:	22 96       	adiw	r28, 0x02	; 2
     44a:	4c 5e       	subi	r20, 0xEC	; 236
     44c:	5f 4f       	sbci	r21, 0xFF	; 255
     44e:	40 17       	cp	r20, r16
     450:	51 07       	cpc	r21, r17
     452:	e1 f6       	brne	.-72     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	1f 91       	pop	r17
     45a:	0f 91       	pop	r16
     45c:	ff 90       	pop	r15
     45e:	ef 90       	pop	r14
     460:	df 90       	pop	r13
     462:	cf 90       	pop	r12
     464:	08 95       	ret

00000466 <moveCar>:
     466:	81 30       	cpi	r24, 0x01	; 1
     468:	91 05       	cpc	r25, r1
     46a:	09 f4       	brne	.+2      	; 0x46e <moveCar+0x8>
     46c:	62 c0       	rjmp	.+196    	; 0x532 <moveCar+0xcc>
     46e:	40 f0       	brcs	.+16     	; 0x480 <moveCar+0x1a>
     470:	82 30       	cpi	r24, 0x02	; 2
     472:	91 05       	cpc	r25, r1
     474:	09 f4       	brne	.+2      	; 0x478 <moveCar+0x12>
     476:	ba c0       	rjmp	.+372    	; 0x5ec <moveCar+0x186>
     478:	03 97       	sbiw	r24, 0x03	; 3
     47a:	09 f4       	brne	.+2      	; 0x47e <moveCar+0x18>
     47c:	14 c1       	rjmp	.+552    	; 0x6a6 <moveCar+0x240>
     47e:	08 95       	ret
     480:	db 01       	movw	r26, r22
     482:	12 96       	adiw	r26, 0x02	; 2
     484:	2d 91       	ld	r18, X+
     486:	3c 91       	ld	r19, X
     488:	13 97       	sbiw	r26, 0x03	; 3
     48a:	c9 01       	movw	r24, r18
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	8a 30       	cpi	r24, 0x0A	; 10
     490:	91 05       	cpc	r25, r1
     492:	08 f0       	brcs	.+2      	; 0x496 <moveCar+0x30>
     494:	63 c1       	rjmp	.+710    	; 0x75c <moveCar+0x2f6>
     496:	4d 91       	ld	r20, X+
     498:	5c 91       	ld	r21, X
     49a:	da 01       	movw	r26, r20
     49c:	aa 0f       	add	r26, r26
     49e:	bb 1f       	adc	r27, r27
     4a0:	fa 01       	movw	r30, r20
     4a2:	ee 0f       	add	r30, r30
     4a4:	ff 1f       	adc	r31, r31
     4a6:	ee 0f       	add	r30, r30
     4a8:	ff 1f       	adc	r31, r31
     4aa:	ee 0f       	add	r30, r30
     4ac:	ff 1f       	adc	r31, r31
     4ae:	ea 0f       	add	r30, r26
     4b0:	fb 1f       	adc	r31, r27
     4b2:	e8 0f       	add	r30, r24
     4b4:	f9 1f       	adc	r31, r25
     4b6:	ee 0f       	add	r30, r30
     4b8:	ff 1f       	adc	r31, r31
     4ba:	e7 59       	subi	r30, 0x97	; 151
     4bc:	fe 4f       	sbci	r31, 0xFE	; 254
     4be:	80 81       	ld	r24, Z
     4c0:	91 81       	ldd	r25, Z+1	; 0x01
     4c2:	89 2b       	or	r24, r25
     4c4:	09 f0       	breq	.+2      	; 0x4c8 <moveCar+0x62>
     4c6:	4a c1       	rjmp	.+660    	; 0x75c <moveCar+0x2f6>
     4c8:	fd 01       	movw	r30, r26
     4ca:	44 0f       	add	r20, r20
     4cc:	55 1f       	adc	r21, r21
     4ce:	44 0f       	add	r20, r20
     4d0:	55 1f       	adc	r21, r21
     4d2:	44 0f       	add	r20, r20
     4d4:	55 1f       	adc	r21, r21
     4d6:	e4 0f       	add	r30, r20
     4d8:	f5 1f       	adc	r31, r21
     4da:	e2 0f       	add	r30, r18
     4dc:	f3 1f       	adc	r31, r19
     4de:	ee 0f       	add	r30, r30
     4e0:	ff 1f       	adc	r31, r31
     4e2:	e7 59       	subi	r30, 0x97	; 151
     4e4:	fe 4f       	sbci	r31, 0xFE	; 254
     4e6:	11 82       	std	Z+1, r1	; 0x01
     4e8:	10 82       	st	Z, r1
     4ea:	fb 01       	movw	r30, r22
     4ec:	20 81       	ld	r18, Z
     4ee:	31 81       	ldd	r19, Z+1	; 0x01
     4f0:	82 81       	ldd	r24, Z+2	; 0x02
     4f2:	93 81       	ldd	r25, Z+3	; 0x03
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	93 83       	std	Z+3, r25	; 0x03
     4f8:	82 83       	std	Z+2, r24	; 0x02
     4fa:	f9 01       	movw	r30, r18
     4fc:	ee 0f       	add	r30, r30
     4fe:	ff 1f       	adc	r31, r31
     500:	22 0f       	add	r18, r18
     502:	33 1f       	adc	r19, r19
     504:	22 0f       	add	r18, r18
     506:	33 1f       	adc	r19, r19
     508:	22 0f       	add	r18, r18
     50a:	33 1f       	adc	r19, r19
     50c:	e2 0f       	add	r30, r18
     50e:	f3 1f       	adc	r31, r19
     510:	e8 0f       	add	r30, r24
     512:	f9 1f       	adc	r31, r25
     514:	ee 0f       	add	r30, r30
     516:	ff 1f       	adc	r31, r31
     518:	e7 59       	subi	r30, 0x97	; 151
     51a:	fe 4f       	sbci	r31, 0xFE	; 254
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	91 83       	std	Z+1, r25	; 0x01
     522:	80 83       	st	Z, r24
     524:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <update>
     528:	88 ec       	ldi	r24, 0xC8	; 200
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <vTaskDelay>
     530:	08 95       	ret
     532:	db 01       	movw	r26, r22
     534:	12 96       	adiw	r26, 0x02	; 2
     536:	2d 91       	ld	r18, X+
     538:	3c 91       	ld	r19, X
     53a:	13 97       	sbiw	r26, 0x03	; 3
     53c:	21 15       	cp	r18, r1
     53e:	31 05       	cpc	r19, r1
     540:	09 f4       	brne	.+2      	; 0x544 <moveCar+0xde>
     542:	0c c1       	rjmp	.+536    	; 0x75c <moveCar+0x2f6>
     544:	4d 91       	ld	r20, X+
     546:	5c 91       	ld	r21, X
     548:	11 97       	sbiw	r26, 0x01	; 1
     54a:	fa 01       	movw	r30, r20
     54c:	ee 0f       	add	r30, r30
     54e:	ff 1f       	adc	r31, r31
     550:	ca 01       	movw	r24, r20
     552:	88 0f       	add	r24, r24
     554:	99 1f       	adc	r25, r25
     556:	88 0f       	add	r24, r24
     558:	99 1f       	adc	r25, r25
     55a:	88 0f       	add	r24, r24
     55c:	99 1f       	adc	r25, r25
     55e:	e8 0f       	add	r30, r24
     560:	f9 1f       	adc	r31, r25
     562:	e2 0f       	add	r30, r18
     564:	f3 1f       	adc	r31, r19
     566:	ee 0f       	add	r30, r30
     568:	ff 1f       	adc	r31, r31
     56a:	e9 59       	subi	r30, 0x99	; 153
     56c:	fe 4f       	sbci	r31, 0xFE	; 254
     56e:	80 81       	ld	r24, Z
     570:	91 81       	ldd	r25, Z+1	; 0x01
     572:	89 2b       	or	r24, r25
     574:	09 f0       	breq	.+2      	; 0x578 <moveCar+0x112>
     576:	f2 c0       	rjmp	.+484    	; 0x75c <moveCar+0x2f6>
     578:	fa 01       	movw	r30, r20
     57a:	ee 0f       	add	r30, r30
     57c:	ff 1f       	adc	r31, r31
     57e:	44 0f       	add	r20, r20
     580:	55 1f       	adc	r21, r21
     582:	44 0f       	add	r20, r20
     584:	55 1f       	adc	r21, r21
     586:	44 0f       	add	r20, r20
     588:	55 1f       	adc	r21, r21
     58a:	e4 0f       	add	r30, r20
     58c:	f5 1f       	adc	r31, r21
     58e:	e2 0f       	add	r30, r18
     590:	f3 1f       	adc	r31, r19
     592:	ee 0f       	add	r30, r30
     594:	ff 1f       	adc	r31, r31
     596:	e7 59       	subi	r30, 0x97	; 151
     598:	fe 4f       	sbci	r31, 0xFE	; 254
     59a:	11 82       	std	Z+1, r1	; 0x01
     59c:	10 82       	st	Z, r1
     59e:	12 96       	adiw	r26, 0x02	; 2
     5a0:	8d 91       	ld	r24, X+
     5a2:	9c 91       	ld	r25, X
     5a4:	13 97       	sbiw	r26, 0x03	; 3
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	13 96       	adiw	r26, 0x03	; 3
     5aa:	9c 93       	st	X, r25
     5ac:	8e 93       	st	-X, r24
     5ae:	12 97       	sbiw	r26, 0x02	; 2
     5b0:	2d 91       	ld	r18, X+
     5b2:	3c 91       	ld	r19, X
     5b4:	f9 01       	movw	r30, r18
     5b6:	ee 0f       	add	r30, r30
     5b8:	ff 1f       	adc	r31, r31
     5ba:	22 0f       	add	r18, r18
     5bc:	33 1f       	adc	r19, r19
     5be:	22 0f       	add	r18, r18
     5c0:	33 1f       	adc	r19, r19
     5c2:	22 0f       	add	r18, r18
     5c4:	33 1f       	adc	r19, r19
     5c6:	e2 0f       	add	r30, r18
     5c8:	f3 1f       	adc	r31, r19
     5ca:	e8 0f       	add	r30, r24
     5cc:	f9 1f       	adc	r31, r25
     5ce:	ee 0f       	add	r30, r30
     5d0:	ff 1f       	adc	r31, r31
     5d2:	e7 59       	subi	r30, 0x97	; 151
     5d4:	fe 4f       	sbci	r31, 0xFE	; 254
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	91 83       	std	Z+1, r25	; 0x01
     5dc:	80 83       	st	Z, r24
     5de:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <update>
     5e2:	88 ec       	ldi	r24, 0xC8	; 200
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <vTaskDelay>
     5ea:	08 95       	ret
     5ec:	fb 01       	movw	r30, r22
     5ee:	20 81       	ld	r18, Z
     5f0:	31 81       	ldd	r19, Z+1	; 0x01
     5f2:	c9 01       	movw	r24, r18
     5f4:	01 96       	adiw	r24, 0x01	; 1
     5f6:	8e 30       	cpi	r24, 0x0E	; 14
     5f8:	91 05       	cpc	r25, r1
     5fa:	08 f0       	brcs	.+2      	; 0x5fe <moveCar+0x198>
     5fc:	af c0       	rjmp	.+350    	; 0x75c <moveCar+0x2f6>
     5fe:	42 81       	ldd	r20, Z+2	; 0x02
     600:	53 81       	ldd	r21, Z+3	; 0x03
     602:	fc 01       	movw	r30, r24
     604:	ee 0f       	add	r30, r30
     606:	ff 1f       	adc	r31, r31
     608:	88 0f       	add	r24, r24
     60a:	99 1f       	adc	r25, r25
     60c:	88 0f       	add	r24, r24
     60e:	99 1f       	adc	r25, r25
     610:	88 0f       	add	r24, r24
     612:	99 1f       	adc	r25, r25
     614:	e8 0f       	add	r30, r24
     616:	f9 1f       	adc	r31, r25
     618:	e4 0f       	add	r30, r20
     61a:	f5 1f       	adc	r31, r21
     61c:	ee 0f       	add	r30, r30
     61e:	ff 1f       	adc	r31, r31
     620:	e7 59       	subi	r30, 0x97	; 151
     622:	fe 4f       	sbci	r31, 0xFE	; 254
     624:	80 81       	ld	r24, Z
     626:	91 81       	ldd	r25, Z+1	; 0x01
     628:	89 2b       	or	r24, r25
     62a:	09 f0       	breq	.+2      	; 0x62e <moveCar+0x1c8>
     62c:	97 c0       	rjmp	.+302    	; 0x75c <moveCar+0x2f6>
     62e:	c9 01       	movw	r24, r18
     630:	88 0f       	add	r24, r24
     632:	99 1f       	adc	r25, r25
     634:	22 0f       	add	r18, r18
     636:	33 1f       	adc	r19, r19
     638:	22 0f       	add	r18, r18
     63a:	33 1f       	adc	r19, r19
     63c:	22 0f       	add	r18, r18
     63e:	33 1f       	adc	r19, r19
     640:	28 0f       	add	r18, r24
     642:	39 1f       	adc	r19, r25
     644:	f9 01       	movw	r30, r18
     646:	e4 0f       	add	r30, r20
     648:	f5 1f       	adc	r31, r21
     64a:	ee 0f       	add	r30, r30
     64c:	ff 1f       	adc	r31, r31
     64e:	e7 59       	subi	r30, 0x97	; 151
     650:	fe 4f       	sbci	r31, 0xFE	; 254
     652:	11 82       	std	Z+1, r1	; 0x01
     654:	10 82       	st	Z, r1
     656:	db 01       	movw	r26, r22
     658:	8d 91       	ld	r24, X+
     65a:	9c 91       	ld	r25, X
     65c:	11 97       	sbiw	r26, 0x01	; 1
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	11 96       	adiw	r26, 0x01	; 1
     662:	9c 93       	st	X, r25
     664:	8e 93       	st	-X, r24
     666:	12 96       	adiw	r26, 0x02	; 2
     668:	ed 91       	ld	r30, X+
     66a:	fc 91       	ld	r31, X
     66c:	13 97       	sbiw	r26, 0x03	; 3
     66e:	9c 01       	movw	r18, r24
     670:	22 0f       	add	r18, r18
     672:	33 1f       	adc	r19, r19
     674:	88 0f       	add	r24, r24
     676:	99 1f       	adc	r25, r25
     678:	88 0f       	add	r24, r24
     67a:	99 1f       	adc	r25, r25
     67c:	88 0f       	add	r24, r24
     67e:	99 1f       	adc	r25, r25
     680:	82 0f       	add	r24, r18
     682:	93 1f       	adc	r25, r19
     684:	e8 0f       	add	r30, r24
     686:	f9 1f       	adc	r31, r25
     688:	ee 0f       	add	r30, r30
     68a:	ff 1f       	adc	r31, r31
     68c:	e7 59       	subi	r30, 0x97	; 151
     68e:	fe 4f       	sbci	r31, 0xFE	; 254
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	91 83       	std	Z+1, r25	; 0x01
     696:	80 83       	st	Z, r24
     698:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <update>
     69c:	88 ec       	ldi	r24, 0xC8	; 200
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <vTaskDelay>
     6a4:	08 95       	ret
     6a6:	fb 01       	movw	r30, r22
     6a8:	20 81       	ld	r18, Z
     6aa:	31 81       	ldd	r19, Z+1	; 0x01
     6ac:	21 15       	cp	r18, r1
     6ae:	31 05       	cpc	r19, r1
     6b0:	09 f4       	brne	.+2      	; 0x6b4 <moveCar+0x24e>
     6b2:	54 c0       	rjmp	.+168    	; 0x75c <moveCar+0x2f6>
     6b4:	42 81       	ldd	r20, Z+2	; 0x02
     6b6:	53 81       	ldd	r21, Z+3	; 0x03
     6b8:	c9 01       	movw	r24, r18
     6ba:	01 97       	sbiw	r24, 0x01	; 1
     6bc:	fc 01       	movw	r30, r24
     6be:	ee 0f       	add	r30, r30
     6c0:	ff 1f       	adc	r31, r31
     6c2:	88 0f       	add	r24, r24
     6c4:	99 1f       	adc	r25, r25
     6c6:	88 0f       	add	r24, r24
     6c8:	99 1f       	adc	r25, r25
     6ca:	88 0f       	add	r24, r24
     6cc:	99 1f       	adc	r25, r25
     6ce:	e8 0f       	add	r30, r24
     6d0:	f9 1f       	adc	r31, r25
     6d2:	e4 0f       	add	r30, r20
     6d4:	f5 1f       	adc	r31, r21
     6d6:	ee 0f       	add	r30, r30
     6d8:	ff 1f       	adc	r31, r31
     6da:	e7 59       	subi	r30, 0x97	; 151
     6dc:	fe 4f       	sbci	r31, 0xFE	; 254
     6de:	80 81       	ld	r24, Z
     6e0:	91 81       	ldd	r25, Z+1	; 0x01
     6e2:	89 2b       	or	r24, r25
     6e4:	d9 f5       	brne	.+118    	; 0x75c <moveCar+0x2f6>
     6e6:	c9 01       	movw	r24, r18
     6e8:	88 0f       	add	r24, r24
     6ea:	99 1f       	adc	r25, r25
     6ec:	22 0f       	add	r18, r18
     6ee:	33 1f       	adc	r19, r19
     6f0:	22 0f       	add	r18, r18
     6f2:	33 1f       	adc	r19, r19
     6f4:	22 0f       	add	r18, r18
     6f6:	33 1f       	adc	r19, r19
     6f8:	28 0f       	add	r18, r24
     6fa:	39 1f       	adc	r19, r25
     6fc:	f9 01       	movw	r30, r18
     6fe:	e4 0f       	add	r30, r20
     700:	f5 1f       	adc	r31, r21
     702:	ee 0f       	add	r30, r30
     704:	ff 1f       	adc	r31, r31
     706:	e7 59       	subi	r30, 0x97	; 151
     708:	fe 4f       	sbci	r31, 0xFE	; 254
     70a:	11 82       	std	Z+1, r1	; 0x01
     70c:	10 82       	st	Z, r1
     70e:	db 01       	movw	r26, r22
     710:	8d 91       	ld	r24, X+
     712:	9c 91       	ld	r25, X
     714:	11 97       	sbiw	r26, 0x01	; 1
     716:	01 97       	sbiw	r24, 0x01	; 1
     718:	11 96       	adiw	r26, 0x01	; 1
     71a:	9c 93       	st	X, r25
     71c:	8e 93       	st	-X, r24
     71e:	12 96       	adiw	r26, 0x02	; 2
     720:	ed 91       	ld	r30, X+
     722:	fc 91       	ld	r31, X
     724:	13 97       	sbiw	r26, 0x03	; 3
     726:	9c 01       	movw	r18, r24
     728:	22 0f       	add	r18, r18
     72a:	33 1f       	adc	r19, r19
     72c:	88 0f       	add	r24, r24
     72e:	99 1f       	adc	r25, r25
     730:	88 0f       	add	r24, r24
     732:	99 1f       	adc	r25, r25
     734:	88 0f       	add	r24, r24
     736:	99 1f       	adc	r25, r25
     738:	82 0f       	add	r24, r18
     73a:	93 1f       	adc	r25, r19
     73c:	e8 0f       	add	r30, r24
     73e:	f9 1f       	adc	r31, r25
     740:	ee 0f       	add	r30, r30
     742:	ff 1f       	adc	r31, r31
     744:	e7 59       	subi	r30, 0x97	; 151
     746:	fe 4f       	sbci	r31, 0xFE	; 254
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	91 83       	std	Z+1, r25	; 0x01
     74e:	80 83       	st	Z, r24
     750:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <update>
     754:	88 ec       	ldi	r24, 0xC8	; 200
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <vTaskDelay>
     75c:	08 95       	ret

0000075e <displayUpdater_task>:
     75e:	63 e0       	ldi	r22, 0x03	; 3
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 2a 10 	call	0x2054	; 0x2054 <vTaskSetApplicationTaskTag>
     76a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <update>
     76e:	89 e2       	ldi	r24, 0x29	; 41
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <vTaskDelay>
     776:	f9 cf       	rjmp	.-14     	; 0x76a <displayUpdater_task+0xc>

00000778 <setupGame>:
     778:	e9 e6       	ldi	r30, 0x69	; 105
     77a:	f1 e0       	ldi	r31, 0x01	; 1
     77c:	21 e8       	ldi	r18, 0x81	; 129
     77e:	32 e0       	ldi	r19, 0x02	; 2
     780:	41 e8       	ldi	r20, 0x81	; 129
     782:	52 e0       	ldi	r21, 0x02	; 2
     784:	0c c0       	rjmp	.+24     	; 0x79e <setupGame+0x26>
     786:	11 92       	st	Z+, r1
     788:	11 92       	st	Z+, r1
     78a:	1d 92       	st	X+, r1
     78c:	e8 17       	cp	r30, r24
     78e:	f9 07       	cpc	r31, r25
     790:	d1 f7       	brne	.-12     	; 0x786 <setupGame+0xe>
     792:	26 5f       	subi	r18, 0xF6	; 246
     794:	3f 4f       	sbci	r19, 0xFF	; 255
     796:	fc 01       	movw	r30, r24
     798:	48 17       	cp	r20, r24
     79a:	59 07       	cpc	r21, r25
     79c:	21 f0       	breq	.+8      	; 0x7a6 <setupGame+0x2e>
     79e:	cf 01       	movw	r24, r30
     7a0:	44 96       	adiw	r24, 0x14	; 20
     7a2:	d9 01       	movw	r26, r18
     7a4:	f0 cf       	rjmp	.-32     	; 0x786 <setupGame+0xe>
     7a6:	e5 e6       	ldi	r30, 0x65	; 101
     7a8:	f1 e0       	ldi	r31, 0x01	; 1
     7aa:	86 e0       	ldi	r24, 0x06	; 6
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	91 83       	std	Z+1, r25	; 0x01
     7b0:	80 83       	st	Z, r24
     7b2:	89 e0       	ldi	r24, 0x09	; 9
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	93 83       	std	Z+3, r25	; 0x03
     7b8:	82 83       	std	Z+2, r24	; 0x02
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <myMatrix+0x8b>
     7c2:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <myMatrix+0x8a>
     7c6:	08 95       	ret

000007c8 <gameLogic_task>:
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	00 d0       	rcall	.+0      	; 0x7ce <gameLogic_task+0x6>
     7ce:	00 d0       	rcall	.+0      	; 0x7d0 <gameLogic_task+0x8>
     7d0:	00 d0       	rcall	.+0      	; 0x7d2 <gameLogic_task+0xa>
     7d2:	cd b7       	in	r28, 0x3d	; 61
     7d4:	de b7       	in	r29, 0x3e	; 62
     7d6:	64 e0       	ldi	r22, 0x04	; 4
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	0e 94 2a 10 	call	0x2054	; 0x2054 <vTaskSetApplicationTaskTag>
     7e2:	01 e0       	ldi	r16, 0x01	; 1
     7e4:	10 e0       	ldi	r17, 0x00	; 0
     7e6:	0f 2e       	mov	r0, r31
     7e8:	f5 e6       	ldi	r31, 0x65	; 101
     7ea:	ef 2e       	mov	r14, r31
     7ec:	f1 e0       	ldi	r31, 0x01	; 1
     7ee:	ff 2e       	mov	r15, r31
     7f0:	f0 2d       	mov	r31, r0
     7f2:	0f 2e       	mov	r0, r31
     7f4:	f1 e6       	ldi	r31, 0x61	; 97
     7f6:	cf 2e       	mov	r12, r31
     7f8:	f1 e0       	ldi	r31, 0x01	; 1
     7fa:	df 2e       	mov	r13, r31
     7fc:	f0 2d       	mov	r31, r0
     7fe:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <stop>
     802:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <stop+0x1>
     806:	89 2b       	or	r24, r25
     808:	09 f0       	breq	.+2      	; 0x80c <gameLogic_task+0x44>
     80a:	53 c0       	rjmp	.+166    	; 0x8b2 <gameLogic_task+0xea>
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	4f ef       	ldi	r20, 0xFF	; 255
     810:	5f ef       	ldi	r21, 0xFF	; 255
     812:	be 01       	movw	r22, r28
     814:	6f 5f       	subi	r22, 0xFF	; 255
     816:	7f 4f       	sbci	r23, 0xFF	; 255
     818:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <xInputQueue>
     81c:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <xInputQueue+0x1>
     820:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <xQueueGenericReceive>
     824:	88 23       	and	r24, r24
     826:	09 f4       	brne	.+2      	; 0x82a <gameLogic_task+0x62>
     828:	3f c0       	rjmp	.+126    	; 0x8a8 <gameLogic_task+0xe0>
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	4f ef       	ldi	r20, 0xFF	; 255
     82e:	5f ef       	ldi	r21, 0xFF	; 255
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <xMutex>
     838:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <xMutex+0x1>
     83c:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <xQueueGenericReceive>
     840:	88 23       	and	r24, r24
     842:	91 f1       	breq	.+100    	; 0x8a8 <gameLogic_task+0xe0>
     844:	8b 81       	ldd	r24, Y+3	; 0x03
     846:	9c 81       	ldd	r25, Y+4	; 0x04
     848:	f7 01       	movw	r30, r14
     84a:	20 81       	ld	r18, Z
     84c:	31 81       	ldd	r19, Z+1	; 0x01
     84e:	82 17       	cp	r24, r18
     850:	93 07       	cpc	r25, r19
     852:	69 f4       	brne	.+26     	; 0x86e <gameLogic_task+0xa6>
     854:	4d 81       	ldd	r20, Y+5	; 0x05
     856:	5e 81       	ldd	r21, Y+6	; 0x06
     858:	22 81       	ldd	r18, Z+2	; 0x02
     85a:	33 81       	ldd	r19, Z+3	; 0x03
     85c:	42 17       	cp	r20, r18
     85e:	53 07       	cpc	r21, r19
     860:	31 f4       	brne	.+12     	; 0x86e <gameLogic_task+0xa6>
     862:	b7 01       	movw	r22, r14
     864:	89 81       	ldd	r24, Y+1	; 0x01
     866:	9a 81       	ldd	r25, Y+2	; 0x02
     868:	0e 94 33 02 	call	0x466	; 0x466 <moveCar>
     86c:	12 c0       	rjmp	.+36     	; 0x892 <gameLogic_task+0xca>
     86e:	f6 01       	movw	r30, r12
     870:	20 81       	ld	r18, Z
     872:	31 81       	ldd	r19, Z+1	; 0x01
     874:	82 17       	cp	r24, r18
     876:	93 07       	cpc	r25, r19
     878:	61 f4       	brne	.+24     	; 0x892 <gameLogic_task+0xca>
     87a:	2d 81       	ldd	r18, Y+5	; 0x05
     87c:	3e 81       	ldd	r19, Y+6	; 0x06
     87e:	82 81       	ldd	r24, Z+2	; 0x02
     880:	93 81       	ldd	r25, Z+3	; 0x03
     882:	28 17       	cp	r18, r24
     884:	39 07       	cpc	r19, r25
     886:	29 f4       	brne	.+10     	; 0x892 <gameLogic_task+0xca>
     888:	b6 01       	movw	r22, r12
     88a:	89 81       	ldd	r24, Y+1	; 0x01
     88c:	9a 81       	ldd	r25, Y+2	; 0x02
     88e:	0e 94 33 02 	call	0x466	; 0x466 <moveCar>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	40 e0       	ldi	r20, 0x00	; 0
     896:	50 e0       	ldi	r21, 0x00	; 0
     898:	60 e0       	ldi	r22, 0x00	; 0
     89a:	70 e0       	ldi	r23, 0x00	; 0
     89c:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <xMutex>
     8a0:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <xMutex+0x1>
     8a4:	0e 94 05 0b 	call	0x160a	; 0x160a <xQueueGenericSend>
     8a8:	82 e3       	ldi	r24, 0x32	; 50
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <vTaskDelay>
     8b0:	a6 cf       	rjmp	.-180    	; 0x7fe <gameLogic_task+0x36>
     8b2:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <restart1>
     8b6:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <restart1+0x1>
     8ba:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <restart2>
     8be:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <restart2+0x1>
     8c2:	82 0f       	add	r24, r18
     8c4:	93 1f       	adc	r25, r19
     8c6:	02 97       	sbiw	r24, 0x02	; 2
     8c8:	09 f0       	breq	.+2      	; 0x8cc <gameLogic_task+0x104>
     8ca:	99 cf       	rjmp	.-206    	; 0x7fe <gameLogic_task+0x36>
     8cc:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <stop+0x1>
     8d0:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <stop>
     8d4:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <restart1+0x1>
     8d8:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <restart1>
     8dc:	10 93 0b 01 	sts	0x010B, r17	; 0x80010b <restart2+0x1>
     8e0:	00 93 0a 01 	sts	0x010A, r16	; 0x80010a <restart2>
     8e4:	0e 94 bc 03 	call	0x778	; 0x778 <setupGame>
     8e8:	8a cf       	rjmp	.-236    	; 0x7fe <gameLogic_task+0x36>

000008ea <startup_task>:
     8ea:	61 e0       	ldi	r22, 0x01	; 1
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	0e 94 2a 10 	call	0x2054	; 0x2054 <vTaskSetApplicationTaskTag>
     8f6:	0e 94 bc 03 	call	0x778	; 0x778 <setupGame>
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	0e 94 a6 0b 	call	0x174c	; 0x174c <xQueueCreateMutex>
     900:	90 93 32 03 	sts	0x0332, r25	; 0x800332 <xMutex+0x1>
     904:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <xMutex>
     908:	e1 2c       	mov	r14, r1
     90a:	f1 2c       	mov	r15, r1
     90c:	02 e0       	ldi	r16, 0x02	; 2
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	45 e5       	ldi	r20, 0x55	; 85
     914:	50 e0       	ldi	r21, 0x00	; 0
     916:	60 e1       	ldi	r22, 0x10	; 16
     918:	71 e0       	ldi	r23, 0x01	; 1
     91a:	8f ea       	ldi	r24, 0xAF	; 175
     91c:	93 e0       	ldi	r25, 0x03	; 3
     91e:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <xTaskCreate>
     922:	07 e0       	ldi	r16, 0x07	; 7
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	45 e5       	ldi	r20, 0x55	; 85
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e2       	ldi	r22, 0x20	; 32
     92e:	71 e0       	ldi	r23, 0x01	; 1
     930:	84 ee       	ldi	r24, 0xE4	; 228
     932:	93 e0       	ldi	r25, 0x03	; 3
     934:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <xTaskCreate>
     938:	06 e0       	ldi	r16, 0x06	; 6
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	45 e5       	ldi	r20, 0x55	; 85
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	6b e2       	ldi	r22, 0x2B	; 43
     944:	71 e0       	ldi	r23, 0x01	; 1
     946:	87 e6       	ldi	r24, 0x67	; 103
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <xTaskCreate>
     94e:	03 e0       	ldi	r16, 0x03	; 3
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	45 e5       	ldi	r20, 0x55	; 85
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	65 e3       	ldi	r22, 0x35	; 53
     95a:	71 e0       	ldi	r23, 0x01	; 1
     95c:	8d e7       	ldi	r24, 0x7D	; 125
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <xTaskCreate>
     964:	ff cf       	rjmp	.-2      	; 0x964 <__stack+0x65>

00000966 <prepare_shiftregister>:

// Prepare shift register setting SER = 1
void prepare_shiftregister()
{
	// Set SER to 1
	PORTD |= _BV(PORTD2);
     966:	5a 9a       	sbi	0x0b, 2	; 11
     968:	08 95       	ret

0000096a <clock_shift_register_and_prepare_for_next_col>:

// clock shift-register
void clock_shift_register_and_prepare_for_next_col()
{
	// one SCK pulse
	PORTD |= _BV(PORTD5);
     96a:	5d 9a       	sbi	0x0b, 5	; 11
	PORTD &= ~_BV(PORTD5);
     96c:	5d 98       	cbi	0x0b, 5	; 11
	
	// one RCK pulse
	PORTD |= _BV(PORTD4);
     96e:	5c 9a       	sbi	0x0b, 4	; 11
	PORTD &= ~_BV(PORTD4);
     970:	5c 98       	cbi	0x0b, 4	; 11
	
	// Set SER to 0 - for next column
	PORTD &= ~_BV(PORTD2);
     972:	5a 98       	cbi	0x0b, 2	; 11
     974:	08 95       	ret

00000976 <load_col_value>:
}

// Load column value for column to show
void load_col_value(uint16_t col_value)
{
	PORTA = ~(col_value & 0xFF);
     976:	80 95       	com	r24
     978:	82 b9       	out	0x02, r24	; 2
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
     97a:	85 b1       	in	r24, 0x05	; 5
     97c:	83 60       	ori	r24, 0x03	; 3
     97e:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~((col_value >> 8) & 0x03);
     980:	85 b1       	in	r24, 0x05	; 5
     982:	93 70       	andi	r25, 0x03	; 3
     984:	90 95       	com	r25
     986:	89 23       	and	r24, r25
     988:	85 b9       	out	0x05, r24	; 5
     98a:	08 95       	ret

0000098c <handle_display>:
}

//-----------------------------------------
void handle_display(void)
{
     98c:	cf 93       	push	r28
	static uint8_t col = 0;
	
	if (col == 0)
     98e:	c0 91 5c 01 	lds	r28, 0x015C	; 0x80015c <__data_end>
     992:	c1 11       	cpse	r28, r1
     994:	0e c0       	rjmp	.+28     	; 0x9b2 <handle_display+0x26>
	{
		prepare_shiftregister();
     996:	0e 94 b3 04 	call	0x966	; 0x966 <prepare_shiftregister>
	}
	
	load_col_value(frame_buf[col]);
     99a:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <frame_buf>
     99e:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <frame_buf+0x1>
     9a2:	0e 94 bb 04 	call	0x976	; 0x976 <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
     9a6:	0e 94 b5 04 	call	0x96a	; 0x96a <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	col++;
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
     9b0:	14 c0       	rjmp	.+40     	; 0x9da <handle_display+0x4e>
	if (col == 0)
	{
		prepare_shiftregister();
	}
	
	load_col_value(frame_buf[col]);
     9b2:	ec 2f       	mov	r30, r28
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	ee 0f       	add	r30, r30
     9b8:	ff 1f       	adc	r31, r31
     9ba:	e3 5f       	subi	r30, 0xF3	; 243
     9bc:	fc 4f       	sbci	r31, 0xFC	; 252
     9be:	80 81       	ld	r24, Z
     9c0:	91 81       	ldd	r25, Z+1	; 0x01
     9c2:	0e 94 bb 04 	call	0x976	; 0x976 <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
     9c6:	0e 94 b5 04 	call	0x96a	; 0x96a <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	col++;
     9ca:	cf 5f       	subi	r28, 0xFF	; 255
	if (col > 13)
     9cc:	ce 30       	cpi	r28, 0x0E	; 14
     9ce:	18 f4       	brcc	.+6      	; 0x9d6 <handle_display+0x4a>
	load_col_value(frame_buf[col]);
	
	clock_shift_register_and_prepare_for_next_col();
	
	// count column up - prepare for next
	col++;
     9d0:	c0 93 5c 01 	sts	0x015C, r28	; 0x80015c <__data_end>
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <handle_display+0x4e>
	if (col > 13)
	{
		col = 0;
     9d6:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <__data_end>
	}
}
     9da:	cf 91       	pop	r28
     9dc:	08 95       	ret

000009de <vApplicationIdleHook>:

//-----------------------------------------
void vApplicationIdleHook( void )
{
     9de:	08 95       	ret

000009e0 <main>:


//----------------------------------------- MAIN ---------------------------------------------------------------
int main(void)
{
	init_board();
     9e0:	0e 94 8f 05 	call	0xb1e	; 0xb1e <init_board>
	_x_com_received_chars_queue = xQueueCreate( _COM_RX_QUEUE_LENGTH, ( unsigned portBASE_TYPE ) sizeof( uint8_t ) );
     9e4:	40 e0       	ldi	r20, 0x00	; 0
     9e6:	61 e0       	ldi	r22, 0x01	; 1
     9e8:	8e e1       	ldi	r24, 0x1E	; 30
     9ea:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <xQueueGenericCreate>
     9ee:	90 93 34 03 	sts	0x0334, r25	; 0x800334 <_x_com_received_chars_queue+0x1>
     9f2:	80 93 33 03 	sts	0x0333, r24	; 0x800333 <_x_com_received_chars_queue>
	//init_com(_x_com_received_chars_queue);
	//sender_timeout = xTimerCreate("Timeout", pdMS_TO_TICKS(100), pdFALSE, 1, vTimeout);

	xSendQueue = xQueueCreate(20, sizeof(unsigned char));
     9f6:	40 e0       	ldi	r20, 0x00	; 0
     9f8:	61 e0       	ldi	r22, 0x01	; 1
     9fa:	84 e1       	ldi	r24, 0x14	; 20
     9fc:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <xQueueGenericCreate>
     a00:	90 93 30 03 	sts	0x0330, r25	; 0x800330 <xSendQueue+0x1>
     a04:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <xSendQueue>
	xACKQueue = xQueueCreate(20, sizeof(unsigned char));
     a08:	40 e0       	ldi	r20, 0x00	; 0
     a0a:	61 e0       	ldi	r22, 0x01	; 1
     a0c:	84 e1       	ldi	r24, 0x14	; 20
     a0e:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <xQueueGenericCreate>
     a12:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <xACKQueue+0x1>
     a16:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <xACKQueue>
	xCommandQueue = xQueueCreate(20, sizeof(unsigned char));
     a1a:	40 e0       	ldi	r20, 0x00	; 0
     a1c:	61 e0       	ldi	r22, 0x01	; 1
     a1e:	84 e1       	ldi	r24, 0x14	; 20
     a20:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <xQueueGenericCreate>
     a24:	90 93 2c 03 	sts	0x032C, r25	; 0x80032c <xCommandQueue+0x1>
     a28:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <xCommandQueue>
	xInputQueue = xQueueCreate(20, sizeof(struct input));
     a2c:	40 e0       	ldi	r20, 0x00	; 0
     a2e:	66 e0       	ldi	r22, 0x06	; 6
     a30:	84 e1       	ldi	r24, 0x14	; 20
     a32:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <xQueueGenericCreate>
     a36:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <xInputQueue+0x1>
     a3a:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <xInputQueue>

	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
     a3e:	5e 98       	cbi	0x0b, 6	; 11
	
	//Create task to blink gpio
	BaseType_t t1 = xTaskCreate(startup_task, (const char *)"Startup", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
     a40:	e1 2c       	mov	r14, r1
     a42:	f1 2c       	mov	r15, r1
     a44:	00 e0       	ldi	r16, 0x00	; 0
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	45 e5       	ldi	r20, 0x55	; 85
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	66 e4       	ldi	r22, 0x46	; 70
     a50:	71 e0       	ldi	r23, 0x01	; 1
     a52:	85 e7       	ldi	r24, 0x75	; 117
     a54:	94 e0       	ldi	r25, 0x04	; 4
     a56:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <xTaskCreate>
	

	// Start the display handler timer
	init_display_timer(handle_display);
     a5a:	86 ec       	ldi	r24, 0xC6	; 198
     a5c:	94 e0       	ldi	r25, 0x04	; 4
     a5e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <init_display_timer>
	
	sei();
     a62:	78 94       	sei
	
	//Start the scheduler
	vTaskStartScheduler();
     a64:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <vTaskStartScheduler>
	
	//Should never reach here
	while (1)
	{
	}
     a68:	ff cf       	rjmp	.-2      	; 0xa68 <main+0x88>

00000a6a <_com_call_back>:
	}
}

// ----------------------------------------------------------------------------------------------------------------------
void com_send_bytes(uint8_t *bytes, uint8_t len) {
	serial_send_bytes(_com_serial_instance, bytes, len);
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	00 d0       	rcall	.+0      	; 0xa70 <_com_call_back+0x6>
     a70:	cd b7       	in	r28, 0x3d	; 61
     a72:	de b7       	in	r29, 0x3e	; 62
     a74:	6a 83       	std	Y+2, r22	; 0x02
     a76:	80 91 7d 03 	lds	r24, 0x037D	; 0x80037d <_x_rx_com_queue>
     a7a:	90 91 7e 03 	lds	r25, 0x037E	; 0x80037e <_x_rx_com_queue+0x1>
     a7e:	00 97       	sbiw	r24, 0x00	; 0
     a80:	71 f0       	breq	.+28     	; 0xa9e <_com_call_back+0x34>
     a82:	19 82       	std	Y+1, r1	; 0x01
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	ae 01       	movw	r20, r28
     a88:	4f 5f       	subi	r20, 0xFF	; 255
     a8a:	5f 4f       	sbci	r21, 0xFF	; 255
     a8c:	be 01       	movw	r22, r28
     a8e:	6e 5f       	subi	r22, 0xFE	; 254
     a90:	7f 4f       	sbci	r23, 0xFF	; 255
     a92:	0e 94 c0 0b 	call	0x1780	; 0x1780 <xQueueGenericSendFromISR>
     a96:	89 81       	ldd	r24, Y+1	; 0x01
     a98:	81 11       	cpse	r24, r1
     a9a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <vPortYield>
     a9e:	0f 90       	pop	r0
     aa0:	0f 90       	pop	r0
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	08 95       	ret

00000aa8 <init_display_timer>:
     aa8:	90 93 7c 03 	sts	0x037C, r25	; 0x80037c <cb_ptr+0x1>
     aac:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <cb_ptr>
     ab0:	8a e0       	ldi	r24, 0x0A	; 10
     ab2:	87 bd       	out	0x27, r24	; 39
     ab4:	84 b5       	in	r24, 0x24	; 36
     ab6:	82 60       	ori	r24, 0x02	; 2
     ab8:	84 bd       	out	0x24, r24	; 36
     aba:	ee e6       	ldi	r30, 0x6E	; 110
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	80 81       	ld	r24, Z
     ac0:	82 60       	ori	r24, 0x02	; 2
     ac2:	80 83       	st	Z, r24
     ac4:	85 b5       	in	r24, 0x25	; 37
     ac6:	85 60       	ori	r24, 0x05	; 5
     ac8:	85 bd       	out	0x25, r24	; 37
     aca:	08 95       	ret

00000acc <__vector_16>:
     acc:	1f 92       	push	r1
     ace:	0f 92       	push	r0
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	0f 92       	push	r0
     ad4:	11 24       	eor	r1, r1
     ad6:	2f 93       	push	r18
     ad8:	3f 93       	push	r19
     ada:	4f 93       	push	r20
     adc:	5f 93       	push	r21
     ade:	6f 93       	push	r22
     ae0:	7f 93       	push	r23
     ae2:	8f 93       	push	r24
     ae4:	9f 93       	push	r25
     ae6:	af 93       	push	r26
     ae8:	bf 93       	push	r27
     aea:	ef 93       	push	r30
     aec:	ff 93       	push	r31
     aee:	e0 91 7b 03 	lds	r30, 0x037B	; 0x80037b <cb_ptr>
     af2:	f0 91 7c 03 	lds	r31, 0x037C	; 0x80037c <cb_ptr+0x1>
     af6:	30 97       	sbiw	r30, 0x00	; 0
     af8:	09 f0       	breq	.+2      	; 0xafc <__vector_16+0x30>
     afa:	09 95       	icall
     afc:	ff 91       	pop	r31
     afe:	ef 91       	pop	r30
     b00:	bf 91       	pop	r27
     b02:	af 91       	pop	r26
     b04:	9f 91       	pop	r25
     b06:	8f 91       	pop	r24
     b08:	7f 91       	pop	r23
     b0a:	6f 91       	pop	r22
     b0c:	5f 91       	pop	r21
     b0e:	4f 91       	pop	r20
     b10:	3f 91       	pop	r19
     b12:	2f 91       	pop	r18
     b14:	0f 90       	pop	r0
     b16:	0f be       	out	0x3f, r0	; 63
     b18:	0f 90       	pop	r0
     b1a:	1f 90       	pop	r1
     b1c:	18 95       	reti

00000b1e <init_board>:
}

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
     b1e:	8f 92       	push	r8
     b20:	9f 92       	push	r9
     b22:	af 92       	push	r10
     b24:	bf 92       	push	r11
     b26:	cf 92       	push	r12
     b28:	df 92       	push	r13
     b2a:	ef 92       	push	r14
     b2c:	0f 93       	push	r16
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
     b2e:	88 e5       	ldi	r24, 0x58	; 88
     b30:	93 e0       	ldi	r25, 0x03	; 3
     b32:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <buffer_init>
	buffer_init(&_com_tx_buffer);
     b36:	85 e3       	ldi	r24, 0x35	; 53
     b38:	93 e0       	ldi	r25, 0x03	; 3
     b3a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
     b3e:	0f 2e       	mov	r0, r31
     b40:	f5 e3       	ldi	r31, 0x35	; 53
     b42:	8f 2e       	mov	r8, r31
     b44:	f5 e0       	ldi	r31, 0x05	; 5
     b46:	9f 2e       	mov	r9, r31
     b48:	f0 2d       	mov	r31, r0
     b4a:	0f 2e       	mov	r0, r31
     b4c:	f5 e3       	ldi	r31, 0x35	; 53
     b4e:	af 2e       	mov	r10, r31
     b50:	f3 e0       	ldi	r31, 0x03	; 3
     b52:	bf 2e       	mov	r11, r31
     b54:	f0 2d       	mov	r31, r0
     b56:	0f 2e       	mov	r0, r31
     b58:	f8 e5       	ldi	r31, 0x58	; 88
     b5a:	cf 2e       	mov	r12, r31
     b5c:	f3 e0       	ldi	r31, 0x03	; 3
     b5e:	df 2e       	mov	r13, r31
     b60:	f0 2d       	mov	r31, r0
     b62:	e1 2c       	mov	r14, r1
     b64:	00 e0       	ldi	r16, 0x00	; 0
     b66:	23 e0       	ldi	r18, 0x03	; 3
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	52 ec       	ldi	r21, 0xC2	; 194
     b6c:	61 e0       	ldi	r22, 0x01	; 1
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	0e 94 49 08 	call	0x1092	; 0x1092 <serial_new_instance>
     b76:	90 93 80 03 	sts	0x0380, r25	; 0x800380 <_com_serial_instance+0x1>
     b7a:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <_com_serial_instance>
	
	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
     b7e:	88 b1       	in	r24, 0x08	; 8
     b80:	83 6c       	ori	r24, 0xC3	; 195
     b82:	88 b9       	out	0x08, r24	; 8
	PORTD |= _BV(PORTD3);
     b84:	5b 9a       	sbi	0x0b, 3	; 11
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
     b86:	8a b1       	in	r24, 0x0a	; 10
     b88:	84 67       	ori	r24, 0x74	; 116
     b8a:	8a b9       	out	0x0a, r24	; 10
	// G (enable output) high
	PORTD |= _BV(PORTD6);
     b8c:	5e 9a       	sbi	0x0b, 6	; 11
	
	// Column pins to output
	DDRA |= 0xFF;
     b8e:	81 b1       	in	r24, 0x01	; 1
     b90:	8f ef       	ldi	r24, 0xFF	; 255
     b92:	81 b9       	out	0x01, r24	; 1
	DDRB |= _BV(DDB0) | _BV(DDB1);
     b94:	84 b1       	in	r24, 0x04	; 4
     b96:	83 60       	ori	r24, 0x03	; 3
     b98:	84 b9       	out	0x04, r24	; 4
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
     b9a:	84 b1       	in	r24, 0x04	; 4
     b9c:	8c 63       	ori	r24, 0x3C	; 60
     b9e:	84 b9       	out	0x04, r24	; 4
}
     ba0:	0f 91       	pop	r16
     ba2:	ef 90       	pop	r14
     ba4:	df 90       	pop	r13
     ba6:	cf 90       	pop	r12
     ba8:	bf 90       	pop	r11
     baa:	af 90       	pop	r10
     bac:	9f 90       	pop	r9
     bae:	8f 90       	pop	r8
     bb0:	08 95       	ret

00000bb2 <switch_in>:
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
		PORTB &= 0b11000011;
     bb2:	95 b1       	in	r25, 0x05	; 5
     bb4:	93 7c       	andi	r25, 0xC3	; 195
     bb6:	95 b9       	out	0x05, r25	; 5
		PORTB |= task_no << 2;
     bb8:	25 b1       	in	r18, 0x05	; 5
     bba:	34 e0       	ldi	r19, 0x04	; 4
     bbc:	83 9f       	mul	r24, r19
     bbe:	c0 01       	movw	r24, r0
     bc0:	11 24       	eor	r1, r1
     bc2:	82 2b       	or	r24, r18
     bc4:	85 b9       	out	0x05, r24	; 5
     bc6:	08 95       	ret

00000bc8 <switch_out>:
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
		PORTB &= 0b11000011;
     bc8:	85 b1       	in	r24, 0x05	; 5
     bca:	83 7c       	andi	r24, 0xC3	; 195
     bcc:	85 b9       	out	0x05, r24	; 5
     bce:	08 95       	ret

00000bd0 <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
     bd0:	fc 01       	movw	r30, r24
	buffer->in_i = 0;
     bd2:	10 a2       	std	Z+32, r1	; 0x20
	buffer->out_i = 0;
     bd4:	11 a2       	std	Z+33, r1	; 0x21
	buffer->no_in_buffer = 0;
     bd6:	12 a2       	std	Z+34, r1	; 0x22
     bd8:	08 95       	ret

00000bda <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
     bda:	fc 01       	movw	r30, r24
	if (buffer->no_in_buffer > 0) {
     bdc:	82 a1       	ldd	r24, Z+34	; 0x22
     bde:	88 23       	and	r24, r24
     be0:	d9 f0       	breq	.+54     	; 0xc18 <buffer_get_item+0x3e>
		*item = buffer->storage[buffer->out_i];
     be2:	81 a1       	ldd	r24, Z+33	; 0x21
     be4:	df 01       	movw	r26, r30
     be6:	a8 0f       	add	r26, r24
     be8:	b1 1d       	adc	r27, r1
     bea:	8c 91       	ld	r24, X
     bec:	db 01       	movw	r26, r22
     bee:	8c 93       	st	X, r24
		buffer->out_i = INCREMENT(buffer->out_i);
     bf0:	21 a1       	ldd	r18, Z+33	; 0x21
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	2f 5f       	subi	r18, 0xFF	; 255
     bf6:	3f 4f       	sbci	r19, 0xFF	; 255
     bf8:	2f 71       	andi	r18, 0x1F	; 31
     bfa:	30 78       	andi	r19, 0x80	; 128
     bfc:	33 23       	and	r19, r19
     bfe:	34 f4       	brge	.+12     	; 0xc0c <buffer_get_item+0x32>
     c00:	21 50       	subi	r18, 0x01	; 1
     c02:	31 09       	sbc	r19, r1
     c04:	20 6e       	ori	r18, 0xE0	; 224
     c06:	3f 6f       	ori	r19, 0xFF	; 255
     c08:	2f 5f       	subi	r18, 0xFF	; 255
     c0a:	3f 4f       	sbci	r19, 0xFF	; 255
     c0c:	21 a3       	std	Z+33, r18	; 0x21
		buffer->no_in_buffer--;
     c0e:	82 a1       	ldd	r24, Z+34	; 0x22
     c10:	81 50       	subi	r24, 0x01	; 1
     c12:	82 a3       	std	Z+34, r24	; 0x22
		return BUFFER_OK;
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	08 95       	ret
	}
	return BUFFER_EMPTY;
     c18:	81 e0       	ldi	r24, 0x01	; 1
}
     c1a:	08 95       	ret

00000c1c <buffer_put_item>:
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
	if (buffer->no_in_buffer<BUFFER_SIZE) {
     c1c:	fc 01       	movw	r30, r24
     c1e:	42 a1       	ldd	r20, Z+34	; 0x22
     c20:	40 32       	cpi	r20, 0x20	; 32
     c22:	b8 f4       	brcc	.+46     	; 0xc52 <buffer_put_item+0x36>
		buffer->storage[buffer->in_i] = item;
     c24:	20 a1       	ldd	r18, Z+32	; 0x20
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	e2 0f       	add	r30, r18
     c2a:	f3 1f       	adc	r31, r19
     c2c:	60 83       	st	Z, r22
		buffer->in_i = INCREMENT(buffer->in_i);
     c2e:	2f 5f       	subi	r18, 0xFF	; 255
     c30:	3f 4f       	sbci	r19, 0xFF	; 255
     c32:	2f 71       	andi	r18, 0x1F	; 31
     c34:	30 78       	andi	r19, 0x80	; 128
     c36:	33 23       	and	r19, r19
     c38:	34 f4       	brge	.+12     	; 0xc46 <buffer_put_item+0x2a>
     c3a:	21 50       	subi	r18, 0x01	; 1
     c3c:	31 09       	sbc	r19, r1
     c3e:	20 6e       	ori	r18, 0xE0	; 224
     c40:	3f 6f       	ori	r19, 0xFF	; 255
     c42:	2f 5f       	subi	r18, 0xFF	; 255
     c44:	3f 4f       	sbci	r19, 0xFF	; 255
     c46:	fc 01       	movw	r30, r24
     c48:	20 a3       	std	Z+32, r18	; 0x20
		buffer->no_in_buffer++;
     c4a:	4f 5f       	subi	r20, 0xFF	; 255
     c4c:	42 a3       	std	Z+34, r20	; 0x22
		return BUFFER_OK;
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	08 95       	ret
	}
	return BUFFER_FULL;
     c52:	82 e0       	ldi	r24, 0x02	; 2
}
     c54:	08 95       	ret

00000c56 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     c56:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c58:	03 96       	adiw	r24, 0x03	; 3
     c5a:	92 83       	std	Z+2, r25	; 0x02
     c5c:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     c5e:	2f ef       	ldi	r18, 0xFF	; 255
     c60:	3f ef       	ldi	r19, 0xFF	; 255
     c62:	34 83       	std	Z+4, r19	; 0x04
     c64:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c66:	96 83       	std	Z+6, r25	; 0x06
     c68:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c6a:	90 87       	std	Z+8, r25	; 0x08
     c6c:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     c6e:	10 82       	st	Z, r1
     c70:	08 95       	ret

00000c72 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     c72:	fc 01       	movw	r30, r24
     c74:	11 86       	std	Z+9, r1	; 0x09
     c76:	10 86       	std	Z+8, r1	; 0x08
     c78:	08 95       	ret

00000c7a <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
     c7e:	9c 01       	movw	r18, r24
     c80:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     c82:	dc 01       	movw	r26, r24
     c84:	11 96       	adiw	r26, 0x01	; 1
     c86:	cd 91       	ld	r28, X+
     c88:	dc 91       	ld	r29, X
     c8a:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     c8c:	d3 83       	std	Z+3, r29	; 0x03
     c8e:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     c90:	8c 81       	ldd	r24, Y+4	; 0x04
     c92:	9d 81       	ldd	r25, Y+5	; 0x05
     c94:	95 83       	std	Z+5, r25	; 0x05
     c96:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     c98:	8c 81       	ldd	r24, Y+4	; 0x04
     c9a:	9d 81       	ldd	r25, Y+5	; 0x05
     c9c:	dc 01       	movw	r26, r24
     c9e:	13 96       	adiw	r26, 0x03	; 3
     ca0:	7c 93       	st	X, r23
     ca2:	6e 93       	st	-X, r22
     ca4:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     ca6:	7d 83       	std	Y+5, r23	; 0x05
     ca8:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     caa:	31 87       	std	Z+9, r19	; 0x09
     cac:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     cae:	f9 01       	movw	r30, r18
     cb0:	80 81       	ld	r24, Z
     cb2:	8f 5f       	subi	r24, 0xFF	; 255
     cb4:	80 83       	st	Z, r24
}
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	08 95       	ret

00000cbc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     cc2:	48 81       	ld	r20, Y
     cc4:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     cc6:	4f 3f       	cpi	r20, 0xFF	; 255
     cc8:	2f ef       	ldi	r18, 0xFF	; 255
     cca:	52 07       	cpc	r21, r18
     ccc:	21 f4       	brne	.+8      	; 0xcd6 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     cce:	fc 01       	movw	r30, r24
     cd0:	a7 81       	ldd	r26, Z+7	; 0x07
     cd2:	b0 85       	ldd	r27, Z+8	; 0x08
     cd4:	0d c0       	rjmp	.+26     	; 0xcf0 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     cd6:	dc 01       	movw	r26, r24
     cd8:	13 96       	adiw	r26, 0x03	; 3
     cda:	01 c0       	rjmp	.+2      	; 0xcde <vListInsert+0x22>
     cdc:	df 01       	movw	r26, r30
     cde:	12 96       	adiw	r26, 0x02	; 2
     ce0:	ed 91       	ld	r30, X+
     ce2:	fc 91       	ld	r31, X
     ce4:	13 97       	sbiw	r26, 0x03	; 3
     ce6:	20 81       	ld	r18, Z
     ce8:	31 81       	ldd	r19, Z+1	; 0x01
     cea:	42 17       	cp	r20, r18
     cec:	53 07       	cpc	r21, r19
     cee:	b0 f7       	brcc	.-20     	; 0xcdc <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     cf0:	12 96       	adiw	r26, 0x02	; 2
     cf2:	ed 91       	ld	r30, X+
     cf4:	fc 91       	ld	r31, X
     cf6:	13 97       	sbiw	r26, 0x03	; 3
     cf8:	fb 83       	std	Y+3, r31	; 0x03
     cfa:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     cfc:	d5 83       	std	Z+5, r29	; 0x05
     cfe:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     d00:	bd 83       	std	Y+5, r27	; 0x05
     d02:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	dc 93       	st	X, r29
     d08:	ce 93       	st	-X, r28
     d0a:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     d0c:	99 87       	std	Y+9, r25	; 0x09
     d0e:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     d10:	fc 01       	movw	r30, r24
     d12:	20 81       	ld	r18, Z
     d14:	2f 5f       	subi	r18, 0xFF	; 255
     d16:	20 83       	st	Z, r18
}
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	08 95       	ret

00000d1e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     d24:	a0 85       	ldd	r26, Z+8	; 0x08
     d26:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     d28:	c2 81       	ldd	r28, Z+2	; 0x02
     d2a:	d3 81       	ldd	r29, Z+3	; 0x03
     d2c:	84 81       	ldd	r24, Z+4	; 0x04
     d2e:	95 81       	ldd	r25, Z+5	; 0x05
     d30:	9d 83       	std	Y+5, r25	; 0x05
     d32:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     d34:	c4 81       	ldd	r28, Z+4	; 0x04
     d36:	d5 81       	ldd	r29, Z+5	; 0x05
     d38:	82 81       	ldd	r24, Z+2	; 0x02
     d3a:	93 81       	ldd	r25, Z+3	; 0x03
     d3c:	9b 83       	std	Y+3, r25	; 0x03
     d3e:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     d40:	11 96       	adiw	r26, 0x01	; 1
     d42:	cd 91       	ld	r28, X+
     d44:	dc 91       	ld	r29, X
     d46:	12 97       	sbiw	r26, 0x02	; 2
     d48:	ce 17       	cp	r28, r30
     d4a:	df 07       	cpc	r29, r31
     d4c:	31 f4       	brne	.+12     	; 0xd5a <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     d4e:	8c 81       	ldd	r24, Y+4	; 0x04
     d50:	9d 81       	ldd	r25, Y+5	; 0x05
     d52:	12 96       	adiw	r26, 0x02	; 2
     d54:	9c 93       	st	X, r25
     d56:	8e 93       	st	-X, r24
     d58:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     d5a:	11 86       	std	Z+9, r1	; 0x09
     d5c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     d5e:	8c 91       	ld	r24, X
     d60:	81 50       	subi	r24, 0x01	; 1
     d62:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	08 95       	ret

00000d6a <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     d6a:	31 e1       	ldi	r19, 0x11	; 17
     d6c:	fc 01       	movw	r30, r24
     d6e:	30 83       	st	Z, r19
     d70:	31 97       	sbiw	r30, 0x01	; 1
     d72:	22 e2       	ldi	r18, 0x22	; 34
     d74:	20 83       	st	Z, r18
     d76:	31 97       	sbiw	r30, 0x01	; 1
     d78:	a3 e3       	ldi	r26, 0x33	; 51
     d7a:	a0 83       	st	Z, r26
     d7c:	31 97       	sbiw	r30, 0x01	; 1
     d7e:	60 83       	st	Z, r22
     d80:	31 97       	sbiw	r30, 0x01	; 1
     d82:	70 83       	st	Z, r23
     d84:	31 97       	sbiw	r30, 0x01	; 1
     d86:	10 82       	st	Z, r1
     d88:	31 97       	sbiw	r30, 0x01	; 1
     d8a:	60 e8       	ldi	r22, 0x80	; 128
     d8c:	60 83       	st	Z, r22
     d8e:	31 97       	sbiw	r30, 0x01	; 1
     d90:	10 82       	st	Z, r1
     d92:	31 97       	sbiw	r30, 0x01	; 1
     d94:	62 e0       	ldi	r22, 0x02	; 2
     d96:	60 83       	st	Z, r22
     d98:	31 97       	sbiw	r30, 0x01	; 1
     d9a:	63 e0       	ldi	r22, 0x03	; 3
     d9c:	60 83       	st	Z, r22
     d9e:	31 97       	sbiw	r30, 0x01	; 1
     da0:	64 e0       	ldi	r22, 0x04	; 4
     da2:	60 83       	st	Z, r22
     da4:	31 97       	sbiw	r30, 0x01	; 1
     da6:	65 e0       	ldi	r22, 0x05	; 5
     da8:	60 83       	st	Z, r22
     daa:	31 97       	sbiw	r30, 0x01	; 1
     dac:	66 e0       	ldi	r22, 0x06	; 6
     dae:	60 83       	st	Z, r22
     db0:	31 97       	sbiw	r30, 0x01	; 1
     db2:	67 e0       	ldi	r22, 0x07	; 7
     db4:	60 83       	st	Z, r22
     db6:	31 97       	sbiw	r30, 0x01	; 1
     db8:	68 e0       	ldi	r22, 0x08	; 8
     dba:	60 83       	st	Z, r22
     dbc:	31 97       	sbiw	r30, 0x01	; 1
     dbe:	69 e0       	ldi	r22, 0x09	; 9
     dc0:	60 83       	st	Z, r22
     dc2:	31 97       	sbiw	r30, 0x01	; 1
     dc4:	60 e1       	ldi	r22, 0x10	; 16
     dc6:	60 83       	st	Z, r22
     dc8:	31 97       	sbiw	r30, 0x01	; 1
     dca:	30 83       	st	Z, r19
     dcc:	31 97       	sbiw	r30, 0x01	; 1
     dce:	32 e1       	ldi	r19, 0x12	; 18
     dd0:	30 83       	st	Z, r19
     dd2:	31 97       	sbiw	r30, 0x01	; 1
     dd4:	33 e1       	ldi	r19, 0x13	; 19
     dd6:	30 83       	st	Z, r19
     dd8:	31 97       	sbiw	r30, 0x01	; 1
     dda:	34 e1       	ldi	r19, 0x14	; 20
     ddc:	30 83       	st	Z, r19
     dde:	31 97       	sbiw	r30, 0x01	; 1
     de0:	35 e1       	ldi	r19, 0x15	; 21
     de2:	30 83       	st	Z, r19
     de4:	31 97       	sbiw	r30, 0x01	; 1
     de6:	36 e1       	ldi	r19, 0x16	; 22
     de8:	30 83       	st	Z, r19
     dea:	31 97       	sbiw	r30, 0x01	; 1
     dec:	37 e1       	ldi	r19, 0x17	; 23
     dee:	30 83       	st	Z, r19
     df0:	31 97       	sbiw	r30, 0x01	; 1
     df2:	38 e1       	ldi	r19, 0x18	; 24
     df4:	30 83       	st	Z, r19
     df6:	31 97       	sbiw	r30, 0x01	; 1
     df8:	39 e1       	ldi	r19, 0x19	; 25
     dfa:	30 83       	st	Z, r19
     dfc:	31 97       	sbiw	r30, 0x01	; 1
     dfe:	30 e2       	ldi	r19, 0x20	; 32
     e00:	30 83       	st	Z, r19
     e02:	31 97       	sbiw	r30, 0x01	; 1
     e04:	31 e2       	ldi	r19, 0x21	; 33
     e06:	30 83       	st	Z, r19
     e08:	31 97       	sbiw	r30, 0x01	; 1
     e0a:	20 83       	st	Z, r18
     e0c:	31 97       	sbiw	r30, 0x01	; 1
     e0e:	23 e2       	ldi	r18, 0x23	; 35
     e10:	20 83       	st	Z, r18
     e12:	31 97       	sbiw	r30, 0x01	; 1
     e14:	40 83       	st	Z, r20
     e16:	31 97       	sbiw	r30, 0x01	; 1
     e18:	50 83       	st	Z, r21
     e1a:	31 97       	sbiw	r30, 0x01	; 1
     e1c:	26 e2       	ldi	r18, 0x26	; 38
     e1e:	20 83       	st	Z, r18
     e20:	31 97       	sbiw	r30, 0x01	; 1
     e22:	27 e2       	ldi	r18, 0x27	; 39
     e24:	20 83       	st	Z, r18
     e26:	31 97       	sbiw	r30, 0x01	; 1
     e28:	28 e2       	ldi	r18, 0x28	; 40
     e2a:	20 83       	st	Z, r18
     e2c:	31 97       	sbiw	r30, 0x01	; 1
     e2e:	29 e2       	ldi	r18, 0x29	; 41
     e30:	20 83       	st	Z, r18
     e32:	31 97       	sbiw	r30, 0x01	; 1
     e34:	20 e3       	ldi	r18, 0x30	; 48
     e36:	20 83       	st	Z, r18
     e38:	31 97       	sbiw	r30, 0x01	; 1
     e3a:	21 e3       	ldi	r18, 0x31	; 49
     e3c:	20 83       	st	Z, r18
     e3e:	86 97       	sbiw	r24, 0x26	; 38
     e40:	08 95       	ret

00000e42 <xPortStartScheduler>:
     e42:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     e46:	85 ee       	ldi	r24, 0xE5	; 229
     e48:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     e4c:	8b e0       	ldi	r24, 0x0B	; 11
     e4e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     e52:	ef e6       	ldi	r30, 0x6F	; 111
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	82 60       	ori	r24, 0x02	; 2
     e5a:	80 83       	st	Z, r24
     e5c:	a0 91 e4 09 	lds	r26, 0x09E4	; 0x8009e4 <pxCurrentTCB>
     e60:	b0 91 e5 09 	lds	r27, 0x09E5	; 0x8009e5 <pxCurrentTCB+0x1>
     e64:	cd 91       	ld	r28, X+
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	dd 91       	ld	r29, X+
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	ff 91       	pop	r31
     e6e:	ef 91       	pop	r30
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	bf 91       	pop	r27
     e76:	af 91       	pop	r26
     e78:	9f 91       	pop	r25
     e7a:	8f 91       	pop	r24
     e7c:	7f 91       	pop	r23
     e7e:	6f 91       	pop	r22
     e80:	5f 91       	pop	r21
     e82:	4f 91       	pop	r20
     e84:	3f 91       	pop	r19
     e86:	2f 91       	pop	r18
     e88:	1f 91       	pop	r17
     e8a:	0f 91       	pop	r16
     e8c:	ff 90       	pop	r15
     e8e:	ef 90       	pop	r14
     e90:	df 90       	pop	r13
     e92:	cf 90       	pop	r12
     e94:	bf 90       	pop	r11
     e96:	af 90       	pop	r10
     e98:	9f 90       	pop	r9
     e9a:	8f 90       	pop	r8
     e9c:	7f 90       	pop	r7
     e9e:	6f 90       	pop	r6
     ea0:	5f 90       	pop	r5
     ea2:	4f 90       	pop	r4
     ea4:	3f 90       	pop	r3
     ea6:	2f 90       	pop	r2
     ea8:	1f 90       	pop	r1
     eaa:	0f 90       	pop	r0
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	0f 90       	pop	r0
     eb0:	08 95       	ret
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	08 95       	ret

00000eb6 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     eb6:	0f 92       	push	r0
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	0f 92       	push	r0
     ebe:	1f 92       	push	r1
     ec0:	11 24       	eor	r1, r1
     ec2:	2f 92       	push	r2
     ec4:	3f 92       	push	r3
     ec6:	4f 92       	push	r4
     ec8:	5f 92       	push	r5
     eca:	6f 92       	push	r6
     ecc:	7f 92       	push	r7
     ece:	8f 92       	push	r8
     ed0:	9f 92       	push	r9
     ed2:	af 92       	push	r10
     ed4:	bf 92       	push	r11
     ed6:	cf 92       	push	r12
     ed8:	df 92       	push	r13
     eda:	ef 92       	push	r14
     edc:	ff 92       	push	r15
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
     ee2:	2f 93       	push	r18
     ee4:	3f 93       	push	r19
     ee6:	4f 93       	push	r20
     ee8:	5f 93       	push	r21
     eea:	6f 93       	push	r22
     eec:	7f 93       	push	r23
     eee:	8f 93       	push	r24
     ef0:	9f 93       	push	r25
     ef2:	af 93       	push	r26
     ef4:	bf 93       	push	r27
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	ef 93       	push	r30
     efc:	ff 93       	push	r31
     efe:	a0 91 e4 09 	lds	r26, 0x09E4	; 0x8009e4 <pxCurrentTCB>
     f02:	b0 91 e5 09 	lds	r27, 0x09E5	; 0x8009e5 <pxCurrentTCB+0x1>
     f06:	0d b6       	in	r0, 0x3d	; 61
     f08:	0d 92       	st	X+, r0
     f0a:	0e b6       	in	r0, 0x3e	; 62
     f0c:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     f0e:	0e 94 39 10 	call	0x2072	; 0x2072 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     f12:	a0 91 e4 09 	lds	r26, 0x09E4	; 0x8009e4 <pxCurrentTCB>
     f16:	b0 91 e5 09 	lds	r27, 0x09E5	; 0x8009e5 <pxCurrentTCB+0x1>
     f1a:	cd 91       	ld	r28, X+
     f1c:	cd bf       	out	0x3d, r28	; 61
     f1e:	dd 91       	ld	r29, X+
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	ff 91       	pop	r31
     f24:	ef 91       	pop	r30
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	bf 91       	pop	r27
     f2c:	af 91       	pop	r26
     f2e:	9f 91       	pop	r25
     f30:	8f 91       	pop	r24
     f32:	7f 91       	pop	r23
     f34:	6f 91       	pop	r22
     f36:	5f 91       	pop	r21
     f38:	4f 91       	pop	r20
     f3a:	3f 91       	pop	r19
     f3c:	2f 91       	pop	r18
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	ff 90       	pop	r15
     f44:	ef 90       	pop	r14
     f46:	df 90       	pop	r13
     f48:	cf 90       	pop	r12
     f4a:	bf 90       	pop	r11
     f4c:	af 90       	pop	r10
     f4e:	9f 90       	pop	r9
     f50:	8f 90       	pop	r8
     f52:	7f 90       	pop	r7
     f54:	6f 90       	pop	r6
     f56:	5f 90       	pop	r5
     f58:	4f 90       	pop	r4
     f5a:	3f 90       	pop	r3
     f5c:	2f 90       	pop	r2
     f5e:	1f 90       	pop	r1
     f60:	0f 90       	pop	r0
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	0f 90       	pop	r0

	asm volatile ( "ret" );
     f66:	08 95       	ret

00000f68 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     f68:	0f 92       	push	r0
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	0f 92       	push	r0
     f70:	1f 92       	push	r1
     f72:	11 24       	eor	r1, r1
     f74:	2f 92       	push	r2
     f76:	3f 92       	push	r3
     f78:	4f 92       	push	r4
     f7a:	5f 92       	push	r5
     f7c:	6f 92       	push	r6
     f7e:	7f 92       	push	r7
     f80:	8f 92       	push	r8
     f82:	9f 92       	push	r9
     f84:	af 92       	push	r10
     f86:	bf 92       	push	r11
     f88:	cf 92       	push	r12
     f8a:	df 92       	push	r13
     f8c:	ef 92       	push	r14
     f8e:	ff 92       	push	r15
     f90:	0f 93       	push	r16
     f92:	1f 93       	push	r17
     f94:	2f 93       	push	r18
     f96:	3f 93       	push	r19
     f98:	4f 93       	push	r20
     f9a:	5f 93       	push	r21
     f9c:	6f 93       	push	r22
     f9e:	7f 93       	push	r23
     fa0:	8f 93       	push	r24
     fa2:	9f 93       	push	r25
     fa4:	af 93       	push	r26
     fa6:	bf 93       	push	r27
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	ef 93       	push	r30
     fae:	ff 93       	push	r31
     fb0:	a0 91 e4 09 	lds	r26, 0x09E4	; 0x8009e4 <pxCurrentTCB>
     fb4:	b0 91 e5 09 	lds	r27, 0x09E5	; 0x8009e5 <pxCurrentTCB+0x1>
     fb8:	0d b6       	in	r0, 0x3d	; 61
     fba:	0d 92       	st	X+, r0
     fbc:	0e b6       	in	r0, 0x3e	; 62
     fbe:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     fc0:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <xTaskIncrementTick>
     fc4:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     fc6:	0e 94 39 10 	call	0x2072	; 0x2072 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     fca:	a0 91 e4 09 	lds	r26, 0x09E4	; 0x8009e4 <pxCurrentTCB>
     fce:	b0 91 e5 09 	lds	r27, 0x09E5	; 0x8009e5 <pxCurrentTCB+0x1>
     fd2:	cd 91       	ld	r28, X+
     fd4:	cd bf       	out	0x3d, r28	; 61
     fd6:	dd 91       	ld	r29, X+
     fd8:	de bf       	out	0x3e, r29	; 62
     fda:	ff 91       	pop	r31
     fdc:	ef 91       	pop	r30
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	bf 91       	pop	r27
     fe4:	af 91       	pop	r26
     fe6:	9f 91       	pop	r25
     fe8:	8f 91       	pop	r24
     fea:	7f 91       	pop	r23
     fec:	6f 91       	pop	r22
     fee:	5f 91       	pop	r21
     ff0:	4f 91       	pop	r20
     ff2:	3f 91       	pop	r19
     ff4:	2f 91       	pop	r18
     ff6:	1f 91       	pop	r17
     ff8:	0f 91       	pop	r16
     ffa:	ff 90       	pop	r15
     ffc:	ef 90       	pop	r14
     ffe:	df 90       	pop	r13
    1000:	cf 90       	pop	r12
    1002:	bf 90       	pop	r11
    1004:	af 90       	pop	r10
    1006:	9f 90       	pop	r9
    1008:	8f 90       	pop	r8
    100a:	7f 90       	pop	r7
    100c:	6f 90       	pop	r6
    100e:	5f 90       	pop	r5
    1010:	4f 90       	pop	r4
    1012:	3f 90       	pop	r3
    1014:	2f 90       	pop	r2
    1016:	1f 90       	pop	r1
    1018:	0f 90       	pop	r0
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	0f 90       	pop	r0

	asm volatile ( "ret" );
    101e:	08 95       	ret

00001020 <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
    1020:	0e 94 b4 07 	call	0xf68	; 0xf68 <vPortYieldFromTick>
		asm volatile ( "reti" );
    1024:	18 95       	reti

00001026 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    102c:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    1030:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <pucAlignedHeap.1965>
    1034:	90 91 82 03 	lds	r25, 0x0382	; 0x800382 <pucAlignedHeap.1965+0x1>
    1038:	89 2b       	or	r24, r25
    103a:	31 f4       	brne	.+12     	; 0x1048 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    103c:	86 e8       	ldi	r24, 0x86	; 134
    103e:	93 e0       	ldi	r25, 0x03	; 3
    1040:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <pucAlignedHeap.1965+0x1>
    1044:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <pucAlignedHeap.1965>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1048:	20 91 83 03 	lds	r18, 0x0383	; 0x800383 <xNextFreeByte>
    104c:	30 91 84 03 	lds	r19, 0x0384	; 0x800384 <xNextFreeByte+0x1>
    1050:	ce 01       	movw	r24, r28
    1052:	82 0f       	add	r24, r18
    1054:	93 1f       	adc	r25, r19
    1056:	8b 3d       	cpi	r24, 0xDB	; 219
    1058:	45 e0       	ldi	r20, 0x05	; 5
    105a:	94 07       	cpc	r25, r20
    105c:	70 f4       	brcc	.+28     	; 0x107a <pvPortMalloc+0x54>
    105e:	28 17       	cp	r18, r24
    1060:	39 07       	cpc	r19, r25
    1062:	70 f4       	brcc	.+28     	; 0x1080 <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1064:	c0 91 81 03 	lds	r28, 0x0381	; 0x800381 <pucAlignedHeap.1965>
    1068:	d0 91 82 03 	lds	r29, 0x0382	; 0x800382 <pucAlignedHeap.1965+0x1>
    106c:	c2 0f       	add	r28, r18
    106e:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
    1070:	90 93 84 03 	sts	0x0384, r25	; 0x800384 <xNextFreeByte+0x1>
    1074:	80 93 83 03 	sts	0x0383, r24	; 0x800383 <xNextFreeByte>
    1078:	05 c0       	rjmp	.+10     	; 0x1084 <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    107a:	c0 e0       	ldi	r28, 0x00	; 0
    107c:	d0 e0       	ldi	r29, 0x00	; 0
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <pvPortMalloc+0x5e>
    1080:	c0 e0       	ldi	r28, 0x00	; 0
    1082:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1084:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    1088:	ce 01       	movw	r24, r28
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	08 95       	ret

00001090 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1090:	08 95       	ret

00001092 <serial_new_instance>:
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
}
    1092:	4f 92       	push	r4
    1094:	5f 92       	push	r5
    1096:	6f 92       	push	r6
    1098:	7f 92       	push	r7
    109a:	8f 92       	push	r8
    109c:	9f 92       	push	r9
    109e:	af 92       	push	r10
    10a0:	bf 92       	push	r11
    10a2:	cf 92       	push	r12
    10a4:	df 92       	push	r13
    10a6:	ff 92       	push	r15
    10a8:	0f 93       	push	r16
    10aa:	1f 93       	push	r17
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	f8 2e       	mov	r15, r24
    10b6:	2a 01       	movw	r4, r20
    10b8:	3b 01       	movw	r6, r22
    10ba:	88 e0       	ldi	r24, 0x08	; 8
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 94 71 14 	call	0x28e2	; 0x28e2 <malloc>
    10c2:	8c 01       	movw	r16, r24
    10c4:	8f 2d       	mov	r24, r15
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	fc 01       	movw	r30, r24
    10ce:	ef 59       	subi	r30, 0x9F	; 159
    10d0:	f6 4f       	sbci	r31, 0xF6	; 246
    10d2:	11 83       	std	Z+1, r17	; 0x01
    10d4:	00 83       	st	Z, r16
    10d6:	fc 01       	movw	r30, r24
    10d8:	e4 5f       	subi	r30, 0xF4	; 244
    10da:	fe 4f       	sbci	r31, 0xFE	; 254
    10dc:	80 81       	ld	r24, Z
    10de:	91 81       	ldd	r25, Z+1	; 0x01
    10e0:	d8 01       	movw	r26, r16
    10e2:	11 96       	adiw	r26, 0x01	; 1
    10e4:	9c 93       	st	X, r25
    10e6:	8e 93       	st	-X, r24
    10e8:	13 96       	adiw	r26, 0x03	; 3
    10ea:	bc 92       	st	X, r11
    10ec:	ae 92       	st	-X, r10
    10ee:	12 97       	sbiw	r26, 0x02	; 2
    10f0:	15 96       	adiw	r26, 0x05	; 5
    10f2:	dc 92       	st	X, r13
    10f4:	ce 92       	st	-X, r12
    10f6:	14 97       	sbiw	r26, 0x04	; 4
    10f8:	17 96       	adiw	r26, 0x07	; 7
    10fa:	9c 92       	st	X, r9
    10fc:	8e 92       	st	-X, r8
    10fe:	16 97       	sbiw	r26, 0x06	; 6
    1100:	ff b6       	in	r15, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	ed 91       	ld	r30, X+
    1106:	fc 91       	ld	r31, X
    1108:	11 97       	sbiw	r26, 0x01	; 1
    110a:	36 97       	sbiw	r30, 0x06	; 6
    110c:	80 81       	ld	r24, Z
    110e:	82 60       	ori	r24, 0x02	; 2
    1110:	80 83       	st	Z, r24
    1112:	cd 90       	ld	r12, X+
    1114:	dc 90       	ld	r13, X
    1116:	d3 01       	movw	r26, r6
    1118:	c2 01       	movw	r24, r4
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	aa 1f       	adc	r26, r26
    1120:	bb 1f       	adc	r27, r27
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	aa 1f       	adc	r26, r26
    1128:	bb 1f       	adc	r27, r27
    112a:	9c 01       	movw	r18, r24
    112c:	ad 01       	movw	r20, r26
    112e:	22 0f       	add	r18, r18
    1130:	33 1f       	adc	r19, r19
    1132:	44 1f       	adc	r20, r20
    1134:	55 1f       	adc	r21, r21
    1136:	60 e0       	ldi	r22, 0x00	; 0
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	81 ee       	ldi	r24, 0xE1	; 225
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	0e 94 49 14 	call	0x2892	; 0x2892 <__udivmodsi4>
    1142:	21 50       	subi	r18, 0x01	; 1
    1144:	f6 01       	movw	r30, r12
    1146:	32 97       	sbiw	r30, 0x02	; 2
    1148:	20 83       	st	Z, r18
    114a:	d8 01       	movw	r26, r16
    114c:	ed 91       	ld	r30, X+
    114e:	fc 91       	ld	r31, X
    1150:	11 97       	sbiw	r26, 0x01	; 1
    1152:	35 97       	sbiw	r30, 0x05	; 5
    1154:	88 e9       	ldi	r24, 0x98	; 152
    1156:	80 83       	st	Z, r24
    1158:	ed 91       	ld	r30, X+
    115a:	fc 91       	ld	r31, X
    115c:	34 97       	sbiw	r30, 0x04	; 4
    115e:	86 e0       	ldi	r24, 0x06	; 6
    1160:	80 83       	st	Z, r24
    1162:	ff be       	out	0x3f, r15	; 63
    1164:	c8 01       	movw	r24, r16
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	1f 91       	pop	r17
    116c:	0f 91       	pop	r16
    116e:	ff 90       	pop	r15
    1170:	df 90       	pop	r13
    1172:	cf 90       	pop	r12
    1174:	bf 90       	pop	r11
    1176:	af 90       	pop	r10
    1178:	9f 90       	pop	r9
    117a:	8f 90       	pop	r8
    117c:	7f 90       	pop	r7
    117e:	6f 90       	pop	r6
    1180:	5f 90       	pop	r5
    1182:	4f 90       	pop	r4
    1184:	08 95       	ret

00001186 <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    1186:	1f 92       	push	r1
    1188:	0f 92       	push	r0
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	0f 92       	push	r0
    118e:	11 24       	eor	r1, r1
    1190:	2f 93       	push	r18
    1192:	3f 93       	push	r19
    1194:	4f 93       	push	r20
    1196:	5f 93       	push	r21
    1198:	6f 93       	push	r22
    119a:	7f 93       	push	r23
    119c:	8f 93       	push	r24
    119e:	9f 93       	push	r25
    11a0:	af 93       	push	r26
    11a2:	bf 93       	push	r27
    11a4:	cf 93       	push	r28
    11a6:	ef 93       	push	r30
    11a8:	ff 93       	push	r31
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    11aa:	e0 91 61 09 	lds	r30, 0x0961	; 0x800961 <_ser_handle>
    11ae:	f0 91 62 09 	lds	r31, 0x0962	; 0x800962 <_ser_handle+0x1>
    11b2:	30 97       	sbiw	r30, 0x00	; 0
    11b4:	a1 f0       	breq	.+40     	; 0x11de <__vector_20+0x58>
		item = UDR0;
    11b6:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    11ba:	6c 2f       	mov	r22, r28
    11bc:	84 81       	ldd	r24, Z+4	; 0x04
    11be:	95 81       	ldd	r25, Z+5	; 0x05
    11c0:	0e 94 0e 06 	call	0xc1c	; 0xc1c <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    11c4:	80 91 61 09 	lds	r24, 0x0961	; 0x800961 <_ser_handle>
    11c8:	90 91 62 09 	lds	r25, 0x0962	; 0x800962 <_ser_handle+0x1>
    11cc:	dc 01       	movw	r26, r24
    11ce:	16 96       	adiw	r26, 0x06	; 6
    11d0:	ed 91       	ld	r30, X+
    11d2:	fc 91       	ld	r31, X
    11d4:	17 97       	sbiw	r26, 0x07	; 7
    11d6:	30 97       	sbiw	r30, 0x00	; 0
    11d8:	11 f0       	breq	.+4      	; 0x11de <__vector_20+0x58>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    11da:	6c 2f       	mov	r22, r28
    11dc:	09 95       	icall
		}
	}
}
    11de:	ff 91       	pop	r31
    11e0:	ef 91       	pop	r30
    11e2:	cf 91       	pop	r28
    11e4:	bf 91       	pop	r27
    11e6:	af 91       	pop	r26
    11e8:	9f 91       	pop	r25
    11ea:	8f 91       	pop	r24
    11ec:	7f 91       	pop	r23
    11ee:	6f 91       	pop	r22
    11f0:	5f 91       	pop	r21
    11f2:	4f 91       	pop	r20
    11f4:	3f 91       	pop	r19
    11f6:	2f 91       	pop	r18
    11f8:	0f 90       	pop	r0
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	0f 90       	pop	r0
    11fe:	1f 90       	pop	r1
    1200:	18 95       	reti

00001202 <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    1202:	1f 92       	push	r1
    1204:	0f 92       	push	r0
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	0f 92       	push	r0
    120a:	11 24       	eor	r1, r1
    120c:	2f 93       	push	r18
    120e:	3f 93       	push	r19
    1210:	4f 93       	push	r20
    1212:	5f 93       	push	r21
    1214:	6f 93       	push	r22
    1216:	7f 93       	push	r23
    1218:	8f 93       	push	r24
    121a:	9f 93       	push	r25
    121c:	af 93       	push	r26
    121e:	bf 93       	push	r27
    1220:	ef 93       	push	r30
    1222:	ff 93       	push	r31
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	1f 92       	push	r1
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    122e:	e0 91 61 09 	lds	r30, 0x0961	; 0x800961 <_ser_handle>
    1232:	f0 91 62 09 	lds	r31, 0x0962	; 0x800962 <_ser_handle+0x1>
    1236:	30 97       	sbiw	r30, 0x00	; 0
    1238:	99 f0       	breq	.+38     	; 0x1260 <__vector_21+0x5e>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    123a:	be 01       	movw	r22, r28
    123c:	6f 5f       	subi	r22, 0xFF	; 255
    123e:	7f 4f       	sbci	r23, 0xFF	; 255
    1240:	82 81       	ldd	r24, Z+2	; 0x02
    1242:	93 81       	ldd	r25, Z+3	; 0x03
    1244:	0e 94 ed 05 	call	0xbda	; 0xbda <buffer_get_item>
    1248:	81 11       	cpse	r24, r1
    124a:	04 c0       	rjmp	.+8      	; 0x1254 <__vector_21+0x52>
			UDR0 = item;
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1252:	0b c0       	rjmp	.+22     	; 0x126a <__vector_21+0x68>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    1254:	e1 ec       	ldi	r30, 0xC1	; 193
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	8f 7d       	andi	r24, 0xDF	; 223
    125c:	80 83       	st	Z, r24
    125e:	05 c0       	rjmp	.+10     	; 0x126a <__vector_21+0x68>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    1260:	e1 ec       	ldi	r30, 0xC1	; 193
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	8f 7d       	andi	r24, 0xDF	; 223
    1268:	80 83       	st	Z, r24
	}
}
    126a:	0f 90       	pop	r0
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	ff 91       	pop	r31
    1272:	ef 91       	pop	r30
    1274:	bf 91       	pop	r27
    1276:	af 91       	pop	r26
    1278:	9f 91       	pop	r25
    127a:	8f 91       	pop	r24
    127c:	7f 91       	pop	r23
    127e:	6f 91       	pop	r22
    1280:	5f 91       	pop	r21
    1282:	4f 91       	pop	r20
    1284:	3f 91       	pop	r19
    1286:	2f 91       	pop	r18
    1288:	0f 90       	pop	r0
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	0f 90       	pop	r0
    128e:	1f 90       	pop	r1
    1290:	18 95       	reti

00001292 <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    1292:	1f 92       	push	r1
    1294:	0f 92       	push	r0
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	0f 92       	push	r0
    129a:	11 24       	eor	r1, r1
    129c:	2f 93       	push	r18
    129e:	3f 93       	push	r19
    12a0:	4f 93       	push	r20
    12a2:	5f 93       	push	r21
    12a4:	6f 93       	push	r22
    12a6:	7f 93       	push	r23
    12a8:	8f 93       	push	r24
    12aa:	9f 93       	push	r25
    12ac:	af 93       	push	r26
    12ae:	bf 93       	push	r27
    12b0:	cf 93       	push	r28
    12b2:	ef 93       	push	r30
    12b4:	ff 93       	push	r31
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    12b6:	e0 91 63 09 	lds	r30, 0x0963	; 0x800963 <_ser_handle+0x2>
    12ba:	f0 91 64 09 	lds	r31, 0x0964	; 0x800964 <_ser_handle+0x3>
    12be:	30 97       	sbiw	r30, 0x00	; 0
    12c0:	a1 f0       	breq	.+40     	; 0x12ea <__vector_28+0x58>
		item = UDR1;
    12c2:	c0 91 ce 00 	lds	r28, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    12c6:	6c 2f       	mov	r22, r28
    12c8:	84 81       	ldd	r24, Z+4	; 0x04
    12ca:	95 81       	ldd	r25, Z+5	; 0x05
    12cc:	0e 94 0e 06 	call	0xc1c	; 0xc1c <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    12d0:	80 91 63 09 	lds	r24, 0x0963	; 0x800963 <_ser_handle+0x2>
    12d4:	90 91 64 09 	lds	r25, 0x0964	; 0x800964 <_ser_handle+0x3>
    12d8:	dc 01       	movw	r26, r24
    12da:	16 96       	adiw	r26, 0x06	; 6
    12dc:	ed 91       	ld	r30, X+
    12de:	fc 91       	ld	r31, X
    12e0:	17 97       	sbiw	r26, 0x07	; 7
    12e2:	30 97       	sbiw	r30, 0x00	; 0
    12e4:	11 f0       	breq	.+4      	; 0x12ea <__vector_28+0x58>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    12e6:	6c 2f       	mov	r22, r28
    12e8:	09 95       	icall
		}
	}
}
    12ea:	ff 91       	pop	r31
    12ec:	ef 91       	pop	r30
    12ee:	cf 91       	pop	r28
    12f0:	bf 91       	pop	r27
    12f2:	af 91       	pop	r26
    12f4:	9f 91       	pop	r25
    12f6:	8f 91       	pop	r24
    12f8:	7f 91       	pop	r23
    12fa:	6f 91       	pop	r22
    12fc:	5f 91       	pop	r21
    12fe:	4f 91       	pop	r20
    1300:	3f 91       	pop	r19
    1302:	2f 91       	pop	r18
    1304:	0f 90       	pop	r0
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	0f 90       	pop	r0
    130a:	1f 90       	pop	r1
    130c:	18 95       	reti

0000130e <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    130e:	1f 92       	push	r1
    1310:	0f 92       	push	r0
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	0f 92       	push	r0
    1316:	11 24       	eor	r1, r1
    1318:	2f 93       	push	r18
    131a:	3f 93       	push	r19
    131c:	4f 93       	push	r20
    131e:	5f 93       	push	r21
    1320:	6f 93       	push	r22
    1322:	7f 93       	push	r23
    1324:	8f 93       	push	r24
    1326:	9f 93       	push	r25
    1328:	af 93       	push	r26
    132a:	bf 93       	push	r27
    132c:	ef 93       	push	r30
    132e:	ff 93       	push	r31
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29
    1334:	1f 92       	push	r1
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    133a:	e0 91 63 09 	lds	r30, 0x0963	; 0x800963 <_ser_handle+0x2>
    133e:	f0 91 64 09 	lds	r31, 0x0964	; 0x800964 <_ser_handle+0x3>
    1342:	30 97       	sbiw	r30, 0x00	; 0
    1344:	99 f0       	breq	.+38     	; 0x136c <__vector_29+0x5e>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    1346:	be 01       	movw	r22, r28
    1348:	6f 5f       	subi	r22, 0xFF	; 255
    134a:	7f 4f       	sbci	r23, 0xFF	; 255
    134c:	82 81       	ldd	r24, Z+2	; 0x02
    134e:	93 81       	ldd	r25, Z+3	; 0x03
    1350:	0e 94 ed 05 	call	0xbda	; 0xbda <buffer_get_item>
    1354:	81 11       	cpse	r24, r1
    1356:	04 c0       	rjmp	.+8      	; 0x1360 <__vector_29+0x52>
			UDR1 = item;
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    135e:	0b c0       	rjmp	.+22     	; 0x1376 <__vector_29+0x68>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    1360:	e9 ec       	ldi	r30, 0xC9	; 201
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	8f 7d       	andi	r24, 0xDF	; 223
    1368:	80 83       	st	Z, r24
    136a:	05 c0       	rjmp	.+10     	; 0x1376 <__vector_29+0x68>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    136c:	e9 ec       	ldi	r30, 0xC9	; 201
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	8f 7d       	andi	r24, 0xDF	; 223
    1374:	80 83       	st	Z, r24
	}
}
    1376:	0f 90       	pop	r0
    1378:	df 91       	pop	r29
    137a:	cf 91       	pop	r28
    137c:	ff 91       	pop	r31
    137e:	ef 91       	pop	r30
    1380:	bf 91       	pop	r27
    1382:	af 91       	pop	r26
    1384:	9f 91       	pop	r25
    1386:	8f 91       	pop	r24
    1388:	7f 91       	pop	r23
    138a:	6f 91       	pop	r22
    138c:	5f 91       	pop	r21
    138e:	4f 91       	pop	r20
    1390:	3f 91       	pop	r19
    1392:	2f 91       	pop	r18
    1394:	0f 90       	pop	r0
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	0f 90       	pop	r0
    139a:	1f 90       	pop	r1
    139c:	18 95       	reti

0000139e <prvCopyDataToQueue>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    139e:	0f 93       	push	r16
    13a0:	1f 93       	push	r17
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	ec 01       	movw	r28, r24
    13a8:	04 2f       	mov	r16, r20
    13aa:	1a 8d       	ldd	r17, Y+26	; 0x1a
    13ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13ae:	81 11       	cpse	r24, r1
    13b0:	0c c0       	rjmp	.+24     	; 0x13ca <prvCopyDataToQueue+0x2c>
    13b2:	88 81       	ld	r24, Y
    13b4:	99 81       	ldd	r25, Y+1	; 0x01
    13b6:	89 2b       	or	r24, r25
    13b8:	09 f0       	breq	.+2      	; 0x13bc <prvCopyDataToQueue+0x1e>
    13ba:	44 c0       	rjmp	.+136    	; 0x1444 <prvCopyDataToQueue+0xa6>
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	9b 81       	ldd	r25, Y+3	; 0x03
    13c0:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <xTaskPriorityDisinherit>
    13c4:	1b 82       	std	Y+3, r1	; 0x03
    13c6:	1a 82       	std	Y+2, r1	; 0x02
    13c8:	44 c0       	rjmp	.+136    	; 0x1452 <prvCopyDataToQueue+0xb4>
    13ca:	41 11       	cpse	r20, r1
    13cc:	18 c0       	rjmp	.+48     	; 0x13fe <prvCopyDataToQueue+0x60>
    13ce:	48 2f       	mov	r20, r24
    13d0:	50 e0       	ldi	r21, 0x00	; 0
    13d2:	8c 81       	ldd	r24, Y+4	; 0x04
    13d4:	9d 81       	ldd	r25, Y+5	; 0x05
    13d6:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <memcpy>
    13da:	2c 8d       	ldd	r18, Y+28	; 0x1c
    13dc:	8c 81       	ldd	r24, Y+4	; 0x04
    13de:	9d 81       	ldd	r25, Y+5	; 0x05
    13e0:	82 0f       	add	r24, r18
    13e2:	91 1d       	adc	r25, r1
    13e4:	9d 83       	std	Y+5, r25	; 0x05
    13e6:	8c 83       	std	Y+4, r24	; 0x04
    13e8:	2a 81       	ldd	r18, Y+2	; 0x02
    13ea:	3b 81       	ldd	r19, Y+3	; 0x03
    13ec:	82 17       	cp	r24, r18
    13ee:	93 07       	cpc	r25, r19
    13f0:	58 f1       	brcs	.+86     	; 0x1448 <prvCopyDataToQueue+0xaa>
    13f2:	88 81       	ld	r24, Y
    13f4:	99 81       	ldd	r25, Y+1	; 0x01
    13f6:	9d 83       	std	Y+5, r25	; 0x05
    13f8:	8c 83       	std	Y+4, r24	; 0x04
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	2a c0       	rjmp	.+84     	; 0x1452 <prvCopyDataToQueue+0xb4>
    13fe:	48 2f       	mov	r20, r24
    1400:	50 e0       	ldi	r21, 0x00	; 0
    1402:	8e 81       	ldd	r24, Y+6	; 0x06
    1404:	9f 81       	ldd	r25, Y+7	; 0x07
    1406:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <memcpy>
    140a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	91 95       	neg	r25
    1410:	81 95       	neg	r24
    1412:	91 09       	sbc	r25, r1
    1414:	2e 81       	ldd	r18, Y+6	; 0x06
    1416:	3f 81       	ldd	r19, Y+7	; 0x07
    1418:	28 0f       	add	r18, r24
    141a:	39 1f       	adc	r19, r25
    141c:	3f 83       	std	Y+7, r19	; 0x07
    141e:	2e 83       	std	Y+6, r18	; 0x06
    1420:	48 81       	ld	r20, Y
    1422:	59 81       	ldd	r21, Y+1	; 0x01
    1424:	24 17       	cp	r18, r20
    1426:	35 07       	cpc	r19, r21
    1428:	30 f4       	brcc	.+12     	; 0x1436 <prvCopyDataToQueue+0x98>
    142a:	2a 81       	ldd	r18, Y+2	; 0x02
    142c:	3b 81       	ldd	r19, Y+3	; 0x03
    142e:	82 0f       	add	r24, r18
    1430:	93 1f       	adc	r25, r19
    1432:	9f 83       	std	Y+7, r25	; 0x07
    1434:	8e 83       	std	Y+6, r24	; 0x06
    1436:	02 30       	cpi	r16, 0x02	; 2
    1438:	49 f4       	brne	.+18     	; 0x144c <prvCopyDataToQueue+0xae>
    143a:	11 23       	and	r17, r17
    143c:	49 f0       	breq	.+18     	; 0x1450 <prvCopyDataToQueue+0xb2>
    143e:	11 50       	subi	r17, 0x01	; 1
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	07 c0       	rjmp	.+14     	; 0x1452 <prvCopyDataToQueue+0xb4>
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	05 c0       	rjmp	.+10     	; 0x1452 <prvCopyDataToQueue+0xb4>
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	03 c0       	rjmp	.+6      	; 0x1452 <prvCopyDataToQueue+0xb4>
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	01 c0       	rjmp	.+2      	; 0x1452 <prvCopyDataToQueue+0xb4>
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	1f 5f       	subi	r17, 0xFF	; 255
    1454:	1a 8f       	std	Y+26, r17	; 0x1a
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	1f 91       	pop	r17
    145c:	0f 91       	pop	r16
    145e:	08 95       	ret

00001460 <prvCopyDataFromQueue>:
    1460:	fc 01       	movw	r30, r24
    1462:	44 8d       	ldd	r20, Z+28	; 0x1c
    1464:	44 23       	and	r20, r20
    1466:	a9 f0       	breq	.+42     	; 0x1492 <prvCopyDataFromQueue+0x32>
    1468:	50 e0       	ldi	r21, 0x00	; 0
    146a:	26 81       	ldd	r18, Z+6	; 0x06
    146c:	37 81       	ldd	r19, Z+7	; 0x07
    146e:	24 0f       	add	r18, r20
    1470:	35 1f       	adc	r19, r21
    1472:	37 83       	std	Z+7, r19	; 0x07
    1474:	26 83       	std	Z+6, r18	; 0x06
    1476:	82 81       	ldd	r24, Z+2	; 0x02
    1478:	93 81       	ldd	r25, Z+3	; 0x03
    147a:	28 17       	cp	r18, r24
    147c:	39 07       	cpc	r19, r25
    147e:	20 f0       	brcs	.+8      	; 0x1488 <prvCopyDataFromQueue+0x28>
    1480:	80 81       	ld	r24, Z
    1482:	91 81       	ldd	r25, Z+1	; 0x01
    1484:	97 83       	std	Z+7, r25	; 0x07
    1486:	86 83       	std	Z+6, r24	; 0x06
    1488:	cb 01       	movw	r24, r22
    148a:	66 81       	ldd	r22, Z+6	; 0x06
    148c:	77 81       	ldd	r23, Z+7	; 0x07
    148e:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <memcpy>
    1492:	08 95       	ret

00001494 <prvUnlockQueue>:
    1494:	ef 92       	push	r14
    1496:	ff 92       	push	r15
    1498:	0f 93       	push	r16
    149a:	1f 93       	push	r17
    149c:	cf 93       	push	r28
    149e:	8c 01       	movw	r16, r24
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	0f 92       	push	r0
    14a6:	fc 01       	movw	r30, r24
    14a8:	c6 8d       	ldd	r28, Z+30	; 0x1e
    14aa:	1c 16       	cp	r1, r28
    14ac:	ac f4       	brge	.+42     	; 0x14d8 <prvUnlockQueue+0x44>
    14ae:	81 89       	ldd	r24, Z+17	; 0x11
    14b0:	81 11       	cpse	r24, r1
    14b2:	06 c0       	rjmp	.+12     	; 0x14c0 <prvUnlockQueue+0x2c>
    14b4:	11 c0       	rjmp	.+34     	; 0x14d8 <prvUnlockQueue+0x44>
    14b6:	f8 01       	movw	r30, r16
    14b8:	91 89       	ldd	r25, Z+17	; 0x11
    14ba:	91 11       	cpse	r25, r1
    14bc:	05 c0       	rjmp	.+10     	; 0x14c8 <prvUnlockQueue+0x34>
    14be:	0c c0       	rjmp	.+24     	; 0x14d8 <prvUnlockQueue+0x44>
    14c0:	78 01       	movw	r14, r16
    14c2:	f1 e1       	ldi	r31, 0x11	; 17
    14c4:	ef 0e       	add	r14, r31
    14c6:	f1 1c       	adc	r15, r1
    14c8:	c7 01       	movw	r24, r14
    14ca:	0e 94 da 10 	call	0x21b4	; 0x21b4 <xTaskRemoveFromEventList>
    14ce:	81 11       	cpse	r24, r1
    14d0:	0e 94 5f 11 	call	0x22be	; 0x22be <vTaskMissedYield>
    14d4:	c1 50       	subi	r28, 0x01	; 1
    14d6:	79 f7       	brne	.-34     	; 0x14b6 <prvUnlockQueue+0x22>
    14d8:	8f ef       	ldi	r24, 0xFF	; 255
    14da:	f8 01       	movw	r30, r16
    14dc:	86 8f       	std	Z+30, r24	; 0x1e
    14de:	0f 90       	pop	r0
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	0f 92       	push	r0
    14e8:	c5 8d       	ldd	r28, Z+29	; 0x1d
    14ea:	1c 16       	cp	r1, r28
    14ec:	ac f4       	brge	.+42     	; 0x1518 <prvUnlockQueue+0x84>
    14ee:	80 85       	ldd	r24, Z+8	; 0x08
    14f0:	81 11       	cpse	r24, r1
    14f2:	06 c0       	rjmp	.+12     	; 0x1500 <prvUnlockQueue+0x6c>
    14f4:	11 c0       	rjmp	.+34     	; 0x1518 <prvUnlockQueue+0x84>
    14f6:	f8 01       	movw	r30, r16
    14f8:	90 85       	ldd	r25, Z+8	; 0x08
    14fa:	91 11       	cpse	r25, r1
    14fc:	05 c0       	rjmp	.+10     	; 0x1508 <prvUnlockQueue+0x74>
    14fe:	0c c0       	rjmp	.+24     	; 0x1518 <prvUnlockQueue+0x84>
    1500:	78 01       	movw	r14, r16
    1502:	f8 e0       	ldi	r31, 0x08	; 8
    1504:	ef 0e       	add	r14, r31
    1506:	f1 1c       	adc	r15, r1
    1508:	c7 01       	movw	r24, r14
    150a:	0e 94 da 10 	call	0x21b4	; 0x21b4 <xTaskRemoveFromEventList>
    150e:	81 11       	cpse	r24, r1
    1510:	0e 94 5f 11 	call	0x22be	; 0x22be <vTaskMissedYield>
    1514:	c1 50       	subi	r28, 0x01	; 1
    1516:	79 f7       	brne	.-34     	; 0x14f6 <prvUnlockQueue+0x62>
    1518:	8f ef       	ldi	r24, 0xFF	; 255
    151a:	f8 01       	movw	r30, r16
    151c:	85 8f       	std	Z+29, r24	; 0x1d
    151e:	0f 90       	pop	r0
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cf 91       	pop	r28
    1524:	1f 91       	pop	r17
    1526:	0f 91       	pop	r16
    1528:	ff 90       	pop	r15
    152a:	ef 90       	pop	r14
    152c:	08 95       	ret

0000152e <xQueueGenericReset>:
    152e:	cf 93       	push	r28
    1530:	df 93       	push	r29
    1532:	ec 01       	movw	r28, r24
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	0f 92       	push	r0
    153a:	48 81       	ld	r20, Y
    153c:	59 81       	ldd	r21, Y+1	; 0x01
    153e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1544:	72 9f       	mul	r23, r18
    1546:	c0 01       	movw	r24, r0
    1548:	73 9f       	mul	r23, r19
    154a:	90 0d       	add	r25, r0
    154c:	11 24       	eor	r1, r1
    154e:	fa 01       	movw	r30, r20
    1550:	e8 0f       	add	r30, r24
    1552:	f9 1f       	adc	r31, r25
    1554:	fb 83       	std	Y+3, r31	; 0x03
    1556:	ea 83       	std	Y+2, r30	; 0x02
    1558:	1a 8e       	std	Y+26, r1	; 0x1a
    155a:	5d 83       	std	Y+5, r21	; 0x05
    155c:	4c 83       	std	Y+4, r20	; 0x04
    155e:	82 1b       	sub	r24, r18
    1560:	93 0b       	sbc	r25, r19
    1562:	84 0f       	add	r24, r20
    1564:	95 1f       	adc	r25, r21
    1566:	9f 83       	std	Y+7, r25	; 0x07
    1568:	8e 83       	std	Y+6, r24	; 0x06
    156a:	8f ef       	ldi	r24, 0xFF	; 255
    156c:	8d 8f       	std	Y+29, r24	; 0x1d
    156e:	8e 8f       	std	Y+30, r24	; 0x1e
    1570:	61 11       	cpse	r22, r1
    1572:	0c c0       	rjmp	.+24     	; 0x158c <xQueueGenericReset+0x5e>
    1574:	88 85       	ldd	r24, Y+8	; 0x08
    1576:	88 23       	and	r24, r24
    1578:	89 f0       	breq	.+34     	; 0x159c <xQueueGenericReset+0x6e>
    157a:	ce 01       	movw	r24, r28
    157c:	08 96       	adiw	r24, 0x08	; 8
    157e:	0e 94 da 10 	call	0x21b4	; 0x21b4 <xTaskRemoveFromEventList>
    1582:	88 23       	and	r24, r24
    1584:	59 f0       	breq	.+22     	; 0x159c <xQueueGenericReset+0x6e>
    1586:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <vPortYield>
    158a:	08 c0       	rjmp	.+16     	; 0x159c <xQueueGenericReset+0x6e>
    158c:	ce 01       	movw	r24, r28
    158e:	08 96       	adiw	r24, 0x08	; 8
    1590:	0e 94 2b 06 	call	0xc56	; 0xc56 <vListInitialise>
    1594:	ce 01       	movw	r24, r28
    1596:	41 96       	adiw	r24, 0x11	; 17
    1598:	0e 94 2b 06 	call	0xc56	; 0xc56 <vListInitialise>
    159c:	0f 90       	pop	r0
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	08 95       	ret

000015a8 <xQueueGenericCreate>:
    15a8:	ff 92       	push	r15
    15aa:	0f 93       	push	r16
    15ac:	1f 93       	push	r17
    15ae:	cf 93       	push	r28
    15b0:	df 93       	push	r29
    15b2:	08 2f       	mov	r16, r24
    15b4:	16 2f       	mov	r17, r22
    15b6:	f4 2e       	mov	r15, r20
    15b8:	66 23       	and	r22, r22
    15ba:	c9 f0       	breq	.+50     	; 0x15ee <xQueueGenericCreate+0x46>
    15bc:	86 9f       	mul	r24, r22
    15be:	c0 01       	movw	r24, r0
    15c0:	11 24       	eor	r1, r1
    15c2:	81 96       	adiw	r24, 0x21	; 33
    15c4:	0e 94 13 08 	call	0x1026	; 0x1026 <pvPortMalloc>
    15c8:	ec 01       	movw	r28, r24
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	49 f4       	brne	.+18     	; 0x15e0 <xQueueGenericCreate+0x38>
    15ce:	16 c0       	rjmp	.+44     	; 0x15fc <xQueueGenericCreate+0x54>
    15d0:	0b 8f       	std	Y+27, r16	; 0x1b
    15d2:	1c 8f       	std	Y+28, r17	; 0x1c
    15d4:	61 e0       	ldi	r22, 0x01	; 1
    15d6:	ce 01       	movw	r24, r28
    15d8:	0e 94 97 0a 	call	0x152e	; 0x152e <xQueueGenericReset>
    15dc:	f8 a2       	std	Y+32, r15	; 0x20
    15de:	0e c0       	rjmp	.+28     	; 0x15fc <xQueueGenericCreate+0x54>
    15e0:	81 96       	adiw	r24, 0x21	; 33
    15e2:	99 83       	std	Y+1, r25	; 0x01
    15e4:	88 83       	st	Y, r24
    15e6:	f4 cf       	rjmp	.-24     	; 0x15d0 <xQueueGenericCreate+0x28>
    15e8:	d9 83       	std	Y+1, r29	; 0x01
    15ea:	c8 83       	st	Y, r28
    15ec:	f1 cf       	rjmp	.-30     	; 0x15d0 <xQueueGenericCreate+0x28>
    15ee:	81 e2       	ldi	r24, 0x21	; 33
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	0e 94 13 08 	call	0x1026	; 0x1026 <pvPortMalloc>
    15f6:	ec 01       	movw	r28, r24
    15f8:	89 2b       	or	r24, r25
    15fa:	b1 f7       	brne	.-20     	; 0x15e8 <xQueueGenericCreate+0x40>
    15fc:	ce 01       	movw	r24, r28
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	1f 91       	pop	r17
    1604:	0f 91       	pop	r16
    1606:	ff 90       	pop	r15
    1608:	08 95       	ret

0000160a <xQueueGenericSend>:
    160a:	9f 92       	push	r9
    160c:	af 92       	push	r10
    160e:	bf 92       	push	r11
    1610:	cf 92       	push	r12
    1612:	df 92       	push	r13
    1614:	ef 92       	push	r14
    1616:	ff 92       	push	r15
    1618:	0f 93       	push	r16
    161a:	1f 93       	push	r17
    161c:	cf 93       	push	r28
    161e:	df 93       	push	r29
    1620:	00 d0       	rcall	.+0      	; 0x1622 <xQueueGenericSend+0x18>
    1622:	00 d0       	rcall	.+0      	; 0x1624 <xQueueGenericSend+0x1a>
    1624:	1f 92       	push	r1
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
    162a:	8c 01       	movw	r16, r24
    162c:	6b 01       	movw	r12, r22
    162e:	5d 83       	std	Y+5, r21	; 0x05
    1630:	4c 83       	std	Y+4, r20	; 0x04
    1632:	a2 2e       	mov	r10, r18
    1634:	b1 2c       	mov	r11, r1
    1636:	99 24       	eor	r9, r9
    1638:	93 94       	inc	r9
    163a:	7c 01       	movw	r14, r24
    163c:	88 e0       	ldi	r24, 0x08	; 8
    163e:	e8 0e       	add	r14, r24
    1640:	f1 1c       	adc	r15, r1
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	f8 94       	cli
    1646:	0f 92       	push	r0
    1648:	f8 01       	movw	r30, r16
    164a:	32 8d       	ldd	r19, Z+26	; 0x1a
    164c:	93 8d       	ldd	r25, Z+27	; 0x1b
    164e:	39 17       	cp	r19, r25
    1650:	18 f0       	brcs	.+6      	; 0x1658 <xQueueGenericSend+0x4e>
    1652:	f2 e0       	ldi	r31, 0x02	; 2
    1654:	af 12       	cpse	r10, r31
    1656:	19 c0       	rjmp	.+50     	; 0x168a <xQueueGenericSend+0x80>
    1658:	4a 2d       	mov	r20, r10
    165a:	b6 01       	movw	r22, r12
    165c:	c8 01       	movw	r24, r16
    165e:	0e 94 cf 09 	call	0x139e	; 0x139e <prvCopyDataToQueue>
    1662:	f8 01       	movw	r30, r16
    1664:	91 89       	ldd	r25, Z+17	; 0x11
    1666:	99 23       	and	r25, r25
    1668:	49 f0       	breq	.+18     	; 0x167c <xQueueGenericSend+0x72>
    166a:	c8 01       	movw	r24, r16
    166c:	41 96       	adiw	r24, 0x11	; 17
    166e:	0e 94 da 10 	call	0x21b4	; 0x21b4 <xTaskRemoveFromEventList>
    1672:	88 23       	and	r24, r24
    1674:	31 f0       	breq	.+12     	; 0x1682 <xQueueGenericSend+0x78>
    1676:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <vPortYield>
    167a:	03 c0       	rjmp	.+6      	; 0x1682 <xQueueGenericSend+0x78>
    167c:	81 11       	cpse	r24, r1
    167e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <vPortYield>
    1682:	0f 90       	pop	r0
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	50 c0       	rjmp	.+160    	; 0x172a <xQueueGenericSend+0x120>
    168a:	ec 81       	ldd	r30, Y+4	; 0x04
    168c:	fd 81       	ldd	r31, Y+5	; 0x05
    168e:	ef 2b       	or	r30, r31
    1690:	21 f4       	brne	.+8      	; 0x169a <xQueueGenericSend+0x90>
    1692:	0f 90       	pop	r0
    1694:	0f be       	out	0x3f, r0	; 63
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	48 c0       	rjmp	.+144    	; 0x172a <xQueueGenericSend+0x120>
    169a:	b1 10       	cpse	r11, r1
    169c:	05 c0       	rjmp	.+10     	; 0x16a8 <xQueueGenericSend+0x9e>
    169e:	ce 01       	movw	r24, r28
    16a0:	01 96       	adiw	r24, 0x01	; 1
    16a2:	0e 94 22 11 	call	0x2244	; 0x2244 <vTaskSetTimeOutState>
    16a6:	b9 2c       	mov	r11, r9
    16a8:	0f 90       	pop	r0
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <vTaskSuspendAll>
    16b0:	0f b6       	in	r0, 0x3f	; 63
    16b2:	f8 94       	cli
    16b4:	0f 92       	push	r0
    16b6:	f8 01       	movw	r30, r16
    16b8:	85 8d       	ldd	r24, Z+29	; 0x1d
    16ba:	8f 3f       	cpi	r24, 0xFF	; 255
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <xQueueGenericSend+0xb6>
    16be:	15 8e       	std	Z+29, r1	; 0x1d
    16c0:	f8 01       	movw	r30, r16
    16c2:	86 8d       	ldd	r24, Z+30	; 0x1e
    16c4:	8f 3f       	cpi	r24, 0xFF	; 255
    16c6:	09 f4       	brne	.+2      	; 0x16ca <xQueueGenericSend+0xc0>
    16c8:	16 8e       	std	Z+30, r1	; 0x1e
    16ca:	0f 90       	pop	r0
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	be 01       	movw	r22, r28
    16d0:	6c 5f       	subi	r22, 0xFC	; 252
    16d2:	7f 4f       	sbci	r23, 0xFF	; 255
    16d4:	ce 01       	movw	r24, r28
    16d6:	01 96       	adiw	r24, 0x01	; 1
    16d8:	0e 94 2d 11 	call	0x225a	; 0x225a <xTaskCheckForTimeOut>
    16dc:	81 11       	cpse	r24, r1
    16de:	1f c0       	rjmp	.+62     	; 0x171e <xQueueGenericSend+0x114>
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	0f 92       	push	r0
    16e6:	f8 01       	movw	r30, r16
    16e8:	92 8d       	ldd	r25, Z+26	; 0x1a
    16ea:	0f 90       	pop	r0
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	83 8d       	ldd	r24, Z+27	; 0x1b
    16f0:	98 13       	cpse	r25, r24
    16f2:	0f c0       	rjmp	.+30     	; 0x1712 <xQueueGenericSend+0x108>
    16f4:	6c 81       	ldd	r22, Y+4	; 0x04
    16f6:	7d 81       	ldd	r23, Y+5	; 0x05
    16f8:	c7 01       	movw	r24, r14
    16fa:	0e 94 ad 10 	call	0x215a	; 0x215a <vTaskPlaceOnEventList>
    16fe:	c8 01       	movw	r24, r16
    1700:	0e 94 4a 0a 	call	0x1494	; 0x1494 <prvUnlockQueue>
    1704:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <xTaskResumeAll>
    1708:	81 11       	cpse	r24, r1
    170a:	9b cf       	rjmp	.-202    	; 0x1642 <xQueueGenericSend+0x38>
    170c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <vPortYield>
    1710:	98 cf       	rjmp	.-208    	; 0x1642 <xQueueGenericSend+0x38>
    1712:	c8 01       	movw	r24, r16
    1714:	0e 94 4a 0a 	call	0x1494	; 0x1494 <prvUnlockQueue>
    1718:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <xTaskResumeAll>
    171c:	92 cf       	rjmp	.-220    	; 0x1642 <xQueueGenericSend+0x38>
    171e:	c8 01       	movw	r24, r16
    1720:	0e 94 4a 0a 	call	0x1494	; 0x1494 <prvUnlockQueue>
    1724:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <xTaskResumeAll>
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	1f 91       	pop	r17
    173a:	0f 91       	pop	r16
    173c:	ff 90       	pop	r15
    173e:	ef 90       	pop	r14
    1740:	df 90       	pop	r13
    1742:	cf 90       	pop	r12
    1744:	bf 90       	pop	r11
    1746:	af 90       	pop	r10
    1748:	9f 90       	pop	r9
    174a:	08 95       	ret

0000174c <xQueueCreateMutex>:
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	48 2f       	mov	r20, r24
    1752:	60 e0       	ldi	r22, 0x00	; 0
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <xQueueGenericCreate>
    175a:	ec 01       	movw	r28, r24
    175c:	00 97       	sbiw	r24, 0x00	; 0
    175e:	61 f0       	breq	.+24     	; 0x1778 <xQueueCreateMutex+0x2c>
    1760:	1b 82       	std	Y+3, r1	; 0x03
    1762:	1a 82       	std	Y+2, r1	; 0x02
    1764:	19 82       	std	Y+1, r1	; 0x01
    1766:	18 82       	st	Y, r1
    1768:	1e 82       	std	Y+6, r1	; 0x06
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	40 e0       	ldi	r20, 0x00	; 0
    176e:	50 e0       	ldi	r21, 0x00	; 0
    1770:	60 e0       	ldi	r22, 0x00	; 0
    1772:	70 e0       	ldi	r23, 0x00	; 0
    1774:	0e 94 05 0b 	call	0x160a	; 0x160a <xQueueGenericSend>
    1778:	ce 01       	movw	r24, r28
    177a:	df 91       	pop	r29
    177c:	cf 91       	pop	r28
    177e:	08 95       	ret

00001780 <xQueueGenericSendFromISR>:
    1780:	ef 92       	push	r14
    1782:	ff 92       	push	r15
    1784:	0f 93       	push	r16
    1786:	1f 93       	push	r17
    1788:	cf 93       	push	r28
    178a:	df 93       	push	r29
    178c:	8a 01       	movw	r16, r20
    178e:	fc 01       	movw	r30, r24
    1790:	52 8d       	ldd	r21, Z+26	; 0x1a
    1792:	33 8d       	ldd	r19, Z+27	; 0x1b
    1794:	53 17       	cp	r21, r19
    1796:	10 f0       	brcs	.+4      	; 0x179c <xQueueGenericSendFromISR+0x1c>
    1798:	22 30       	cpi	r18, 0x02	; 2
    179a:	f1 f4       	brne	.+60     	; 0x17d8 <xQueueGenericSendFromISR+0x58>
    179c:	42 2f       	mov	r20, r18
    179e:	78 01       	movw	r14, r16
    17a0:	ec 01       	movw	r28, r24
    17a2:	1e 8d       	ldd	r17, Y+30	; 0x1e
    17a4:	0e 94 cf 09 	call	0x139e	; 0x139e <prvCopyDataToQueue>
    17a8:	1f 3f       	cpi	r17, 0xFF	; 255
    17aa:	81 f4       	brne	.+32     	; 0x17cc <xQueueGenericSendFromISR+0x4c>
    17ac:	89 89       	ldd	r24, Y+17	; 0x11
    17ae:	88 23       	and	r24, r24
    17b0:	a9 f0       	breq	.+42     	; 0x17dc <xQueueGenericSendFromISR+0x5c>
    17b2:	ce 01       	movw	r24, r28
    17b4:	41 96       	adiw	r24, 0x11	; 17
    17b6:	0e 94 da 10 	call	0x21b4	; 0x21b4 <xTaskRemoveFromEventList>
    17ba:	88 23       	and	r24, r24
    17bc:	89 f0       	breq	.+34     	; 0x17e0 <xQueueGenericSendFromISR+0x60>
    17be:	e1 14       	cp	r14, r1
    17c0:	f1 04       	cpc	r15, r1
    17c2:	81 f0       	breq	.+32     	; 0x17e4 <xQueueGenericSendFromISR+0x64>
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	f7 01       	movw	r30, r14
    17c8:	80 83       	st	Z, r24
    17ca:	0d c0       	rjmp	.+26     	; 0x17e6 <xQueueGenericSendFromISR+0x66>
    17cc:	ff 24       	eor	r15, r15
    17ce:	f3 94       	inc	r15
    17d0:	f1 0e       	add	r15, r17
    17d2:	fe 8e       	std	Y+30, r15	; 0x1e
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	07 c0       	rjmp	.+14     	; 0x17e6 <xQueueGenericSendFromISR+0x66>
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	05 c0       	rjmp	.+10     	; 0x17e6 <xQueueGenericSendFromISR+0x66>
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	03 c0       	rjmp	.+6      	; 0x17e6 <xQueueGenericSendFromISR+0x66>
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	01 c0       	rjmp	.+2      	; 0x17e6 <xQueueGenericSendFromISR+0x66>
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	df 91       	pop	r29
    17e8:	cf 91       	pop	r28
    17ea:	1f 91       	pop	r17
    17ec:	0f 91       	pop	r16
    17ee:	ff 90       	pop	r15
    17f0:	ef 90       	pop	r14
    17f2:	08 95       	ret

000017f4 <xQueueGenericReceive>:
    17f4:	8f 92       	push	r8
    17f6:	9f 92       	push	r9
    17f8:	af 92       	push	r10
    17fa:	bf 92       	push	r11
    17fc:	cf 92       	push	r12
    17fe:	df 92       	push	r13
    1800:	ef 92       	push	r14
    1802:	ff 92       	push	r15
    1804:	0f 93       	push	r16
    1806:	1f 93       	push	r17
    1808:	cf 93       	push	r28
    180a:	df 93       	push	r29
    180c:	00 d0       	rcall	.+0      	; 0x180e <xQueueGenericReceive+0x1a>
    180e:	00 d0       	rcall	.+0      	; 0x1810 <xQueueGenericReceive+0x1c>
    1810:	1f 92       	push	r1
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	8c 01       	movw	r16, r24
    1818:	5b 01       	movw	r10, r22
    181a:	5d 83       	std	Y+5, r21	; 0x05
    181c:	4c 83       	std	Y+4, r20	; 0x04
    181e:	82 2e       	mov	r8, r18
    1820:	e1 2c       	mov	r14, r1
    1822:	99 24       	eor	r9, r9
    1824:	93 94       	inc	r9
    1826:	6c 01       	movw	r12, r24
    1828:	81 e1       	ldi	r24, 0x11	; 17
    182a:	c8 0e       	add	r12, r24
    182c:	d1 1c       	adc	r13, r1
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	0f 92       	push	r0
    1834:	f8 01       	movw	r30, r16
    1836:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1838:	ff 20       	and	r15, r15
    183a:	91 f1       	breq	.+100    	; 0x18a0 <xQueueGenericReceive+0xac>
    183c:	c6 80       	ldd	r12, Z+6	; 0x06
    183e:	d7 80       	ldd	r13, Z+7	; 0x07
    1840:	b5 01       	movw	r22, r10
    1842:	c8 01       	movw	r24, r16
    1844:	0e 94 30 0a 	call	0x1460	; 0x1460 <prvCopyDataFromQueue>
    1848:	81 10       	cpse	r8, r1
    184a:	19 c0       	rjmp	.+50     	; 0x187e <xQueueGenericReceive+0x8a>
    184c:	fa 94       	dec	r15
    184e:	f8 01       	movw	r30, r16
    1850:	f2 8e       	std	Z+26, r15	; 0x1a
    1852:	80 81       	ld	r24, Z
    1854:	91 81       	ldd	r25, Z+1	; 0x01
    1856:	89 2b       	or	r24, r25
    1858:	29 f4       	brne	.+10     	; 0x1864 <xQueueGenericReceive+0x70>
    185a:	0e 94 13 12 	call	0x2426	; 0x2426 <pvTaskIncrementMutexHeldCount>
    185e:	f8 01       	movw	r30, r16
    1860:	93 83       	std	Z+3, r25	; 0x03
    1862:	82 83       	std	Z+2, r24	; 0x02
    1864:	f8 01       	movw	r30, r16
    1866:	80 85       	ldd	r24, Z+8	; 0x08
    1868:	88 23       	and	r24, r24
    186a:	b1 f0       	breq	.+44     	; 0x1898 <xQueueGenericReceive+0xa4>
    186c:	c8 01       	movw	r24, r16
    186e:	08 96       	adiw	r24, 0x08	; 8
    1870:	0e 94 da 10 	call	0x21b4	; 0x21b4 <xTaskRemoveFromEventList>
    1874:	88 23       	and	r24, r24
    1876:	81 f0       	breq	.+32     	; 0x1898 <xQueueGenericReceive+0xa4>
    1878:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <vPortYield>
    187c:	0d c0       	rjmp	.+26     	; 0x1898 <xQueueGenericReceive+0xa4>
    187e:	f8 01       	movw	r30, r16
    1880:	d7 82       	std	Z+7, r13	; 0x07
    1882:	c6 82       	std	Z+6, r12	; 0x06
    1884:	81 89       	ldd	r24, Z+17	; 0x11
    1886:	88 23       	and	r24, r24
    1888:	39 f0       	breq	.+14     	; 0x1898 <xQueueGenericReceive+0xa4>
    188a:	c8 01       	movw	r24, r16
    188c:	41 96       	adiw	r24, 0x11	; 17
    188e:	0e 94 da 10 	call	0x21b4	; 0x21b4 <xTaskRemoveFromEventList>
    1892:	81 11       	cpse	r24, r1
    1894:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <vPortYield>
    1898:	0f 90       	pop	r0
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	64 c0       	rjmp	.+200    	; 0x1968 <xQueueGenericReceive+0x174>
    18a0:	4c 81       	ldd	r20, Y+4	; 0x04
    18a2:	5d 81       	ldd	r21, Y+5	; 0x05
    18a4:	45 2b       	or	r20, r21
    18a6:	21 f4       	brne	.+8      	; 0x18b0 <xQueueGenericReceive+0xbc>
    18a8:	0f 90       	pop	r0
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	5c c0       	rjmp	.+184    	; 0x1968 <xQueueGenericReceive+0x174>
    18b0:	e1 10       	cpse	r14, r1
    18b2:	05 c0       	rjmp	.+10     	; 0x18be <xQueueGenericReceive+0xca>
    18b4:	ce 01       	movw	r24, r28
    18b6:	01 96       	adiw	r24, 0x01	; 1
    18b8:	0e 94 22 11 	call	0x2244	; 0x2244 <vTaskSetTimeOutState>
    18bc:	e9 2c       	mov	r14, r9
    18be:	0f 90       	pop	r0
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <vTaskSuspendAll>
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	f8 94       	cli
    18ca:	0f 92       	push	r0
    18cc:	f8 01       	movw	r30, r16
    18ce:	85 8d       	ldd	r24, Z+29	; 0x1d
    18d0:	8f 3f       	cpi	r24, 0xFF	; 255
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <xQueueGenericReceive+0xe2>
    18d4:	15 8e       	std	Z+29, r1	; 0x1d
    18d6:	f8 01       	movw	r30, r16
    18d8:	96 8d       	ldd	r25, Z+30	; 0x1e
    18da:	9f 3f       	cpi	r25, 0xFF	; 255
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <xQueueGenericReceive+0xec>
    18de:	16 8e       	std	Z+30, r1	; 0x1e
    18e0:	0f 90       	pop	r0
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	be 01       	movw	r22, r28
    18e6:	6c 5f       	subi	r22, 0xFC	; 252
    18e8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ea:	ce 01       	movw	r24, r28
    18ec:	01 96       	adiw	r24, 0x01	; 1
    18ee:	0e 94 2d 11 	call	0x225a	; 0x225a <xTaskCheckForTimeOut>
    18f2:	81 11       	cpse	r24, r1
    18f4:	2b c0       	rjmp	.+86     	; 0x194c <xQueueGenericReceive+0x158>
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	0f 92       	push	r0
    18fc:	f8 01       	movw	r30, r16
    18fe:	82 8d       	ldd	r24, Z+26	; 0x1a
    1900:	0f 90       	pop	r0
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	81 11       	cpse	r24, r1
    1906:	1c c0       	rjmp	.+56     	; 0x1940 <xQueueGenericReceive+0x14c>
    1908:	80 81       	ld	r24, Z
    190a:	91 81       	ldd	r25, Z+1	; 0x01
    190c:	89 2b       	or	r24, r25
    190e:	49 f4       	brne	.+18     	; 0x1922 <xQueueGenericReceive+0x12e>
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	f8 94       	cli
    1914:	0f 92       	push	r0
    1916:	82 81       	ldd	r24, Z+2	; 0x02
    1918:	93 81       	ldd	r25, Z+3	; 0x03
    191a:	0e 94 71 11 	call	0x22e2	; 0x22e2 <vTaskPriorityInherit>
    191e:	0f 90       	pop	r0
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	6c 81       	ldd	r22, Y+4	; 0x04
    1924:	7d 81       	ldd	r23, Y+5	; 0x05
    1926:	c6 01       	movw	r24, r12
    1928:	0e 94 ad 10 	call	0x215a	; 0x215a <vTaskPlaceOnEventList>
    192c:	c8 01       	movw	r24, r16
    192e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <prvUnlockQueue>
    1932:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <xTaskResumeAll>
    1936:	81 11       	cpse	r24, r1
    1938:	7a cf       	rjmp	.-268    	; 0x182e <xQueueGenericReceive+0x3a>
    193a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <vPortYield>
    193e:	77 cf       	rjmp	.-274    	; 0x182e <xQueueGenericReceive+0x3a>
    1940:	c8 01       	movw	r24, r16
    1942:	0e 94 4a 0a 	call	0x1494	; 0x1494 <prvUnlockQueue>
    1946:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <xTaskResumeAll>
    194a:	71 cf       	rjmp	.-286    	; 0x182e <xQueueGenericReceive+0x3a>
    194c:	c8 01       	movw	r24, r16
    194e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <prvUnlockQueue>
    1952:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <xTaskResumeAll>
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	f8 94       	cli
    195a:	0f 92       	push	r0
    195c:	f8 01       	movw	r30, r16
    195e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1960:	0f 90       	pop	r0
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	81 11       	cpse	r24, r1
    1966:	63 cf       	rjmp	.-314    	; 0x182e <xQueueGenericReceive+0x3a>
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	1f 91       	pop	r17
    1978:	0f 91       	pop	r16
    197a:	ff 90       	pop	r15
    197c:	ef 90       	pop	r14
    197e:	df 90       	pop	r13
    1980:	cf 90       	pop	r12
    1982:	bf 90       	pop	r11
    1984:	af 90       	pop	r10
    1986:	9f 90       	pop	r9
    1988:	8f 90       	pop	r8
    198a:	08 95       	ret

0000198c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    198c:	cf 93       	push	r28
    198e:	df 93       	push	r29
    1990:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    1992:	0f b6       	in	r0, 0x3f	; 63
    1994:	f8 94       	cli
    1996:	0f 92       	push	r0
    1998:	8d 8d       	ldd	r24, Y+29	; 0x1d
    199a:	8f 3f       	cpi	r24, 0xFF	; 255
    199c:	09 f4       	brne	.+2      	; 0x19a0 <vQueueWaitForMessageRestricted+0x14>
    199e:	1d 8e       	std	Y+29, r1	; 0x1d
    19a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19a2:	8f 3f       	cpi	r24, 0xFF	; 255
    19a4:	09 f4       	brne	.+2      	; 0x19a8 <vQueueWaitForMessageRestricted+0x1c>
    19a6:	1e 8e       	std	Y+30, r1	; 0x1e
    19a8:	0f 90       	pop	r0
    19aa:	0f be       	out	0x3f, r0	; 63
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    19ac:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19ae:	81 11       	cpse	r24, r1
    19b0:	04 c0       	rjmp	.+8      	; 0x19ba <vQueueWaitForMessageRestricted+0x2e>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    19b2:	ce 01       	movw	r24, r28
    19b4:	41 96       	adiw	r24, 0x11	; 17
    19b6:	0e 94 c0 10 	call	0x2180	; 0x2180 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    19ba:	ce 01       	movw	r24, r28
    19bc:	0e 94 4a 0a 	call	0x1494	; 0x1494 <prvUnlockQueue>
	}
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	08 95       	ret

000019c6 <prvResetNextTaskUnblockTime>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
    19c6:	e0 91 88 09 	lds	r30, 0x0988	; 0x800988 <pxDelayedTaskList>
    19ca:	f0 91 89 09 	lds	r31, 0x0989	; 0x800989 <pxDelayedTaskList+0x1>
    19ce:	80 81       	ld	r24, Z
    19d0:	81 11       	cpse	r24, r1
    19d2:	07 c0       	rjmp	.+14     	; 0x19e2 <prvResetNextTaskUnblockTime+0x1c>
    19d4:	8f ef       	ldi	r24, 0xFF	; 255
    19d6:	9f ef       	ldi	r25, 0xFF	; 255
    19d8:	90 93 69 09 	sts	0x0969, r25	; 0x800969 <xNextTaskUnblockTime+0x1>
    19dc:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <xNextTaskUnblockTime>
    19e0:	08 95       	ret
    19e2:	e0 91 88 09 	lds	r30, 0x0988	; 0x800988 <pxDelayedTaskList>
    19e6:	f0 91 89 09 	lds	r31, 0x0989	; 0x800989 <pxDelayedTaskList+0x1>
    19ea:	05 80       	ldd	r0, Z+5	; 0x05
    19ec:	f6 81       	ldd	r31, Z+6	; 0x06
    19ee:	e0 2d       	mov	r30, r0
    19f0:	06 80       	ldd	r0, Z+6	; 0x06
    19f2:	f7 81       	ldd	r31, Z+7	; 0x07
    19f4:	e0 2d       	mov	r30, r0
    19f6:	82 81       	ldd	r24, Z+2	; 0x02
    19f8:	93 81       	ldd	r25, Z+3	; 0x03
    19fa:	90 93 69 09 	sts	0x0969, r25	; 0x800969 <xNextTaskUnblockTime+0x1>
    19fe:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <xNextTaskUnblockTime>
    1a02:	08 95       	ret

00001a04 <prvAddCurrentTaskToDelayedList>:
    1a04:	0f 93       	push	r16
    1a06:	1f 93       	push	r17
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	ec 01       	movw	r28, r24
    1a0e:	00 91 70 09 	lds	r16, 0x0970	; 0x800970 <xTickCount>
    1a12:	10 91 71 09 	lds	r17, 0x0971	; 0x800971 <xTickCount+0x1>
    1a16:	80 91 e4 09 	lds	r24, 0x09E4	; 0x8009e4 <pxCurrentTCB>
    1a1a:	90 91 e5 09 	lds	r25, 0x09E5	; 0x8009e5 <pxCurrentTCB+0x1>
    1a1e:	02 96       	adiw	r24, 0x02	; 2
    1a20:	0e 94 8f 06 	call	0xd1e	; 0xd1e <uxListRemove>
    1a24:	c0 0f       	add	r28, r16
    1a26:	d1 1f       	adc	r29, r17
    1a28:	e0 91 e4 09 	lds	r30, 0x09E4	; 0x8009e4 <pxCurrentTCB>
    1a2c:	f0 91 e5 09 	lds	r31, 0x09E5	; 0x8009e5 <pxCurrentTCB+0x1>
    1a30:	d3 83       	std	Z+3, r29	; 0x03
    1a32:	c2 83       	std	Z+2, r28	; 0x02
    1a34:	c0 17       	cp	r28, r16
    1a36:	d1 07       	cpc	r29, r17
    1a38:	68 f4       	brcc	.+26     	; 0x1a54 <prvAddCurrentTaskToDelayedList+0x50>
    1a3a:	60 91 e4 09 	lds	r22, 0x09E4	; 0x8009e4 <pxCurrentTCB>
    1a3e:	70 91 e5 09 	lds	r23, 0x09E5	; 0x8009e5 <pxCurrentTCB+0x1>
    1a42:	80 91 86 09 	lds	r24, 0x0986	; 0x800986 <pxOverflowDelayedTaskList>
    1a46:	90 91 87 09 	lds	r25, 0x0987	; 0x800987 <pxOverflowDelayedTaskList+0x1>
    1a4a:	6e 5f       	subi	r22, 0xFE	; 254
    1a4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <vListInsert>
    1a52:	17 c0       	rjmp	.+46     	; 0x1a82 <prvAddCurrentTaskToDelayedList+0x7e>
    1a54:	60 91 e4 09 	lds	r22, 0x09E4	; 0x8009e4 <pxCurrentTCB>
    1a58:	70 91 e5 09 	lds	r23, 0x09E5	; 0x8009e5 <pxCurrentTCB+0x1>
    1a5c:	80 91 88 09 	lds	r24, 0x0988	; 0x800988 <pxDelayedTaskList>
    1a60:	90 91 89 09 	lds	r25, 0x0989	; 0x800989 <pxDelayedTaskList+0x1>
    1a64:	6e 5f       	subi	r22, 0xFE	; 254
    1a66:	7f 4f       	sbci	r23, 0xFF	; 255
    1a68:	0e 94 5e 06 	call	0xcbc	; 0xcbc <vListInsert>
    1a6c:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <xNextTaskUnblockTime>
    1a70:	90 91 69 09 	lds	r25, 0x0969	; 0x800969 <xNextTaskUnblockTime+0x1>
    1a74:	c8 17       	cp	r28, r24
    1a76:	d9 07       	cpc	r29, r25
    1a78:	20 f4       	brcc	.+8      	; 0x1a82 <prvAddCurrentTaskToDelayedList+0x7e>
    1a7a:	d0 93 69 09 	sts	0x0969, r29	; 0x800969 <xNextTaskUnblockTime+0x1>
    1a7e:	c0 93 68 09 	sts	0x0968, r28	; 0x800968 <xNextTaskUnblockTime>
    1a82:	df 91       	pop	r29
    1a84:	cf 91       	pop	r28
    1a86:	1f 91       	pop	r17
    1a88:	0f 91       	pop	r16
    1a8a:	08 95       	ret

00001a8c <xTaskCreate>:
    1a8c:	4f 92       	push	r4
    1a8e:	5f 92       	push	r5
    1a90:	6f 92       	push	r6
    1a92:	7f 92       	push	r7
    1a94:	8f 92       	push	r8
    1a96:	9f 92       	push	r9
    1a98:	af 92       	push	r10
    1a9a:	bf 92       	push	r11
    1a9c:	cf 92       	push	r12
    1a9e:	df 92       	push	r13
    1aa0:	ef 92       	push	r14
    1aa2:	ff 92       	push	r15
    1aa4:	0f 93       	push	r16
    1aa6:	1f 93       	push	r17
    1aa8:	cf 93       	push	r28
    1aaa:	df 93       	push	r29
    1aac:	4c 01       	movw	r8, r24
    1aae:	eb 01       	movw	r28, r22
    1ab0:	6a 01       	movw	r12, r20
    1ab2:	29 01       	movw	r4, r18
    1ab4:	ca 01       	movw	r24, r20
    1ab6:	0e 94 13 08 	call	0x1026	; 0x1026 <pvPortMalloc>
    1aba:	5c 01       	movw	r10, r24
    1abc:	89 2b       	or	r24, r25
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <xTaskCreate+0x36>
    1ac0:	ec c0       	rjmp	.+472    	; 0x1c9a <xTaskCreate+0x20e>
    1ac2:	8c e2       	ldi	r24, 0x2C	; 44
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	0e 94 13 08 	call	0x1026	; 0x1026 <pvPortMalloc>
    1aca:	3c 01       	movw	r6, r24
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	b9 f0       	breq	.+46     	; 0x1afe <xTaskCreate+0x72>
    1ad0:	fc 01       	movw	r30, r24
    1ad2:	b0 8e       	std	Z+24, r11	; 0x18
    1ad4:	a7 8a       	std	Z+23, r10	; 0x17
    1ad6:	a6 01       	movw	r20, r12
    1ad8:	65 ea       	ldi	r22, 0xA5	; 165
    1ada:	70 e0       	ldi	r23, 0x00	; 0
    1adc:	c5 01       	movw	r24, r10
    1ade:	0e 94 03 16 	call	0x2c06	; 0x2c06 <memset>
    1ae2:	f1 e0       	ldi	r31, 0x01	; 1
    1ae4:	cf 1a       	sub	r12, r31
    1ae6:	d1 08       	sbc	r13, r1
    1ae8:	f3 01       	movw	r30, r6
    1aea:	87 89       	ldd	r24, Z+23	; 0x17
    1aec:	90 8d       	ldd	r25, Z+24	; 0x18
    1aee:	c8 0e       	add	r12, r24
    1af0:	d9 1e       	adc	r13, r25
    1af2:	88 81       	ld	r24, Y
    1af4:	81 8f       	std	Z+25, r24	; 0x19
    1af6:	88 81       	ld	r24, Y
    1af8:	81 11       	cpse	r24, r1
    1afa:	05 c0       	rjmp	.+10     	; 0x1b06 <xTaskCreate+0x7a>
    1afc:	14 c0       	rjmp	.+40     	; 0x1b26 <xTaskCreate+0x9a>
    1afe:	c5 01       	movw	r24, r10
    1b00:	0e 94 48 08 	call	0x1090	; 0x1090 <vPortFree>
    1b04:	ca c0       	rjmp	.+404    	; 0x1c9a <xTaskCreate+0x20e>
    1b06:	d3 01       	movw	r26, r6
    1b08:	5a 96       	adiw	r26, 0x1a	; 26
    1b0a:	fe 01       	movw	r30, r28
    1b0c:	31 96       	adiw	r30, 0x01	; 1
    1b0e:	9e 01       	movw	r18, r28
    1b10:	28 5f       	subi	r18, 0xF8	; 248
    1b12:	3f 4f       	sbci	r19, 0xFF	; 255
    1b14:	ef 01       	movw	r28, r30
    1b16:	81 91       	ld	r24, Z+
    1b18:	8d 93       	st	X+, r24
    1b1a:	88 81       	ld	r24, Y
    1b1c:	88 23       	and	r24, r24
    1b1e:	19 f0       	breq	.+6      	; 0x1b26 <xTaskCreate+0x9a>
    1b20:	e2 17       	cp	r30, r18
    1b22:	f3 07       	cpc	r31, r19
    1b24:	b9 f7       	brne	.-18     	; 0x1b14 <xTaskCreate+0x88>
    1b26:	f3 01       	movw	r30, r6
    1b28:	10 a2       	std	Z+32, r1	; 0x20
    1b2a:	08 30       	cpi	r16, 0x08	; 8
    1b2c:	08 f0       	brcs	.+2      	; 0x1b30 <xTaskCreate+0xa4>
    1b2e:	07 e0       	ldi	r16, 0x07	; 7
    1b30:	f3 01       	movw	r30, r6
    1b32:	06 8b       	std	Z+22, r16	; 0x16
    1b34:	03 a3       	std	Z+35, r16	; 0x23
    1b36:	14 a2       	std	Z+36, r1	; 0x24
    1b38:	e3 01       	movw	r28, r6
    1b3a:	22 96       	adiw	r28, 0x02	; 2
    1b3c:	ce 01       	movw	r24, r28
    1b3e:	0e 94 39 06 	call	0xc72	; 0xc72 <vListInitialiseItem>
    1b42:	c3 01       	movw	r24, r6
    1b44:	0c 96       	adiw	r24, 0x0c	; 12
    1b46:	0e 94 39 06 	call	0xc72	; 0xc72 <vListInitialiseItem>
    1b4a:	f3 01       	movw	r30, r6
    1b4c:	71 86       	std	Z+9, r7	; 0x09
    1b4e:	60 86       	std	Z+8, r6	; 0x08
    1b50:	88 e0       	ldi	r24, 0x08	; 8
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	80 1b       	sub	r24, r16
    1b56:	91 09       	sbc	r25, r1
    1b58:	95 87       	std	Z+13, r25	; 0x0d
    1b5a:	84 87       	std	Z+12, r24	; 0x0c
    1b5c:	73 8a       	std	Z+19, r7	; 0x13
    1b5e:	62 8a       	std	Z+18, r6	; 0x12
    1b60:	16 a2       	std	Z+38, r1	; 0x26
    1b62:	15 a2       	std	Z+37, r1	; 0x25
    1b64:	17 a2       	std	Z+39, r1	; 0x27
    1b66:	10 a6       	std	Z+40, r1	; 0x28
    1b68:	11 a6       	std	Z+41, r1	; 0x29
    1b6a:	12 a6       	std	Z+42, r1	; 0x2a
    1b6c:	13 a6       	std	Z+43, r1	; 0x2b
    1b6e:	a2 01       	movw	r20, r4
    1b70:	b4 01       	movw	r22, r8
    1b72:	c6 01       	movw	r24, r12
    1b74:	0e 94 b5 06 	call	0xd6a	; 0xd6a <pxPortInitialiseStack>
    1b78:	f3 01       	movw	r30, r6
    1b7a:	91 83       	std	Z+1, r25	; 0x01
    1b7c:	80 83       	st	Z, r24
    1b7e:	e1 14       	cp	r14, r1
    1b80:	f1 04       	cpc	r15, r1
    1b82:	19 f0       	breq	.+6      	; 0x1b8a <xTaskCreate+0xfe>
    1b84:	f7 01       	movw	r30, r14
    1b86:	71 82       	std	Z+1, r7	; 0x01
    1b88:	60 82       	st	Z, r6
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	0f 92       	push	r0
    1b90:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <uxCurrentNumberOfTasks>
    1b94:	8f 5f       	subi	r24, 0xFF	; 255
    1b96:	80 93 72 09 	sts	0x0972, r24	; 0x800972 <uxCurrentNumberOfTasks>
    1b9a:	80 91 e4 09 	lds	r24, 0x09E4	; 0x8009e4 <pxCurrentTCB>
    1b9e:	90 91 e5 09 	lds	r25, 0x09E5	; 0x8009e5 <pxCurrentTCB+0x1>
    1ba2:	89 2b       	or	r24, r25
    1ba4:	a9 f5       	brne	.+106    	; 0x1c10 <xTaskCreate+0x184>
    1ba6:	70 92 e5 09 	sts	0x09E5, r7	; 0x8009e5 <pxCurrentTCB+0x1>
    1baa:	60 92 e4 09 	sts	0x09E4, r6	; 0x8009e4 <pxCurrentTCB>
    1bae:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <uxCurrentNumberOfTasks>
    1bb2:	81 30       	cpi	r24, 0x01	; 1
    1bb4:	f1 f5       	brne	.+124    	; 0x1c32 <xTaskCreate+0x1a6>
    1bb6:	0c e9       	ldi	r16, 0x9C	; 156
    1bb8:	19 e0       	ldi	r17, 0x09	; 9
    1bba:	0f 2e       	mov	r0, r31
    1bbc:	f4 ee       	ldi	r31, 0xE4	; 228
    1bbe:	ef 2e       	mov	r14, r31
    1bc0:	f9 e0       	ldi	r31, 0x09	; 9
    1bc2:	ff 2e       	mov	r15, r31
    1bc4:	f0 2d       	mov	r31, r0
    1bc6:	c8 01       	movw	r24, r16
    1bc8:	0e 94 2b 06 	call	0xc56	; 0xc56 <vListInitialise>
    1bcc:	07 5f       	subi	r16, 0xF7	; 247
    1bce:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd0:	0e 15       	cp	r16, r14
    1bd2:	1f 05       	cpc	r17, r15
    1bd4:	c1 f7       	brne	.-16     	; 0x1bc6 <xTaskCreate+0x13a>
    1bd6:	83 e9       	ldi	r24, 0x93	; 147
    1bd8:	99 e0       	ldi	r25, 0x09	; 9
    1bda:	0e 94 2b 06 	call	0xc56	; 0xc56 <vListInitialise>
    1bde:	8a e8       	ldi	r24, 0x8A	; 138
    1be0:	99 e0       	ldi	r25, 0x09	; 9
    1be2:	0e 94 2b 06 	call	0xc56	; 0xc56 <vListInitialise>
    1be6:	8d e7       	ldi	r24, 0x7D	; 125
    1be8:	99 e0       	ldi	r25, 0x09	; 9
    1bea:	0e 94 2b 06 	call	0xc56	; 0xc56 <vListInitialise>
    1bee:	84 e7       	ldi	r24, 0x74	; 116
    1bf0:	99 e0       	ldi	r25, 0x09	; 9
    1bf2:	0e 94 2b 06 	call	0xc56	; 0xc56 <vListInitialise>
    1bf6:	83 e9       	ldi	r24, 0x93	; 147
    1bf8:	99 e0       	ldi	r25, 0x09	; 9
    1bfa:	90 93 89 09 	sts	0x0989, r25	; 0x800989 <pxDelayedTaskList+0x1>
    1bfe:	80 93 88 09 	sts	0x0988, r24	; 0x800988 <pxDelayedTaskList>
    1c02:	8a e8       	ldi	r24, 0x8A	; 138
    1c04:	99 e0       	ldi	r25, 0x09	; 9
    1c06:	90 93 87 09 	sts	0x0987, r25	; 0x800987 <pxOverflowDelayedTaskList+0x1>
    1c0a:	80 93 86 09 	sts	0x0986, r24	; 0x800986 <pxOverflowDelayedTaskList>
    1c0e:	11 c0       	rjmp	.+34     	; 0x1c32 <xTaskCreate+0x1a6>
    1c10:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <xSchedulerRunning>
    1c14:	81 11       	cpse	r24, r1
    1c16:	0d c0       	rjmp	.+26     	; 0x1c32 <xTaskCreate+0x1a6>
    1c18:	e0 91 e4 09 	lds	r30, 0x09E4	; 0x8009e4 <pxCurrentTCB>
    1c1c:	f0 91 e5 09 	lds	r31, 0x09E5	; 0x8009e5 <pxCurrentTCB+0x1>
    1c20:	96 89       	ldd	r25, Z+22	; 0x16
    1c22:	f3 01       	movw	r30, r6
    1c24:	86 89       	ldd	r24, Z+22	; 0x16
    1c26:	89 17       	cp	r24, r25
    1c28:	20 f0       	brcs	.+8      	; 0x1c32 <xTaskCreate+0x1a6>
    1c2a:	70 92 e5 09 	sts	0x09E5, r7	; 0x8009e5 <pxCurrentTCB+0x1>
    1c2e:	60 92 e4 09 	sts	0x09E4, r6	; 0x8009e4 <pxCurrentTCB>
    1c32:	80 91 6a 09 	lds	r24, 0x096A	; 0x80096a <uxTaskNumber>
    1c36:	8f 5f       	subi	r24, 0xFF	; 255
    1c38:	80 93 6a 09 	sts	0x096A, r24	; 0x80096a <uxTaskNumber>
    1c3c:	f3 01       	movw	r30, r6
    1c3e:	81 a3       	std	Z+33, r24	; 0x21
    1c40:	86 89       	ldd	r24, Z+22	; 0x16
    1c42:	90 91 6f 09 	lds	r25, 0x096F	; 0x80096f <uxTopReadyPriority>
    1c46:	98 17       	cp	r25, r24
    1c48:	10 f4       	brcc	.+4      	; 0x1c4e <xTaskCreate+0x1c2>
    1c4a:	80 93 6f 09 	sts	0x096F, r24	; 0x80096f <uxTopReadyPriority>
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	9c 01       	movw	r18, r24
    1c52:	22 0f       	add	r18, r18
    1c54:	33 1f       	adc	r19, r19
    1c56:	22 0f       	add	r18, r18
    1c58:	33 1f       	adc	r19, r19
    1c5a:	22 0f       	add	r18, r18
    1c5c:	33 1f       	adc	r19, r19
    1c5e:	82 0f       	add	r24, r18
    1c60:	93 1f       	adc	r25, r19
    1c62:	be 01       	movw	r22, r28
    1c64:	84 56       	subi	r24, 0x64	; 100
    1c66:	96 4f       	sbci	r25, 0xF6	; 246
    1c68:	0e 94 3d 06 	call	0xc7a	; 0xc7a <vListInsertEnd>
    1c6c:	0f 90       	pop	r0
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <xSchedulerRunning>
    1c74:	88 23       	and	r24, r24
    1c76:	69 f0       	breq	.+26     	; 0x1c92 <xTaskCreate+0x206>
    1c78:	e0 91 e4 09 	lds	r30, 0x09E4	; 0x8009e4 <pxCurrentTCB>
    1c7c:	f0 91 e5 09 	lds	r31, 0x09E5	; 0x8009e5 <pxCurrentTCB+0x1>
    1c80:	96 89       	ldd	r25, Z+22	; 0x16
    1c82:	f3 01       	movw	r30, r6
    1c84:	86 89       	ldd	r24, Z+22	; 0x16
    1c86:	98 17       	cp	r25, r24
    1c88:	30 f4       	brcc	.+12     	; 0x1c96 <xTaskCreate+0x20a>
    1c8a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <vPortYield>
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	05 c0       	rjmp	.+10     	; 0x1c9c <xTaskCreate+0x210>
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	03 c0       	rjmp	.+6      	; 0x1c9c <xTaskCreate+0x210>
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	01 c0       	rjmp	.+2      	; 0x1c9c <xTaskCreate+0x210>
    1c9a:	8f ef       	ldi	r24, 0xFF	; 255
    1c9c:	df 91       	pop	r29
    1c9e:	cf 91       	pop	r28
    1ca0:	1f 91       	pop	r17
    1ca2:	0f 91       	pop	r16
    1ca4:	ff 90       	pop	r15
    1ca6:	ef 90       	pop	r14
    1ca8:	df 90       	pop	r13
    1caa:	cf 90       	pop	r12
    1cac:	bf 90       	pop	r11
    1cae:	af 90       	pop	r10
    1cb0:	9f 90       	pop	r9
    1cb2:	8f 90       	pop	r8
    1cb4:	7f 90       	pop	r7
    1cb6:	6f 90       	pop	r6
    1cb8:	5f 90       	pop	r5
    1cba:	4f 90       	pop	r4
    1cbc:	08 95       	ret

00001cbe <vTaskStartScheduler>:
    1cbe:	ef 92       	push	r14
    1cc0:	ff 92       	push	r15
    1cc2:	0f 93       	push	r16
    1cc4:	0f 2e       	mov	r0, r31
    1cc6:	f6 e6       	ldi	r31, 0x66	; 102
    1cc8:	ef 2e       	mov	r14, r31
    1cca:	f9 e0       	ldi	r31, 0x09	; 9
    1ccc:	ff 2e       	mov	r15, r31
    1cce:	f0 2d       	mov	r31, r0
    1cd0:	00 e0       	ldi	r16, 0x00	; 0
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	45 e5       	ldi	r20, 0x55	; 85
    1cd8:	50 e0       	ldi	r21, 0x00	; 0
    1cda:	6e e4       	ldi	r22, 0x4E	; 78
    1cdc:	71 e0       	ldi	r23, 0x01	; 1
    1cde:	8b ee       	ldi	r24, 0xEB	; 235
    1ce0:	9f e0       	ldi	r25, 0x0F	; 15
    1ce2:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <xTaskCreate>
    1ce6:	81 30       	cpi	r24, 0x01	; 1
    1ce8:	a1 f4       	brne	.+40     	; 0x1d12 <vTaskStartScheduler+0x54>
    1cea:	0e 94 7d 12 	call	0x24fa	; 0x24fa <xTimerCreateTimerTask>
    1cee:	81 30       	cpi	r24, 0x01	; 1
    1cf0:	81 f4       	brne	.+32     	; 0x1d12 <vTaskStartScheduler+0x54>
    1cf2:	f8 94       	cli
    1cf4:	8f ef       	ldi	r24, 0xFF	; 255
    1cf6:	9f ef       	ldi	r25, 0xFF	; 255
    1cf8:	90 93 69 09 	sts	0x0969, r25	; 0x800969 <xNextTaskUnblockTime+0x1>
    1cfc:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <xNextTaskUnblockTime>
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	80 93 6e 09 	sts	0x096E, r24	; 0x80096e <xSchedulerRunning>
    1d06:	10 92 71 09 	sts	0x0971, r1	; 0x800971 <xTickCount+0x1>
    1d0a:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <xTickCount>
    1d0e:	0e 94 21 07 	call	0xe42	; 0xe42 <xPortStartScheduler>
    1d12:	0f 91       	pop	r16
    1d14:	ff 90       	pop	r15
    1d16:	ef 90       	pop	r14
    1d18:	08 95       	ret

00001d1a <vTaskSuspendAll>:
    1d1a:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <uxSchedulerSuspended>
    1d1e:	8f 5f       	subi	r24, 0xFF	; 255
    1d20:	80 93 65 09 	sts	0x0965, r24	; 0x800965 <uxSchedulerSuspended>
    1d24:	08 95       	ret

00001d26 <xTaskGetTickCount>:
    1d26:	0f b6       	in	r0, 0x3f	; 63
    1d28:	f8 94       	cli
    1d2a:	0f 92       	push	r0
    1d2c:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <xTickCount>
    1d30:	90 91 71 09 	lds	r25, 0x0971	; 0x800971 <xTickCount+0x1>
    1d34:	0f 90       	pop	r0
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	08 95       	ret

00001d3a <xTaskIncrementTick>:
    1d3a:	cf 92       	push	r12
    1d3c:	df 92       	push	r13
    1d3e:	ef 92       	push	r14
    1d40:	ff 92       	push	r15
    1d42:	0f 93       	push	r16
    1d44:	1f 93       	push	r17
    1d46:	cf 93       	push	r28
    1d48:	df 93       	push	r29
    1d4a:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <uxSchedulerSuspended>
    1d4e:	81 11       	cpse	r24, r1
    1d50:	99 c0       	rjmp	.+306    	; 0x1e84 <xTaskIncrementTick+0x14a>
    1d52:	e0 90 70 09 	lds	r14, 0x0970	; 0x800970 <xTickCount>
    1d56:	f0 90 71 09 	lds	r15, 0x0971	; 0x800971 <xTickCount+0x1>
    1d5a:	8f ef       	ldi	r24, 0xFF	; 255
    1d5c:	e8 1a       	sub	r14, r24
    1d5e:	f8 0a       	sbc	r15, r24
    1d60:	f0 92 71 09 	sts	0x0971, r15	; 0x800971 <xTickCount+0x1>
    1d64:	e0 92 70 09 	sts	0x0970, r14	; 0x800970 <xTickCount>
    1d68:	e1 14       	cp	r14, r1
    1d6a:	f1 04       	cpc	r15, r1
    1d6c:	b9 f4       	brne	.+46     	; 0x1d9c <xTaskIncrementTick+0x62>
    1d6e:	80 91 88 09 	lds	r24, 0x0988	; 0x800988 <pxDelayedTaskList>
    1d72:	90 91 89 09 	lds	r25, 0x0989	; 0x800989 <pxDelayedTaskList+0x1>
    1d76:	20 91 86 09 	lds	r18, 0x0986	; 0x800986 <pxOverflowDelayedTaskList>
    1d7a:	30 91 87 09 	lds	r19, 0x0987	; 0x800987 <pxOverflowDelayedTaskList+0x1>
    1d7e:	30 93 89 09 	sts	0x0989, r19	; 0x800989 <pxDelayedTaskList+0x1>
    1d82:	20 93 88 09 	sts	0x0988, r18	; 0x800988 <pxDelayedTaskList>
    1d86:	90 93 87 09 	sts	0x0987, r25	; 0x800987 <pxOverflowDelayedTaskList+0x1>
    1d8a:	80 93 86 09 	sts	0x0986, r24	; 0x800986 <pxOverflowDelayedTaskList>
    1d8e:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <xNumOfOverflows>
    1d92:	8f 5f       	subi	r24, 0xFF	; 255
    1d94:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <xNumOfOverflows>
    1d98:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <prvResetNextTaskUnblockTime>
    1d9c:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <xNextTaskUnblockTime>
    1da0:	90 91 69 09 	lds	r25, 0x0969	; 0x800969 <xNextTaskUnblockTime+0x1>
    1da4:	e8 16       	cp	r14, r24
    1da6:	f9 06       	cpc	r15, r25
    1da8:	10 f4       	brcc	.+4      	; 0x1dae <xTaskIncrementTick+0x74>
    1daa:	d1 2c       	mov	r13, r1
    1dac:	53 c0       	rjmp	.+166    	; 0x1e54 <xTaskIncrementTick+0x11a>
    1dae:	d1 2c       	mov	r13, r1
    1db0:	cc 24       	eor	r12, r12
    1db2:	c3 94       	inc	r12
    1db4:	e0 91 88 09 	lds	r30, 0x0988	; 0x800988 <pxDelayedTaskList>
    1db8:	f0 91 89 09 	lds	r31, 0x0989	; 0x800989 <pxDelayedTaskList+0x1>
    1dbc:	90 81       	ld	r25, Z
    1dbe:	91 11       	cpse	r25, r1
    1dc0:	07 c0       	rjmp	.+14     	; 0x1dd0 <xTaskIncrementTick+0x96>
    1dc2:	8f ef       	ldi	r24, 0xFF	; 255
    1dc4:	9f ef       	ldi	r25, 0xFF	; 255
    1dc6:	90 93 69 09 	sts	0x0969, r25	; 0x800969 <xNextTaskUnblockTime+0x1>
    1dca:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <xNextTaskUnblockTime>
    1dce:	42 c0       	rjmp	.+132    	; 0x1e54 <xTaskIncrementTick+0x11a>
    1dd0:	e0 91 88 09 	lds	r30, 0x0988	; 0x800988 <pxDelayedTaskList>
    1dd4:	f0 91 89 09 	lds	r31, 0x0989	; 0x800989 <pxDelayedTaskList+0x1>
    1dd8:	05 80       	ldd	r0, Z+5	; 0x05
    1dda:	f6 81       	ldd	r31, Z+6	; 0x06
    1ddc:	e0 2d       	mov	r30, r0
    1dde:	c6 81       	ldd	r28, Z+6	; 0x06
    1de0:	d7 81       	ldd	r29, Z+7	; 0x07
    1de2:	2a 81       	ldd	r18, Y+2	; 0x02
    1de4:	3b 81       	ldd	r19, Y+3	; 0x03
    1de6:	e2 16       	cp	r14, r18
    1de8:	f3 06       	cpc	r15, r19
    1dea:	28 f4       	brcc	.+10     	; 0x1df6 <xTaskIncrementTick+0xbc>
    1dec:	30 93 69 09 	sts	0x0969, r19	; 0x800969 <xNextTaskUnblockTime+0x1>
    1df0:	20 93 68 09 	sts	0x0968, r18	; 0x800968 <xNextTaskUnblockTime>
    1df4:	2f c0       	rjmp	.+94     	; 0x1e54 <xTaskIncrementTick+0x11a>
    1df6:	8e 01       	movw	r16, r28
    1df8:	0e 5f       	subi	r16, 0xFE	; 254
    1dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfc:	c8 01       	movw	r24, r16
    1dfe:	0e 94 8f 06 	call	0xd1e	; 0xd1e <uxListRemove>
    1e02:	8c 89       	ldd	r24, Y+20	; 0x14
    1e04:	9d 89       	ldd	r25, Y+21	; 0x15
    1e06:	89 2b       	or	r24, r25
    1e08:	21 f0       	breq	.+8      	; 0x1e12 <xTaskIncrementTick+0xd8>
    1e0a:	ce 01       	movw	r24, r28
    1e0c:	0c 96       	adiw	r24, 0x0c	; 12
    1e0e:	0e 94 8f 06 	call	0xd1e	; 0xd1e <uxListRemove>
    1e12:	2e 89       	ldd	r18, Y+22	; 0x16
    1e14:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <uxTopReadyPriority>
    1e18:	82 17       	cp	r24, r18
    1e1a:	10 f4       	brcc	.+4      	; 0x1e20 <xTaskIncrementTick+0xe6>
    1e1c:	20 93 6f 09 	sts	0x096F, r18	; 0x80096f <uxTopReadyPriority>
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	c9 01       	movw	r24, r18
    1e24:	88 0f       	add	r24, r24
    1e26:	99 1f       	adc	r25, r25
    1e28:	88 0f       	add	r24, r24
    1e2a:	99 1f       	adc	r25, r25
    1e2c:	88 0f       	add	r24, r24
    1e2e:	99 1f       	adc	r25, r25
    1e30:	82 0f       	add	r24, r18
    1e32:	93 1f       	adc	r25, r19
    1e34:	b8 01       	movw	r22, r16
    1e36:	84 56       	subi	r24, 0x64	; 100
    1e38:	96 4f       	sbci	r25, 0xF6	; 246
    1e3a:	0e 94 3d 06 	call	0xc7a	; 0xc7a <vListInsertEnd>
    1e3e:	e0 91 e4 09 	lds	r30, 0x09E4	; 0x8009e4 <pxCurrentTCB>
    1e42:	f0 91 e5 09 	lds	r31, 0x09E5	; 0x8009e5 <pxCurrentTCB+0x1>
    1e46:	9e 89       	ldd	r25, Y+22	; 0x16
    1e48:	86 89       	ldd	r24, Z+22	; 0x16
    1e4a:	98 17       	cp	r25, r24
    1e4c:	08 f4       	brcc	.+2      	; 0x1e50 <xTaskIncrementTick+0x116>
    1e4e:	b2 cf       	rjmp	.-156    	; 0x1db4 <xTaskIncrementTick+0x7a>
    1e50:	dc 2c       	mov	r13, r12
    1e52:	b0 cf       	rjmp	.-160    	; 0x1db4 <xTaskIncrementTick+0x7a>
    1e54:	e0 91 e4 09 	lds	r30, 0x09E4	; 0x8009e4 <pxCurrentTCB>
    1e58:	f0 91 e5 09 	lds	r31, 0x09E5	; 0x8009e5 <pxCurrentTCB+0x1>
    1e5c:	86 89       	ldd	r24, Z+22	; 0x16
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	fc 01       	movw	r30, r24
    1e62:	ee 0f       	add	r30, r30
    1e64:	ff 1f       	adc	r31, r31
    1e66:	ee 0f       	add	r30, r30
    1e68:	ff 1f       	adc	r31, r31
    1e6a:	ee 0f       	add	r30, r30
    1e6c:	ff 1f       	adc	r31, r31
    1e6e:	8e 0f       	add	r24, r30
    1e70:	9f 1f       	adc	r25, r31
    1e72:	fc 01       	movw	r30, r24
    1e74:	e4 56       	subi	r30, 0x64	; 100
    1e76:	f6 4f       	sbci	r31, 0xF6	; 246
    1e78:	80 81       	ld	r24, Z
    1e7a:	82 30       	cpi	r24, 0x02	; 2
    1e7c:	48 f0       	brcs	.+18     	; 0x1e90 <xTaskIncrementTick+0x156>
    1e7e:	dd 24       	eor	r13, r13
    1e80:	d3 94       	inc	r13
    1e82:	06 c0       	rjmp	.+12     	; 0x1e90 <xTaskIncrementTick+0x156>
    1e84:	80 91 6d 09 	lds	r24, 0x096D	; 0x80096d <uxPendedTicks>
    1e88:	8f 5f       	subi	r24, 0xFF	; 255
    1e8a:	80 93 6d 09 	sts	0x096D, r24	; 0x80096d <uxPendedTicks>
    1e8e:	d1 2c       	mov	r13, r1
    1e90:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <xYieldPending>
    1e94:	88 23       	and	r24, r24
    1e96:	11 f0       	breq	.+4      	; 0x1e9c <xTaskIncrementTick+0x162>
    1e98:	dd 24       	eor	r13, r13
    1e9a:	d3 94       	inc	r13
    1e9c:	8d 2d       	mov	r24, r13
    1e9e:	df 91       	pop	r29
    1ea0:	cf 91       	pop	r28
    1ea2:	1f 91       	pop	r17
    1ea4:	0f 91       	pop	r16
    1ea6:	ff 90       	pop	r15
    1ea8:	ef 90       	pop	r14
    1eaa:	df 90       	pop	r13
    1eac:	cf 90       	pop	r12
    1eae:	08 95       	ret

00001eb0 <xTaskResumeAll>:
    1eb0:	df 92       	push	r13
    1eb2:	ef 92       	push	r14
    1eb4:	ff 92       	push	r15
    1eb6:	0f 93       	push	r16
    1eb8:	1f 93       	push	r17
    1eba:	cf 93       	push	r28
    1ebc:	df 93       	push	r29
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	0f 92       	push	r0
    1ec4:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <uxSchedulerSuspended>
    1ec8:	81 50       	subi	r24, 0x01	; 1
    1eca:	80 93 65 09 	sts	0x0965, r24	; 0x800965 <uxSchedulerSuspended>
    1ece:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <uxSchedulerSuspended>
    1ed2:	81 11       	cpse	r24, r1
    1ed4:	5f c0       	rjmp	.+190    	; 0x1f94 <xTaskResumeAll+0xe4>
    1ed6:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <uxCurrentNumberOfTasks>
    1eda:	81 11       	cpse	r24, r1
    1edc:	33 c0       	rjmp	.+102    	; 0x1f44 <xTaskResumeAll+0x94>
    1ede:	5d c0       	rjmp	.+186    	; 0x1f9a <xTaskResumeAll+0xea>
    1ee0:	d7 01       	movw	r26, r14
    1ee2:	15 96       	adiw	r26, 0x05	; 5
    1ee4:	ed 91       	ld	r30, X+
    1ee6:	fc 91       	ld	r31, X
    1ee8:	16 97       	sbiw	r26, 0x06	; 6
    1eea:	c6 81       	ldd	r28, Z+6	; 0x06
    1eec:	d7 81       	ldd	r29, Z+7	; 0x07
    1eee:	ce 01       	movw	r24, r28
    1ef0:	0c 96       	adiw	r24, 0x0c	; 12
    1ef2:	0e 94 8f 06 	call	0xd1e	; 0xd1e <uxListRemove>
    1ef6:	8e 01       	movw	r16, r28
    1ef8:	0e 5f       	subi	r16, 0xFE	; 254
    1efa:	1f 4f       	sbci	r17, 0xFF	; 255
    1efc:	c8 01       	movw	r24, r16
    1efe:	0e 94 8f 06 	call	0xd1e	; 0xd1e <uxListRemove>
    1f02:	2e 89       	ldd	r18, Y+22	; 0x16
    1f04:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <uxTopReadyPriority>
    1f08:	82 17       	cp	r24, r18
    1f0a:	10 f4       	brcc	.+4      	; 0x1f10 <xTaskResumeAll+0x60>
    1f0c:	20 93 6f 09 	sts	0x096F, r18	; 0x80096f <uxTopReadyPriority>
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	c9 01       	movw	r24, r18
    1f14:	88 0f       	add	r24, r24
    1f16:	99 1f       	adc	r25, r25
    1f18:	88 0f       	add	r24, r24
    1f1a:	99 1f       	adc	r25, r25
    1f1c:	88 0f       	add	r24, r24
    1f1e:	99 1f       	adc	r25, r25
    1f20:	82 0f       	add	r24, r18
    1f22:	93 1f       	adc	r25, r19
    1f24:	b8 01       	movw	r22, r16
    1f26:	84 56       	subi	r24, 0x64	; 100
    1f28:	96 4f       	sbci	r25, 0xF6	; 246
    1f2a:	0e 94 3d 06 	call	0xc7a	; 0xc7a <vListInsertEnd>
    1f2e:	e0 91 e4 09 	lds	r30, 0x09E4	; 0x8009e4 <pxCurrentTCB>
    1f32:	f0 91 e5 09 	lds	r31, 0x09E5	; 0x8009e5 <pxCurrentTCB+0x1>
    1f36:	9e 89       	ldd	r25, Y+22	; 0x16
    1f38:	86 89       	ldd	r24, Z+22	; 0x16
    1f3a:	98 17       	cp	r25, r24
    1f3c:	68 f0       	brcs	.+26     	; 0x1f58 <xTaskResumeAll+0xa8>
    1f3e:	d0 92 6c 09 	sts	0x096C, r13	; 0x80096c <xYieldPending>
    1f42:	0a c0       	rjmp	.+20     	; 0x1f58 <xTaskResumeAll+0xa8>
    1f44:	c0 e0       	ldi	r28, 0x00	; 0
    1f46:	d0 e0       	ldi	r29, 0x00	; 0
    1f48:	0f 2e       	mov	r0, r31
    1f4a:	fd e7       	ldi	r31, 0x7D	; 125
    1f4c:	ef 2e       	mov	r14, r31
    1f4e:	f9 e0       	ldi	r31, 0x09	; 9
    1f50:	ff 2e       	mov	r15, r31
    1f52:	f0 2d       	mov	r31, r0
    1f54:	dd 24       	eor	r13, r13
    1f56:	d3 94       	inc	r13
    1f58:	f7 01       	movw	r30, r14
    1f5a:	80 81       	ld	r24, Z
    1f5c:	81 11       	cpse	r24, r1
    1f5e:	c0 cf       	rjmp	.-128    	; 0x1ee0 <xTaskResumeAll+0x30>
    1f60:	cd 2b       	or	r28, r29
    1f62:	11 f0       	breq	.+4      	; 0x1f68 <xTaskResumeAll+0xb8>
    1f64:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <prvResetNextTaskUnblockTime>
    1f68:	c0 91 6d 09 	lds	r28, 0x096D	; 0x80096d <uxPendedTicks>
    1f6c:	cc 23       	and	r28, r28
    1f6e:	51 f0       	breq	.+20     	; 0x1f84 <xTaskResumeAll+0xd4>
    1f70:	d1 e0       	ldi	r29, 0x01	; 1
    1f72:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <xTaskIncrementTick>
    1f76:	81 11       	cpse	r24, r1
    1f78:	d0 93 6c 09 	sts	0x096C, r29	; 0x80096c <xYieldPending>
    1f7c:	c1 50       	subi	r28, 0x01	; 1
    1f7e:	c9 f7       	brne	.-14     	; 0x1f72 <xTaskResumeAll+0xc2>
    1f80:	10 92 6d 09 	sts	0x096D, r1	; 0x80096d <uxPendedTicks>
    1f84:	80 91 6c 09 	lds	r24, 0x096C	; 0x80096c <xYieldPending>
    1f88:	88 23       	and	r24, r24
    1f8a:	31 f0       	breq	.+12     	; 0x1f98 <xTaskResumeAll+0xe8>
    1f8c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <vPortYield>
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	03 c0       	rjmp	.+6      	; 0x1f9a <xTaskResumeAll+0xea>
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	01 c0       	rjmp	.+2      	; 0x1f9a <xTaskResumeAll+0xea>
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	0f 90       	pop	r0
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	df 91       	pop	r29
    1fa0:	cf 91       	pop	r28
    1fa2:	1f 91       	pop	r17
    1fa4:	0f 91       	pop	r16
    1fa6:	ff 90       	pop	r15
    1fa8:	ef 90       	pop	r14
    1faa:	df 90       	pop	r13
    1fac:	08 95       	ret

00001fae <vTaskDelay>:
    1fae:	cf 93       	push	r28
    1fb0:	df 93       	push	r29
    1fb2:	ec 01       	movw	r28, r24
    1fb4:	89 2b       	or	r24, r25
    1fb6:	51 f0       	breq	.+20     	; 0x1fcc <vTaskDelay+0x1e>
    1fb8:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <vTaskSuspendAll>
    1fbc:	60 e0       	ldi	r22, 0x00	; 0
    1fbe:	ce 01       	movw	r24, r28
    1fc0:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <prvAddCurrentTaskToDelayedList>
    1fc4:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <xTaskResumeAll>
    1fc8:	81 11       	cpse	r24, r1
    1fca:	02 c0       	rjmp	.+4      	; 0x1fd0 <vTaskDelay+0x22>
    1fcc:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <vPortYield>
    1fd0:	df 91       	pop	r29
    1fd2:	cf 91       	pop	r28
    1fd4:	08 95       	ret

00001fd6 <prvIdleTask>:
    1fd6:	04 e7       	ldi	r16, 0x74	; 116
    1fd8:	19 e0       	ldi	r17, 0x09	; 9
    1fda:	0f 2e       	mov	r0, r31
    1fdc:	fc e9       	ldi	r31, 0x9C	; 156
    1fde:	ef 2e       	mov	r14, r31
    1fe0:	f9 e0       	ldi	r31, 0x09	; 9
    1fe2:	ff 2e       	mov	r15, r31
    1fe4:	f0 2d       	mov	r31, r0
    1fe6:	29 c0       	rjmp	.+82     	; 0x203a <prvIdleTask+0x64>
    1fe8:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <vTaskSuspendAll>
    1fec:	d8 01       	movw	r26, r16
    1fee:	cc 91       	ld	r28, X
    1ff0:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <xTaskResumeAll>
    1ff4:	cc 23       	and	r28, r28
    1ff6:	09 f1       	breq	.+66     	; 0x203a <prvIdleTask+0x64>
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	0f 92       	push	r0
    1ffe:	d8 01       	movw	r26, r16
    2000:	15 96       	adiw	r26, 0x05	; 5
    2002:	ed 91       	ld	r30, X+
    2004:	fc 91       	ld	r31, X
    2006:	16 97       	sbiw	r26, 0x06	; 6
    2008:	c6 81       	ldd	r28, Z+6	; 0x06
    200a:	d7 81       	ldd	r29, Z+7	; 0x07
    200c:	ce 01       	movw	r24, r28
    200e:	02 96       	adiw	r24, 0x02	; 2
    2010:	0e 94 8f 06 	call	0xd1e	; 0xd1e <uxListRemove>
    2014:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <uxCurrentNumberOfTasks>
    2018:	81 50       	subi	r24, 0x01	; 1
    201a:	80 93 72 09 	sts	0x0972, r24	; 0x800972 <uxCurrentNumberOfTasks>
    201e:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <uxDeletedTasksWaitingCleanUp>
    2022:	81 50       	subi	r24, 0x01	; 1
    2024:	80 93 73 09 	sts	0x0973, r24	; 0x800973 <uxDeletedTasksWaitingCleanUp>
    2028:	0f 90       	pop	r0
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	8f 89       	ldd	r24, Y+23	; 0x17
    202e:	98 8d       	ldd	r25, Y+24	; 0x18
    2030:	0e 94 48 08 	call	0x1090	; 0x1090 <vPortFree>
    2034:	ce 01       	movw	r24, r28
    2036:	0e 94 48 08 	call	0x1090	; 0x1090 <vPortFree>
    203a:	80 91 73 09 	lds	r24, 0x0973	; 0x800973 <uxDeletedTasksWaitingCleanUp>
    203e:	81 11       	cpse	r24, r1
    2040:	d3 cf       	rjmp	.-90     	; 0x1fe8 <prvIdleTask+0x12>
    2042:	f7 01       	movw	r30, r14
    2044:	80 81       	ld	r24, Z
    2046:	82 30       	cpi	r24, 0x02	; 2
    2048:	10 f0       	brcs	.+4      	; 0x204e <prvIdleTask+0x78>
    204a:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <vPortYield>
    204e:	0e 94 ef 04 	call	0x9de	; 0x9de <vApplicationIdleHook>
    2052:	f3 cf       	rjmp	.-26     	; 0x203a <prvIdleTask+0x64>

00002054 <vTaskSetApplicationTaskTag>:
    2054:	00 97       	sbiw	r24, 0x00	; 0
    2056:	21 f4       	brne	.+8      	; 0x2060 <vTaskSetApplicationTaskTag+0xc>
    2058:	80 91 e4 09 	lds	r24, 0x09E4	; 0x8009e4 <pxCurrentTCB>
    205c:	90 91 e5 09 	lds	r25, 0x09E5	; 0x8009e5 <pxCurrentTCB+0x1>
    2060:	0f b6       	in	r0, 0x3f	; 63
    2062:	f8 94       	cli
    2064:	0f 92       	push	r0
    2066:	fc 01       	movw	r30, r24
    2068:	76 a3       	std	Z+38, r23	; 0x26
    206a:	65 a3       	std	Z+37, r22	; 0x25
    206c:	0f 90       	pop	r0
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	08 95       	ret

00002072 <vTaskSwitchContext>:
    2072:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <uxSchedulerSuspended>
    2076:	88 23       	and	r24, r24
    2078:	21 f0       	breq	.+8      	; 0x2082 <vTaskSwitchContext+0x10>
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <xYieldPending>
    2080:	08 95       	ret
    2082:	10 92 6c 09 	sts	0x096C, r1	; 0x80096c <xYieldPending>
    2086:	e0 91 e4 09 	lds	r30, 0x09E4	; 0x8009e4 <pxCurrentTCB>
    208a:	f0 91 e5 09 	lds	r31, 0x09E5	; 0x8009e5 <pxCurrentTCB+0x1>
    208e:	85 a1       	ldd	r24, Z+37	; 0x25
    2090:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <switch_out>
    2094:	20 91 6f 09 	lds	r18, 0x096F	; 0x80096f <uxTopReadyPriority>
    2098:	82 2f       	mov	r24, r18
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	fc 01       	movw	r30, r24
    209e:	ee 0f       	add	r30, r30
    20a0:	ff 1f       	adc	r31, r31
    20a2:	ee 0f       	add	r30, r30
    20a4:	ff 1f       	adc	r31, r31
    20a6:	ee 0f       	add	r30, r30
    20a8:	ff 1f       	adc	r31, r31
    20aa:	e8 0f       	add	r30, r24
    20ac:	f9 1f       	adc	r31, r25
    20ae:	e4 56       	subi	r30, 0x64	; 100
    20b0:	f6 4f       	sbci	r31, 0xF6	; 246
    20b2:	30 81       	ld	r19, Z
    20b4:	31 11       	cpse	r19, r1
    20b6:	11 c0       	rjmp	.+34     	; 0x20da <vTaskSwitchContext+0x68>
    20b8:	21 50       	subi	r18, 0x01	; 1
    20ba:	82 2f       	mov	r24, r18
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	fc 01       	movw	r30, r24
    20c0:	ee 0f       	add	r30, r30
    20c2:	ff 1f       	adc	r31, r31
    20c4:	ee 0f       	add	r30, r30
    20c6:	ff 1f       	adc	r31, r31
    20c8:	ee 0f       	add	r30, r30
    20ca:	ff 1f       	adc	r31, r31
    20cc:	e8 0f       	add	r30, r24
    20ce:	f9 1f       	adc	r31, r25
    20d0:	e4 56       	subi	r30, 0x64	; 100
    20d2:	f6 4f       	sbci	r31, 0xF6	; 246
    20d4:	30 81       	ld	r19, Z
    20d6:	33 23       	and	r19, r19
    20d8:	79 f3       	breq	.-34     	; 0x20b8 <vTaskSwitchContext+0x46>
    20da:	ac 01       	movw	r20, r24
    20dc:	44 0f       	add	r20, r20
    20de:	55 1f       	adc	r21, r21
    20e0:	44 0f       	add	r20, r20
    20e2:	55 1f       	adc	r21, r21
    20e4:	44 0f       	add	r20, r20
    20e6:	55 1f       	adc	r21, r21
    20e8:	48 0f       	add	r20, r24
    20ea:	59 1f       	adc	r21, r25
    20ec:	da 01       	movw	r26, r20
    20ee:	a4 56       	subi	r26, 0x64	; 100
    20f0:	b6 4f       	sbci	r27, 0xF6	; 246
    20f2:	11 96       	adiw	r26, 0x01	; 1
    20f4:	ed 91       	ld	r30, X+
    20f6:	fc 91       	ld	r31, X
    20f8:	12 97       	sbiw	r26, 0x02	; 2
    20fa:	02 80       	ldd	r0, Z+2	; 0x02
    20fc:	f3 81       	ldd	r31, Z+3	; 0x03
    20fe:	e0 2d       	mov	r30, r0
    2100:	12 96       	adiw	r26, 0x02	; 2
    2102:	fc 93       	st	X, r31
    2104:	ee 93       	st	-X, r30
    2106:	11 97       	sbiw	r26, 0x01	; 1
    2108:	41 56       	subi	r20, 0x61	; 97
    210a:	56 4f       	sbci	r21, 0xF6	; 246
    210c:	e4 17       	cp	r30, r20
    210e:	f5 07       	cpc	r31, r21
    2110:	29 f4       	brne	.+10     	; 0x211c <vTaskSwitchContext+0xaa>
    2112:	42 81       	ldd	r20, Z+2	; 0x02
    2114:	53 81       	ldd	r21, Z+3	; 0x03
    2116:	fd 01       	movw	r30, r26
    2118:	52 83       	std	Z+2, r21	; 0x02
    211a:	41 83       	std	Z+1, r20	; 0x01
    211c:	fc 01       	movw	r30, r24
    211e:	ee 0f       	add	r30, r30
    2120:	ff 1f       	adc	r31, r31
    2122:	ee 0f       	add	r30, r30
    2124:	ff 1f       	adc	r31, r31
    2126:	ee 0f       	add	r30, r30
    2128:	ff 1f       	adc	r31, r31
    212a:	8e 0f       	add	r24, r30
    212c:	9f 1f       	adc	r25, r31
    212e:	fc 01       	movw	r30, r24
    2130:	e4 56       	subi	r30, 0x64	; 100
    2132:	f6 4f       	sbci	r31, 0xF6	; 246
    2134:	01 80       	ldd	r0, Z+1	; 0x01
    2136:	f2 81       	ldd	r31, Z+2	; 0x02
    2138:	e0 2d       	mov	r30, r0
    213a:	86 81       	ldd	r24, Z+6	; 0x06
    213c:	97 81       	ldd	r25, Z+7	; 0x07
    213e:	90 93 e5 09 	sts	0x09E5, r25	; 0x8009e5 <pxCurrentTCB+0x1>
    2142:	80 93 e4 09 	sts	0x09E4, r24	; 0x8009e4 <pxCurrentTCB>
    2146:	20 93 6f 09 	sts	0x096F, r18	; 0x80096f <uxTopReadyPriority>
    214a:	e0 91 e4 09 	lds	r30, 0x09E4	; 0x8009e4 <pxCurrentTCB>
    214e:	f0 91 e5 09 	lds	r31, 0x09E5	; 0x8009e5 <pxCurrentTCB+0x1>
    2152:	85 a1       	ldd	r24, Z+37	; 0x25
    2154:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <switch_in>
    2158:	08 95       	ret

0000215a <vTaskPlaceOnEventList>:
    215a:	cf 93       	push	r28
    215c:	df 93       	push	r29
    215e:	eb 01       	movw	r28, r22
    2160:	20 91 e4 09 	lds	r18, 0x09E4	; 0x8009e4 <pxCurrentTCB>
    2164:	30 91 e5 09 	lds	r19, 0x09E5	; 0x8009e5 <pxCurrentTCB+0x1>
    2168:	b9 01       	movw	r22, r18
    216a:	64 5f       	subi	r22, 0xF4	; 244
    216c:	7f 4f       	sbci	r23, 0xFF	; 255
    216e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <vListInsert>
    2172:	61 e0       	ldi	r22, 0x01	; 1
    2174:	ce 01       	movw	r24, r28
    2176:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <prvAddCurrentTaskToDelayedList>
    217a:	df 91       	pop	r29
    217c:	cf 91       	pop	r28
    217e:	08 95       	ret

00002180 <vTaskPlaceOnEventListRestricted>:
    2180:	0f 93       	push	r16
    2182:	1f 93       	push	r17
    2184:	cf 93       	push	r28
    2186:	8b 01       	movw	r16, r22
    2188:	c4 2f       	mov	r28, r20
    218a:	20 91 e4 09 	lds	r18, 0x09E4	; 0x8009e4 <pxCurrentTCB>
    218e:	30 91 e5 09 	lds	r19, 0x09E5	; 0x8009e5 <pxCurrentTCB+0x1>
    2192:	b9 01       	movw	r22, r18
    2194:	64 5f       	subi	r22, 0xF4	; 244
    2196:	7f 4f       	sbci	r23, 0xFF	; 255
    2198:	0e 94 3d 06 	call	0xc7a	; 0xc7a <vListInsertEnd>
    219c:	cc 23       	and	r28, r28
    219e:	11 f0       	breq	.+4      	; 0x21a4 <vTaskPlaceOnEventListRestricted+0x24>
    21a0:	0f ef       	ldi	r16, 0xFF	; 255
    21a2:	1f ef       	ldi	r17, 0xFF	; 255
    21a4:	6c 2f       	mov	r22, r28
    21a6:	c8 01       	movw	r24, r16
    21a8:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <prvAddCurrentTaskToDelayedList>
    21ac:	cf 91       	pop	r28
    21ae:	1f 91       	pop	r17
    21b0:	0f 91       	pop	r16
    21b2:	08 95       	ret

000021b4 <xTaskRemoveFromEventList>:
    21b4:	0f 93       	push	r16
    21b6:	1f 93       	push	r17
    21b8:	cf 93       	push	r28
    21ba:	df 93       	push	r29
    21bc:	dc 01       	movw	r26, r24
    21be:	15 96       	adiw	r26, 0x05	; 5
    21c0:	ed 91       	ld	r30, X+
    21c2:	fc 91       	ld	r31, X
    21c4:	16 97       	sbiw	r26, 0x06	; 6
    21c6:	c6 81       	ldd	r28, Z+6	; 0x06
    21c8:	d7 81       	ldd	r29, Z+7	; 0x07
    21ca:	8e 01       	movw	r16, r28
    21cc:	04 5f       	subi	r16, 0xF4	; 244
    21ce:	1f 4f       	sbci	r17, 0xFF	; 255
    21d0:	c8 01       	movw	r24, r16
    21d2:	0e 94 8f 06 	call	0xd1e	; 0xd1e <uxListRemove>
    21d6:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <uxSchedulerSuspended>
    21da:	81 11       	cpse	r24, r1
    21dc:	1c c0       	rjmp	.+56     	; 0x2216 <xTaskRemoveFromEventList+0x62>
    21de:	0a 50       	subi	r16, 0x0A	; 10
    21e0:	11 09       	sbc	r17, r1
    21e2:	c8 01       	movw	r24, r16
    21e4:	0e 94 8f 06 	call	0xd1e	; 0xd1e <uxListRemove>
    21e8:	2e 89       	ldd	r18, Y+22	; 0x16
    21ea:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <uxTopReadyPriority>
    21ee:	82 17       	cp	r24, r18
    21f0:	10 f4       	brcc	.+4      	; 0x21f6 <xTaskRemoveFromEventList+0x42>
    21f2:	20 93 6f 09 	sts	0x096F, r18	; 0x80096f <uxTopReadyPriority>
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	c9 01       	movw	r24, r18
    21fa:	88 0f       	add	r24, r24
    21fc:	99 1f       	adc	r25, r25
    21fe:	88 0f       	add	r24, r24
    2200:	99 1f       	adc	r25, r25
    2202:	88 0f       	add	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	82 0f       	add	r24, r18
    2208:	93 1f       	adc	r25, r19
    220a:	b8 01       	movw	r22, r16
    220c:	84 56       	subi	r24, 0x64	; 100
    220e:	96 4f       	sbci	r25, 0xF6	; 246
    2210:	0e 94 3d 06 	call	0xc7a	; 0xc7a <vListInsertEnd>
    2214:	05 c0       	rjmp	.+10     	; 0x2220 <xTaskRemoveFromEventList+0x6c>
    2216:	b8 01       	movw	r22, r16
    2218:	8d e7       	ldi	r24, 0x7D	; 125
    221a:	99 e0       	ldi	r25, 0x09	; 9
    221c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <vListInsertEnd>
    2220:	e0 91 e4 09 	lds	r30, 0x09E4	; 0x8009e4 <pxCurrentTCB>
    2224:	f0 91 e5 09 	lds	r31, 0x09E5	; 0x8009e5 <pxCurrentTCB+0x1>
    2228:	9e 89       	ldd	r25, Y+22	; 0x16
    222a:	86 89       	ldd	r24, Z+22	; 0x16
    222c:	89 17       	cp	r24, r25
    222e:	20 f4       	brcc	.+8      	; 0x2238 <xTaskRemoveFromEventList+0x84>
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <xYieldPending>
    2236:	01 c0       	rjmp	.+2      	; 0x223a <xTaskRemoveFromEventList+0x86>
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	df 91       	pop	r29
    223c:	cf 91       	pop	r28
    223e:	1f 91       	pop	r17
    2240:	0f 91       	pop	r16
    2242:	08 95       	ret

00002244 <vTaskSetTimeOutState>:
    2244:	20 91 6b 09 	lds	r18, 0x096B	; 0x80096b <xNumOfOverflows>
    2248:	fc 01       	movw	r30, r24
    224a:	20 83       	st	Z, r18
    224c:	20 91 70 09 	lds	r18, 0x0970	; 0x800970 <xTickCount>
    2250:	30 91 71 09 	lds	r19, 0x0971	; 0x800971 <xTickCount+0x1>
    2254:	32 83       	std	Z+2, r19	; 0x02
    2256:	21 83       	std	Z+1, r18	; 0x01
    2258:	08 95       	ret

0000225a <xTaskCheckForTimeOut>:
    225a:	cf 93       	push	r28
    225c:	df 93       	push	r29
    225e:	fc 01       	movw	r30, r24
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	f8 94       	cli
    2264:	0f 92       	push	r0
    2266:	20 91 70 09 	lds	r18, 0x0970	; 0x800970 <xTickCount>
    226a:	30 91 71 09 	lds	r19, 0x0971	; 0x800971 <xTickCount+0x1>
    226e:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <xNumOfOverflows>
    2272:	90 81       	ld	r25, Z
    2274:	98 17       	cp	r25, r24
    2276:	29 f0       	breq	.+10     	; 0x2282 <xTaskCheckForTimeOut+0x28>
    2278:	81 81       	ldd	r24, Z+1	; 0x01
    227a:	92 81       	ldd	r25, Z+2	; 0x02
    227c:	28 17       	cp	r18, r24
    227e:	39 07       	cpc	r19, r25
    2280:	b0 f4       	brcc	.+44     	; 0x22ae <xTaskCheckForTimeOut+0x54>
    2282:	a1 81       	ldd	r26, Z+1	; 0x01
    2284:	b2 81       	ldd	r27, Z+2	; 0x02
    2286:	eb 01       	movw	r28, r22
    2288:	48 81       	ld	r20, Y
    228a:	59 81       	ldd	r21, Y+1	; 0x01
    228c:	c9 01       	movw	r24, r18
    228e:	8a 1b       	sub	r24, r26
    2290:	9b 0b       	sbc	r25, r27
    2292:	84 17       	cp	r24, r20
    2294:	95 07       	cpc	r25, r21
    2296:	68 f4       	brcc	.+26     	; 0x22b2 <xTaskCheckForTimeOut+0x58>
    2298:	cf 01       	movw	r24, r30
    229a:	a2 1b       	sub	r26, r18
    229c:	b3 0b       	sbc	r27, r19
    229e:	4a 0f       	add	r20, r26
    22a0:	5b 1f       	adc	r21, r27
    22a2:	59 83       	std	Y+1, r21	; 0x01
    22a4:	48 83       	st	Y, r20
    22a6:	0e 94 22 11 	call	0x2244	; 0x2244 <vTaskSetTimeOutState>
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	03 c0       	rjmp	.+6      	; 0x22b4 <xTaskCheckForTimeOut+0x5a>
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	01 c0       	rjmp	.+2      	; 0x22b4 <xTaskCheckForTimeOut+0x5a>
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	0f 90       	pop	r0
    22b6:	0f be       	out	0x3f, r0	; 63
    22b8:	df 91       	pop	r29
    22ba:	cf 91       	pop	r28
    22bc:	08 95       	ret

000022be <vTaskMissedYield>:
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	80 93 6c 09 	sts	0x096C, r24	; 0x80096c <xYieldPending>
    22c4:	08 95       	ret

000022c6 <xTaskGetSchedulerState>:
    22c6:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <xSchedulerRunning>
    22ca:	88 23       	and	r24, r24
    22cc:	31 f0       	breq	.+12     	; 0x22da <xTaskGetSchedulerState+0x14>
    22ce:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <uxSchedulerSuspended>
    22d2:	88 23       	and	r24, r24
    22d4:	21 f0       	breq	.+8      	; 0x22de <xTaskGetSchedulerState+0x18>
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	08 95       	ret
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	08 95       	ret
    22de:	82 e0       	ldi	r24, 0x02	; 2
    22e0:	08 95       	ret

000022e2 <vTaskPriorityInherit>:
    22e2:	0f 93       	push	r16
    22e4:	1f 93       	push	r17
    22e6:	cf 93       	push	r28
    22e8:	df 93       	push	r29
    22ea:	fc 01       	movw	r30, r24
    22ec:	89 2b       	or	r24, r25
    22ee:	09 f4       	brne	.+2      	; 0x22f2 <vTaskPriorityInherit+0x10>
    22f0:	55 c0       	rjmp	.+170    	; 0x239c <vTaskPriorityInherit+0xba>
    22f2:	26 89       	ldd	r18, Z+22	; 0x16
    22f4:	a0 91 e4 09 	lds	r26, 0x09E4	; 0x8009e4 <pxCurrentTCB>
    22f8:	b0 91 e5 09 	lds	r27, 0x09E5	; 0x8009e5 <pxCurrentTCB+0x1>
    22fc:	56 96       	adiw	r26, 0x16	; 22
    22fe:	8c 91       	ld	r24, X
    2300:	28 17       	cp	r18, r24
    2302:	08 f0       	brcs	.+2      	; 0x2306 <vTaskPriorityInherit+0x24>
    2304:	4b c0       	rjmp	.+150    	; 0x239c <vTaskPriorityInherit+0xba>
    2306:	84 85       	ldd	r24, Z+12	; 0x0c
    2308:	95 85       	ldd	r25, Z+13	; 0x0d
    230a:	99 23       	and	r25, r25
    230c:	64 f0       	brlt	.+24     	; 0x2326 <vTaskPriorityInherit+0x44>
    230e:	a0 91 e4 09 	lds	r26, 0x09E4	; 0x8009e4 <pxCurrentTCB>
    2312:	b0 91 e5 09 	lds	r27, 0x09E5	; 0x8009e5 <pxCurrentTCB+0x1>
    2316:	56 96       	adiw	r26, 0x16	; 22
    2318:	3c 91       	ld	r19, X
    231a:	88 e0       	ldi	r24, 0x08	; 8
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	83 1b       	sub	r24, r19
    2320:	91 09       	sbc	r25, r1
    2322:	95 87       	std	Z+13, r25	; 0x0d
    2324:	84 87       	std	Z+12, r24	; 0x0c
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	c9 01       	movw	r24, r18
    232a:	88 0f       	add	r24, r24
    232c:	99 1f       	adc	r25, r25
    232e:	88 0f       	add	r24, r24
    2330:	99 1f       	adc	r25, r25
    2332:	88 0f       	add	r24, r24
    2334:	99 1f       	adc	r25, r25
    2336:	28 0f       	add	r18, r24
    2338:	39 1f       	adc	r19, r25
    233a:	24 56       	subi	r18, 0x64	; 100
    233c:	36 4f       	sbci	r19, 0xF6	; 246
    233e:	82 85       	ldd	r24, Z+10	; 0x0a
    2340:	93 85       	ldd	r25, Z+11	; 0x0b
    2342:	82 17       	cp	r24, r18
    2344:	93 07       	cpc	r25, r19
    2346:	19 f5       	brne	.+70     	; 0x238e <vTaskPriorityInherit+0xac>
    2348:	8f 01       	movw	r16, r30
    234a:	ef 01       	movw	r28, r30
    234c:	22 96       	adiw	r28, 0x02	; 2
    234e:	ce 01       	movw	r24, r28
    2350:	0e 94 8f 06 	call	0xd1e	; 0xd1e <uxListRemove>
    2354:	e0 91 e4 09 	lds	r30, 0x09E4	; 0x8009e4 <pxCurrentTCB>
    2358:	f0 91 e5 09 	lds	r31, 0x09E5	; 0x8009e5 <pxCurrentTCB+0x1>
    235c:	26 89       	ldd	r18, Z+22	; 0x16
    235e:	f8 01       	movw	r30, r16
    2360:	26 8b       	std	Z+22, r18	; 0x16
    2362:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <uxTopReadyPriority>
    2366:	82 17       	cp	r24, r18
    2368:	10 f4       	brcc	.+4      	; 0x236e <vTaskPriorityInherit+0x8c>
    236a:	20 93 6f 09 	sts	0x096F, r18	; 0x80096f <uxTopReadyPriority>
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	c9 01       	movw	r24, r18
    2372:	88 0f       	add	r24, r24
    2374:	99 1f       	adc	r25, r25
    2376:	88 0f       	add	r24, r24
    2378:	99 1f       	adc	r25, r25
    237a:	88 0f       	add	r24, r24
    237c:	99 1f       	adc	r25, r25
    237e:	82 0f       	add	r24, r18
    2380:	93 1f       	adc	r25, r19
    2382:	be 01       	movw	r22, r28
    2384:	84 56       	subi	r24, 0x64	; 100
    2386:	96 4f       	sbci	r25, 0xF6	; 246
    2388:	0e 94 3d 06 	call	0xc7a	; 0xc7a <vListInsertEnd>
    238c:	07 c0       	rjmp	.+14     	; 0x239c <vTaskPriorityInherit+0xba>
    238e:	a0 91 e4 09 	lds	r26, 0x09E4	; 0x8009e4 <pxCurrentTCB>
    2392:	b0 91 e5 09 	lds	r27, 0x09E5	; 0x8009e5 <pxCurrentTCB+0x1>
    2396:	56 96       	adiw	r26, 0x16	; 22
    2398:	8c 91       	ld	r24, X
    239a:	86 8b       	std	Z+22, r24	; 0x16
    239c:	df 91       	pop	r29
    239e:	cf 91       	pop	r28
    23a0:	1f 91       	pop	r17
    23a2:	0f 91       	pop	r16
    23a4:	08 95       	ret

000023a6 <xTaskPriorityDisinherit>:
    23a6:	0f 93       	push	r16
    23a8:	1f 93       	push	r17
    23aa:	cf 93       	push	r28
    23ac:	df 93       	push	r29
    23ae:	fc 01       	movw	r30, r24
    23b0:	89 2b       	or	r24, r25
    23b2:	79 f1       	breq	.+94     	; 0x2412 <xTaskPriorityDisinherit+0x6c>
    23b4:	84 a1       	ldd	r24, Z+36	; 0x24
    23b6:	81 50       	subi	r24, 0x01	; 1
    23b8:	84 a3       	std	Z+36, r24	; 0x24
    23ba:	26 89       	ldd	r18, Z+22	; 0x16
    23bc:	93 a1       	ldd	r25, Z+35	; 0x23
    23be:	29 17       	cp	r18, r25
    23c0:	51 f1       	breq	.+84     	; 0x2416 <xTaskPriorityDisinherit+0x70>
    23c2:	81 11       	cpse	r24, r1
    23c4:	2a c0       	rjmp	.+84     	; 0x241a <xTaskPriorityDisinherit+0x74>
    23c6:	ef 01       	movw	r28, r30
    23c8:	8f 01       	movw	r16, r30
    23ca:	0e 5f       	subi	r16, 0xFE	; 254
    23cc:	1f 4f       	sbci	r17, 0xFF	; 255
    23ce:	c8 01       	movw	r24, r16
    23d0:	0e 94 8f 06 	call	0xd1e	; 0xd1e <uxListRemove>
    23d4:	2b a1       	ldd	r18, Y+35	; 0x23
    23d6:	2e 8b       	std	Y+22, r18	; 0x16
    23d8:	48 e0       	ldi	r20, 0x08	; 8
    23da:	50 e0       	ldi	r21, 0x00	; 0
    23dc:	42 1b       	sub	r20, r18
    23de:	51 09       	sbc	r21, r1
    23e0:	5d 87       	std	Y+13, r21	; 0x0d
    23e2:	4c 87       	std	Y+12, r20	; 0x0c
    23e4:	80 91 6f 09 	lds	r24, 0x096F	; 0x80096f <uxTopReadyPriority>
    23e8:	82 17       	cp	r24, r18
    23ea:	10 f4       	brcc	.+4      	; 0x23f0 <xTaskPriorityDisinherit+0x4a>
    23ec:	20 93 6f 09 	sts	0x096F, r18	; 0x80096f <uxTopReadyPriority>
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	c9 01       	movw	r24, r18
    23f4:	88 0f       	add	r24, r24
    23f6:	99 1f       	adc	r25, r25
    23f8:	88 0f       	add	r24, r24
    23fa:	99 1f       	adc	r25, r25
    23fc:	88 0f       	add	r24, r24
    23fe:	99 1f       	adc	r25, r25
    2400:	82 0f       	add	r24, r18
    2402:	93 1f       	adc	r25, r19
    2404:	b8 01       	movw	r22, r16
    2406:	84 56       	subi	r24, 0x64	; 100
    2408:	96 4f       	sbci	r25, 0xF6	; 246
    240a:	0e 94 3d 06 	call	0xc7a	; 0xc7a <vListInsertEnd>
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	05 c0       	rjmp	.+10     	; 0x241c <xTaskPriorityDisinherit+0x76>
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	03 c0       	rjmp	.+6      	; 0x241c <xTaskPriorityDisinherit+0x76>
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	01 c0       	rjmp	.+2      	; 0x241c <xTaskPriorityDisinherit+0x76>
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	df 91       	pop	r29
    241e:	cf 91       	pop	r28
    2420:	1f 91       	pop	r17
    2422:	0f 91       	pop	r16
    2424:	08 95       	ret

00002426 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    2426:	80 91 e4 09 	lds	r24, 0x09E4	; 0x8009e4 <pxCurrentTCB>
    242a:	90 91 e5 09 	lds	r25, 0x09E5	; 0x8009e5 <pxCurrentTCB+0x1>
    242e:	89 2b       	or	r24, r25
    2430:	39 f0       	breq	.+14     	; 0x2440 <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    2432:	e0 91 e4 09 	lds	r30, 0x09E4	; 0x8009e4 <pxCurrentTCB>
    2436:	f0 91 e5 09 	lds	r31, 0x09E5	; 0x8009e5 <pxCurrentTCB+0x1>
    243a:	84 a1       	ldd	r24, Z+36	; 0x24
    243c:	8f 5f       	subi	r24, 0xFF	; 255
    243e:	84 a3       	std	Z+36, r24	; 0x24
		}

		return pxCurrentTCB;
    2440:	80 91 e4 09 	lds	r24, 0x09E4	; 0x8009e4 <pxCurrentTCB>
    2444:	90 91 e5 09 	lds	r25, 0x09E5	; 0x8009e5 <pxCurrentTCB+0x1>
	}
    2448:	08 95       	ret

0000244a <prvInsertTimerInActiveList>:
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
	}
    244a:	fc 01       	movw	r30, r24
    244c:	73 83       	std	Z+3, r23	; 0x03
    244e:	62 83       	std	Z+2, r22	; 0x02
    2450:	91 87       	std	Z+9, r25	; 0x09
    2452:	80 87       	std	Z+8, r24	; 0x08
    2454:	46 17       	cp	r20, r22
    2456:	57 07       	cpc	r21, r23
    2458:	90 f0       	brcs	.+36     	; 0x247e <prvInsertTimerInActiveList+0x34>
    245a:	42 1b       	sub	r20, r18
    245c:	53 0b       	sbc	r21, r19
    245e:	84 85       	ldd	r24, Z+12	; 0x0c
    2460:	95 85       	ldd	r25, Z+13	; 0x0d
    2462:	48 17       	cp	r20, r24
    2464:	59 07       	cpc	r21, r25
    2466:	e0 f4       	brcc	.+56     	; 0x24a0 <prvInsertTimerInActiveList+0x56>
    2468:	bf 01       	movw	r22, r30
    246a:	6e 5f       	subi	r22, 0xFE	; 254
    246c:	7f 4f       	sbci	r23, 0xFF	; 255
    246e:	80 91 ec 09 	lds	r24, 0x09EC	; 0x8009ec <pxOverflowTimerList>
    2472:	90 91 ed 09 	lds	r25, 0x09ED	; 0x8009ed <pxOverflowTimerList+0x1>
    2476:	0e 94 5e 06 	call	0xcbc	; 0xcbc <vListInsert>
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	08 95       	ret
    247e:	42 17       	cp	r20, r18
    2480:	53 07       	cpc	r21, r19
    2482:	18 f4       	brcc	.+6      	; 0x248a <prvInsertTimerInActiveList+0x40>
    2484:	62 17       	cp	r22, r18
    2486:	73 07       	cpc	r23, r19
    2488:	68 f4       	brcc	.+26     	; 0x24a4 <prvInsertTimerInActiveList+0x5a>
    248a:	bf 01       	movw	r22, r30
    248c:	6e 5f       	subi	r22, 0xFE	; 254
    248e:	7f 4f       	sbci	r23, 0xFF	; 255
    2490:	80 91 ee 09 	lds	r24, 0x09EE	; 0x8009ee <pxCurrentTimerList>
    2494:	90 91 ef 09 	lds	r25, 0x09EF	; 0x8009ef <pxCurrentTimerList+0x1>
    2498:	0e 94 5e 06 	call	0xcbc	; 0xcbc <vListInsert>
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	08 95       	ret
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	08 95       	ret
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	08 95       	ret

000024a8 <prvCheckForValidListAndQueue>:
    24a8:	0f b6       	in	r0, 0x3f	; 63
    24aa:	f8 94       	cli
    24ac:	0f 92       	push	r0
    24ae:	80 91 ea 09 	lds	r24, 0x09EA	; 0x8009ea <xTimerQueue>
    24b2:	90 91 eb 09 	lds	r25, 0x09EB	; 0x8009eb <xTimerQueue+0x1>
    24b6:	89 2b       	or	r24, r25
    24b8:	e9 f4       	brne	.+58     	; 0x24f4 <prvCheckForValidListAndQueue+0x4c>
    24ba:	89 ef       	ldi	r24, 0xF9	; 249
    24bc:	99 e0       	ldi	r25, 0x09	; 9
    24be:	0e 94 2b 06 	call	0xc56	; 0xc56 <vListInitialise>
    24c2:	80 ef       	ldi	r24, 0xF0	; 240
    24c4:	99 e0       	ldi	r25, 0x09	; 9
    24c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <vListInitialise>
    24ca:	89 ef       	ldi	r24, 0xF9	; 249
    24cc:	99 e0       	ldi	r25, 0x09	; 9
    24ce:	90 93 ef 09 	sts	0x09EF, r25	; 0x8009ef <pxCurrentTimerList+0x1>
    24d2:	80 93 ee 09 	sts	0x09EE, r24	; 0x8009ee <pxCurrentTimerList>
    24d6:	80 ef       	ldi	r24, 0xF0	; 240
    24d8:	99 e0       	ldi	r25, 0x09	; 9
    24da:	90 93 ed 09 	sts	0x09ED, r25	; 0x8009ed <pxOverflowTimerList+0x1>
    24de:	80 93 ec 09 	sts	0x09EC, r24	; 0x8009ec <pxOverflowTimerList>
    24e2:	40 e0       	ldi	r20, 0x00	; 0
    24e4:	65 e0       	ldi	r22, 0x05	; 5
    24e6:	82 e0       	ldi	r24, 0x02	; 2
    24e8:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <xQueueGenericCreate>
    24ec:	90 93 eb 09 	sts	0x09EB, r25	; 0x8009eb <xTimerQueue+0x1>
    24f0:	80 93 ea 09 	sts	0x09EA, r24	; 0x8009ea <xTimerQueue>
    24f4:	0f 90       	pop	r0
    24f6:	0f be       	out	0x3f, r0	; 63
    24f8:	08 95       	ret

000024fa <xTimerCreateTimerTask>:
    24fa:	ef 92       	push	r14
    24fc:	ff 92       	push	r15
    24fe:	0f 93       	push	r16
    2500:	0e 94 54 12 	call	0x24a8	; 0x24a8 <prvCheckForValidListAndQueue>
    2504:	80 91 ea 09 	lds	r24, 0x09EA	; 0x8009ea <xTimerQueue>
    2508:	90 91 eb 09 	lds	r25, 0x09EB	; 0x8009eb <xTimerQueue+0x1>
    250c:	89 2b       	or	r24, r25
    250e:	91 f0       	breq	.+36     	; 0x2534 <xTimerCreateTimerTask+0x3a>
    2510:	0f 2e       	mov	r0, r31
    2512:	f8 ee       	ldi	r31, 0xE8	; 232
    2514:	ef 2e       	mov	r14, r31
    2516:	f9 e0       	ldi	r31, 0x09	; 9
    2518:	ff 2e       	mov	r15, r31
    251a:	f0 2d       	mov	r31, r0
    251c:	07 e0       	ldi	r16, 0x07	; 7
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	42 e3       	ldi	r20, 0x32	; 50
    2524:	50 e0       	ldi	r21, 0x00	; 0
    2526:	63 e5       	ldi	r22, 0x53	; 83
    2528:	71 e0       	ldi	r23, 0x01	; 1
    252a:	87 e5       	ldi	r24, 0x57	; 87
    252c:	93 e1       	ldi	r25, 0x13	; 19
    252e:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <xTaskCreate>
    2532:	01 c0       	rjmp	.+2      	; 0x2536 <xTimerCreateTimerTask+0x3c>
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	0f 91       	pop	r16
    2538:	ff 90       	pop	r15
    253a:	ef 90       	pop	r14
    253c:	08 95       	ret

0000253e <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    253e:	0f 93       	push	r16
    2540:	1f 93       	push	r17
    2542:	cf 93       	push	r28
    2544:	df 93       	push	r29
    2546:	00 d0       	rcall	.+0      	; 0x2548 <xTimerGenericCommand+0xa>
    2548:	00 d0       	rcall	.+0      	; 0x254a <xTimerGenericCommand+0xc>
    254a:	1f 92       	push	r1
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    2550:	e0 91 ea 09 	lds	r30, 0x09EA	; 0x8009ea <xTimerQueue>
    2554:	f0 91 eb 09 	lds	r31, 0x09EB	; 0x8009eb <xTimerQueue+0x1>
    2558:	30 97       	sbiw	r30, 0x00	; 0
    255a:	71 f1       	breq	.+92     	; 0x25b8 <xTimerGenericCommand+0x7a>
    255c:	d9 01       	movw	r26, r18
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    255e:	69 83       	std	Y+1, r22	; 0x01
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2560:	5b 83       	std	Y+3, r21	; 0x03
    2562:	4a 83       	std	Y+2, r20	; 0x02
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    2564:	9d 83       	std	Y+5, r25	; 0x05
    2566:	8c 83       	std	Y+4, r24	; 0x04

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2568:	66 30       	cpi	r22, 0x06	; 6
    256a:	ec f4       	brge	.+58     	; 0x25a6 <xTimerGenericCommand+0x68>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    256c:	0e 94 63 11 	call	0x22c6	; 0x22c6 <xTaskGetSchedulerState>
    2570:	82 30       	cpi	r24, 0x02	; 2
    2572:	61 f4       	brne	.+24     	; 0x258c <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	a8 01       	movw	r20, r16
    2578:	be 01       	movw	r22, r28
    257a:	6f 5f       	subi	r22, 0xFF	; 255
    257c:	7f 4f       	sbci	r23, 0xFF	; 255
    257e:	80 91 ea 09 	lds	r24, 0x09EA	; 0x8009ea <xTimerQueue>
    2582:	90 91 eb 09 	lds	r25, 0x09EB	; 0x8009eb <xTimerQueue+0x1>
    2586:	0e 94 05 0b 	call	0x160a	; 0x160a <xQueueGenericSend>
    258a:	17 c0       	rjmp	.+46     	; 0x25ba <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	40 e0       	ldi	r20, 0x00	; 0
    2590:	50 e0       	ldi	r21, 0x00	; 0
    2592:	be 01       	movw	r22, r28
    2594:	6f 5f       	subi	r22, 0xFF	; 255
    2596:	7f 4f       	sbci	r23, 0xFF	; 255
    2598:	80 91 ea 09 	lds	r24, 0x09EA	; 0x8009ea <xTimerQueue>
    259c:	90 91 eb 09 	lds	r25, 0x09EB	; 0x8009eb <xTimerQueue+0x1>
    25a0:	0e 94 05 0b 	call	0x160a	; 0x160a <xQueueGenericSend>
    25a4:	0a c0       	rjmp	.+20     	; 0x25ba <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	ad 01       	movw	r20, r26
    25aa:	be 01       	movw	r22, r28
    25ac:	6f 5f       	subi	r22, 0xFF	; 255
    25ae:	7f 4f       	sbci	r23, 0xFF	; 255
    25b0:	cf 01       	movw	r24, r30
    25b2:	0e 94 c0 0b 	call	0x1780	; 0x1780 <xQueueGenericSendFromISR>
    25b6:	01 c0       	rjmp	.+2      	; 0x25ba <xTimerGenericCommand+0x7c>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    25b8:	80 e0       	ldi	r24, 0x00	; 0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    25ba:	0f 90       	pop	r0
    25bc:	0f 90       	pop	r0
    25be:	0f 90       	pop	r0
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	df 91       	pop	r29
    25c6:	cf 91       	pop	r28
    25c8:	1f 91       	pop	r17
    25ca:	0f 91       	pop	r16
    25cc:	08 95       	ret

000025ce <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    25ce:	af 92       	push	r10
    25d0:	bf 92       	push	r11
    25d2:	cf 92       	push	r12
    25d4:	df 92       	push	r13
    25d6:	ef 92       	push	r14
    25d8:	ff 92       	push	r15
    25da:	0f 93       	push	r16
    25dc:	1f 93       	push	r17
    25de:	cf 93       	push	r28
    25e0:	df 93       	push	r29
    25e2:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    25e4:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <xTaskGetTickCount>
    25e8:	7c 01       	movw	r14, r24

	if( xTimeNow < xLastTime )
    25ea:	80 91 e6 09 	lds	r24, 0x09E6	; 0x8009e6 <xLastTime.2242>
    25ee:	90 91 e7 09 	lds	r25, 0x09E7	; 0x8009e7 <xLastTime.2242+0x1>
    25f2:	e8 16       	cp	r14, r24
    25f4:	f9 06       	cpc	r15, r25
    25f6:	08 f0       	brcs	.+2      	; 0x25fa <prvSampleTimeNow+0x2c>
    25f8:	48 c0       	rjmp	.+144    	; 0x268a <prvSampleTimeNow+0xbc>
    25fa:	30 c0       	rjmp	.+96     	; 0x265c <prvSampleTimeNow+0x8e>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    25fc:	05 80       	ldd	r0, Z+5	; 0x05
    25fe:	f6 81       	ldd	r31, Z+6	; 0x06
    2600:	e0 2d       	mov	r30, r0
    2602:	a0 80       	ld	r10, Z
    2604:	b1 80       	ldd	r11, Z+1	; 0x01

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    2606:	c6 81       	ldd	r28, Z+6	; 0x06
    2608:	d7 81       	ldd	r29, Z+7	; 0x07
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    260a:	8e 01       	movw	r16, r28
    260c:	0e 5f       	subi	r16, 0xFE	; 254
    260e:	1f 4f       	sbci	r17, 0xFF	; 255
    2610:	c8 01       	movw	r24, r16
    2612:	0e 94 8f 06 	call	0xd1e	; 0xd1e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2616:	e9 89       	ldd	r30, Y+17	; 0x11
    2618:	fa 89       	ldd	r31, Y+18	; 0x12
    261a:	ce 01       	movw	r24, r28
    261c:	09 95       	icall

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    261e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2620:	81 30       	cpi	r24, 0x01	; 1
    2622:	e1 f4       	brne	.+56     	; 0x265c <prvSampleTimeNow+0x8e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2624:	8c 85       	ldd	r24, Y+12	; 0x0c
    2626:	9d 85       	ldd	r25, Y+13	; 0x0d
    2628:	8a 0d       	add	r24, r10
    262a:	9b 1d       	adc	r25, r11
			if( xReloadTime > xNextExpireTime )
    262c:	a8 16       	cp	r10, r24
    262e:	b9 06       	cpc	r11, r25
    2630:	60 f4       	brcc	.+24     	; 0x264a <prvSampleTimeNow+0x7c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2632:	9b 83       	std	Y+3, r25	; 0x03
    2634:	8a 83       	std	Y+2, r24	; 0x02
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2636:	d9 87       	std	Y+9, r29	; 0x09
    2638:	c8 87       	std	Y+8, r28	; 0x08
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    263a:	b8 01       	movw	r22, r16
    263c:	80 91 ee 09 	lds	r24, 0x09EE	; 0x8009ee <pxCurrentTimerList>
    2640:	90 91 ef 09 	lds	r25, 0x09EF	; 0x8009ef <pxCurrentTimerList+0x1>
    2644:	0e 94 5e 06 	call	0xcbc	; 0xcbc <vListInsert>
    2648:	09 c0       	rjmp	.+18     	; 0x265c <prvSampleTimeNow+0x8e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    264a:	00 e0       	ldi	r16, 0x00	; 0
    264c:	10 e0       	ldi	r17, 0x00	; 0
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	a5 01       	movw	r20, r10
    2654:	60 e0       	ldi	r22, 0x00	; 0
    2656:	ce 01       	movw	r24, r28
    2658:	0e 94 9f 12 	call	0x253e	; 0x253e <xTimerGenericCommand>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    265c:	e0 91 ee 09 	lds	r30, 0x09EE	; 0x8009ee <pxCurrentTimerList>
    2660:	f0 91 ef 09 	lds	r31, 0x09EF	; 0x8009ef <pxCurrentTimerList+0x1>
    2664:	90 81       	ld	r25, Z
    2666:	91 11       	cpse	r25, r1
    2668:	c9 cf       	rjmp	.-110    	; 0x25fc <prvSampleTimeNow+0x2e>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
    266a:	80 91 ec 09 	lds	r24, 0x09EC	; 0x8009ec <pxOverflowTimerList>
    266e:	90 91 ed 09 	lds	r25, 0x09ED	; 0x8009ed <pxOverflowTimerList+0x1>
    2672:	90 93 ef 09 	sts	0x09EF, r25	; 0x8009ef <pxCurrentTimerList+0x1>
    2676:	80 93 ee 09 	sts	0x09EE, r24	; 0x8009ee <pxCurrentTimerList>
	pxOverflowTimerList = pxTemp;
    267a:	f0 93 ed 09 	sts	0x09ED, r31	; 0x8009ed <pxOverflowTimerList+0x1>
    267e:	e0 93 ec 09 	sts	0x09EC, r30	; 0x8009ec <pxOverflowTimerList>
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	f6 01       	movw	r30, r12
    2686:	80 83       	st	Z, r24
    2688:	02 c0       	rjmp	.+4      	; 0x268e <prvSampleTimeNow+0xc0>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    268a:	f6 01       	movw	r30, r12
    268c:	10 82       	st	Z, r1
	}

	xLastTime = xTimeNow;
    268e:	f0 92 e7 09 	sts	0x09E7, r15	; 0x8009e7 <xLastTime.2242+0x1>
    2692:	e0 92 e6 09 	sts	0x09E6, r14	; 0x8009e6 <xLastTime.2242>

	return xTimeNow;
}
    2696:	c7 01       	movw	r24, r14
    2698:	df 91       	pop	r29
    269a:	cf 91       	pop	r28
    269c:	1f 91       	pop	r17
    269e:	0f 91       	pop	r16
    26a0:	ff 90       	pop	r15
    26a2:	ef 90       	pop	r14
    26a4:	df 90       	pop	r13
    26a6:	cf 90       	pop	r12
    26a8:	bf 90       	pop	r11
    26aa:	af 90       	pop	r10
    26ac:	08 95       	ret

000026ae <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    26ae:	cf 93       	push	r28
    26b0:	df 93       	push	r29
    26b2:	00 d0       	rcall	.+0      	; 0x26b4 <prvTimerTask+0x6>
    26b4:	00 d0       	rcall	.+0      	; 0x26b6 <prvTimerTask+0x8>
    26b6:	00 d0       	rcall	.+0      	; 0x26b8 <prvTimerTask+0xa>
    26b8:	cd b7       	in	r28, 0x3d	; 61
    26ba:	de b7       	in	r29, 0x3e	; 62
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    26bc:	ce 01       	movw	r24, r28
    26be:	01 96       	adiw	r24, 0x01	; 1
    26c0:	4c 01       	movw	r8, r24
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    26c2:	44 24       	eor	r4, r4
    26c4:	43 94       	inc	r4
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    26c6:	e1 2c       	mov	r14, r1
    26c8:	f1 2c       	mov	r15, r1
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    26ca:	d1 2c       	mov	r13, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    26cc:	58 2e       	mov	r5, r24
    26ce:	c9 2c       	mov	r12, r9
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    26d0:	e0 91 ee 09 	lds	r30, 0x09EE	; 0x8009ee <pxCurrentTimerList>
    26d4:	f0 91 ef 09 	lds	r31, 0x09EF	; 0x8009ef <pxCurrentTimerList+0x1>
	if( *pxListWasEmpty == pdFALSE )
    26d8:	80 81       	ld	r24, Z
    26da:	88 23       	and	r24, r24
    26dc:	79 f0       	breq	.+30     	; 0x26fc <prvTimerTask+0x4e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    26de:	05 80       	ldd	r0, Z+5	; 0x05
    26e0:	f6 81       	ldd	r31, Z+6	; 0x06
    26e2:	e0 2d       	mov	r30, r0
    26e4:	a0 80       	ld	r10, Z
    26e6:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    26e8:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    26ec:	c4 01       	movw	r24, r8
    26ee:	0e 94 e7 12 	call	0x25ce	; 0x25ce <prvSampleTimeNow>
    26f2:	8c 01       	movw	r16, r24
		if( xTimerListsWereSwitched == pdFALSE )
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	88 23       	and	r24, r24
    26f8:	59 f0       	breq	.+22     	; 0x2710 <prvTimerTask+0x62>
    26fa:	5d c0       	rjmp	.+186    	; 0x27b6 <prvTimerTask+0x108>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    26fc:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2700:	c4 01       	movw	r24, r8
    2702:	0e 94 e7 12 	call	0x25ce	; 0x25ce <prvSampleTimeNow>
    2706:	8c 01       	movw	r16, r24
		if( xTimerListsWereSwitched == pdFALSE )
    2708:	89 81       	ldd	r24, Y+1	; 0x01
    270a:	88 23       	and	r24, r24
    270c:	c1 f1       	breq	.+112    	; 0x277e <prvTimerTask+0xd0>
    270e:	53 c0       	rjmp	.+166    	; 0x27b6 <prvTimerTask+0x108>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2710:	0a 15       	cp	r16, r10
    2712:	1b 05       	cpc	r17, r11
    2714:	08 f4       	brcc	.+2      	; 0x2718 <prvTimerTask+0x6a>
    2716:	3e c0       	rjmp	.+124    	; 0x2794 <prvTimerTask+0xe6>
			{
				( void ) xTaskResumeAll();
    2718:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    271c:	e0 91 ee 09 	lds	r30, 0x09EE	; 0x8009ee <pxCurrentTimerList>
    2720:	f0 91 ef 09 	lds	r31, 0x09EF	; 0x8009ef <pxCurrentTimerList+0x1>
    2724:	05 80       	ldd	r0, Z+5	; 0x05
    2726:	f6 81       	ldd	r31, Z+6	; 0x06
    2728:	e0 2d       	mov	r30, r0
    272a:	66 80       	ldd	r6, Z+6	; 0x06
    272c:	77 80       	ldd	r7, Z+7	; 0x07

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    272e:	c3 01       	movw	r24, r6
    2730:	02 96       	adiw	r24, 0x02	; 2
    2732:	0e 94 8f 06 	call	0xd1e	; 0xd1e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2736:	d3 01       	movw	r26, r6
    2738:	1e 96       	adiw	r26, 0x0e	; 14
    273a:	8c 91       	ld	r24, X
    273c:	1e 97       	sbiw	r26, 0x0e	; 14
    273e:	81 30       	cpi	r24, 0x01	; 1
    2740:	b1 f4       	brne	.+44     	; 0x276e <prvTimerTask+0xc0>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2742:	1c 96       	adiw	r26, 0x0c	; 12
    2744:	6d 91       	ld	r22, X+
    2746:	7c 91       	ld	r23, X
    2748:	1d 97       	sbiw	r26, 0x0d	; 13
    274a:	6a 0d       	add	r22, r10
    274c:	7b 1d       	adc	r23, r11
    274e:	95 01       	movw	r18, r10
    2750:	a8 01       	movw	r20, r16
    2752:	c3 01       	movw	r24, r6
    2754:	0e 94 25 12 	call	0x244a	; 0x244a <prvInsertTimerInActiveList>
    2758:	88 23       	and	r24, r24
    275a:	49 f0       	breq	.+18     	; 0x276e <prvTimerTask+0xc0>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    275c:	0e 2d       	mov	r16, r14
    275e:	1f 2d       	mov	r17, r15
    2760:	2e 2d       	mov	r18, r14
    2762:	3f 2d       	mov	r19, r15
    2764:	a5 01       	movw	r20, r10
    2766:	6d 2d       	mov	r22, r13
    2768:	c3 01       	movw	r24, r6
    276a:	0e 94 9f 12 	call	0x253e	; 0x253e <xTimerGenericCommand>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    276e:	d3 01       	movw	r26, r6
    2770:	51 96       	adiw	r26, 0x11	; 17
    2772:	ed 91       	ld	r30, X+
    2774:	fc 91       	ld	r31, X
    2776:	52 97       	sbiw	r26, 0x12	; 18
    2778:	c3 01       	movw	r24, r6
    277a:	09 95       	icall
    277c:	7c c0       	rjmp	.+248    	; 0x2876 <prvTimerTask+0x1c8>
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    277e:	e0 91 ec 09 	lds	r30, 0x09EC	; 0x8009ec <pxOverflowTimerList>
    2782:	f0 91 ed 09 	lds	r31, 0x09ED	; 0x8009ed <pxOverflowTimerList+0x1>
    2786:	44 2d       	mov	r20, r4
    2788:	80 81       	ld	r24, Z
    278a:	81 11       	cpse	r24, r1
    278c:	4d 2d       	mov	r20, r13
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    278e:	ae 2c       	mov	r10, r14
    2790:	bf 2c       	mov	r11, r15
    2792:	01 c0       	rjmp	.+2      	; 0x2796 <prvTimerTask+0xe8>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2794:	4d 2d       	mov	r20, r13
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2796:	b5 01       	movw	r22, r10
    2798:	60 1b       	sub	r22, r16
    279a:	71 0b       	sbc	r23, r17
    279c:	80 91 ea 09 	lds	r24, 0x09EA	; 0x8009ea <xTimerQueue>
    27a0:	90 91 eb 09 	lds	r25, 0x09EB	; 0x8009eb <xTimerQueue+0x1>
    27a4:	0e 94 c6 0c 	call	0x198c	; 0x198c <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
    27a8:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <xTaskResumeAll>
    27ac:	81 11       	cpse	r24, r1
    27ae:	63 c0       	rjmp	.+198    	; 0x2876 <prvTimerTask+0x1c8>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
    27b0:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <vPortYield>
    27b4:	60 c0       	rjmp	.+192    	; 0x2876 <prvTimerTask+0x1c8>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    27b6:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <xTaskResumeAll>
    27ba:	5d c0       	rjmp	.+186    	; 0x2876 <prvTimerTask+0x1c8>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
    27be:	88 23       	and	r24, r24
    27c0:	0c f4       	brge	.+2      	; 0x27c4 <prvTimerTask+0x116>
    27c2:	59 c0       	rjmp	.+178    	; 0x2876 <prvTimerTask+0x1c8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    27c4:	ac 80       	ldd	r10, Y+4	; 0x04
    27c6:	bd 80       	ldd	r11, Y+5	; 0x05

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    27c8:	f5 01       	movw	r30, r10
    27ca:	82 85       	ldd	r24, Z+10	; 0x0a
    27cc:	93 85       	ldd	r25, Z+11	; 0x0b
    27ce:	89 2b       	or	r24, r25
    27d0:	21 f0       	breq	.+8      	; 0x27da <prvTimerTask+0x12c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    27d2:	c5 01       	movw	r24, r10
    27d4:	02 96       	adiw	r24, 0x02	; 2
    27d6:	0e 94 8f 06 	call	0xd1e	; 0xd1e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    27da:	ce 01       	movw	r24, r28
    27dc:	06 96       	adiw	r24, 0x06	; 6
    27de:	0e 94 e7 12 	call	0x25ce	; 0x25ce <prvSampleTimeNow>

			switch( xMessage.xMessageID )
    27e2:	e9 81       	ldd	r30, Y+1	; 0x01
    27e4:	0e 2f       	mov	r16, r30
    27e6:	ee 0f       	add	r30, r30
    27e8:	11 0b       	sbc	r17, r17
    27ea:	22 0b       	sbc	r18, r18
    27ec:	33 0b       	sbc	r19, r19
    27ee:	0a 30       	cpi	r16, 0x0A	; 10
    27f0:	11 05       	cpc	r17, r1
    27f2:	08 f0       	brcs	.+2      	; 0x27f6 <prvTimerTask+0x148>
    27f4:	40 c0       	rjmp	.+128    	; 0x2876 <prvTimerTask+0x1c8>
    27f6:	f8 01       	movw	r30, r16
    27f8:	e2 5c       	subi	r30, 0xC2	; 194
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	0c 94 6b 14 	jmp	0x28d6	; 0x28d6 <__tablejump2__>
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2800:	2a 81       	ldd	r18, Y+2	; 0x02
    2802:	3b 81       	ldd	r19, Y+3	; 0x03
    2804:	d5 01       	movw	r26, r10
    2806:	1c 96       	adiw	r26, 0x0c	; 12
    2808:	6d 91       	ld	r22, X+
    280a:	7c 91       	ld	r23, X
    280c:	1d 97       	sbiw	r26, 0x0d	; 13
    280e:	62 0f       	add	r22, r18
    2810:	73 1f       	adc	r23, r19
    2812:	ac 01       	movw	r20, r24
    2814:	c5 01       	movw	r24, r10
    2816:	0e 94 25 12 	call	0x244a	; 0x244a <prvInsertTimerInActiveList>
    281a:	88 23       	and	r24, r24
    281c:	61 f1       	breq	.+88     	; 0x2876 <prvTimerTask+0x1c8>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    281e:	d5 01       	movw	r26, r10
    2820:	51 96       	adiw	r26, 0x11	; 17
    2822:	ed 91       	ld	r30, X+
    2824:	fc 91       	ld	r31, X
    2826:	52 97       	sbiw	r26, 0x12	; 18
    2828:	c5 01       	movw	r24, r10
    282a:	09 95       	icall
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    282c:	f5 01       	movw	r30, r10
    282e:	86 85       	ldd	r24, Z+14	; 0x0e
    2830:	81 30       	cpi	r24, 0x01	; 1
    2832:	09 f5       	brne	.+66     	; 0x2876 <prvTimerTask+0x1c8>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2834:	44 85       	ldd	r20, Z+12	; 0x0c
    2836:	55 85       	ldd	r21, Z+13	; 0x0d
    2838:	8a 81       	ldd	r24, Y+2	; 0x02
    283a:	9b 81       	ldd	r25, Y+3	; 0x03
    283c:	48 0f       	add	r20, r24
    283e:	59 1f       	adc	r21, r25
    2840:	0e 2d       	mov	r16, r14
    2842:	1f 2d       	mov	r17, r15
    2844:	2e 2d       	mov	r18, r14
    2846:	3f 2d       	mov	r19, r15
    2848:	6d 2d       	mov	r22, r13
    284a:	c5 01       	movw	r24, r10
    284c:	0e 94 9f 12 	call	0x253e	; 0x253e <xTimerGenericCommand>
    2850:	12 c0       	rjmp	.+36     	; 0x2876 <prvTimerTask+0x1c8>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2852:	6a 81       	ldd	r22, Y+2	; 0x02
    2854:	7b 81       	ldd	r23, Y+3	; 0x03
    2856:	d5 01       	movw	r26, r10
    2858:	1d 96       	adiw	r26, 0x0d	; 13
    285a:	7c 93       	st	X, r23
    285c:	6e 93       	st	-X, r22
    285e:	1c 97       	sbiw	r26, 0x0c	; 12
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2860:	68 0f       	add	r22, r24
    2862:	79 1f       	adc	r23, r25
    2864:	9c 01       	movw	r18, r24
    2866:	ac 01       	movw	r20, r24
    2868:	c5 01       	movw	r24, r10
    286a:	0e 94 25 12 	call	0x244a	; 0x244a <prvInsertTimerInActiveList>
    286e:	03 c0       	rjmp	.+6      	; 0x2876 <prvTimerTask+0x1c8>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
    2870:	c5 01       	movw	r24, r10
    2872:	0e 94 48 08 	call	0x1090	; 0x1090 <vPortFree>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2876:	2d 2d       	mov	r18, r13
    2878:	4e 2d       	mov	r20, r14
    287a:	5f 2d       	mov	r21, r15
    287c:	65 2d       	mov	r22, r5
    287e:	7c 2d       	mov	r23, r12
    2880:	80 91 ea 09 	lds	r24, 0x09EA	; 0x8009ea <xTimerQueue>
    2884:	90 91 eb 09 	lds	r25, 0x09EB	; 0x8009eb <xTimerQueue+0x1>
    2888:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <xQueueGenericReceive>
    288c:	81 11       	cpse	r24, r1
    288e:	96 cf       	rjmp	.-212    	; 0x27bc <prvTimerTask+0x10e>
    2890:	1f cf       	rjmp	.-450    	; 0x26d0 <prvTimerTask+0x22>

00002892 <__udivmodsi4>:
    2892:	a1 e2       	ldi	r26, 0x21	; 33
    2894:	1a 2e       	mov	r1, r26
    2896:	aa 1b       	sub	r26, r26
    2898:	bb 1b       	sub	r27, r27
    289a:	fd 01       	movw	r30, r26
    289c:	0d c0       	rjmp	.+26     	; 0x28b8 <__udivmodsi4_ep>

0000289e <__udivmodsi4_loop>:
    289e:	aa 1f       	adc	r26, r26
    28a0:	bb 1f       	adc	r27, r27
    28a2:	ee 1f       	adc	r30, r30
    28a4:	ff 1f       	adc	r31, r31
    28a6:	a2 17       	cp	r26, r18
    28a8:	b3 07       	cpc	r27, r19
    28aa:	e4 07       	cpc	r30, r20
    28ac:	f5 07       	cpc	r31, r21
    28ae:	20 f0       	brcs	.+8      	; 0x28b8 <__udivmodsi4_ep>
    28b0:	a2 1b       	sub	r26, r18
    28b2:	b3 0b       	sbc	r27, r19
    28b4:	e4 0b       	sbc	r30, r20
    28b6:	f5 0b       	sbc	r31, r21

000028b8 <__udivmodsi4_ep>:
    28b8:	66 1f       	adc	r22, r22
    28ba:	77 1f       	adc	r23, r23
    28bc:	88 1f       	adc	r24, r24
    28be:	99 1f       	adc	r25, r25
    28c0:	1a 94       	dec	r1
    28c2:	69 f7       	brne	.-38     	; 0x289e <__udivmodsi4_loop>
    28c4:	60 95       	com	r22
    28c6:	70 95       	com	r23
    28c8:	80 95       	com	r24
    28ca:	90 95       	com	r25
    28cc:	9b 01       	movw	r18, r22
    28ce:	ac 01       	movw	r20, r24
    28d0:	bd 01       	movw	r22, r26
    28d2:	cf 01       	movw	r24, r30
    28d4:	08 95       	ret

000028d6 <__tablejump2__>:
    28d6:	ee 0f       	add	r30, r30
    28d8:	ff 1f       	adc	r31, r31
    28da:	05 90       	lpm	r0, Z+
    28dc:	f4 91       	lpm	r31, Z
    28de:	e0 2d       	mov	r30, r0
    28e0:	09 94       	ijmp

000028e2 <malloc>:
    28e2:	cf 93       	push	r28
    28e4:	df 93       	push	r29
    28e6:	82 30       	cpi	r24, 0x02	; 2
    28e8:	91 05       	cpc	r25, r1
    28ea:	10 f4       	brcc	.+4      	; 0x28f0 <malloc+0xe>
    28ec:	82 e0       	ldi	r24, 0x02	; 2
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	e0 91 04 0a 	lds	r30, 0x0A04	; 0x800a04 <__flp>
    28f4:	f0 91 05 0a 	lds	r31, 0x0A05	; 0x800a05 <__flp+0x1>
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	c0 e0       	ldi	r28, 0x00	; 0
    28fe:	d0 e0       	ldi	r29, 0x00	; 0
    2900:	30 97       	sbiw	r30, 0x00	; 0
    2902:	11 f1       	breq	.+68     	; 0x2948 <malloc+0x66>
    2904:	40 81       	ld	r20, Z
    2906:	51 81       	ldd	r21, Z+1	; 0x01
    2908:	48 17       	cp	r20, r24
    290a:	59 07       	cpc	r21, r25
    290c:	c0 f0       	brcs	.+48     	; 0x293e <malloc+0x5c>
    290e:	48 17       	cp	r20, r24
    2910:	59 07       	cpc	r21, r25
    2912:	61 f4       	brne	.+24     	; 0x292c <malloc+0x4a>
    2914:	82 81       	ldd	r24, Z+2	; 0x02
    2916:	93 81       	ldd	r25, Z+3	; 0x03
    2918:	20 97       	sbiw	r28, 0x00	; 0
    291a:	19 f0       	breq	.+6      	; 0x2922 <malloc+0x40>
    291c:	9b 83       	std	Y+3, r25	; 0x03
    291e:	8a 83       	std	Y+2, r24	; 0x02
    2920:	2b c0       	rjmp	.+86     	; 0x2978 <malloc+0x96>
    2922:	90 93 05 0a 	sts	0x0A05, r25	; 0x800a05 <__flp+0x1>
    2926:	80 93 04 0a 	sts	0x0A04, r24	; 0x800a04 <__flp>
    292a:	26 c0       	rjmp	.+76     	; 0x2978 <malloc+0x96>
    292c:	21 15       	cp	r18, r1
    292e:	31 05       	cpc	r19, r1
    2930:	19 f0       	breq	.+6      	; 0x2938 <malloc+0x56>
    2932:	42 17       	cp	r20, r18
    2934:	53 07       	cpc	r21, r19
    2936:	18 f4       	brcc	.+6      	; 0x293e <malloc+0x5c>
    2938:	9a 01       	movw	r18, r20
    293a:	be 01       	movw	r22, r28
    293c:	df 01       	movw	r26, r30
    293e:	ef 01       	movw	r28, r30
    2940:	02 80       	ldd	r0, Z+2	; 0x02
    2942:	f3 81       	ldd	r31, Z+3	; 0x03
    2944:	e0 2d       	mov	r30, r0
    2946:	dc cf       	rjmp	.-72     	; 0x2900 <malloc+0x1e>
    2948:	21 15       	cp	r18, r1
    294a:	31 05       	cpc	r19, r1
    294c:	09 f1       	breq	.+66     	; 0x2990 <malloc+0xae>
    294e:	28 1b       	sub	r18, r24
    2950:	39 0b       	sbc	r19, r25
    2952:	24 30       	cpi	r18, 0x04	; 4
    2954:	31 05       	cpc	r19, r1
    2956:	90 f4       	brcc	.+36     	; 0x297c <malloc+0x9a>
    2958:	12 96       	adiw	r26, 0x02	; 2
    295a:	8d 91       	ld	r24, X+
    295c:	9c 91       	ld	r25, X
    295e:	13 97       	sbiw	r26, 0x03	; 3
    2960:	61 15       	cp	r22, r1
    2962:	71 05       	cpc	r23, r1
    2964:	21 f0       	breq	.+8      	; 0x296e <malloc+0x8c>
    2966:	fb 01       	movw	r30, r22
    2968:	93 83       	std	Z+3, r25	; 0x03
    296a:	82 83       	std	Z+2, r24	; 0x02
    296c:	04 c0       	rjmp	.+8      	; 0x2976 <malloc+0x94>
    296e:	90 93 05 0a 	sts	0x0A05, r25	; 0x800a05 <__flp+0x1>
    2972:	80 93 04 0a 	sts	0x0A04, r24	; 0x800a04 <__flp>
    2976:	fd 01       	movw	r30, r26
    2978:	32 96       	adiw	r30, 0x02	; 2
    297a:	44 c0       	rjmp	.+136    	; 0x2a04 <malloc+0x122>
    297c:	fd 01       	movw	r30, r26
    297e:	e2 0f       	add	r30, r18
    2980:	f3 1f       	adc	r31, r19
    2982:	81 93       	st	Z+, r24
    2984:	91 93       	st	Z+, r25
    2986:	22 50       	subi	r18, 0x02	; 2
    2988:	31 09       	sbc	r19, r1
    298a:	2d 93       	st	X+, r18
    298c:	3c 93       	st	X, r19
    298e:	3a c0       	rjmp	.+116    	; 0x2a04 <malloc+0x122>
    2990:	20 91 02 0a 	lds	r18, 0x0A02	; 0x800a02 <__brkval>
    2994:	30 91 03 0a 	lds	r19, 0x0A03	; 0x800a03 <__brkval+0x1>
    2998:	23 2b       	or	r18, r19
    299a:	41 f4       	brne	.+16     	; 0x29ac <malloc+0xca>
    299c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    29a0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    29a4:	30 93 03 0a 	sts	0x0A03, r19	; 0x800a03 <__brkval+0x1>
    29a8:	20 93 02 0a 	sts	0x0A02, r18	; 0x800a02 <__brkval>
    29ac:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    29b0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    29b4:	21 15       	cp	r18, r1
    29b6:	31 05       	cpc	r19, r1
    29b8:	41 f4       	brne	.+16     	; 0x29ca <malloc+0xe8>
    29ba:	2d b7       	in	r18, 0x3d	; 61
    29bc:	3e b7       	in	r19, 0x3e	; 62
    29be:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    29c2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    29c6:	24 1b       	sub	r18, r20
    29c8:	35 0b       	sbc	r19, r21
    29ca:	e0 91 02 0a 	lds	r30, 0x0A02	; 0x800a02 <__brkval>
    29ce:	f0 91 03 0a 	lds	r31, 0x0A03	; 0x800a03 <__brkval+0x1>
    29d2:	e2 17       	cp	r30, r18
    29d4:	f3 07       	cpc	r31, r19
    29d6:	a0 f4       	brcc	.+40     	; 0x2a00 <malloc+0x11e>
    29d8:	2e 1b       	sub	r18, r30
    29da:	3f 0b       	sbc	r19, r31
    29dc:	28 17       	cp	r18, r24
    29de:	39 07       	cpc	r19, r25
    29e0:	78 f0       	brcs	.+30     	; 0x2a00 <malloc+0x11e>
    29e2:	ac 01       	movw	r20, r24
    29e4:	4e 5f       	subi	r20, 0xFE	; 254
    29e6:	5f 4f       	sbci	r21, 0xFF	; 255
    29e8:	24 17       	cp	r18, r20
    29ea:	35 07       	cpc	r19, r21
    29ec:	48 f0       	brcs	.+18     	; 0x2a00 <malloc+0x11e>
    29ee:	4e 0f       	add	r20, r30
    29f0:	5f 1f       	adc	r21, r31
    29f2:	50 93 03 0a 	sts	0x0A03, r21	; 0x800a03 <__brkval+0x1>
    29f6:	40 93 02 0a 	sts	0x0A02, r20	; 0x800a02 <__brkval>
    29fa:	81 93       	st	Z+, r24
    29fc:	91 93       	st	Z+, r25
    29fe:	02 c0       	rjmp	.+4      	; 0x2a04 <malloc+0x122>
    2a00:	e0 e0       	ldi	r30, 0x00	; 0
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	cf 01       	movw	r24, r30
    2a06:	df 91       	pop	r29
    2a08:	cf 91       	pop	r28
    2a0a:	08 95       	ret

00002a0c <free>:
    2a0c:	0f 93       	push	r16
    2a0e:	1f 93       	push	r17
    2a10:	cf 93       	push	r28
    2a12:	df 93       	push	r29
    2a14:	00 97       	sbiw	r24, 0x00	; 0
    2a16:	09 f4       	brne	.+2      	; 0x2a1a <free+0xe>
    2a18:	8c c0       	rjmp	.+280    	; 0x2b32 <free+0x126>
    2a1a:	fc 01       	movw	r30, r24
    2a1c:	32 97       	sbiw	r30, 0x02	; 2
    2a1e:	13 82       	std	Z+3, r1	; 0x03
    2a20:	12 82       	std	Z+2, r1	; 0x02
    2a22:	00 91 04 0a 	lds	r16, 0x0A04	; 0x800a04 <__flp>
    2a26:	10 91 05 0a 	lds	r17, 0x0A05	; 0x800a05 <__flp+0x1>
    2a2a:	01 15       	cp	r16, r1
    2a2c:	11 05       	cpc	r17, r1
    2a2e:	81 f4       	brne	.+32     	; 0x2a50 <free+0x44>
    2a30:	20 81       	ld	r18, Z
    2a32:	31 81       	ldd	r19, Z+1	; 0x01
    2a34:	82 0f       	add	r24, r18
    2a36:	93 1f       	adc	r25, r19
    2a38:	20 91 02 0a 	lds	r18, 0x0A02	; 0x800a02 <__brkval>
    2a3c:	30 91 03 0a 	lds	r19, 0x0A03	; 0x800a03 <__brkval+0x1>
    2a40:	28 17       	cp	r18, r24
    2a42:	39 07       	cpc	r19, r25
    2a44:	79 f5       	brne	.+94     	; 0x2aa4 <free+0x98>
    2a46:	f0 93 03 0a 	sts	0x0A03, r31	; 0x800a03 <__brkval+0x1>
    2a4a:	e0 93 02 0a 	sts	0x0A02, r30	; 0x800a02 <__brkval>
    2a4e:	71 c0       	rjmp	.+226    	; 0x2b32 <free+0x126>
    2a50:	d8 01       	movw	r26, r16
    2a52:	40 e0       	ldi	r20, 0x00	; 0
    2a54:	50 e0       	ldi	r21, 0x00	; 0
    2a56:	ae 17       	cp	r26, r30
    2a58:	bf 07       	cpc	r27, r31
    2a5a:	50 f4       	brcc	.+20     	; 0x2a70 <free+0x64>
    2a5c:	12 96       	adiw	r26, 0x02	; 2
    2a5e:	2d 91       	ld	r18, X+
    2a60:	3c 91       	ld	r19, X
    2a62:	13 97       	sbiw	r26, 0x03	; 3
    2a64:	ad 01       	movw	r20, r26
    2a66:	21 15       	cp	r18, r1
    2a68:	31 05       	cpc	r19, r1
    2a6a:	09 f1       	breq	.+66     	; 0x2aae <free+0xa2>
    2a6c:	d9 01       	movw	r26, r18
    2a6e:	f3 cf       	rjmp	.-26     	; 0x2a56 <free+0x4a>
    2a70:	9d 01       	movw	r18, r26
    2a72:	da 01       	movw	r26, r20
    2a74:	33 83       	std	Z+3, r19	; 0x03
    2a76:	22 83       	std	Z+2, r18	; 0x02
    2a78:	60 81       	ld	r22, Z
    2a7a:	71 81       	ldd	r23, Z+1	; 0x01
    2a7c:	86 0f       	add	r24, r22
    2a7e:	97 1f       	adc	r25, r23
    2a80:	82 17       	cp	r24, r18
    2a82:	93 07       	cpc	r25, r19
    2a84:	69 f4       	brne	.+26     	; 0x2aa0 <free+0x94>
    2a86:	ec 01       	movw	r28, r24
    2a88:	28 81       	ld	r18, Y
    2a8a:	39 81       	ldd	r19, Y+1	; 0x01
    2a8c:	26 0f       	add	r18, r22
    2a8e:	37 1f       	adc	r19, r23
    2a90:	2e 5f       	subi	r18, 0xFE	; 254
    2a92:	3f 4f       	sbci	r19, 0xFF	; 255
    2a94:	31 83       	std	Z+1, r19	; 0x01
    2a96:	20 83       	st	Z, r18
    2a98:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a9c:	93 83       	std	Z+3, r25	; 0x03
    2a9e:	82 83       	std	Z+2, r24	; 0x02
    2aa0:	45 2b       	or	r20, r21
    2aa2:	29 f4       	brne	.+10     	; 0x2aae <free+0xa2>
    2aa4:	f0 93 05 0a 	sts	0x0A05, r31	; 0x800a05 <__flp+0x1>
    2aa8:	e0 93 04 0a 	sts	0x0A04, r30	; 0x800a04 <__flp>
    2aac:	42 c0       	rjmp	.+132    	; 0x2b32 <free+0x126>
    2aae:	13 96       	adiw	r26, 0x03	; 3
    2ab0:	fc 93       	st	X, r31
    2ab2:	ee 93       	st	-X, r30
    2ab4:	12 97       	sbiw	r26, 0x02	; 2
    2ab6:	ed 01       	movw	r28, r26
    2ab8:	49 91       	ld	r20, Y+
    2aba:	59 91       	ld	r21, Y+
    2abc:	9e 01       	movw	r18, r28
    2abe:	24 0f       	add	r18, r20
    2ac0:	35 1f       	adc	r19, r21
    2ac2:	e2 17       	cp	r30, r18
    2ac4:	f3 07       	cpc	r31, r19
    2ac6:	71 f4       	brne	.+28     	; 0x2ae4 <free+0xd8>
    2ac8:	80 81       	ld	r24, Z
    2aca:	91 81       	ldd	r25, Z+1	; 0x01
    2acc:	84 0f       	add	r24, r20
    2ace:	95 1f       	adc	r25, r21
    2ad0:	02 96       	adiw	r24, 0x02	; 2
    2ad2:	11 96       	adiw	r26, 0x01	; 1
    2ad4:	9c 93       	st	X, r25
    2ad6:	8e 93       	st	-X, r24
    2ad8:	82 81       	ldd	r24, Z+2	; 0x02
    2ada:	93 81       	ldd	r25, Z+3	; 0x03
    2adc:	13 96       	adiw	r26, 0x03	; 3
    2ade:	9c 93       	st	X, r25
    2ae0:	8e 93       	st	-X, r24
    2ae2:	12 97       	sbiw	r26, 0x02	; 2
    2ae4:	e0 e0       	ldi	r30, 0x00	; 0
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	d8 01       	movw	r26, r16
    2aea:	12 96       	adiw	r26, 0x02	; 2
    2aec:	8d 91       	ld	r24, X+
    2aee:	9c 91       	ld	r25, X
    2af0:	13 97       	sbiw	r26, 0x03	; 3
    2af2:	00 97       	sbiw	r24, 0x00	; 0
    2af4:	19 f0       	breq	.+6      	; 0x2afc <free+0xf0>
    2af6:	f8 01       	movw	r30, r16
    2af8:	8c 01       	movw	r16, r24
    2afa:	f6 cf       	rjmp	.-20     	; 0x2ae8 <free+0xdc>
    2afc:	8d 91       	ld	r24, X+
    2afe:	9c 91       	ld	r25, X
    2b00:	98 01       	movw	r18, r16
    2b02:	2e 5f       	subi	r18, 0xFE	; 254
    2b04:	3f 4f       	sbci	r19, 0xFF	; 255
    2b06:	82 0f       	add	r24, r18
    2b08:	93 1f       	adc	r25, r19
    2b0a:	20 91 02 0a 	lds	r18, 0x0A02	; 0x800a02 <__brkval>
    2b0e:	30 91 03 0a 	lds	r19, 0x0A03	; 0x800a03 <__brkval+0x1>
    2b12:	28 17       	cp	r18, r24
    2b14:	39 07       	cpc	r19, r25
    2b16:	69 f4       	brne	.+26     	; 0x2b32 <free+0x126>
    2b18:	30 97       	sbiw	r30, 0x00	; 0
    2b1a:	29 f4       	brne	.+10     	; 0x2b26 <free+0x11a>
    2b1c:	10 92 05 0a 	sts	0x0A05, r1	; 0x800a05 <__flp+0x1>
    2b20:	10 92 04 0a 	sts	0x0A04, r1	; 0x800a04 <__flp>
    2b24:	02 c0       	rjmp	.+4      	; 0x2b2a <free+0x11e>
    2b26:	13 82       	std	Z+3, r1	; 0x03
    2b28:	12 82       	std	Z+2, r1	; 0x02
    2b2a:	10 93 03 0a 	sts	0x0A03, r17	; 0x800a03 <__brkval+0x1>
    2b2e:	00 93 02 0a 	sts	0x0A02, r16	; 0x800a02 <__brkval>
    2b32:	df 91       	pop	r29
    2b34:	cf 91       	pop	r28
    2b36:	1f 91       	pop	r17
    2b38:	0f 91       	pop	r16
    2b3a:	08 95       	ret

00002b3c <do_rand>:
    2b3c:	8f 92       	push	r8
    2b3e:	9f 92       	push	r9
    2b40:	af 92       	push	r10
    2b42:	bf 92       	push	r11
    2b44:	cf 92       	push	r12
    2b46:	df 92       	push	r13
    2b48:	ef 92       	push	r14
    2b4a:	ff 92       	push	r15
    2b4c:	cf 93       	push	r28
    2b4e:	df 93       	push	r29
    2b50:	ec 01       	movw	r28, r24
    2b52:	68 81       	ld	r22, Y
    2b54:	79 81       	ldd	r23, Y+1	; 0x01
    2b56:	8a 81       	ldd	r24, Y+2	; 0x02
    2b58:	9b 81       	ldd	r25, Y+3	; 0x03
    2b5a:	61 15       	cp	r22, r1
    2b5c:	71 05       	cpc	r23, r1
    2b5e:	81 05       	cpc	r24, r1
    2b60:	91 05       	cpc	r25, r1
    2b62:	21 f4       	brne	.+8      	; 0x2b6c <do_rand+0x30>
    2b64:	64 e2       	ldi	r22, 0x24	; 36
    2b66:	79 ed       	ldi	r23, 0xD9	; 217
    2b68:	8b e5       	ldi	r24, 0x5B	; 91
    2b6a:	97 e0       	ldi	r25, 0x07	; 7
    2b6c:	2d e1       	ldi	r18, 0x1D	; 29
    2b6e:	33 ef       	ldi	r19, 0xF3	; 243
    2b70:	41 e0       	ldi	r20, 0x01	; 1
    2b72:	50 e0       	ldi	r21, 0x00	; 0
    2b74:	0e 94 0a 16 	call	0x2c14	; 0x2c14 <__divmodsi4>
    2b78:	49 01       	movw	r8, r18
    2b7a:	5a 01       	movw	r10, r20
    2b7c:	9b 01       	movw	r18, r22
    2b7e:	ac 01       	movw	r20, r24
    2b80:	a7 ea       	ldi	r26, 0xA7	; 167
    2b82:	b1 e4       	ldi	r27, 0x41	; 65
    2b84:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__muluhisi3>
    2b88:	6b 01       	movw	r12, r22
    2b8a:	7c 01       	movw	r14, r24
    2b8c:	ac ee       	ldi	r26, 0xEC	; 236
    2b8e:	b4 ef       	ldi	r27, 0xF4	; 244
    2b90:	a5 01       	movw	r20, r10
    2b92:	94 01       	movw	r18, r8
    2b94:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <__mulohisi3>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	8c 0d       	add	r24, r12
    2b9e:	9d 1d       	adc	r25, r13
    2ba0:	ae 1d       	adc	r26, r14
    2ba2:	bf 1d       	adc	r27, r15
    2ba4:	b7 ff       	sbrs	r27, 7
    2ba6:	03 c0       	rjmp	.+6      	; 0x2bae <do_rand+0x72>
    2ba8:	01 97       	sbiw	r24, 0x01	; 1
    2baa:	a1 09       	sbc	r26, r1
    2bac:	b0 48       	sbci	r27, 0x80	; 128
    2bae:	88 83       	st	Y, r24
    2bb0:	99 83       	std	Y+1, r25	; 0x01
    2bb2:	aa 83       	std	Y+2, r26	; 0x02
    2bb4:	bb 83       	std	Y+3, r27	; 0x03
    2bb6:	9f 77       	andi	r25, 0x7F	; 127
    2bb8:	df 91       	pop	r29
    2bba:	cf 91       	pop	r28
    2bbc:	ff 90       	pop	r15
    2bbe:	ef 90       	pop	r14
    2bc0:	df 90       	pop	r13
    2bc2:	cf 90       	pop	r12
    2bc4:	bf 90       	pop	r11
    2bc6:	af 90       	pop	r10
    2bc8:	9f 90       	pop	r9
    2bca:	8f 90       	pop	r8
    2bcc:	08 95       	ret

00002bce <rand_r>:
    2bce:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <do_rand>
    2bd2:	08 95       	ret

00002bd4 <rand>:
    2bd4:	86 e0       	ldi	r24, 0x06	; 6
    2bd6:	91 e0       	ldi	r25, 0x01	; 1
    2bd8:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <do_rand>
    2bdc:	08 95       	ret

00002bde <srand>:
    2bde:	a0 e0       	ldi	r26, 0x00	; 0
    2be0:	b0 e0       	ldi	r27, 0x00	; 0
    2be2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    2be6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    2bea:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    2bee:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    2bf2:	08 95       	ret

00002bf4 <memcpy>:
    2bf4:	fb 01       	movw	r30, r22
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	02 c0       	rjmp	.+4      	; 0x2bfe <memcpy+0xa>
    2bfa:	01 90       	ld	r0, Z+
    2bfc:	0d 92       	st	X+, r0
    2bfe:	41 50       	subi	r20, 0x01	; 1
    2c00:	50 40       	sbci	r21, 0x00	; 0
    2c02:	d8 f7       	brcc	.-10     	; 0x2bfa <memcpy+0x6>
    2c04:	08 95       	ret

00002c06 <memset>:
    2c06:	dc 01       	movw	r26, r24
    2c08:	01 c0       	rjmp	.+2      	; 0x2c0c <memset+0x6>
    2c0a:	6d 93       	st	X+, r22
    2c0c:	41 50       	subi	r20, 0x01	; 1
    2c0e:	50 40       	sbci	r21, 0x00	; 0
    2c10:	e0 f7       	brcc	.-8      	; 0x2c0a <memset+0x4>
    2c12:	08 95       	ret

00002c14 <__divmodsi4>:
    2c14:	05 2e       	mov	r0, r21
    2c16:	97 fb       	bst	r25, 7
    2c18:	1e f4       	brtc	.+6      	; 0x2c20 <__divmodsi4+0xc>
    2c1a:	00 94       	com	r0
    2c1c:	0e 94 21 16 	call	0x2c42	; 0x2c42 <__negsi2>
    2c20:	57 fd       	sbrc	r21, 7
    2c22:	07 d0       	rcall	.+14     	; 0x2c32 <__divmodsi4_neg2>
    2c24:	0e 94 49 14 	call	0x2892	; 0x2892 <__udivmodsi4>
    2c28:	07 fc       	sbrc	r0, 7
    2c2a:	03 d0       	rcall	.+6      	; 0x2c32 <__divmodsi4_neg2>
    2c2c:	4e f4       	brtc	.+18     	; 0x2c40 <__divmodsi4_exit>
    2c2e:	0c 94 21 16 	jmp	0x2c42	; 0x2c42 <__negsi2>

00002c32 <__divmodsi4_neg2>:
    2c32:	50 95       	com	r21
    2c34:	40 95       	com	r20
    2c36:	30 95       	com	r19
    2c38:	21 95       	neg	r18
    2c3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c3c:	4f 4f       	sbci	r20, 0xFF	; 255
    2c3e:	5f 4f       	sbci	r21, 0xFF	; 255

00002c40 <__divmodsi4_exit>:
    2c40:	08 95       	ret

00002c42 <__negsi2>:
    2c42:	90 95       	com	r25
    2c44:	80 95       	com	r24
    2c46:	70 95       	com	r23
    2c48:	61 95       	neg	r22
    2c4a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c4c:	8f 4f       	sbci	r24, 0xFF	; 255
    2c4e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c50:	08 95       	ret

00002c52 <__muluhisi3>:
    2c52:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__umulhisi3>
    2c56:	a5 9f       	mul	r26, r21
    2c58:	90 0d       	add	r25, r0
    2c5a:	b4 9f       	mul	r27, r20
    2c5c:	90 0d       	add	r25, r0
    2c5e:	a4 9f       	mul	r26, r20
    2c60:	80 0d       	add	r24, r0
    2c62:	91 1d       	adc	r25, r1
    2c64:	11 24       	eor	r1, r1
    2c66:	08 95       	ret

00002c68 <__mulshisi3>:
    2c68:	b7 ff       	sbrs	r27, 7
    2c6a:	0c 94 29 16 	jmp	0x2c52	; 0x2c52 <__muluhisi3>

00002c6e <__mulohisi3>:
    2c6e:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__muluhisi3>
    2c72:	82 1b       	sub	r24, r18
    2c74:	93 0b       	sbc	r25, r19
    2c76:	08 95       	ret

00002c78 <__umulhisi3>:
    2c78:	a2 9f       	mul	r26, r18
    2c7a:	b0 01       	movw	r22, r0
    2c7c:	b3 9f       	mul	r27, r19
    2c7e:	c0 01       	movw	r24, r0
    2c80:	a3 9f       	mul	r26, r19
    2c82:	70 0d       	add	r23, r0
    2c84:	81 1d       	adc	r24, r1
    2c86:	11 24       	eor	r1, r1
    2c88:	91 1d       	adc	r25, r1
    2c8a:	b2 9f       	mul	r27, r18
    2c8c:	70 0d       	add	r23, r0
    2c8e:	81 1d       	adc	r24, r1
    2c90:	11 24       	eor	r1, r1
    2c92:	91 1d       	adc	r25, r1
    2c94:	08 95       	ret

00002c96 <_exit>:
    2c96:	f8 94       	cli

00002c98 <__stop_program>:
    2c98:	ff cf       	rjmp	.-2      	; 0x2c98 <__stop_program>
