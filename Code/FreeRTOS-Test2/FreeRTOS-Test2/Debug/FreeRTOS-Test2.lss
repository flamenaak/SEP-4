
FreeRTOS-Test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00002c88  00002d1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000077c  0080015c  0080015c  00002d78  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002d78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002da8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000548  00000000  00000000  00002de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000742c  00000000  00000000  00003330  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c70  00000000  00000000  0000a75c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000037db  00000000  00000000  0000c3cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001134  00000000  00000000  0000fba8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002104  00000000  00000000  00010cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000066f6  00000000  00000000  00012de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000700  00000000  00000000  000194d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 07 08 	jmp	0x100e	; 0x100e <__vector_13>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 5d 05 	jmp	0xaba	; 0xaba <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 ba 08 	jmp	0x1174	; 0x1174 <__vector_20>
      54:	0c 94 f8 08 	jmp	0x11f0	; 0x11f0 <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__vector_28>
      74:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__vector_29>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	f7 13       	cpse	r31, r23
      7e:	f7 13       	cpse	r31, r23
      80:	f7 13       	cpse	r31, r23
      82:	32 14       	cp	r3, r2
      84:	20 14       	cp	r2, r0
      86:	2f 14       	cp	r2, r15
      88:	f7 13       	cpse	r31, r23
      8a:	f7 13       	cpse	r31, r23
      8c:	32 14       	cp	r3, r2
      8e:	20 14       	cp	r2, r0

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf ef       	ldi	r28, 0xFF	; 255
      96:	d8 e0       	ldi	r29, 0x08	; 8
      98:	de bf       	out	0x3e, r29	; 62
      9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
      9c:	11 e0       	ldi	r17, 0x01	; 1
      9e:	a0 e0       	ldi	r26, 0x00	; 0
      a0:	b1 e0       	ldi	r27, 0x01	; 1
      a2:	e8 e8       	ldi	r30, 0x88	; 136
      a4:	fc e2       	ldi	r31, 0x2C	; 44
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 35       	cpi	r26, 0x5C	; 92
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	28 e0       	ldi	r18, 0x08	; 8
      b4:	ac e5       	ldi	r26, 0x5C	; 92
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a8 3d       	cpi	r26, 0xD8	; 216
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <main>
      c6:	0c 94 42 16 	jmp	0x2c84	; 0x2c84 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <obstacles_task>:
					//retransmit message - aka do nothing, cause there is a timeout
				}
			}

			vTaskDelay(10);
		}
      ce:	cf 93       	push	r28
      d0:	df 93       	push	r29
      d2:	00 d0       	rcall	.+0      	; 0xd4 <obstacles_task+0x6>
      d4:	00 d0       	rcall	.+0      	; 0xd6 <obstacles_task+0x8>
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	62 e0       	ldi	r22, 0x02	; 2
      dc:	70 e0       	ldi	r23, 0x00	; 0
      de:	80 e0       	ldi	r24, 0x00	; 0
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	0e 94 21 10 	call	0x2042	; 0x2042 <vTaskSetApplicationTaskTag>
      e6:	0f 2e       	mov	r0, r31
      e8:	f5 e6       	ldi	r31, 0x65	; 101
      ea:	6f 2e       	mov	r6, r31
      ec:	f1 e0       	ldi	r31, 0x01	; 1
      ee:	7f 2e       	mov	r7, r31
      f0:	f0 2d       	mov	r31, r0
      f2:	33 24       	eor	r3, r3
      f4:	33 94       	inc	r3
      f6:	21 2c       	mov	r2, r1
      f8:	0f 2e       	mov	r0, r31
      fa:	f3 e8       	ldi	r31, 0x83	; 131
      fc:	af 2e       	mov	r10, r31
      fe:	f2 e0       	ldi	r31, 0x02	; 2
     100:	bf 2e       	mov	r11, r31
     102:	f0 2d       	mov	r31, r0
     104:	0f 2e       	mov	r0, r31
     106:	f9 e6       	ldi	r31, 0x69	; 105
     108:	8f 2e       	mov	r8, r31
     10a:	f1 e0       	ldi	r31, 0x01	; 1
     10c:	9f 2e       	mov	r9, r31
     10e:	f0 2d       	mov	r31, r0
     110:	0f 2e       	mov	r0, r31
     112:	f1 e8       	ldi	r31, 0x81	; 129
     114:	cf 2e       	mov	r12, r31
     116:	f2 e0       	ldi	r31, 0x02	; 2
     118:	df 2e       	mov	r13, r31
     11a:	f0 2d       	mov	r31, r0
     11c:	19 82       	std	Y+1, r1	; 0x01
     11e:	1a 82       	std	Y+2, r1	; 0x02
     120:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <stop>
     124:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <stop+0x1>
     128:	89 2b       	or	r24, r25
     12a:	09 f0       	breq	.+2      	; 0x12e <obstacles_task+0x60>
     12c:	cf c0       	rjmp	.+414    	; 0x2cc <obstacles_task+0x1fe>
     12e:	d3 01       	movw	r26, r6
     130:	8d 91       	ld	r24, X+
     132:	9c 91       	ld	r25, X
     134:	11 97       	sbiw	r26, 0x01	; 1
     136:	9c 01       	movw	r18, r24
     138:	22 0f       	add	r18, r18
     13a:	33 1f       	adc	r19, r19
     13c:	88 0f       	add	r24, r24
     13e:	99 1f       	adc	r25, r25
     140:	88 0f       	add	r24, r24
     142:	99 1f       	adc	r25, r25
     144:	88 0f       	add	r24, r24
     146:	99 1f       	adc	r25, r25
     148:	82 0f       	add	r24, r18
     14a:	93 1f       	adc	r25, r19
     14c:	12 96       	adiw	r26, 0x02	; 2
     14e:	ed 91       	ld	r30, X+
     150:	fc 91       	ld	r31, X
     152:	13 97       	sbiw	r26, 0x03	; 3
     154:	8e 0f       	add	r24, r30
     156:	9f 1f       	adc	r25, r31
     158:	fc 01       	movw	r30, r24
     15a:	e0 58       	subi	r30, 0x80	; 128
     15c:	fd 4f       	sbci	r31, 0xFD	; 253
     15e:	80 81       	ld	r24, Z
     160:	81 11       	cpse	r24, r1
     162:	b0 c0       	rjmp	.+352    	; 0x2c4 <obstacles_task+0x1f6>
     164:	20 e0       	ldi	r18, 0x00	; 0
     166:	4f ef       	ldi	r20, 0xFF	; 255
     168:	5f ef       	ldi	r21, 0xFF	; 255
     16a:	60 e0       	ldi	r22, 0x00	; 0
     16c:	70 e0       	ldi	r23, 0x00	; 0
     16e:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <xMutex>
     172:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <xMutex+0x1>
     176:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <xQueueGenericReceive>
     17a:	88 23       	and	r24, r24
     17c:	09 f4       	brne	.+2      	; 0x180 <obstacles_task+0xb2>
     17e:	a6 c0       	rjmp	.+332    	; 0x2cc <obstacles_task+0x1fe>
     180:	0f 2e       	mov	r0, r31
     182:	f1 e8       	ldi	r31, 0x81	; 129
     184:	ef 2e       	mov	r14, r31
     186:	f2 e0       	ldi	r31, 0x02	; 2
     188:	ff 2e       	mov	r15, r31
     18a:	f0 2d       	mov	r31, r0
     18c:	4b e6       	ldi	r20, 0x6B	; 107
     18e:	51 e0       	ldi	r21, 0x01	; 1
     190:	b7 01       	movw	r22, r14
     192:	0e c0       	rjmp	.+28     	; 0x1b0 <obstacles_task+0xe2>
     194:	8d 91       	ld	r24, X+
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	81 93       	st	Z+, r24
     19a:	91 93       	st	Z+, r25
     19c:	e2 17       	cp	r30, r18
     19e:	f3 07       	cpc	r31, r19
     1a0:	c9 f7       	brne	.-14     	; 0x194 <obstacles_task+0xc6>
     1a2:	66 5f       	subi	r22, 0xF6	; 246
     1a4:	7f 4f       	sbci	r23, 0xFF	; 255
     1a6:	4c 5e       	subi	r20, 0xEC	; 236
     1a8:	5f 4f       	sbci	r21, 0xFF	; 255
     1aa:	4a 15       	cp	r20, r10
     1ac:	5b 05       	cpc	r21, r11
     1ae:	31 f0       	breq	.+12     	; 0x1bc <obstacles_task+0xee>
     1b0:	9a 01       	movw	r18, r20
     1b2:	2e 5e       	subi	r18, 0xEE	; 238
     1b4:	3f 4f       	sbci	r19, 0xFF	; 255
     1b6:	fa 01       	movw	r30, r20
     1b8:	db 01       	movw	r26, r22
     1ba:	ec cf       	rjmp	.-40     	; 0x194 <obstacles_task+0xc6>
     1bc:	ed e7       	ldi	r30, 0x7D	; 125
     1be:	f1 e0       	ldi	r31, 0x01	; 1
     1c0:	43 2c       	mov	r4, r3
     1c2:	52 2c       	mov	r5, r2
     1c4:	00 e0       	ldi	r16, 0x00	; 0
     1c6:	10 e0       	ldi	r17, 0x00	; 0
     1c8:	fc 83       	std	Y+4, r31	; 0x04
     1ca:	eb 83       	std	Y+3, r30	; 0x03
     1cc:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <rand>
     1d0:	81 70       	andi	r24, 0x01	; 1
     1d2:	90 78       	andi	r25, 0x80	; 128
     1d4:	99 23       	and	r25, r25
     1d6:	24 f4       	brge	.+8      	; 0x1e0 <obstacles_task+0x112>
     1d8:	01 97       	sbiw	r24, 0x01	; 1
     1da:	8e 6f       	ori	r24, 0xFE	; 254
     1dc:	9f 6f       	ori	r25, 0xFF	; 255
     1de:	01 96       	adiw	r24, 0x01	; 1
     1e0:	d4 01       	movw	r26, r8
     1e2:	8d 93       	st	X+, r24
     1e4:	9c 93       	st	X, r25
     1e6:	02 30       	cpi	r16, 0x02	; 2
     1e8:	11 05       	cpc	r17, r1
     1ea:	2c f0       	brlt	.+10     	; 0x1f6 <obstacles_task+0x128>
     1ec:	bd e0       	ldi	r27, 0x0D	; 13
     1ee:	4b 16       	cp	r4, r27
     1f0:	51 04       	cpc	r5, r1
     1f2:	d9 f4       	brne	.+54     	; 0x22a <obstacles_task+0x15c>
     1f4:	70 c0       	rjmp	.+224    	; 0x2d6 <obstacles_task+0x208>
     1f6:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <rand>
     1fa:	81 70       	andi	r24, 0x01	; 1
     1fc:	90 78       	andi	r25, 0x80	; 128
     1fe:	99 23       	and	r25, r25
     200:	24 f4       	brge	.+8      	; 0x20a <obstacles_task+0x13c>
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	8e 6f       	ori	r24, 0xFE	; 254
     206:	9f 6f       	ori	r25, 0xFF	; 255
     208:	01 96       	adiw	r24, 0x01	; 1
     20a:	eb 81       	ldd	r30, Y+3	; 0x03
     20c:	fc 81       	ldd	r31, Y+4	; 0x04
     20e:	91 83       	std	Z+1, r25	; 0x01
     210:	80 83       	st	Z, r24
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	11 f4       	brne	.+4      	; 0x21a <obstacles_task+0x14c>
     216:	0f 5f       	subi	r16, 0xFF	; 255
     218:	1f 4f       	sbci	r17, 0xFF	; 255
     21a:	c2 01       	movw	r24, r4
     21c:	83 70       	andi	r24, 0x03	; 3
     21e:	99 27       	eor	r25, r25
     220:	89 2b       	or	r24, r25
     222:	39 f4       	brne	.+14     	; 0x232 <obstacles_task+0x164>
     224:	09 81       	ldd	r16, Y+1	; 0x01
     226:	1a 81       	ldd	r17, Y+2	; 0x02
     228:	04 c0       	rjmp	.+8      	; 0x232 <obstacles_task+0x164>
     22a:	ab 81       	ldd	r26, Y+3	; 0x03
     22c:	bc 81       	ldd	r27, Y+4	; 0x04
     22e:	1d 92       	st	X+, r1
     230:	1c 92       	st	X, r1
     232:	bf ef       	ldi	r27, 0xFF	; 255
     234:	4b 1a       	sub	r4, r27
     236:	5b 0a       	sbc	r5, r27
     238:	eb 81       	ldd	r30, Y+3	; 0x03
     23a:	fc 81       	ldd	r31, Y+4	; 0x04
     23c:	74 96       	adiw	r30, 0x14	; 20
     23e:	fc 83       	std	Y+4, r31	; 0x04
     240:	eb 83       	std	Y+3, r30	; 0x03
     242:	fe e0       	ldi	r31, 0x0E	; 14
     244:	4f 16       	cp	r4, r31
     246:	51 04       	cpc	r5, r1
     248:	09 f6       	brne	.-126    	; 0x1cc <obstacles_task+0xfe>
     24a:	a4 01       	movw	r20, r8
     24c:	0e c0       	rjmp	.+28     	; 0x26a <obstacles_task+0x19c>
     24e:	80 81       	ld	r24, Z
     250:	32 96       	adiw	r30, 0x02	; 2
     252:	8d 93       	st	X+, r24
     254:	e2 17       	cp	r30, r18
     256:	f3 07       	cpc	r31, r19
     258:	d1 f7       	brne	.-12     	; 0x24e <obstacles_task+0x180>
     25a:	4c 5e       	subi	r20, 0xEC	; 236
     25c:	5f 4f       	sbci	r21, 0xFF	; 255
     25e:	8a e0       	ldi	r24, 0x0A	; 10
     260:	e8 0e       	add	r14, r24
     262:	f1 1c       	adc	r15, r1
     264:	4c 15       	cp	r20, r12
     266:	5d 05       	cpc	r21, r13
     268:	31 f0       	breq	.+12     	; 0x276 <obstacles_task+0x1a8>
     26a:	9a 01       	movw	r18, r20
     26c:	2e 5e       	subi	r18, 0xEE	; 238
     26e:	3f 4f       	sbci	r19, 0xFF	; 255
     270:	d7 01       	movw	r26, r14
     272:	fa 01       	movw	r30, r20
     274:	ec cf       	rjmp	.-40     	; 0x24e <obstacles_task+0x180>
     276:	d3 01       	movw	r26, r6
     278:	8d 91       	ld	r24, X+
     27a:	9c 91       	ld	r25, X
     27c:	11 97       	sbiw	r26, 0x01	; 1
     27e:	fc 01       	movw	r30, r24
     280:	ee 0f       	add	r30, r30
     282:	ff 1f       	adc	r31, r31
     284:	88 0f       	add	r24, r24
     286:	99 1f       	adc	r25, r25
     288:	88 0f       	add	r24, r24
     28a:	99 1f       	adc	r25, r25
     28c:	88 0f       	add	r24, r24
     28e:	99 1f       	adc	r25, r25
     290:	e8 0f       	add	r30, r24
     292:	f9 1f       	adc	r31, r25
     294:	12 96       	adiw	r26, 0x02	; 2
     296:	8d 91       	ld	r24, X+
     298:	9c 91       	ld	r25, X
     29a:	13 97       	sbiw	r26, 0x03	; 3
     29c:	e8 0f       	add	r30, r24
     29e:	f9 1f       	adc	r31, r25
     2a0:	ee 0f       	add	r30, r30
     2a2:	ff 1f       	adc	r31, r31
     2a4:	e7 59       	subi	r30, 0x97	; 151
     2a6:	fe 4f       	sbci	r31, 0xFE	; 254
     2a8:	30 82       	st	Z, r3
     2aa:	21 82       	std	Z+1, r2	; 0x01
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	40 e0       	ldi	r20, 0x00	; 0
     2b0:	50 e0       	ldi	r21, 0x00	; 0
     2b2:	60 e0       	ldi	r22, 0x00	; 0
     2b4:	70 e0       	ldi	r23, 0x00	; 0
     2b6:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <xMutex>
     2ba:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <xMutex+0x1>
     2be:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <xQueueGenericSend>
     2c2:	04 c0       	rjmp	.+8      	; 0x2cc <obstacles_task+0x1fe>
     2c4:	30 92 5f 01 	sts	0x015F, r3	; 0x80015f <stop>
     2c8:	20 92 60 01 	sts	0x0160, r2	; 0x800160 <stop+0x1>
     2cc:	88 ee       	ldi	r24, 0xE8	; 232
     2ce:	93 e0       	ldi	r25, 0x03	; 3
     2d0:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <vTaskDelay>
     2d4:	25 cf       	rjmp	.-438    	; 0x120 <obstacles_task+0x52>
     2d6:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <rand>
     2da:	81 70       	andi	r24, 0x01	; 1
     2dc:	90 78       	andi	r25, 0x80	; 128
     2de:	99 23       	and	r25, r25
     2e0:	24 f4       	brge	.+8      	; 0x2ea <obstacles_task+0x21c>
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	8e 6f       	ori	r24, 0xFE	; 254
     2e6:	9f 6f       	ori	r25, 0xFF	; 255
     2e8:	01 96       	adiw	r24, 0x01	; 1
     2ea:	eb 81       	ldd	r30, Y+3	; 0x03
     2ec:	fc 81       	ldd	r31, Y+4	; 0x04
     2ee:	91 83       	std	Z+1, r25	; 0x01
     2f0:	80 83       	st	Z, r24
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	09 f0       	breq	.+2      	; 0x2f8 <obstacles_task+0x22a>
     2f6:	a9 cf       	rjmp	.-174    	; 0x24a <obstacles_task+0x17c>
     2f8:	8e cf       	rjmp	.-228    	; 0x216 <obstacles_task+0x148>

000002fa <joystickSampler_task>:
     2fa:	cf 93       	push	r28
     2fc:	df 93       	push	r29
     2fe:	00 d0       	rcall	.+0      	; 0x300 <joystickSampler_task+0x6>
     300:	00 d0       	rcall	.+0      	; 0x302 <joystickSampler_task+0x8>
     302:	00 d0       	rcall	.+0      	; 0x304 <joystickSampler_task+0xa>
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
     308:	65 e0       	ldi	r22, 0x05	; 5
     30a:	70 e0       	ldi	r23, 0x00	; 0
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 21 10 	call	0x2042	; 0x2042 <vTaskSetApplicationTaskTag>
     314:	ee 24       	eor	r14, r14
     316:	e3 94       	inc	r14
     318:	f1 2c       	mov	r15, r1
     31a:	05 e6       	ldi	r16, 0x65	; 101
     31c:	11 e0       	ldi	r17, 0x01	; 1
     31e:	0f 2e       	mov	r0, r31
     320:	f3 e0       	ldi	r31, 0x03	; 3
     322:	cf 2e       	mov	r12, r31
     324:	d1 2c       	mov	r13, r1
     326:	f0 2d       	mov	r31, r0
     328:	68 94       	set
     32a:	aa 24       	eor	r10, r10
     32c:	a1 f8       	bld	r10, 1
     32e:	b1 2c       	mov	r11, r1
     330:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <stop>
     334:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <stop+0x1>
     338:	89 2b       	or	r24, r25
     33a:	09 f0       	breq	.+2      	; 0x33e <joystickSampler_task+0x44>
     33c:	4a c0       	rjmp	.+148    	; 0x3d2 <joystickSampler_task+0xd8>
     33e:	f8 01       	movw	r30, r16
     340:	80 81       	ld	r24, Z
     342:	91 81       	ldd	r25, Z+1	; 0x01
     344:	9c 83       	std	Y+4, r25	; 0x04
     346:	8b 83       	std	Y+3, r24	; 0x03
     348:	82 81       	ldd	r24, Z+2	; 0x02
     34a:	93 81       	ldd	r25, Z+3	; 0x03
     34c:	9e 83       	std	Y+6, r25	; 0x06
     34e:	8d 83       	std	Y+5, r24	; 0x05
     350:	30 99       	sbic	0x06, 0	; 6
     352:	0e c0       	rjmp	.+28     	; 0x370 <joystickSampler_task+0x76>
     354:	1a 82       	std	Y+2, r1	; 0x02
     356:	19 82       	std	Y+1, r1	; 0x01
     358:	20 e0       	ldi	r18, 0x00	; 0
     35a:	4f ef       	ldi	r20, 0xFF	; 255
     35c:	5f ef       	ldi	r21, 0xFF	; 255
     35e:	be 01       	movw	r22, r28
     360:	6f 5f       	subi	r22, 0xFF	; 255
     362:	7f 4f       	sbci	r23, 0xFF	; 255
     364:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <xInputQueue>
     368:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <xInputQueue+0x1>
     36c:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <xQueueGenericSend>
     370:	31 99       	sbic	0x06, 1	; 6
     372:	0e c0       	rjmp	.+28     	; 0x390 <joystickSampler_task+0x96>
     374:	ba 82       	std	Y+2, r11	; 0x02
     376:	a9 82       	std	Y+1, r10	; 0x01
     378:	20 e0       	ldi	r18, 0x00	; 0
     37a:	4f ef       	ldi	r20, 0xFF	; 255
     37c:	5f ef       	ldi	r21, 0xFF	; 255
     37e:	be 01       	movw	r22, r28
     380:	6f 5f       	subi	r22, 0xFF	; 255
     382:	7f 4f       	sbci	r23, 0xFF	; 255
     384:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <xInputQueue>
     388:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <xInputQueue+0x1>
     38c:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <xQueueGenericSend>
     390:	36 99       	sbic	0x06, 6	; 6
     392:	0e c0       	rjmp	.+28     	; 0x3b0 <joystickSampler_task+0xb6>
     394:	fa 82       	std	Y+2, r15	; 0x02
     396:	e9 82       	std	Y+1, r14	; 0x01
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	4f ef       	ldi	r20, 0xFF	; 255
     39c:	5f ef       	ldi	r21, 0xFF	; 255
     39e:	be 01       	movw	r22, r28
     3a0:	6f 5f       	subi	r22, 0xFF	; 255
     3a2:	7f 4f       	sbci	r23, 0xFF	; 255
     3a4:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <xInputQueue>
     3a8:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <xInputQueue+0x1>
     3ac:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <xQueueGenericSend>
     3b0:	37 99       	sbic	0x06, 7	; 6
     3b2:	15 c0       	rjmp	.+42     	; 0x3de <joystickSampler_task+0xe4>
     3b4:	da 82       	std	Y+2, r13	; 0x02
     3b6:	c9 82       	std	Y+1, r12	; 0x01
     3b8:	20 e0       	ldi	r18, 0x00	; 0
     3ba:	4f ef       	ldi	r20, 0xFF	; 255
     3bc:	5f ef       	ldi	r21, 0xFF	; 255
     3be:	be 01       	movw	r22, r28
     3c0:	6f 5f       	subi	r22, 0xFF	; 255
     3c2:	7f 4f       	sbci	r23, 0xFF	; 255
     3c4:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <xInputQueue>
     3c8:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <xInputQueue+0x1>
     3cc:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <xQueueGenericSend>
     3d0:	06 c0       	rjmp	.+12     	; 0x3de <joystickSampler_task+0xe4>
     3d2:	4b 99       	sbic	0x09, 3	; 9
     3d4:	04 c0       	rjmp	.+8      	; 0x3de <joystickSampler_task+0xe4>
     3d6:	f0 92 5e 01 	sts	0x015E, r15	; 0x80015e <restart1+0x1>
     3da:	e0 92 5d 01 	sts	0x015D, r14	; 0x80015d <restart1>
     3de:	84 e6       	ldi	r24, 0x64	; 100
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <vTaskDelay>
     3e6:	a4 cf       	rjmp	.-184    	; 0x330 <joystickSampler_task+0x36>

000003e8 <update>:
     3e8:	cf 92       	push	r12
     3ea:	df 92       	push	r13
     3ec:	ef 92       	push	r14
     3ee:	ff 92       	push	r15
     3f0:	0f 93       	push	r16
     3f2:	1f 93       	push	r17
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	cd e0       	ldi	r28, 0x0D	; 13
     3fa:	d3 e0       	ldi	r29, 0x03	; 3
     3fc:	49 e6       	ldi	r20, 0x69	; 105
     3fe:	51 e0       	ldi	r21, 0x01	; 1
     400:	01 e8       	ldi	r16, 0x81	; 129
     402:	12 e0       	ldi	r17, 0x02	; 2
     404:	c1 2c       	mov	r12, r1
     406:	d1 2c       	mov	r13, r1
     408:	61 e0       	ldi	r22, 0x01	; 1
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	de 01       	movw	r26, r28
     40e:	19 82       	std	Y+1, r1	; 0x01
     410:	18 82       	st	Y, r1
     412:	fa 01       	movw	r30, r20
     414:	8c 2d       	mov	r24, r12
     416:	9d 2d       	mov	r25, r13
     418:	21 91       	ld	r18, Z+
     41a:	31 91       	ld	r19, Z+
     41c:	21 30       	cpi	r18, 0x01	; 1
     41e:	31 05       	cpc	r19, r1
     420:	79 f4       	brne	.+30     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     422:	ed 90       	ld	r14, X+
     424:	fc 90       	ld	r15, X
     426:	11 97       	sbiw	r26, 0x01	; 1
     428:	9b 01       	movw	r18, r22
     42a:	08 2e       	mov	r0, r24
     42c:	02 c0       	rjmp	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     42e:	22 0f       	add	r18, r18
     430:	33 1f       	adc	r19, r19
     432:	0a 94       	dec	r0
     434:	e2 f7       	brpl	.-8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     436:	2e 29       	or	r18, r14
     438:	3f 29       	or	r19, r15
     43a:	11 96       	adiw	r26, 0x01	; 1
     43c:	3c 93       	st	X, r19
     43e:	2e 93       	st	-X, r18
     440:	01 96       	adiw	r24, 0x01	; 1
     442:	8a 30       	cpi	r24, 0x0A	; 10
     444:	91 05       	cpc	r25, r1
     446:	41 f7       	brne	.-48     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     448:	22 96       	adiw	r28, 0x02	; 2
     44a:	4c 5e       	subi	r20, 0xEC	; 236
     44c:	5f 4f       	sbci	r21, 0xFF	; 255
     44e:	40 17       	cp	r20, r16
     450:	51 07       	cpc	r21, r17
     452:	e1 f6       	brne	.-72     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	1f 91       	pop	r17
     45a:	0f 91       	pop	r16
     45c:	ff 90       	pop	r15
     45e:	ef 90       	pop	r14
     460:	df 90       	pop	r13
     462:	cf 90       	pop	r12
     464:	08 95       	ret

00000466 <moveCar>:
     466:	81 30       	cpi	r24, 0x01	; 1
     468:	91 05       	cpc	r25, r1
     46a:	09 f4       	brne	.+2      	; 0x46e <moveCar+0x8>
     46c:	62 c0       	rjmp	.+196    	; 0x532 <moveCar+0xcc>
     46e:	40 f0       	brcs	.+16     	; 0x480 <moveCar+0x1a>
     470:	82 30       	cpi	r24, 0x02	; 2
     472:	91 05       	cpc	r25, r1
     474:	09 f4       	brne	.+2      	; 0x478 <moveCar+0x12>
     476:	ba c0       	rjmp	.+372    	; 0x5ec <moveCar+0x186>
     478:	03 97       	sbiw	r24, 0x03	; 3
     47a:	09 f4       	brne	.+2      	; 0x47e <moveCar+0x18>
     47c:	14 c1       	rjmp	.+552    	; 0x6a6 <moveCar+0x240>
     47e:	08 95       	ret
     480:	db 01       	movw	r26, r22
     482:	12 96       	adiw	r26, 0x02	; 2
     484:	2d 91       	ld	r18, X+
     486:	3c 91       	ld	r19, X
     488:	13 97       	sbiw	r26, 0x03	; 3
     48a:	c9 01       	movw	r24, r18
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	8a 30       	cpi	r24, 0x0A	; 10
     490:	91 05       	cpc	r25, r1
     492:	08 f0       	brcs	.+2      	; 0x496 <moveCar+0x30>
     494:	63 c1       	rjmp	.+710    	; 0x75c <moveCar+0x2f6>
     496:	4d 91       	ld	r20, X+
     498:	5c 91       	ld	r21, X
     49a:	da 01       	movw	r26, r20
     49c:	aa 0f       	add	r26, r26
     49e:	bb 1f       	adc	r27, r27
     4a0:	fa 01       	movw	r30, r20
     4a2:	ee 0f       	add	r30, r30
     4a4:	ff 1f       	adc	r31, r31
     4a6:	ee 0f       	add	r30, r30
     4a8:	ff 1f       	adc	r31, r31
     4aa:	ee 0f       	add	r30, r30
     4ac:	ff 1f       	adc	r31, r31
     4ae:	ea 0f       	add	r30, r26
     4b0:	fb 1f       	adc	r31, r27
     4b2:	e8 0f       	add	r30, r24
     4b4:	f9 1f       	adc	r31, r25
     4b6:	ee 0f       	add	r30, r30
     4b8:	ff 1f       	adc	r31, r31
     4ba:	e7 59       	subi	r30, 0x97	; 151
     4bc:	fe 4f       	sbci	r31, 0xFE	; 254
     4be:	80 81       	ld	r24, Z
     4c0:	91 81       	ldd	r25, Z+1	; 0x01
     4c2:	89 2b       	or	r24, r25
     4c4:	09 f0       	breq	.+2      	; 0x4c8 <moveCar+0x62>
     4c6:	4a c1       	rjmp	.+660    	; 0x75c <moveCar+0x2f6>
     4c8:	fd 01       	movw	r30, r26
     4ca:	44 0f       	add	r20, r20
     4cc:	55 1f       	adc	r21, r21
     4ce:	44 0f       	add	r20, r20
     4d0:	55 1f       	adc	r21, r21
     4d2:	44 0f       	add	r20, r20
     4d4:	55 1f       	adc	r21, r21
     4d6:	e4 0f       	add	r30, r20
     4d8:	f5 1f       	adc	r31, r21
     4da:	e2 0f       	add	r30, r18
     4dc:	f3 1f       	adc	r31, r19
     4de:	ee 0f       	add	r30, r30
     4e0:	ff 1f       	adc	r31, r31
     4e2:	e7 59       	subi	r30, 0x97	; 151
     4e4:	fe 4f       	sbci	r31, 0xFE	; 254
     4e6:	11 82       	std	Z+1, r1	; 0x01
     4e8:	10 82       	st	Z, r1
     4ea:	fb 01       	movw	r30, r22
     4ec:	20 81       	ld	r18, Z
     4ee:	31 81       	ldd	r19, Z+1	; 0x01
     4f0:	82 81       	ldd	r24, Z+2	; 0x02
     4f2:	93 81       	ldd	r25, Z+3	; 0x03
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	93 83       	std	Z+3, r25	; 0x03
     4f8:	82 83       	std	Z+2, r24	; 0x02
     4fa:	f9 01       	movw	r30, r18
     4fc:	ee 0f       	add	r30, r30
     4fe:	ff 1f       	adc	r31, r31
     500:	22 0f       	add	r18, r18
     502:	33 1f       	adc	r19, r19
     504:	22 0f       	add	r18, r18
     506:	33 1f       	adc	r19, r19
     508:	22 0f       	add	r18, r18
     50a:	33 1f       	adc	r19, r19
     50c:	e2 0f       	add	r30, r18
     50e:	f3 1f       	adc	r31, r19
     510:	e8 0f       	add	r30, r24
     512:	f9 1f       	adc	r31, r25
     514:	ee 0f       	add	r30, r30
     516:	ff 1f       	adc	r31, r31
     518:	e7 59       	subi	r30, 0x97	; 151
     51a:	fe 4f       	sbci	r31, 0xFE	; 254
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	91 83       	std	Z+1, r25	; 0x01
     522:	80 83       	st	Z, r24
     524:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <update>
     528:	88 ec       	ldi	r24, 0xC8	; 200
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <vTaskDelay>
     530:	08 95       	ret
     532:	db 01       	movw	r26, r22
     534:	12 96       	adiw	r26, 0x02	; 2
     536:	2d 91       	ld	r18, X+
     538:	3c 91       	ld	r19, X
     53a:	13 97       	sbiw	r26, 0x03	; 3
     53c:	21 15       	cp	r18, r1
     53e:	31 05       	cpc	r19, r1
     540:	09 f4       	brne	.+2      	; 0x544 <moveCar+0xde>
     542:	0c c1       	rjmp	.+536    	; 0x75c <moveCar+0x2f6>
     544:	4d 91       	ld	r20, X+
     546:	5c 91       	ld	r21, X
     548:	11 97       	sbiw	r26, 0x01	; 1
     54a:	fa 01       	movw	r30, r20
     54c:	ee 0f       	add	r30, r30
     54e:	ff 1f       	adc	r31, r31
     550:	ca 01       	movw	r24, r20
     552:	88 0f       	add	r24, r24
     554:	99 1f       	adc	r25, r25
     556:	88 0f       	add	r24, r24
     558:	99 1f       	adc	r25, r25
     55a:	88 0f       	add	r24, r24
     55c:	99 1f       	adc	r25, r25
     55e:	e8 0f       	add	r30, r24
     560:	f9 1f       	adc	r31, r25
     562:	e2 0f       	add	r30, r18
     564:	f3 1f       	adc	r31, r19
     566:	ee 0f       	add	r30, r30
     568:	ff 1f       	adc	r31, r31
     56a:	e9 59       	subi	r30, 0x99	; 153
     56c:	fe 4f       	sbci	r31, 0xFE	; 254
     56e:	80 81       	ld	r24, Z
     570:	91 81       	ldd	r25, Z+1	; 0x01
     572:	89 2b       	or	r24, r25
     574:	09 f0       	breq	.+2      	; 0x578 <moveCar+0x112>
     576:	f2 c0       	rjmp	.+484    	; 0x75c <moveCar+0x2f6>
     578:	fa 01       	movw	r30, r20
     57a:	ee 0f       	add	r30, r30
     57c:	ff 1f       	adc	r31, r31
     57e:	44 0f       	add	r20, r20
     580:	55 1f       	adc	r21, r21
     582:	44 0f       	add	r20, r20
     584:	55 1f       	adc	r21, r21
     586:	44 0f       	add	r20, r20
     588:	55 1f       	adc	r21, r21
     58a:	e4 0f       	add	r30, r20
     58c:	f5 1f       	adc	r31, r21
     58e:	e2 0f       	add	r30, r18
     590:	f3 1f       	adc	r31, r19
     592:	ee 0f       	add	r30, r30
     594:	ff 1f       	adc	r31, r31
     596:	e7 59       	subi	r30, 0x97	; 151
     598:	fe 4f       	sbci	r31, 0xFE	; 254
     59a:	11 82       	std	Z+1, r1	; 0x01
     59c:	10 82       	st	Z, r1
     59e:	12 96       	adiw	r26, 0x02	; 2
     5a0:	8d 91       	ld	r24, X+
     5a2:	9c 91       	ld	r25, X
     5a4:	13 97       	sbiw	r26, 0x03	; 3
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	13 96       	adiw	r26, 0x03	; 3
     5aa:	9c 93       	st	X, r25
     5ac:	8e 93       	st	-X, r24
     5ae:	12 97       	sbiw	r26, 0x02	; 2
     5b0:	2d 91       	ld	r18, X+
     5b2:	3c 91       	ld	r19, X
     5b4:	f9 01       	movw	r30, r18
     5b6:	ee 0f       	add	r30, r30
     5b8:	ff 1f       	adc	r31, r31
     5ba:	22 0f       	add	r18, r18
     5bc:	33 1f       	adc	r19, r19
     5be:	22 0f       	add	r18, r18
     5c0:	33 1f       	adc	r19, r19
     5c2:	22 0f       	add	r18, r18
     5c4:	33 1f       	adc	r19, r19
     5c6:	e2 0f       	add	r30, r18
     5c8:	f3 1f       	adc	r31, r19
     5ca:	e8 0f       	add	r30, r24
     5cc:	f9 1f       	adc	r31, r25
     5ce:	ee 0f       	add	r30, r30
     5d0:	ff 1f       	adc	r31, r31
     5d2:	e7 59       	subi	r30, 0x97	; 151
     5d4:	fe 4f       	sbci	r31, 0xFE	; 254
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	91 83       	std	Z+1, r25	; 0x01
     5dc:	80 83       	st	Z, r24
     5de:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <update>
     5e2:	88 ec       	ldi	r24, 0xC8	; 200
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <vTaskDelay>
     5ea:	08 95       	ret
     5ec:	fb 01       	movw	r30, r22
     5ee:	20 81       	ld	r18, Z
     5f0:	31 81       	ldd	r19, Z+1	; 0x01
     5f2:	c9 01       	movw	r24, r18
     5f4:	01 96       	adiw	r24, 0x01	; 1
     5f6:	8e 30       	cpi	r24, 0x0E	; 14
     5f8:	91 05       	cpc	r25, r1
     5fa:	08 f0       	brcs	.+2      	; 0x5fe <moveCar+0x198>
     5fc:	af c0       	rjmp	.+350    	; 0x75c <moveCar+0x2f6>
     5fe:	42 81       	ldd	r20, Z+2	; 0x02
     600:	53 81       	ldd	r21, Z+3	; 0x03
     602:	fc 01       	movw	r30, r24
     604:	ee 0f       	add	r30, r30
     606:	ff 1f       	adc	r31, r31
     608:	88 0f       	add	r24, r24
     60a:	99 1f       	adc	r25, r25
     60c:	88 0f       	add	r24, r24
     60e:	99 1f       	adc	r25, r25
     610:	88 0f       	add	r24, r24
     612:	99 1f       	adc	r25, r25
     614:	e8 0f       	add	r30, r24
     616:	f9 1f       	adc	r31, r25
     618:	e4 0f       	add	r30, r20
     61a:	f5 1f       	adc	r31, r21
     61c:	ee 0f       	add	r30, r30
     61e:	ff 1f       	adc	r31, r31
     620:	e7 59       	subi	r30, 0x97	; 151
     622:	fe 4f       	sbci	r31, 0xFE	; 254
     624:	80 81       	ld	r24, Z
     626:	91 81       	ldd	r25, Z+1	; 0x01
     628:	89 2b       	or	r24, r25
     62a:	09 f0       	breq	.+2      	; 0x62e <moveCar+0x1c8>
     62c:	97 c0       	rjmp	.+302    	; 0x75c <moveCar+0x2f6>
     62e:	c9 01       	movw	r24, r18
     630:	88 0f       	add	r24, r24
     632:	99 1f       	adc	r25, r25
     634:	22 0f       	add	r18, r18
     636:	33 1f       	adc	r19, r19
     638:	22 0f       	add	r18, r18
     63a:	33 1f       	adc	r19, r19
     63c:	22 0f       	add	r18, r18
     63e:	33 1f       	adc	r19, r19
     640:	28 0f       	add	r18, r24
     642:	39 1f       	adc	r19, r25
     644:	f9 01       	movw	r30, r18
     646:	e4 0f       	add	r30, r20
     648:	f5 1f       	adc	r31, r21
     64a:	ee 0f       	add	r30, r30
     64c:	ff 1f       	adc	r31, r31
     64e:	e7 59       	subi	r30, 0x97	; 151
     650:	fe 4f       	sbci	r31, 0xFE	; 254
     652:	11 82       	std	Z+1, r1	; 0x01
     654:	10 82       	st	Z, r1
     656:	db 01       	movw	r26, r22
     658:	8d 91       	ld	r24, X+
     65a:	9c 91       	ld	r25, X
     65c:	11 97       	sbiw	r26, 0x01	; 1
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	11 96       	adiw	r26, 0x01	; 1
     662:	9c 93       	st	X, r25
     664:	8e 93       	st	-X, r24
     666:	12 96       	adiw	r26, 0x02	; 2
     668:	ed 91       	ld	r30, X+
     66a:	fc 91       	ld	r31, X
     66c:	13 97       	sbiw	r26, 0x03	; 3
     66e:	9c 01       	movw	r18, r24
     670:	22 0f       	add	r18, r18
     672:	33 1f       	adc	r19, r19
     674:	88 0f       	add	r24, r24
     676:	99 1f       	adc	r25, r25
     678:	88 0f       	add	r24, r24
     67a:	99 1f       	adc	r25, r25
     67c:	88 0f       	add	r24, r24
     67e:	99 1f       	adc	r25, r25
     680:	82 0f       	add	r24, r18
     682:	93 1f       	adc	r25, r19
     684:	e8 0f       	add	r30, r24
     686:	f9 1f       	adc	r31, r25
     688:	ee 0f       	add	r30, r30
     68a:	ff 1f       	adc	r31, r31
     68c:	e7 59       	subi	r30, 0x97	; 151
     68e:	fe 4f       	sbci	r31, 0xFE	; 254
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	91 83       	std	Z+1, r25	; 0x01
     696:	80 83       	st	Z, r24
     698:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <update>
     69c:	88 ec       	ldi	r24, 0xC8	; 200
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <vTaskDelay>
     6a4:	08 95       	ret
     6a6:	fb 01       	movw	r30, r22
     6a8:	20 81       	ld	r18, Z
     6aa:	31 81       	ldd	r19, Z+1	; 0x01
     6ac:	21 15       	cp	r18, r1
     6ae:	31 05       	cpc	r19, r1
     6b0:	09 f4       	brne	.+2      	; 0x6b4 <moveCar+0x24e>
     6b2:	54 c0       	rjmp	.+168    	; 0x75c <moveCar+0x2f6>
     6b4:	42 81       	ldd	r20, Z+2	; 0x02
     6b6:	53 81       	ldd	r21, Z+3	; 0x03
     6b8:	c9 01       	movw	r24, r18
     6ba:	01 97       	sbiw	r24, 0x01	; 1
     6bc:	fc 01       	movw	r30, r24
     6be:	ee 0f       	add	r30, r30
     6c0:	ff 1f       	adc	r31, r31
     6c2:	88 0f       	add	r24, r24
     6c4:	99 1f       	adc	r25, r25
     6c6:	88 0f       	add	r24, r24
     6c8:	99 1f       	adc	r25, r25
     6ca:	88 0f       	add	r24, r24
     6cc:	99 1f       	adc	r25, r25
     6ce:	e8 0f       	add	r30, r24
     6d0:	f9 1f       	adc	r31, r25
     6d2:	e4 0f       	add	r30, r20
     6d4:	f5 1f       	adc	r31, r21
     6d6:	ee 0f       	add	r30, r30
     6d8:	ff 1f       	adc	r31, r31
     6da:	e7 59       	subi	r30, 0x97	; 151
     6dc:	fe 4f       	sbci	r31, 0xFE	; 254
     6de:	80 81       	ld	r24, Z
     6e0:	91 81       	ldd	r25, Z+1	; 0x01
     6e2:	89 2b       	or	r24, r25
     6e4:	d9 f5       	brne	.+118    	; 0x75c <moveCar+0x2f6>
     6e6:	c9 01       	movw	r24, r18
     6e8:	88 0f       	add	r24, r24
     6ea:	99 1f       	adc	r25, r25
     6ec:	22 0f       	add	r18, r18
     6ee:	33 1f       	adc	r19, r19
     6f0:	22 0f       	add	r18, r18
     6f2:	33 1f       	adc	r19, r19
     6f4:	22 0f       	add	r18, r18
     6f6:	33 1f       	adc	r19, r19
     6f8:	28 0f       	add	r18, r24
     6fa:	39 1f       	adc	r19, r25
     6fc:	f9 01       	movw	r30, r18
     6fe:	e4 0f       	add	r30, r20
     700:	f5 1f       	adc	r31, r21
     702:	ee 0f       	add	r30, r30
     704:	ff 1f       	adc	r31, r31
     706:	e7 59       	subi	r30, 0x97	; 151
     708:	fe 4f       	sbci	r31, 0xFE	; 254
     70a:	11 82       	std	Z+1, r1	; 0x01
     70c:	10 82       	st	Z, r1
     70e:	db 01       	movw	r26, r22
     710:	8d 91       	ld	r24, X+
     712:	9c 91       	ld	r25, X
     714:	11 97       	sbiw	r26, 0x01	; 1
     716:	01 97       	sbiw	r24, 0x01	; 1
     718:	11 96       	adiw	r26, 0x01	; 1
     71a:	9c 93       	st	X, r25
     71c:	8e 93       	st	-X, r24
     71e:	12 96       	adiw	r26, 0x02	; 2
     720:	ed 91       	ld	r30, X+
     722:	fc 91       	ld	r31, X
     724:	13 97       	sbiw	r26, 0x03	; 3
     726:	9c 01       	movw	r18, r24
     728:	22 0f       	add	r18, r18
     72a:	33 1f       	adc	r19, r19
     72c:	88 0f       	add	r24, r24
     72e:	99 1f       	adc	r25, r25
     730:	88 0f       	add	r24, r24
     732:	99 1f       	adc	r25, r25
     734:	88 0f       	add	r24, r24
     736:	99 1f       	adc	r25, r25
     738:	82 0f       	add	r24, r18
     73a:	93 1f       	adc	r25, r19
     73c:	e8 0f       	add	r30, r24
     73e:	f9 1f       	adc	r31, r25
     740:	ee 0f       	add	r30, r30
     742:	ff 1f       	adc	r31, r31
     744:	e7 59       	subi	r30, 0x97	; 151
     746:	fe 4f       	sbci	r31, 0xFE	; 254
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	91 83       	std	Z+1, r25	; 0x01
     74e:	80 83       	st	Z, r24
     750:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <update>
     754:	88 ec       	ldi	r24, 0xC8	; 200
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <vTaskDelay>
     75c:	08 95       	ret

0000075e <displayUpdater_task>:
     75e:	63 e0       	ldi	r22, 0x03	; 3
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 21 10 	call	0x2042	; 0x2042 <vTaskSetApplicationTaskTag>
     76a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <update>
     76e:	89 e2       	ldi	r24, 0x29	; 41
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <vTaskDelay>
     776:	f9 cf       	rjmp	.-14     	; 0x76a <displayUpdater_task+0xc>

00000778 <setupGame>:
     778:	e9 e6       	ldi	r30, 0x69	; 105
     77a:	f1 e0       	ldi	r31, 0x01	; 1
     77c:	21 e8       	ldi	r18, 0x81	; 129
     77e:	32 e0       	ldi	r19, 0x02	; 2
     780:	41 e8       	ldi	r20, 0x81	; 129
     782:	52 e0       	ldi	r21, 0x02	; 2
     784:	0c c0       	rjmp	.+24     	; 0x79e <setupGame+0x26>
     786:	11 92       	st	Z+, r1
     788:	11 92       	st	Z+, r1
     78a:	1d 92       	st	X+, r1
     78c:	e8 17       	cp	r30, r24
     78e:	f9 07       	cpc	r31, r25
     790:	d1 f7       	brne	.-12     	; 0x786 <setupGame+0xe>
     792:	26 5f       	subi	r18, 0xF6	; 246
     794:	3f 4f       	sbci	r19, 0xFF	; 255
     796:	fc 01       	movw	r30, r24
     798:	48 17       	cp	r20, r24
     79a:	59 07       	cpc	r21, r25
     79c:	21 f0       	breq	.+8      	; 0x7a6 <setupGame+0x2e>
     79e:	cf 01       	movw	r24, r30
     7a0:	44 96       	adiw	r24, 0x14	; 20
     7a2:	d9 01       	movw	r26, r18
     7a4:	f0 cf       	rjmp	.-32     	; 0x786 <setupGame+0xe>
     7a6:	e5 e6       	ldi	r30, 0x65	; 101
     7a8:	f1 e0       	ldi	r31, 0x01	; 1
     7aa:	86 e0       	ldi	r24, 0x06	; 6
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	91 83       	std	Z+1, r25	; 0x01
     7b0:	80 83       	st	Z, r24
     7b2:	89 e0       	ldi	r24, 0x09	; 9
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	93 83       	std	Z+3, r25	; 0x03
     7b8:	82 83       	std	Z+2, r24	; 0x02
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	90 93 f4 01 	sts	0x01F4, r25	; 0x8001f4 <myMatrix+0x8b>
     7c2:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <myMatrix+0x8a>
     7c6:	08 95       	ret

000007c8 <gameLogic_task>:
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	00 d0       	rcall	.+0      	; 0x7ce <gameLogic_task+0x6>
     7ce:	00 d0       	rcall	.+0      	; 0x7d0 <gameLogic_task+0x8>
     7d0:	00 d0       	rcall	.+0      	; 0x7d2 <gameLogic_task+0xa>
     7d2:	cd b7       	in	r28, 0x3d	; 61
     7d4:	de b7       	in	r29, 0x3e	; 62
     7d6:	64 e0       	ldi	r22, 0x04	; 4
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	0e 94 21 10 	call	0x2042	; 0x2042 <vTaskSetApplicationTaskTag>
     7e2:	01 e0       	ldi	r16, 0x01	; 1
     7e4:	10 e0       	ldi	r17, 0x00	; 0
     7e6:	0f 2e       	mov	r0, r31
     7e8:	f5 e6       	ldi	r31, 0x65	; 101
     7ea:	ef 2e       	mov	r14, r31
     7ec:	f1 e0       	ldi	r31, 0x01	; 1
     7ee:	ff 2e       	mov	r15, r31
     7f0:	f0 2d       	mov	r31, r0
     7f2:	0f 2e       	mov	r0, r31
     7f4:	f1 e6       	ldi	r31, 0x61	; 97
     7f6:	cf 2e       	mov	r12, r31
     7f8:	f1 e0       	ldi	r31, 0x01	; 1
     7fa:	df 2e       	mov	r13, r31
     7fc:	f0 2d       	mov	r31, r0
     7fe:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <stop>
     802:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <stop+0x1>
     806:	89 2b       	or	r24, r25
     808:	09 f0       	breq	.+2      	; 0x80c <gameLogic_task+0x44>
     80a:	53 c0       	rjmp	.+166    	; 0x8b2 <gameLogic_task+0xea>
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	4f ef       	ldi	r20, 0xFF	; 255
     810:	5f ef       	ldi	r21, 0xFF	; 255
     812:	be 01       	movw	r22, r28
     814:	6f 5f       	subi	r22, 0xFF	; 255
     816:	7f 4f       	sbci	r23, 0xFF	; 255
     818:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <xInputQueue>
     81c:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <xInputQueue+0x1>
     820:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <xQueueGenericReceive>
     824:	88 23       	and	r24, r24
     826:	09 f4       	brne	.+2      	; 0x82a <gameLogic_task+0x62>
     828:	3f c0       	rjmp	.+126    	; 0x8a8 <gameLogic_task+0xe0>
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	4f ef       	ldi	r20, 0xFF	; 255
     82e:	5f ef       	ldi	r21, 0xFF	; 255
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <xMutex>
     838:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <xMutex+0x1>
     83c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <xQueueGenericReceive>
     840:	88 23       	and	r24, r24
     842:	91 f1       	breq	.+100    	; 0x8a8 <gameLogic_task+0xe0>
     844:	8b 81       	ldd	r24, Y+3	; 0x03
     846:	9c 81       	ldd	r25, Y+4	; 0x04
     848:	f7 01       	movw	r30, r14
     84a:	20 81       	ld	r18, Z
     84c:	31 81       	ldd	r19, Z+1	; 0x01
     84e:	82 17       	cp	r24, r18
     850:	93 07       	cpc	r25, r19
     852:	69 f4       	brne	.+26     	; 0x86e <gameLogic_task+0xa6>
     854:	4d 81       	ldd	r20, Y+5	; 0x05
     856:	5e 81       	ldd	r21, Y+6	; 0x06
     858:	22 81       	ldd	r18, Z+2	; 0x02
     85a:	33 81       	ldd	r19, Z+3	; 0x03
     85c:	42 17       	cp	r20, r18
     85e:	53 07       	cpc	r21, r19
     860:	31 f4       	brne	.+12     	; 0x86e <gameLogic_task+0xa6>
     862:	b7 01       	movw	r22, r14
     864:	89 81       	ldd	r24, Y+1	; 0x01
     866:	9a 81       	ldd	r25, Y+2	; 0x02
     868:	0e 94 33 02 	call	0x466	; 0x466 <moveCar>
     86c:	12 c0       	rjmp	.+36     	; 0x892 <gameLogic_task+0xca>
     86e:	f6 01       	movw	r30, r12
     870:	20 81       	ld	r18, Z
     872:	31 81       	ldd	r19, Z+1	; 0x01
     874:	82 17       	cp	r24, r18
     876:	93 07       	cpc	r25, r19
     878:	61 f4       	brne	.+24     	; 0x892 <gameLogic_task+0xca>
     87a:	2d 81       	ldd	r18, Y+5	; 0x05
     87c:	3e 81       	ldd	r19, Y+6	; 0x06
     87e:	82 81       	ldd	r24, Z+2	; 0x02
     880:	93 81       	ldd	r25, Z+3	; 0x03
     882:	28 17       	cp	r18, r24
     884:	39 07       	cpc	r19, r25
     886:	29 f4       	brne	.+10     	; 0x892 <gameLogic_task+0xca>
     888:	b6 01       	movw	r22, r12
     88a:	89 81       	ldd	r24, Y+1	; 0x01
     88c:	9a 81       	ldd	r25, Y+2	; 0x02
     88e:	0e 94 33 02 	call	0x466	; 0x466 <moveCar>
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	40 e0       	ldi	r20, 0x00	; 0
     896:	50 e0       	ldi	r21, 0x00	; 0
     898:	60 e0       	ldi	r22, 0x00	; 0
     89a:	70 e0       	ldi	r23, 0x00	; 0
     89c:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <xMutex>
     8a0:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <xMutex+0x1>
     8a4:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <xQueueGenericSend>
     8a8:	82 e3       	ldi	r24, 0x32	; 50
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <vTaskDelay>
     8b0:	a6 cf       	rjmp	.-180    	; 0x7fe <gameLogic_task+0x36>
     8b2:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <restart1>
     8b6:	30 91 5e 01 	lds	r19, 0x015E	; 0x80015e <restart1+0x1>
     8ba:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <restart2>
     8be:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <restart2+0x1>
     8c2:	82 0f       	add	r24, r18
     8c4:	93 1f       	adc	r25, r19
     8c6:	02 97       	sbiw	r24, 0x02	; 2
     8c8:	09 f0       	breq	.+2      	; 0x8cc <gameLogic_task+0x104>
     8ca:	99 cf       	rjmp	.-206    	; 0x7fe <gameLogic_task+0x36>
     8cc:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <stop+0x1>
     8d0:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <stop>
     8d4:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <restart1+0x1>
     8d8:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <restart1>
     8dc:	10 93 0b 01 	sts	0x010B, r17	; 0x80010b <restart2+0x1>
     8e0:	00 93 0a 01 	sts	0x010A, r16	; 0x80010a <restart2>
     8e4:	0e 94 bc 03 	call	0x778	; 0x778 <setupGame>
     8e8:	8a cf       	rjmp	.-236    	; 0x7fe <gameLogic_task+0x36>

000008ea <startup_task>:
     8ea:	61 e0       	ldi	r22, 0x01	; 1
     8ec:	70 e0       	ldi	r23, 0x00	; 0
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	0e 94 21 10 	call	0x2042	; 0x2042 <vTaskSetApplicationTaskTag>
     8f6:	0e 94 bc 03 	call	0x778	; 0x778 <setupGame>
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	0e 94 9d 0b 	call	0x173a	; 0x173a <xQueueCreateMutex>
     900:	90 93 30 03 	sts	0x0330, r25	; 0x800330 <xMutex+0x1>
     904:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <xMutex>
     908:	e1 2c       	mov	r14, r1
     90a:	f1 2c       	mov	r15, r1
     90c:	02 e0       	ldi	r16, 0x02	; 2
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	45 e5       	ldi	r20, 0x55	; 85
     914:	50 e0       	ldi	r21, 0x00	; 0
     916:	60 e1       	ldi	r22, 0x10	; 16
     918:	71 e0       	ldi	r23, 0x01	; 1
     91a:	8f ea       	ldi	r24, 0xAF	; 175
     91c:	93 e0       	ldi	r25, 0x03	; 3
     91e:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <xTaskCreate>
     922:	07 e0       	ldi	r16, 0x07	; 7
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	45 e5       	ldi	r20, 0x55	; 85
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e2       	ldi	r22, 0x20	; 32
     92e:	71 e0       	ldi	r23, 0x01	; 1
     930:	84 ee       	ldi	r24, 0xE4	; 228
     932:	93 e0       	ldi	r25, 0x03	; 3
     934:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <xTaskCreate>
     938:	06 e0       	ldi	r16, 0x06	; 6
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	45 e5       	ldi	r20, 0x55	; 85
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	6b e2       	ldi	r22, 0x2B	; 43
     944:	71 e0       	ldi	r23, 0x01	; 1
     946:	87 e6       	ldi	r24, 0x67	; 103
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <xTaskCreate>
     94e:	03 e0       	ldi	r16, 0x03	; 3
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	45 e5       	ldi	r20, 0x55	; 85
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	65 e3       	ldi	r22, 0x35	; 53
     95a:	71 e0       	ldi	r23, 0x01	; 1
     95c:	8d e7       	ldi	r24, 0x7D	; 125
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <xTaskCreate>
     964:	ff cf       	rjmp	.-2      	; 0x964 <__stack+0x65>

00000966 <prepare_shiftregister>:

// Prepare shift register setting SER = 1
void prepare_shiftregister()
{
	// Set SER to 1
	PORTD |= _BV(PORTD2);
     966:	5a 9a       	sbi	0x0b, 2	; 11
     968:	08 95       	ret

0000096a <clock_shift_register_and_prepare_for_next_col>:

// clock shift-register
void clock_shift_register_and_prepare_for_next_col()
{
	// one SCK pulse
	PORTD |= _BV(PORTD5);
     96a:	5d 9a       	sbi	0x0b, 5	; 11
	PORTD &= ~_BV(PORTD5);
     96c:	5d 98       	cbi	0x0b, 5	; 11
	
	// one RCK pulse
	PORTD |= _BV(PORTD4);
     96e:	5c 9a       	sbi	0x0b, 4	; 11
	PORTD &= ~_BV(PORTD4);
     970:	5c 98       	cbi	0x0b, 4	; 11
	
	// Set SER to 0 - for next column
	PORTD &= ~_BV(PORTD2);
     972:	5a 98       	cbi	0x0b, 2	; 11
     974:	08 95       	ret

00000976 <load_col_value>:
}

// Load column value for column to show
void load_col_value(uint16_t col_value)
{
	PORTA = ~(col_value & 0xFF);
     976:	80 95       	com	r24
     978:	82 b9       	out	0x02, r24	; 2
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
     97a:	85 b1       	in	r24, 0x05	; 5
     97c:	83 60       	ori	r24, 0x03	; 3
     97e:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~((col_value >> 8) & 0x03);
     980:	85 b1       	in	r24, 0x05	; 5
     982:	93 70       	andi	r25, 0x03	; 3
     984:	90 95       	com	r25
     986:	89 23       	and	r24, r25
     988:	85 b9       	out	0x05, r24	; 5
     98a:	08 95       	ret

0000098c <handle_display>:
}

//-----------------------------------------
void handle_display(void)
{
     98c:	cf 93       	push	r28
	static uint8_t col = 0;
	
	if (col == 0)
     98e:	c0 91 5c 01 	lds	r28, 0x015C	; 0x80015c <__data_end>
     992:	c1 11       	cpse	r28, r1
     994:	0e c0       	rjmp	.+28     	; 0x9b2 <handle_display+0x26>
	{
		prepare_shiftregister();
     996:	0e 94 b3 04 	call	0x966	; 0x966 <prepare_shiftregister>
	}
	
	load_col_value(frame_buf[col]);
     99a:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <frame_buf>
     99e:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <frame_buf+0x1>
     9a2:	0e 94 bb 04 	call	0x976	; 0x976 <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
     9a6:	0e 94 b5 04 	call	0x96a	; 0x96a <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	col++;
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
     9b0:	14 c0       	rjmp	.+40     	; 0x9da <handle_display+0x4e>
	if (col == 0)
	{
		prepare_shiftregister();
	}
	
	load_col_value(frame_buf[col]);
     9b2:	ec 2f       	mov	r30, r28
     9b4:	f0 e0       	ldi	r31, 0x00	; 0
     9b6:	ee 0f       	add	r30, r30
     9b8:	ff 1f       	adc	r31, r31
     9ba:	e3 5f       	subi	r30, 0xF3	; 243
     9bc:	fc 4f       	sbci	r31, 0xFC	; 252
     9be:	80 81       	ld	r24, Z
     9c0:	91 81       	ldd	r25, Z+1	; 0x01
     9c2:	0e 94 bb 04 	call	0x976	; 0x976 <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
     9c6:	0e 94 b5 04 	call	0x96a	; 0x96a <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	col++;
     9ca:	cf 5f       	subi	r28, 0xFF	; 255
	if (col > 13)
     9cc:	ce 30       	cpi	r28, 0x0E	; 14
     9ce:	18 f4       	brcc	.+6      	; 0x9d6 <handle_display+0x4a>
	load_col_value(frame_buf[col]);
	
	clock_shift_register_and_prepare_for_next_col();
	
	// count column up - prepare for next
	col++;
     9d0:	c0 93 5c 01 	sts	0x015C, r28	; 0x80015c <__data_end>
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <handle_display+0x4e>
	if (col > 13)
	{
		col = 0;
     9d6:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <__data_end>
	}
}
     9da:	cf 91       	pop	r28
     9dc:	08 95       	ret

000009de <vApplicationIdleHook>:

//-----------------------------------------
void vApplicationIdleHook( void )
{
     9de:	08 95       	ret

000009e0 <main>:


//----------------------------------------- MAIN ---------------------------------------------------------------
int main(void)
{
	init_board();
     9e0:	0e 94 86 05 	call	0xb0c	; 0xb0c <init_board>
	_x_com_received_chars_queue = xQueueCreate( _COM_RX_QUEUE_LENGTH, ( unsigned portBASE_TYPE ) sizeof( uint8_t ) );
     9e4:	40 e0       	ldi	r20, 0x00	; 0
     9e6:	61 e0       	ldi	r22, 0x01	; 1
     9e8:	8e e1       	ldi	r24, 0x1E	; 30
     9ea:	0e 94 cb 0a 	call	0x1596	; 0x1596 <xQueueGenericCreate>
     9ee:	90 93 32 03 	sts	0x0332, r25	; 0x800332 <_x_com_received_chars_queue+0x1>
     9f2:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <_x_com_received_chars_queue>
	//init_com(_x_com_received_chars_queue);
	//sender_timeout = xTimerCreate("Timeout", pdMS_TO_TICKS(100), pdFALSE, 1, vTimeout);

	xSendQueue = xQueueCreate(5, sizeof(unsigned char));
     9f6:	40 e0       	ldi	r20, 0x00	; 0
     9f8:	61 e0       	ldi	r22, 0x01	; 1
     9fa:	85 e0       	ldi	r24, 0x05	; 5
     9fc:	0e 94 cb 0a 	call	0x1596	; 0x1596 <xQueueGenericCreate>
     a00:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <xSendQueue+0x1>
     a04:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <xSendQueue>
	xACKQueue = xQueueCreate(5, sizeof(unsigned char));
     a08:	40 e0       	ldi	r20, 0x00	; 0
     a0a:	61 e0       	ldi	r22, 0x01	; 1
     a0c:	85 e0       	ldi	r24, 0x05	; 5
     a0e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <xQueueGenericCreate>
     a12:	90 93 2c 03 	sts	0x032C, r25	; 0x80032c <xACKQueue+0x1>
     a16:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <xACKQueue>
	xInputQueue = xQueueCreate(10, sizeof(struct input));
     a1a:	40 e0       	ldi	r20, 0x00	; 0
     a1c:	66 e0       	ldi	r22, 0x06	; 6
     a1e:	8a e0       	ldi	r24, 0x0A	; 10
     a20:	0e 94 cb 0a 	call	0x1596	; 0x1596 <xQueueGenericCreate>
     a24:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <xInputQueue+0x1>
     a28:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <xInputQueue>

	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
     a2c:	5e 98       	cbi	0x0b, 6	; 11
	
	//Create task to blink gpio
	BaseType_t t1 = xTaskCreate(startup_task, (const char *)"Startup", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
     a2e:	e1 2c       	mov	r14, r1
     a30:	f1 2c       	mov	r15, r1
     a32:	00 e0       	ldi	r16, 0x00	; 0
     a34:	20 e0       	ldi	r18, 0x00	; 0
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	45 e5       	ldi	r20, 0x55	; 85
     a3a:	50 e0       	ldi	r21, 0x00	; 0
     a3c:	66 e4       	ldi	r22, 0x46	; 70
     a3e:	71 e0       	ldi	r23, 0x01	; 1
     a40:	85 e7       	ldi	r24, 0x75	; 117
     a42:	94 e0       	ldi	r25, 0x04	; 4
     a44:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <xTaskCreate>
	

	// Start the display handler timer
	init_display_timer(handle_display);
     a48:	86 ec       	ldi	r24, 0xC6	; 198
     a4a:	94 e0       	ldi	r25, 0x04	; 4
     a4c:	0e 94 4b 05 	call	0xa96	; 0xa96 <init_display_timer>
	
	sei();
     a50:	78 94       	sei
	
	//Start the scheduler
	vTaskStartScheduler();
     a52:	0e 94 56 0e 	call	0x1cac	; 0x1cac <vTaskStartScheduler>
	
	//Should never reach here
	while (1)
	{
	}
     a56:	ff cf       	rjmp	.-2      	; 0xa56 <main+0x76>

00000a58 <_com_call_back>:
	}
}

// ----------------------------------------------------------------------------------------------------------------------
void com_send_bytes(uint8_t *bytes, uint8_t len) {
	serial_send_bytes(_com_serial_instance, bytes, len);
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	00 d0       	rcall	.+0      	; 0xa5e <_com_call_back+0x6>
     a5e:	cd b7       	in	r28, 0x3d	; 61
     a60:	de b7       	in	r29, 0x3e	; 62
     a62:	6a 83       	std	Y+2, r22	; 0x02
     a64:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <_x_rx_com_queue>
     a68:	90 91 7c 03 	lds	r25, 0x037C	; 0x80037c <_x_rx_com_queue+0x1>
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	71 f0       	breq	.+28     	; 0xa8c <_com_call_back+0x34>
     a70:	19 82       	std	Y+1, r1	; 0x01
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	ae 01       	movw	r20, r28
     a76:	4f 5f       	subi	r20, 0xFF	; 255
     a78:	5f 4f       	sbci	r21, 0xFF	; 255
     a7a:	be 01       	movw	r22, r28
     a7c:	6e 5f       	subi	r22, 0xFE	; 254
     a7e:	7f 4f       	sbci	r23, 0xFF	; 255
     a80:	0e 94 b7 0b 	call	0x176e	; 0x176e <xQueueGenericSendFromISR>
     a84:	89 81       	ldd	r24, Y+1	; 0x01
     a86:	81 11       	cpse	r24, r1
     a88:	0e 94 52 07 	call	0xea4	; 0xea4 <vPortYield>
     a8c:	0f 90       	pop	r0
     a8e:	0f 90       	pop	r0
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	08 95       	ret

00000a96 <init_display_timer>:
     a96:	90 93 7a 03 	sts	0x037A, r25	; 0x80037a <cb_ptr+0x1>
     a9a:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <cb_ptr>
     a9e:	8a e0       	ldi	r24, 0x0A	; 10
     aa0:	87 bd       	out	0x27, r24	; 39
     aa2:	84 b5       	in	r24, 0x24	; 36
     aa4:	82 60       	ori	r24, 0x02	; 2
     aa6:	84 bd       	out	0x24, r24	; 36
     aa8:	ee e6       	ldi	r30, 0x6E	; 110
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	80 81       	ld	r24, Z
     aae:	82 60       	ori	r24, 0x02	; 2
     ab0:	80 83       	st	Z, r24
     ab2:	85 b5       	in	r24, 0x25	; 37
     ab4:	85 60       	ori	r24, 0x05	; 5
     ab6:	85 bd       	out	0x25, r24	; 37
     ab8:	08 95       	ret

00000aba <__vector_16>:
     aba:	1f 92       	push	r1
     abc:	0f 92       	push	r0
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	0f 92       	push	r0
     ac2:	11 24       	eor	r1, r1
     ac4:	2f 93       	push	r18
     ac6:	3f 93       	push	r19
     ac8:	4f 93       	push	r20
     aca:	5f 93       	push	r21
     acc:	6f 93       	push	r22
     ace:	7f 93       	push	r23
     ad0:	8f 93       	push	r24
     ad2:	9f 93       	push	r25
     ad4:	af 93       	push	r26
     ad6:	bf 93       	push	r27
     ad8:	ef 93       	push	r30
     ada:	ff 93       	push	r31
     adc:	e0 91 79 03 	lds	r30, 0x0379	; 0x800379 <cb_ptr>
     ae0:	f0 91 7a 03 	lds	r31, 0x037A	; 0x80037a <cb_ptr+0x1>
     ae4:	30 97       	sbiw	r30, 0x00	; 0
     ae6:	09 f0       	breq	.+2      	; 0xaea <__vector_16+0x30>
     ae8:	09 95       	icall
     aea:	ff 91       	pop	r31
     aec:	ef 91       	pop	r30
     aee:	bf 91       	pop	r27
     af0:	af 91       	pop	r26
     af2:	9f 91       	pop	r25
     af4:	8f 91       	pop	r24
     af6:	7f 91       	pop	r23
     af8:	6f 91       	pop	r22
     afa:	5f 91       	pop	r21
     afc:	4f 91       	pop	r20
     afe:	3f 91       	pop	r19
     b00:	2f 91       	pop	r18
     b02:	0f 90       	pop	r0
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	0f 90       	pop	r0
     b08:	1f 90       	pop	r1
     b0a:	18 95       	reti

00000b0c <init_board>:
}

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
     b0c:	8f 92       	push	r8
     b0e:	9f 92       	push	r9
     b10:	af 92       	push	r10
     b12:	bf 92       	push	r11
     b14:	cf 92       	push	r12
     b16:	df 92       	push	r13
     b18:	ef 92       	push	r14
     b1a:	0f 93       	push	r16
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
     b1c:	86 e5       	ldi	r24, 0x56	; 86
     b1e:	93 e0       	ldi	r25, 0x03	; 3
     b20:	0e 94 df 05 	call	0xbbe	; 0xbbe <buffer_init>
	buffer_init(&_com_tx_buffer);
     b24:	83 e3       	ldi	r24, 0x33	; 51
     b26:	93 e0       	ldi	r25, 0x03	; 3
     b28:	0e 94 df 05 	call	0xbbe	; 0xbbe <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
     b2c:	0f 2e       	mov	r0, r31
     b2e:	fc e2       	ldi	r31, 0x2C	; 44
     b30:	8f 2e       	mov	r8, r31
     b32:	f5 e0       	ldi	r31, 0x05	; 5
     b34:	9f 2e       	mov	r9, r31
     b36:	f0 2d       	mov	r31, r0
     b38:	0f 2e       	mov	r0, r31
     b3a:	f3 e3       	ldi	r31, 0x33	; 51
     b3c:	af 2e       	mov	r10, r31
     b3e:	f3 e0       	ldi	r31, 0x03	; 3
     b40:	bf 2e       	mov	r11, r31
     b42:	f0 2d       	mov	r31, r0
     b44:	0f 2e       	mov	r0, r31
     b46:	f6 e5       	ldi	r31, 0x56	; 86
     b48:	cf 2e       	mov	r12, r31
     b4a:	f3 e0       	ldi	r31, 0x03	; 3
     b4c:	df 2e       	mov	r13, r31
     b4e:	f0 2d       	mov	r31, r0
     b50:	e1 2c       	mov	r14, r1
     b52:	00 e0       	ldi	r16, 0x00	; 0
     b54:	23 e0       	ldi	r18, 0x03	; 3
     b56:	40 e0       	ldi	r20, 0x00	; 0
     b58:	52 ec       	ldi	r21, 0xC2	; 194
     b5a:	61 e0       	ldi	r22, 0x01	; 1
     b5c:	70 e0       	ldi	r23, 0x00	; 0
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 40 08 	call	0x1080	; 0x1080 <serial_new_instance>
     b64:	90 93 7e 03 	sts	0x037E, r25	; 0x80037e <_com_serial_instance+0x1>
     b68:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <_com_serial_instance>
	
	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
     b6c:	88 b1       	in	r24, 0x08	; 8
     b6e:	83 6c       	ori	r24, 0xC3	; 195
     b70:	88 b9       	out	0x08, r24	; 8
	PORTD |= _BV(PORTD3);
     b72:	5b 9a       	sbi	0x0b, 3	; 11
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
     b74:	8a b1       	in	r24, 0x0a	; 10
     b76:	84 67       	ori	r24, 0x74	; 116
     b78:	8a b9       	out	0x0a, r24	; 10
	// G (enable output) high
	PORTD |= _BV(PORTD6);
     b7a:	5e 9a       	sbi	0x0b, 6	; 11
	
	// Column pins to output
	DDRA |= 0xFF;
     b7c:	81 b1       	in	r24, 0x01	; 1
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	81 b9       	out	0x01, r24	; 1
	DDRB |= _BV(DDB0) | _BV(DDB1);
     b82:	84 b1       	in	r24, 0x04	; 4
     b84:	83 60       	ori	r24, 0x03	; 3
     b86:	84 b9       	out	0x04, r24	; 4
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
     b88:	84 b1       	in	r24, 0x04	; 4
     b8a:	8c 63       	ori	r24, 0x3C	; 60
     b8c:	84 b9       	out	0x04, r24	; 4
}
     b8e:	0f 91       	pop	r16
     b90:	ef 90       	pop	r14
     b92:	df 90       	pop	r13
     b94:	cf 90       	pop	r12
     b96:	bf 90       	pop	r11
     b98:	af 90       	pop	r10
     b9a:	9f 90       	pop	r9
     b9c:	8f 90       	pop	r8
     b9e:	08 95       	ret

00000ba0 <switch_in>:
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
		PORTB &= 0b11000011;
     ba0:	95 b1       	in	r25, 0x05	; 5
     ba2:	93 7c       	andi	r25, 0xC3	; 195
     ba4:	95 b9       	out	0x05, r25	; 5
		PORTB |= task_no << 2;
     ba6:	25 b1       	in	r18, 0x05	; 5
     ba8:	34 e0       	ldi	r19, 0x04	; 4
     baa:	83 9f       	mul	r24, r19
     bac:	c0 01       	movw	r24, r0
     bae:	11 24       	eor	r1, r1
     bb0:	82 2b       	or	r24, r18
     bb2:	85 b9       	out	0x05, r24	; 5
     bb4:	08 95       	ret

00000bb6 <switch_out>:
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
		PORTB &= 0b11000011;
     bb6:	85 b1       	in	r24, 0x05	; 5
     bb8:	83 7c       	andi	r24, 0xC3	; 195
     bba:	85 b9       	out	0x05, r24	; 5
     bbc:	08 95       	ret

00000bbe <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
     bbe:	fc 01       	movw	r30, r24
	buffer->in_i = 0;
     bc0:	10 a2       	std	Z+32, r1	; 0x20
	buffer->out_i = 0;
     bc2:	11 a2       	std	Z+33, r1	; 0x21
	buffer->no_in_buffer = 0;
     bc4:	12 a2       	std	Z+34, r1	; 0x22
     bc6:	08 95       	ret

00000bc8 <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
     bc8:	fc 01       	movw	r30, r24
	if (buffer->no_in_buffer > 0) {
     bca:	82 a1       	ldd	r24, Z+34	; 0x22
     bcc:	88 23       	and	r24, r24
     bce:	d9 f0       	breq	.+54     	; 0xc06 <buffer_get_item+0x3e>
		*item = buffer->storage[buffer->out_i];
     bd0:	81 a1       	ldd	r24, Z+33	; 0x21
     bd2:	df 01       	movw	r26, r30
     bd4:	a8 0f       	add	r26, r24
     bd6:	b1 1d       	adc	r27, r1
     bd8:	8c 91       	ld	r24, X
     bda:	db 01       	movw	r26, r22
     bdc:	8c 93       	st	X, r24
		buffer->out_i = INCREMENT(buffer->out_i);
     bde:	21 a1       	ldd	r18, Z+33	; 0x21
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	2f 5f       	subi	r18, 0xFF	; 255
     be4:	3f 4f       	sbci	r19, 0xFF	; 255
     be6:	2f 71       	andi	r18, 0x1F	; 31
     be8:	30 78       	andi	r19, 0x80	; 128
     bea:	33 23       	and	r19, r19
     bec:	34 f4       	brge	.+12     	; 0xbfa <buffer_get_item+0x32>
     bee:	21 50       	subi	r18, 0x01	; 1
     bf0:	31 09       	sbc	r19, r1
     bf2:	20 6e       	ori	r18, 0xE0	; 224
     bf4:	3f 6f       	ori	r19, 0xFF	; 255
     bf6:	2f 5f       	subi	r18, 0xFF	; 255
     bf8:	3f 4f       	sbci	r19, 0xFF	; 255
     bfa:	21 a3       	std	Z+33, r18	; 0x21
		buffer->no_in_buffer--;
     bfc:	82 a1       	ldd	r24, Z+34	; 0x22
     bfe:	81 50       	subi	r24, 0x01	; 1
     c00:	82 a3       	std	Z+34, r24	; 0x22
		return BUFFER_OK;
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	08 95       	ret
	}
	return BUFFER_EMPTY;
     c06:	81 e0       	ldi	r24, 0x01	; 1
}
     c08:	08 95       	ret

00000c0a <buffer_put_item>:
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
	if (buffer->no_in_buffer<BUFFER_SIZE) {
     c0a:	fc 01       	movw	r30, r24
     c0c:	42 a1       	ldd	r20, Z+34	; 0x22
     c0e:	40 32       	cpi	r20, 0x20	; 32
     c10:	b8 f4       	brcc	.+46     	; 0xc40 <buffer_put_item+0x36>
		buffer->storage[buffer->in_i] = item;
     c12:	20 a1       	ldd	r18, Z+32	; 0x20
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	e2 0f       	add	r30, r18
     c18:	f3 1f       	adc	r31, r19
     c1a:	60 83       	st	Z, r22
		buffer->in_i = INCREMENT(buffer->in_i);
     c1c:	2f 5f       	subi	r18, 0xFF	; 255
     c1e:	3f 4f       	sbci	r19, 0xFF	; 255
     c20:	2f 71       	andi	r18, 0x1F	; 31
     c22:	30 78       	andi	r19, 0x80	; 128
     c24:	33 23       	and	r19, r19
     c26:	34 f4       	brge	.+12     	; 0xc34 <buffer_put_item+0x2a>
     c28:	21 50       	subi	r18, 0x01	; 1
     c2a:	31 09       	sbc	r19, r1
     c2c:	20 6e       	ori	r18, 0xE0	; 224
     c2e:	3f 6f       	ori	r19, 0xFF	; 255
     c30:	2f 5f       	subi	r18, 0xFF	; 255
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	fc 01       	movw	r30, r24
     c36:	20 a3       	std	Z+32, r18	; 0x20
		buffer->no_in_buffer++;
     c38:	4f 5f       	subi	r20, 0xFF	; 255
     c3a:	42 a3       	std	Z+34, r20	; 0x22
		return BUFFER_OK;
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	08 95       	ret
	}
	return BUFFER_FULL;
     c40:	82 e0       	ldi	r24, 0x02	; 2
}
     c42:	08 95       	ret

00000c44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     c44:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c46:	03 96       	adiw	r24, 0x03	; 3
     c48:	92 83       	std	Z+2, r25	; 0x02
     c4a:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     c4c:	2f ef       	ldi	r18, 0xFF	; 255
     c4e:	3f ef       	ldi	r19, 0xFF	; 255
     c50:	34 83       	std	Z+4, r19	; 0x04
     c52:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c54:	96 83       	std	Z+6, r25	; 0x06
     c56:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c58:	90 87       	std	Z+8, r25	; 0x08
     c5a:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     c5c:	10 82       	st	Z, r1
     c5e:	08 95       	ret

00000c60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     c60:	fc 01       	movw	r30, r24
     c62:	11 86       	std	Z+9, r1	; 0x09
     c64:	10 86       	std	Z+8, r1	; 0x08
     c66:	08 95       	ret

00000c68 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	9c 01       	movw	r18, r24
     c6e:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     c70:	dc 01       	movw	r26, r24
     c72:	11 96       	adiw	r26, 0x01	; 1
     c74:	cd 91       	ld	r28, X+
     c76:	dc 91       	ld	r29, X
     c78:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     c7a:	d3 83       	std	Z+3, r29	; 0x03
     c7c:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     c7e:	8c 81       	ldd	r24, Y+4	; 0x04
     c80:	9d 81       	ldd	r25, Y+5	; 0x05
     c82:	95 83       	std	Z+5, r25	; 0x05
     c84:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     c86:	8c 81       	ldd	r24, Y+4	; 0x04
     c88:	9d 81       	ldd	r25, Y+5	; 0x05
     c8a:	dc 01       	movw	r26, r24
     c8c:	13 96       	adiw	r26, 0x03	; 3
     c8e:	7c 93       	st	X, r23
     c90:	6e 93       	st	-X, r22
     c92:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     c94:	7d 83       	std	Y+5, r23	; 0x05
     c96:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     c98:	31 87       	std	Z+9, r19	; 0x09
     c9a:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     c9c:	f9 01       	movw	r30, r18
     c9e:	80 81       	ld	r24, Z
     ca0:	8f 5f       	subi	r24, 0xFF	; 255
     ca2:	80 83       	st	Z, r24
}
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	08 95       	ret

00000caa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     cb0:	48 81       	ld	r20, Y
     cb2:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     cb4:	4f 3f       	cpi	r20, 0xFF	; 255
     cb6:	2f ef       	ldi	r18, 0xFF	; 255
     cb8:	52 07       	cpc	r21, r18
     cba:	21 f4       	brne	.+8      	; 0xcc4 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     cbc:	fc 01       	movw	r30, r24
     cbe:	a7 81       	ldd	r26, Z+7	; 0x07
     cc0:	b0 85       	ldd	r27, Z+8	; 0x08
     cc2:	0d c0       	rjmp	.+26     	; 0xcde <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     cc4:	dc 01       	movw	r26, r24
     cc6:	13 96       	adiw	r26, 0x03	; 3
     cc8:	01 c0       	rjmp	.+2      	; 0xccc <vListInsert+0x22>
     cca:	df 01       	movw	r26, r30
     ccc:	12 96       	adiw	r26, 0x02	; 2
     cce:	ed 91       	ld	r30, X+
     cd0:	fc 91       	ld	r31, X
     cd2:	13 97       	sbiw	r26, 0x03	; 3
     cd4:	20 81       	ld	r18, Z
     cd6:	31 81       	ldd	r19, Z+1	; 0x01
     cd8:	42 17       	cp	r20, r18
     cda:	53 07       	cpc	r21, r19
     cdc:	b0 f7       	brcc	.-20     	; 0xcca <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     cde:	12 96       	adiw	r26, 0x02	; 2
     ce0:	ed 91       	ld	r30, X+
     ce2:	fc 91       	ld	r31, X
     ce4:	13 97       	sbiw	r26, 0x03	; 3
     ce6:	fb 83       	std	Y+3, r31	; 0x03
     ce8:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     cea:	d5 83       	std	Z+5, r29	; 0x05
     cec:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     cee:	bd 83       	std	Y+5, r27	; 0x05
     cf0:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     cf2:	13 96       	adiw	r26, 0x03	; 3
     cf4:	dc 93       	st	X, r29
     cf6:	ce 93       	st	-X, r28
     cf8:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     cfa:	99 87       	std	Y+9, r25	; 0x09
     cfc:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     cfe:	fc 01       	movw	r30, r24
     d00:	20 81       	ld	r18, Z
     d02:	2f 5f       	subi	r18, 0xFF	; 255
     d04:	20 83       	st	Z, r18
}
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	08 95       	ret

00000d0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     d12:	a0 85       	ldd	r26, Z+8	; 0x08
     d14:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     d16:	c2 81       	ldd	r28, Z+2	; 0x02
     d18:	d3 81       	ldd	r29, Z+3	; 0x03
     d1a:	84 81       	ldd	r24, Z+4	; 0x04
     d1c:	95 81       	ldd	r25, Z+5	; 0x05
     d1e:	9d 83       	std	Y+5, r25	; 0x05
     d20:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     d22:	c4 81       	ldd	r28, Z+4	; 0x04
     d24:	d5 81       	ldd	r29, Z+5	; 0x05
     d26:	82 81       	ldd	r24, Z+2	; 0x02
     d28:	93 81       	ldd	r25, Z+3	; 0x03
     d2a:	9b 83       	std	Y+3, r25	; 0x03
     d2c:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     d2e:	11 96       	adiw	r26, 0x01	; 1
     d30:	cd 91       	ld	r28, X+
     d32:	dc 91       	ld	r29, X
     d34:	12 97       	sbiw	r26, 0x02	; 2
     d36:	ce 17       	cp	r28, r30
     d38:	df 07       	cpc	r29, r31
     d3a:	31 f4       	brne	.+12     	; 0xd48 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     d3c:	8c 81       	ldd	r24, Y+4	; 0x04
     d3e:	9d 81       	ldd	r25, Y+5	; 0x05
     d40:	12 96       	adiw	r26, 0x02	; 2
     d42:	9c 93       	st	X, r25
     d44:	8e 93       	st	-X, r24
     d46:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     d48:	11 86       	std	Z+9, r1	; 0x09
     d4a:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     d4c:	8c 91       	ld	r24, X
     d4e:	81 50       	subi	r24, 0x01	; 1
     d50:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     d52:	df 91       	pop	r29
     d54:	cf 91       	pop	r28
     d56:	08 95       	ret

00000d58 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     d58:	31 e1       	ldi	r19, 0x11	; 17
     d5a:	fc 01       	movw	r30, r24
     d5c:	30 83       	st	Z, r19
     d5e:	31 97       	sbiw	r30, 0x01	; 1
     d60:	22 e2       	ldi	r18, 0x22	; 34
     d62:	20 83       	st	Z, r18
     d64:	31 97       	sbiw	r30, 0x01	; 1
     d66:	a3 e3       	ldi	r26, 0x33	; 51
     d68:	a0 83       	st	Z, r26
     d6a:	31 97       	sbiw	r30, 0x01	; 1
     d6c:	60 83       	st	Z, r22
     d6e:	31 97       	sbiw	r30, 0x01	; 1
     d70:	70 83       	st	Z, r23
     d72:	31 97       	sbiw	r30, 0x01	; 1
     d74:	10 82       	st	Z, r1
     d76:	31 97       	sbiw	r30, 0x01	; 1
     d78:	60 e8       	ldi	r22, 0x80	; 128
     d7a:	60 83       	st	Z, r22
     d7c:	31 97       	sbiw	r30, 0x01	; 1
     d7e:	10 82       	st	Z, r1
     d80:	31 97       	sbiw	r30, 0x01	; 1
     d82:	62 e0       	ldi	r22, 0x02	; 2
     d84:	60 83       	st	Z, r22
     d86:	31 97       	sbiw	r30, 0x01	; 1
     d88:	63 e0       	ldi	r22, 0x03	; 3
     d8a:	60 83       	st	Z, r22
     d8c:	31 97       	sbiw	r30, 0x01	; 1
     d8e:	64 e0       	ldi	r22, 0x04	; 4
     d90:	60 83       	st	Z, r22
     d92:	31 97       	sbiw	r30, 0x01	; 1
     d94:	65 e0       	ldi	r22, 0x05	; 5
     d96:	60 83       	st	Z, r22
     d98:	31 97       	sbiw	r30, 0x01	; 1
     d9a:	66 e0       	ldi	r22, 0x06	; 6
     d9c:	60 83       	st	Z, r22
     d9e:	31 97       	sbiw	r30, 0x01	; 1
     da0:	67 e0       	ldi	r22, 0x07	; 7
     da2:	60 83       	st	Z, r22
     da4:	31 97       	sbiw	r30, 0x01	; 1
     da6:	68 e0       	ldi	r22, 0x08	; 8
     da8:	60 83       	st	Z, r22
     daa:	31 97       	sbiw	r30, 0x01	; 1
     dac:	69 e0       	ldi	r22, 0x09	; 9
     dae:	60 83       	st	Z, r22
     db0:	31 97       	sbiw	r30, 0x01	; 1
     db2:	60 e1       	ldi	r22, 0x10	; 16
     db4:	60 83       	st	Z, r22
     db6:	31 97       	sbiw	r30, 0x01	; 1
     db8:	30 83       	st	Z, r19
     dba:	31 97       	sbiw	r30, 0x01	; 1
     dbc:	32 e1       	ldi	r19, 0x12	; 18
     dbe:	30 83       	st	Z, r19
     dc0:	31 97       	sbiw	r30, 0x01	; 1
     dc2:	33 e1       	ldi	r19, 0x13	; 19
     dc4:	30 83       	st	Z, r19
     dc6:	31 97       	sbiw	r30, 0x01	; 1
     dc8:	34 e1       	ldi	r19, 0x14	; 20
     dca:	30 83       	st	Z, r19
     dcc:	31 97       	sbiw	r30, 0x01	; 1
     dce:	35 e1       	ldi	r19, 0x15	; 21
     dd0:	30 83       	st	Z, r19
     dd2:	31 97       	sbiw	r30, 0x01	; 1
     dd4:	36 e1       	ldi	r19, 0x16	; 22
     dd6:	30 83       	st	Z, r19
     dd8:	31 97       	sbiw	r30, 0x01	; 1
     dda:	37 e1       	ldi	r19, 0x17	; 23
     ddc:	30 83       	st	Z, r19
     dde:	31 97       	sbiw	r30, 0x01	; 1
     de0:	38 e1       	ldi	r19, 0x18	; 24
     de2:	30 83       	st	Z, r19
     de4:	31 97       	sbiw	r30, 0x01	; 1
     de6:	39 e1       	ldi	r19, 0x19	; 25
     de8:	30 83       	st	Z, r19
     dea:	31 97       	sbiw	r30, 0x01	; 1
     dec:	30 e2       	ldi	r19, 0x20	; 32
     dee:	30 83       	st	Z, r19
     df0:	31 97       	sbiw	r30, 0x01	; 1
     df2:	31 e2       	ldi	r19, 0x21	; 33
     df4:	30 83       	st	Z, r19
     df6:	31 97       	sbiw	r30, 0x01	; 1
     df8:	20 83       	st	Z, r18
     dfa:	31 97       	sbiw	r30, 0x01	; 1
     dfc:	23 e2       	ldi	r18, 0x23	; 35
     dfe:	20 83       	st	Z, r18
     e00:	31 97       	sbiw	r30, 0x01	; 1
     e02:	40 83       	st	Z, r20
     e04:	31 97       	sbiw	r30, 0x01	; 1
     e06:	50 83       	st	Z, r21
     e08:	31 97       	sbiw	r30, 0x01	; 1
     e0a:	26 e2       	ldi	r18, 0x26	; 38
     e0c:	20 83       	st	Z, r18
     e0e:	31 97       	sbiw	r30, 0x01	; 1
     e10:	27 e2       	ldi	r18, 0x27	; 39
     e12:	20 83       	st	Z, r18
     e14:	31 97       	sbiw	r30, 0x01	; 1
     e16:	28 e2       	ldi	r18, 0x28	; 40
     e18:	20 83       	st	Z, r18
     e1a:	31 97       	sbiw	r30, 0x01	; 1
     e1c:	29 e2       	ldi	r18, 0x29	; 41
     e1e:	20 83       	st	Z, r18
     e20:	31 97       	sbiw	r30, 0x01	; 1
     e22:	20 e3       	ldi	r18, 0x30	; 48
     e24:	20 83       	st	Z, r18
     e26:	31 97       	sbiw	r30, 0x01	; 1
     e28:	21 e3       	ldi	r18, 0x31	; 49
     e2a:	20 83       	st	Z, r18
     e2c:	86 97       	sbiw	r24, 0x26	; 38
     e2e:	08 95       	ret

00000e30 <xPortStartScheduler>:
     e30:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     e34:	85 ee       	ldi	r24, 0xE5	; 229
     e36:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     e3a:	8b e0       	ldi	r24, 0x0B	; 11
     e3c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     e40:	ef e6       	ldi	r30, 0x6F	; 111
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	82 60       	ori	r24, 0x02	; 2
     e48:	80 83       	st	Z, r24
     e4a:	a0 91 b6 08 	lds	r26, 0x08B6	; 0x8008b6 <pxCurrentTCB>
     e4e:	b0 91 b7 08 	lds	r27, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
     e52:	cd 91       	ld	r28, X+
     e54:	cd bf       	out	0x3d, r28	; 61
     e56:	dd 91       	ld	r29, X+
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	ff 91       	pop	r31
     e5c:	ef 91       	pop	r30
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	bf 91       	pop	r27
     e64:	af 91       	pop	r26
     e66:	9f 91       	pop	r25
     e68:	8f 91       	pop	r24
     e6a:	7f 91       	pop	r23
     e6c:	6f 91       	pop	r22
     e6e:	5f 91       	pop	r21
     e70:	4f 91       	pop	r20
     e72:	3f 91       	pop	r19
     e74:	2f 91       	pop	r18
     e76:	1f 91       	pop	r17
     e78:	0f 91       	pop	r16
     e7a:	ff 90       	pop	r15
     e7c:	ef 90       	pop	r14
     e7e:	df 90       	pop	r13
     e80:	cf 90       	pop	r12
     e82:	bf 90       	pop	r11
     e84:	af 90       	pop	r10
     e86:	9f 90       	pop	r9
     e88:	8f 90       	pop	r8
     e8a:	7f 90       	pop	r7
     e8c:	6f 90       	pop	r6
     e8e:	5f 90       	pop	r5
     e90:	4f 90       	pop	r4
     e92:	3f 90       	pop	r3
     e94:	2f 90       	pop	r2
     e96:	1f 90       	pop	r1
     e98:	0f 90       	pop	r0
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	0f 90       	pop	r0
     e9e:	08 95       	ret
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	08 95       	ret

00000ea4 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     ea4:	0f 92       	push	r0
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	0f 92       	push	r0
     eac:	1f 92       	push	r1
     eae:	11 24       	eor	r1, r1
     eb0:	2f 92       	push	r2
     eb2:	3f 92       	push	r3
     eb4:	4f 92       	push	r4
     eb6:	5f 92       	push	r5
     eb8:	6f 92       	push	r6
     eba:	7f 92       	push	r7
     ebc:	8f 92       	push	r8
     ebe:	9f 92       	push	r9
     ec0:	af 92       	push	r10
     ec2:	bf 92       	push	r11
     ec4:	cf 92       	push	r12
     ec6:	df 92       	push	r13
     ec8:	ef 92       	push	r14
     eca:	ff 92       	push	r15
     ecc:	0f 93       	push	r16
     ece:	1f 93       	push	r17
     ed0:	2f 93       	push	r18
     ed2:	3f 93       	push	r19
     ed4:	4f 93       	push	r20
     ed6:	5f 93       	push	r21
     ed8:	6f 93       	push	r22
     eda:	7f 93       	push	r23
     edc:	8f 93       	push	r24
     ede:	9f 93       	push	r25
     ee0:	af 93       	push	r26
     ee2:	bf 93       	push	r27
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	ef 93       	push	r30
     eea:	ff 93       	push	r31
     eec:	a0 91 b6 08 	lds	r26, 0x08B6	; 0x8008b6 <pxCurrentTCB>
     ef0:	b0 91 b7 08 	lds	r27, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
     ef4:	0d b6       	in	r0, 0x3d	; 61
     ef6:	0d 92       	st	X+, r0
     ef8:	0e b6       	in	r0, 0x3e	; 62
     efa:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     efc:	0e 94 30 10 	call	0x2060	; 0x2060 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     f00:	a0 91 b6 08 	lds	r26, 0x08B6	; 0x8008b6 <pxCurrentTCB>
     f04:	b0 91 b7 08 	lds	r27, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
     f08:	cd 91       	ld	r28, X+
     f0a:	cd bf       	out	0x3d, r28	; 61
     f0c:	dd 91       	ld	r29, X+
     f0e:	de bf       	out	0x3e, r29	; 62
     f10:	ff 91       	pop	r31
     f12:	ef 91       	pop	r30
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	bf 91       	pop	r27
     f1a:	af 91       	pop	r26
     f1c:	9f 91       	pop	r25
     f1e:	8f 91       	pop	r24
     f20:	7f 91       	pop	r23
     f22:	6f 91       	pop	r22
     f24:	5f 91       	pop	r21
     f26:	4f 91       	pop	r20
     f28:	3f 91       	pop	r19
     f2a:	2f 91       	pop	r18
     f2c:	1f 91       	pop	r17
     f2e:	0f 91       	pop	r16
     f30:	ff 90       	pop	r15
     f32:	ef 90       	pop	r14
     f34:	df 90       	pop	r13
     f36:	cf 90       	pop	r12
     f38:	bf 90       	pop	r11
     f3a:	af 90       	pop	r10
     f3c:	9f 90       	pop	r9
     f3e:	8f 90       	pop	r8
     f40:	7f 90       	pop	r7
     f42:	6f 90       	pop	r6
     f44:	5f 90       	pop	r5
     f46:	4f 90       	pop	r4
     f48:	3f 90       	pop	r3
     f4a:	2f 90       	pop	r2
     f4c:	1f 90       	pop	r1
     f4e:	0f 90       	pop	r0
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	0f 90       	pop	r0

	asm volatile ( "ret" );
     f54:	08 95       	ret

00000f56 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     f56:	0f 92       	push	r0
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	f8 94       	cli
     f5c:	0f 92       	push	r0
     f5e:	1f 92       	push	r1
     f60:	11 24       	eor	r1, r1
     f62:	2f 92       	push	r2
     f64:	3f 92       	push	r3
     f66:	4f 92       	push	r4
     f68:	5f 92       	push	r5
     f6a:	6f 92       	push	r6
     f6c:	7f 92       	push	r7
     f6e:	8f 92       	push	r8
     f70:	9f 92       	push	r9
     f72:	af 92       	push	r10
     f74:	bf 92       	push	r11
     f76:	cf 92       	push	r12
     f78:	df 92       	push	r13
     f7a:	ef 92       	push	r14
     f7c:	ff 92       	push	r15
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	2f 93       	push	r18
     f84:	3f 93       	push	r19
     f86:	4f 93       	push	r20
     f88:	5f 93       	push	r21
     f8a:	6f 93       	push	r22
     f8c:	7f 93       	push	r23
     f8e:	8f 93       	push	r24
     f90:	9f 93       	push	r25
     f92:	af 93       	push	r26
     f94:	bf 93       	push	r27
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	ef 93       	push	r30
     f9c:	ff 93       	push	r31
     f9e:	a0 91 b6 08 	lds	r26, 0x08B6	; 0x8008b6 <pxCurrentTCB>
     fa2:	b0 91 b7 08 	lds	r27, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
     fa6:	0d b6       	in	r0, 0x3d	; 61
     fa8:	0d 92       	st	X+, r0
     faa:	0e b6       	in	r0, 0x3e	; 62
     fac:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     fae:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <xTaskIncrementTick>
     fb2:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     fb4:	0e 94 30 10 	call	0x2060	; 0x2060 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     fb8:	a0 91 b6 08 	lds	r26, 0x08B6	; 0x8008b6 <pxCurrentTCB>
     fbc:	b0 91 b7 08 	lds	r27, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
     fc0:	cd 91       	ld	r28, X+
     fc2:	cd bf       	out	0x3d, r28	; 61
     fc4:	dd 91       	ld	r29, X+
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	ff 91       	pop	r31
     fca:	ef 91       	pop	r30
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	bf 91       	pop	r27
     fd2:	af 91       	pop	r26
     fd4:	9f 91       	pop	r25
     fd6:	8f 91       	pop	r24
     fd8:	7f 91       	pop	r23
     fda:	6f 91       	pop	r22
     fdc:	5f 91       	pop	r21
     fde:	4f 91       	pop	r20
     fe0:	3f 91       	pop	r19
     fe2:	2f 91       	pop	r18
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	ff 90       	pop	r15
     fea:	ef 90       	pop	r14
     fec:	df 90       	pop	r13
     fee:	cf 90       	pop	r12
     ff0:	bf 90       	pop	r11
     ff2:	af 90       	pop	r10
     ff4:	9f 90       	pop	r9
     ff6:	8f 90       	pop	r8
     ff8:	7f 90       	pop	r7
     ffa:	6f 90       	pop	r6
     ffc:	5f 90       	pop	r5
     ffe:	4f 90       	pop	r4
    1000:	3f 90       	pop	r3
    1002:	2f 90       	pop	r2
    1004:	1f 90       	pop	r1
    1006:	0f 90       	pop	r0
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	0f 90       	pop	r0

	asm volatile ( "ret" );
    100c:	08 95       	ret

0000100e <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
    100e:	0e 94 ab 07 	call	0xf56	; 0xf56 <vPortYieldFromTick>
		asm volatile ( "reti" );
    1012:	18 95       	reti

00001014 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    101a:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    101e:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <pucAlignedHeap.1965>
    1022:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <pucAlignedHeap.1965+0x1>
    1026:	89 2b       	or	r24, r25
    1028:	31 f4       	brne	.+12     	; 0x1036 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    102a:	84 e8       	ldi	r24, 0x84	; 132
    102c:	93 e0       	ldi	r25, 0x03	; 3
    102e:	90 93 80 03 	sts	0x0380, r25	; 0x800380 <pucAlignedHeap.1965+0x1>
    1032:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <pucAlignedHeap.1965>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1036:	20 91 81 03 	lds	r18, 0x0381	; 0x800381 <xNextFreeByte>
    103a:	30 91 82 03 	lds	r19, 0x0382	; 0x800382 <xNextFreeByte+0x1>
    103e:	ce 01       	movw	r24, r28
    1040:	82 0f       	add	r24, r18
    1042:	93 1f       	adc	r25, r19
    1044:	8f 3a       	cpi	r24, 0xAF	; 175
    1046:	44 e0       	ldi	r20, 0x04	; 4
    1048:	94 07       	cpc	r25, r20
    104a:	70 f4       	brcc	.+28     	; 0x1068 <pvPortMalloc+0x54>
    104c:	28 17       	cp	r18, r24
    104e:	39 07       	cpc	r19, r25
    1050:	70 f4       	brcc	.+28     	; 0x106e <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1052:	c0 91 7f 03 	lds	r28, 0x037F	; 0x80037f <pucAlignedHeap.1965>
    1056:	d0 91 80 03 	lds	r29, 0x0380	; 0x800380 <pucAlignedHeap.1965+0x1>
    105a:	c2 0f       	add	r28, r18
    105c:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
    105e:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <xNextFreeByte+0x1>
    1062:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <xNextFreeByte>
    1066:	05 c0       	rjmp	.+10     	; 0x1072 <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    1068:	c0 e0       	ldi	r28, 0x00	; 0
    106a:	d0 e0       	ldi	r29, 0x00	; 0
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <pvPortMalloc+0x5e>
    106e:	c0 e0       	ldi	r28, 0x00	; 0
    1070:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1072:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    1076:	ce 01       	movw	r24, r28
    1078:	df 91       	pop	r29
    107a:	cf 91       	pop	r28
    107c:	08 95       	ret

0000107e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    107e:	08 95       	ret

00001080 <serial_new_instance>:
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
}
    1080:	4f 92       	push	r4
    1082:	5f 92       	push	r5
    1084:	6f 92       	push	r6
    1086:	7f 92       	push	r7
    1088:	8f 92       	push	r8
    108a:	9f 92       	push	r9
    108c:	af 92       	push	r10
    108e:	bf 92       	push	r11
    1090:	cf 92       	push	r12
    1092:	df 92       	push	r13
    1094:	ff 92       	push	r15
    1096:	0f 93       	push	r16
    1098:	1f 93       	push	r17
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	f8 2e       	mov	r15, r24
    10a4:	2a 01       	movw	r4, r20
    10a6:	3b 01       	movw	r6, r22
    10a8:	88 e0       	ldi	r24, 0x08	; 8
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	0e 94 68 14 	call	0x28d0	; 0x28d0 <malloc>
    10b0:	8c 01       	movw	r16, r24
    10b2:	8f 2d       	mov	r24, r15
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	fc 01       	movw	r30, r24
    10bc:	ed 5c       	subi	r30, 0xCD	; 205
    10be:	f7 4f       	sbci	r31, 0xF7	; 247
    10c0:	11 83       	std	Z+1, r17	; 0x01
    10c2:	00 83       	st	Z, r16
    10c4:	fc 01       	movw	r30, r24
    10c6:	e4 5f       	subi	r30, 0xF4	; 244
    10c8:	fe 4f       	sbci	r31, 0xFE	; 254
    10ca:	80 81       	ld	r24, Z
    10cc:	91 81       	ldd	r25, Z+1	; 0x01
    10ce:	d8 01       	movw	r26, r16
    10d0:	11 96       	adiw	r26, 0x01	; 1
    10d2:	9c 93       	st	X, r25
    10d4:	8e 93       	st	-X, r24
    10d6:	13 96       	adiw	r26, 0x03	; 3
    10d8:	bc 92       	st	X, r11
    10da:	ae 92       	st	-X, r10
    10dc:	12 97       	sbiw	r26, 0x02	; 2
    10de:	15 96       	adiw	r26, 0x05	; 5
    10e0:	dc 92       	st	X, r13
    10e2:	ce 92       	st	-X, r12
    10e4:	14 97       	sbiw	r26, 0x04	; 4
    10e6:	17 96       	adiw	r26, 0x07	; 7
    10e8:	9c 92       	st	X, r9
    10ea:	8e 92       	st	-X, r8
    10ec:	16 97       	sbiw	r26, 0x06	; 6
    10ee:	ff b6       	in	r15, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	ed 91       	ld	r30, X+
    10f4:	fc 91       	ld	r31, X
    10f6:	11 97       	sbiw	r26, 0x01	; 1
    10f8:	36 97       	sbiw	r30, 0x06	; 6
    10fa:	80 81       	ld	r24, Z
    10fc:	82 60       	ori	r24, 0x02	; 2
    10fe:	80 83       	st	Z, r24
    1100:	cd 90       	ld	r12, X+
    1102:	dc 90       	ld	r13, X
    1104:	d3 01       	movw	r26, r6
    1106:	c2 01       	movw	r24, r4
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	aa 1f       	adc	r26, r26
    110e:	bb 1f       	adc	r27, r27
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	aa 1f       	adc	r26, r26
    1116:	bb 1f       	adc	r27, r27
    1118:	9c 01       	movw	r18, r24
    111a:	ad 01       	movw	r20, r26
    111c:	22 0f       	add	r18, r18
    111e:	33 1f       	adc	r19, r19
    1120:	44 1f       	adc	r20, r20
    1122:	55 1f       	adc	r21, r21
    1124:	60 e0       	ldi	r22, 0x00	; 0
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	81 ee       	ldi	r24, 0xE1	; 225
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 94 40 14 	call	0x2880	; 0x2880 <__udivmodsi4>
    1130:	21 50       	subi	r18, 0x01	; 1
    1132:	f6 01       	movw	r30, r12
    1134:	32 97       	sbiw	r30, 0x02	; 2
    1136:	20 83       	st	Z, r18
    1138:	d8 01       	movw	r26, r16
    113a:	ed 91       	ld	r30, X+
    113c:	fc 91       	ld	r31, X
    113e:	11 97       	sbiw	r26, 0x01	; 1
    1140:	35 97       	sbiw	r30, 0x05	; 5
    1142:	88 e9       	ldi	r24, 0x98	; 152
    1144:	80 83       	st	Z, r24
    1146:	ed 91       	ld	r30, X+
    1148:	fc 91       	ld	r31, X
    114a:	34 97       	sbiw	r30, 0x04	; 4
    114c:	86 e0       	ldi	r24, 0x06	; 6
    114e:	80 83       	st	Z, r24
    1150:	ff be       	out	0x3f, r15	; 63
    1152:	c8 01       	movw	r24, r16
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	1f 91       	pop	r17
    115a:	0f 91       	pop	r16
    115c:	ff 90       	pop	r15
    115e:	df 90       	pop	r13
    1160:	cf 90       	pop	r12
    1162:	bf 90       	pop	r11
    1164:	af 90       	pop	r10
    1166:	9f 90       	pop	r9
    1168:	8f 90       	pop	r8
    116a:	7f 90       	pop	r7
    116c:	6f 90       	pop	r6
    116e:	5f 90       	pop	r5
    1170:	4f 90       	pop	r4
    1172:	08 95       	ret

00001174 <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    1174:	1f 92       	push	r1
    1176:	0f 92       	push	r0
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	0f 92       	push	r0
    117c:	11 24       	eor	r1, r1
    117e:	2f 93       	push	r18
    1180:	3f 93       	push	r19
    1182:	4f 93       	push	r20
    1184:	5f 93       	push	r21
    1186:	6f 93       	push	r22
    1188:	7f 93       	push	r23
    118a:	8f 93       	push	r24
    118c:	9f 93       	push	r25
    118e:	af 93       	push	r26
    1190:	bf 93       	push	r27
    1192:	cf 93       	push	r28
    1194:	ef 93       	push	r30
    1196:	ff 93       	push	r31
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    1198:	e0 91 33 08 	lds	r30, 0x0833	; 0x800833 <_ser_handle>
    119c:	f0 91 34 08 	lds	r31, 0x0834	; 0x800834 <_ser_handle+0x1>
    11a0:	30 97       	sbiw	r30, 0x00	; 0
    11a2:	a1 f0       	breq	.+40     	; 0x11cc <__vector_20+0x58>
		item = UDR0;
    11a4:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    11a8:	6c 2f       	mov	r22, r28
    11aa:	84 81       	ldd	r24, Z+4	; 0x04
    11ac:	95 81       	ldd	r25, Z+5	; 0x05
    11ae:	0e 94 05 06 	call	0xc0a	; 0xc0a <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    11b2:	80 91 33 08 	lds	r24, 0x0833	; 0x800833 <_ser_handle>
    11b6:	90 91 34 08 	lds	r25, 0x0834	; 0x800834 <_ser_handle+0x1>
    11ba:	dc 01       	movw	r26, r24
    11bc:	16 96       	adiw	r26, 0x06	; 6
    11be:	ed 91       	ld	r30, X+
    11c0:	fc 91       	ld	r31, X
    11c2:	17 97       	sbiw	r26, 0x07	; 7
    11c4:	30 97       	sbiw	r30, 0x00	; 0
    11c6:	11 f0       	breq	.+4      	; 0x11cc <__vector_20+0x58>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    11c8:	6c 2f       	mov	r22, r28
    11ca:	09 95       	icall
		}
	}
}
    11cc:	ff 91       	pop	r31
    11ce:	ef 91       	pop	r30
    11d0:	cf 91       	pop	r28
    11d2:	bf 91       	pop	r27
    11d4:	af 91       	pop	r26
    11d6:	9f 91       	pop	r25
    11d8:	8f 91       	pop	r24
    11da:	7f 91       	pop	r23
    11dc:	6f 91       	pop	r22
    11de:	5f 91       	pop	r21
    11e0:	4f 91       	pop	r20
    11e2:	3f 91       	pop	r19
    11e4:	2f 91       	pop	r18
    11e6:	0f 90       	pop	r0
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	0f 90       	pop	r0
    11ec:	1f 90       	pop	r1
    11ee:	18 95       	reti

000011f0 <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    11f0:	1f 92       	push	r1
    11f2:	0f 92       	push	r0
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	0f 92       	push	r0
    11f8:	11 24       	eor	r1, r1
    11fa:	2f 93       	push	r18
    11fc:	3f 93       	push	r19
    11fe:	4f 93       	push	r20
    1200:	5f 93       	push	r21
    1202:	6f 93       	push	r22
    1204:	7f 93       	push	r23
    1206:	8f 93       	push	r24
    1208:	9f 93       	push	r25
    120a:	af 93       	push	r26
    120c:	bf 93       	push	r27
    120e:	ef 93       	push	r30
    1210:	ff 93       	push	r31
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
    1216:	1f 92       	push	r1
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    121c:	e0 91 33 08 	lds	r30, 0x0833	; 0x800833 <_ser_handle>
    1220:	f0 91 34 08 	lds	r31, 0x0834	; 0x800834 <_ser_handle+0x1>
    1224:	30 97       	sbiw	r30, 0x00	; 0
    1226:	99 f0       	breq	.+38     	; 0x124e <__vector_21+0x5e>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    1228:	be 01       	movw	r22, r28
    122a:	6f 5f       	subi	r22, 0xFF	; 255
    122c:	7f 4f       	sbci	r23, 0xFF	; 255
    122e:	82 81       	ldd	r24, Z+2	; 0x02
    1230:	93 81       	ldd	r25, Z+3	; 0x03
    1232:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <buffer_get_item>
    1236:	81 11       	cpse	r24, r1
    1238:	04 c0       	rjmp	.+8      	; 0x1242 <__vector_21+0x52>
			UDR0 = item;
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1240:	0b c0       	rjmp	.+22     	; 0x1258 <__vector_21+0x68>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    1242:	e1 ec       	ldi	r30, 0xC1	; 193
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	8f 7d       	andi	r24, 0xDF	; 223
    124a:	80 83       	st	Z, r24
    124c:	05 c0       	rjmp	.+10     	; 0x1258 <__vector_21+0x68>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    124e:	e1 ec       	ldi	r30, 0xC1	; 193
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	8f 7d       	andi	r24, 0xDF	; 223
    1256:	80 83       	st	Z, r24
	}
}
    1258:	0f 90       	pop	r0
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	ff 91       	pop	r31
    1260:	ef 91       	pop	r30
    1262:	bf 91       	pop	r27
    1264:	af 91       	pop	r26
    1266:	9f 91       	pop	r25
    1268:	8f 91       	pop	r24
    126a:	7f 91       	pop	r23
    126c:	6f 91       	pop	r22
    126e:	5f 91       	pop	r21
    1270:	4f 91       	pop	r20
    1272:	3f 91       	pop	r19
    1274:	2f 91       	pop	r18
    1276:	0f 90       	pop	r0
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	0f 90       	pop	r0
    127c:	1f 90       	pop	r1
    127e:	18 95       	reti

00001280 <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    1280:	1f 92       	push	r1
    1282:	0f 92       	push	r0
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	0f 92       	push	r0
    1288:	11 24       	eor	r1, r1
    128a:	2f 93       	push	r18
    128c:	3f 93       	push	r19
    128e:	4f 93       	push	r20
    1290:	5f 93       	push	r21
    1292:	6f 93       	push	r22
    1294:	7f 93       	push	r23
    1296:	8f 93       	push	r24
    1298:	9f 93       	push	r25
    129a:	af 93       	push	r26
    129c:	bf 93       	push	r27
    129e:	cf 93       	push	r28
    12a0:	ef 93       	push	r30
    12a2:	ff 93       	push	r31
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    12a4:	e0 91 35 08 	lds	r30, 0x0835	; 0x800835 <_ser_handle+0x2>
    12a8:	f0 91 36 08 	lds	r31, 0x0836	; 0x800836 <_ser_handle+0x3>
    12ac:	30 97       	sbiw	r30, 0x00	; 0
    12ae:	a1 f0       	breq	.+40     	; 0x12d8 <__vector_28+0x58>
		item = UDR1;
    12b0:	c0 91 ce 00 	lds	r28, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    12b4:	6c 2f       	mov	r22, r28
    12b6:	84 81       	ldd	r24, Z+4	; 0x04
    12b8:	95 81       	ldd	r25, Z+5	; 0x05
    12ba:	0e 94 05 06 	call	0xc0a	; 0xc0a <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    12be:	80 91 35 08 	lds	r24, 0x0835	; 0x800835 <_ser_handle+0x2>
    12c2:	90 91 36 08 	lds	r25, 0x0836	; 0x800836 <_ser_handle+0x3>
    12c6:	dc 01       	movw	r26, r24
    12c8:	16 96       	adiw	r26, 0x06	; 6
    12ca:	ed 91       	ld	r30, X+
    12cc:	fc 91       	ld	r31, X
    12ce:	17 97       	sbiw	r26, 0x07	; 7
    12d0:	30 97       	sbiw	r30, 0x00	; 0
    12d2:	11 f0       	breq	.+4      	; 0x12d8 <__vector_28+0x58>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    12d4:	6c 2f       	mov	r22, r28
    12d6:	09 95       	icall
		}
	}
}
    12d8:	ff 91       	pop	r31
    12da:	ef 91       	pop	r30
    12dc:	cf 91       	pop	r28
    12de:	bf 91       	pop	r27
    12e0:	af 91       	pop	r26
    12e2:	9f 91       	pop	r25
    12e4:	8f 91       	pop	r24
    12e6:	7f 91       	pop	r23
    12e8:	6f 91       	pop	r22
    12ea:	5f 91       	pop	r21
    12ec:	4f 91       	pop	r20
    12ee:	3f 91       	pop	r19
    12f0:	2f 91       	pop	r18
    12f2:	0f 90       	pop	r0
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	0f 90       	pop	r0
    12f8:	1f 90       	pop	r1
    12fa:	18 95       	reti

000012fc <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    12fc:	1f 92       	push	r1
    12fe:	0f 92       	push	r0
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	0f 92       	push	r0
    1304:	11 24       	eor	r1, r1
    1306:	2f 93       	push	r18
    1308:	3f 93       	push	r19
    130a:	4f 93       	push	r20
    130c:	5f 93       	push	r21
    130e:	6f 93       	push	r22
    1310:	7f 93       	push	r23
    1312:	8f 93       	push	r24
    1314:	9f 93       	push	r25
    1316:	af 93       	push	r26
    1318:	bf 93       	push	r27
    131a:	ef 93       	push	r30
    131c:	ff 93       	push	r31
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	1f 92       	push	r1
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    1328:	e0 91 35 08 	lds	r30, 0x0835	; 0x800835 <_ser_handle+0x2>
    132c:	f0 91 36 08 	lds	r31, 0x0836	; 0x800836 <_ser_handle+0x3>
    1330:	30 97       	sbiw	r30, 0x00	; 0
    1332:	99 f0       	breq	.+38     	; 0x135a <__vector_29+0x5e>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    1334:	be 01       	movw	r22, r28
    1336:	6f 5f       	subi	r22, 0xFF	; 255
    1338:	7f 4f       	sbci	r23, 0xFF	; 255
    133a:	82 81       	ldd	r24, Z+2	; 0x02
    133c:	93 81       	ldd	r25, Z+3	; 0x03
    133e:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <buffer_get_item>
    1342:	81 11       	cpse	r24, r1
    1344:	04 c0       	rjmp	.+8      	; 0x134e <__vector_29+0x52>
			UDR1 = item;
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    134c:	0b c0       	rjmp	.+22     	; 0x1364 <__vector_29+0x68>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    134e:	e9 ec       	ldi	r30, 0xC9	; 201
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	8f 7d       	andi	r24, 0xDF	; 223
    1356:	80 83       	st	Z, r24
    1358:	05 c0       	rjmp	.+10     	; 0x1364 <__vector_29+0x68>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    135a:	e9 ec       	ldi	r30, 0xC9	; 201
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	8f 7d       	andi	r24, 0xDF	; 223
    1362:	80 83       	st	Z, r24
	}
}
    1364:	0f 90       	pop	r0
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	ff 91       	pop	r31
    136c:	ef 91       	pop	r30
    136e:	bf 91       	pop	r27
    1370:	af 91       	pop	r26
    1372:	9f 91       	pop	r25
    1374:	8f 91       	pop	r24
    1376:	7f 91       	pop	r23
    1378:	6f 91       	pop	r22
    137a:	5f 91       	pop	r21
    137c:	4f 91       	pop	r20
    137e:	3f 91       	pop	r19
    1380:	2f 91       	pop	r18
    1382:	0f 90       	pop	r0
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	0f 90       	pop	r0
    1388:	1f 90       	pop	r1
    138a:	18 95       	reti

0000138c <prvCopyDataToQueue>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    138c:	0f 93       	push	r16
    138e:	1f 93       	push	r17
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	ec 01       	movw	r28, r24
    1396:	04 2f       	mov	r16, r20
    1398:	1a 8d       	ldd	r17, Y+26	; 0x1a
    139a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    139c:	81 11       	cpse	r24, r1
    139e:	0c c0       	rjmp	.+24     	; 0x13b8 <prvCopyDataToQueue+0x2c>
    13a0:	88 81       	ld	r24, Y
    13a2:	99 81       	ldd	r25, Y+1	; 0x01
    13a4:	89 2b       	or	r24, r25
    13a6:	09 f0       	breq	.+2      	; 0x13aa <prvCopyDataToQueue+0x1e>
    13a8:	44 c0       	rjmp	.+136    	; 0x1432 <prvCopyDataToQueue+0xa6>
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	9b 81       	ldd	r25, Y+3	; 0x03
    13ae:	0e 94 ca 11 	call	0x2394	; 0x2394 <xTaskPriorityDisinherit>
    13b2:	1b 82       	std	Y+3, r1	; 0x03
    13b4:	1a 82       	std	Y+2, r1	; 0x02
    13b6:	44 c0       	rjmp	.+136    	; 0x1440 <prvCopyDataToQueue+0xb4>
    13b8:	41 11       	cpse	r20, r1
    13ba:	18 c0       	rjmp	.+48     	; 0x13ec <prvCopyDataToQueue+0x60>
    13bc:	48 2f       	mov	r20, r24
    13be:	50 e0       	ldi	r21, 0x00	; 0
    13c0:	8c 81       	ldd	r24, Y+4	; 0x04
    13c2:	9d 81       	ldd	r25, Y+5	; 0x05
    13c4:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <memcpy>
    13c8:	2c 8d       	ldd	r18, Y+28	; 0x1c
    13ca:	8c 81       	ldd	r24, Y+4	; 0x04
    13cc:	9d 81       	ldd	r25, Y+5	; 0x05
    13ce:	82 0f       	add	r24, r18
    13d0:	91 1d       	adc	r25, r1
    13d2:	9d 83       	std	Y+5, r25	; 0x05
    13d4:	8c 83       	std	Y+4, r24	; 0x04
    13d6:	2a 81       	ldd	r18, Y+2	; 0x02
    13d8:	3b 81       	ldd	r19, Y+3	; 0x03
    13da:	82 17       	cp	r24, r18
    13dc:	93 07       	cpc	r25, r19
    13de:	58 f1       	brcs	.+86     	; 0x1436 <prvCopyDataToQueue+0xaa>
    13e0:	88 81       	ld	r24, Y
    13e2:	99 81       	ldd	r25, Y+1	; 0x01
    13e4:	9d 83       	std	Y+5, r25	; 0x05
    13e6:	8c 83       	std	Y+4, r24	; 0x04
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	2a c0       	rjmp	.+84     	; 0x1440 <prvCopyDataToQueue+0xb4>
    13ec:	48 2f       	mov	r20, r24
    13ee:	50 e0       	ldi	r21, 0x00	; 0
    13f0:	8e 81       	ldd	r24, Y+6	; 0x06
    13f2:	9f 81       	ldd	r25, Y+7	; 0x07
    13f4:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <memcpy>
    13f8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	91 95       	neg	r25
    13fe:	81 95       	neg	r24
    1400:	91 09       	sbc	r25, r1
    1402:	2e 81       	ldd	r18, Y+6	; 0x06
    1404:	3f 81       	ldd	r19, Y+7	; 0x07
    1406:	28 0f       	add	r18, r24
    1408:	39 1f       	adc	r19, r25
    140a:	3f 83       	std	Y+7, r19	; 0x07
    140c:	2e 83       	std	Y+6, r18	; 0x06
    140e:	48 81       	ld	r20, Y
    1410:	59 81       	ldd	r21, Y+1	; 0x01
    1412:	24 17       	cp	r18, r20
    1414:	35 07       	cpc	r19, r21
    1416:	30 f4       	brcc	.+12     	; 0x1424 <prvCopyDataToQueue+0x98>
    1418:	2a 81       	ldd	r18, Y+2	; 0x02
    141a:	3b 81       	ldd	r19, Y+3	; 0x03
    141c:	82 0f       	add	r24, r18
    141e:	93 1f       	adc	r25, r19
    1420:	9f 83       	std	Y+7, r25	; 0x07
    1422:	8e 83       	std	Y+6, r24	; 0x06
    1424:	02 30       	cpi	r16, 0x02	; 2
    1426:	49 f4       	brne	.+18     	; 0x143a <prvCopyDataToQueue+0xae>
    1428:	11 23       	and	r17, r17
    142a:	49 f0       	breq	.+18     	; 0x143e <prvCopyDataToQueue+0xb2>
    142c:	11 50       	subi	r17, 0x01	; 1
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	07 c0       	rjmp	.+14     	; 0x1440 <prvCopyDataToQueue+0xb4>
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	05 c0       	rjmp	.+10     	; 0x1440 <prvCopyDataToQueue+0xb4>
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	03 c0       	rjmp	.+6      	; 0x1440 <prvCopyDataToQueue+0xb4>
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	01 c0       	rjmp	.+2      	; 0x1440 <prvCopyDataToQueue+0xb4>
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	1f 5f       	subi	r17, 0xFF	; 255
    1442:	1a 8f       	std	Y+26, r17	; 0x1a
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	0f 91       	pop	r16
    144c:	08 95       	ret

0000144e <prvCopyDataFromQueue>:
    144e:	fc 01       	movw	r30, r24
    1450:	44 8d       	ldd	r20, Z+28	; 0x1c
    1452:	44 23       	and	r20, r20
    1454:	a9 f0       	breq	.+42     	; 0x1480 <prvCopyDataFromQueue+0x32>
    1456:	50 e0       	ldi	r21, 0x00	; 0
    1458:	26 81       	ldd	r18, Z+6	; 0x06
    145a:	37 81       	ldd	r19, Z+7	; 0x07
    145c:	24 0f       	add	r18, r20
    145e:	35 1f       	adc	r19, r21
    1460:	37 83       	std	Z+7, r19	; 0x07
    1462:	26 83       	std	Z+6, r18	; 0x06
    1464:	82 81       	ldd	r24, Z+2	; 0x02
    1466:	93 81       	ldd	r25, Z+3	; 0x03
    1468:	28 17       	cp	r18, r24
    146a:	39 07       	cpc	r19, r25
    146c:	20 f0       	brcs	.+8      	; 0x1476 <prvCopyDataFromQueue+0x28>
    146e:	80 81       	ld	r24, Z
    1470:	91 81       	ldd	r25, Z+1	; 0x01
    1472:	97 83       	std	Z+7, r25	; 0x07
    1474:	86 83       	std	Z+6, r24	; 0x06
    1476:	cb 01       	movw	r24, r22
    1478:	66 81       	ldd	r22, Z+6	; 0x06
    147a:	77 81       	ldd	r23, Z+7	; 0x07
    147c:	0e 94 f1 15 	call	0x2be2	; 0x2be2 <memcpy>
    1480:	08 95       	ret

00001482 <prvUnlockQueue>:
    1482:	ef 92       	push	r14
    1484:	ff 92       	push	r15
    1486:	0f 93       	push	r16
    1488:	1f 93       	push	r17
    148a:	cf 93       	push	r28
    148c:	8c 01       	movw	r16, r24
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	0f 92       	push	r0
    1494:	fc 01       	movw	r30, r24
    1496:	c6 8d       	ldd	r28, Z+30	; 0x1e
    1498:	1c 16       	cp	r1, r28
    149a:	ac f4       	brge	.+42     	; 0x14c6 <prvUnlockQueue+0x44>
    149c:	81 89       	ldd	r24, Z+17	; 0x11
    149e:	81 11       	cpse	r24, r1
    14a0:	06 c0       	rjmp	.+12     	; 0x14ae <prvUnlockQueue+0x2c>
    14a2:	11 c0       	rjmp	.+34     	; 0x14c6 <prvUnlockQueue+0x44>
    14a4:	f8 01       	movw	r30, r16
    14a6:	91 89       	ldd	r25, Z+17	; 0x11
    14a8:	91 11       	cpse	r25, r1
    14aa:	05 c0       	rjmp	.+10     	; 0x14b6 <prvUnlockQueue+0x34>
    14ac:	0c c0       	rjmp	.+24     	; 0x14c6 <prvUnlockQueue+0x44>
    14ae:	78 01       	movw	r14, r16
    14b0:	f1 e1       	ldi	r31, 0x11	; 17
    14b2:	ef 0e       	add	r14, r31
    14b4:	f1 1c       	adc	r15, r1
    14b6:	c7 01       	movw	r24, r14
    14b8:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <xTaskRemoveFromEventList>
    14bc:	81 11       	cpse	r24, r1
    14be:	0e 94 56 11 	call	0x22ac	; 0x22ac <vTaskMissedYield>
    14c2:	c1 50       	subi	r28, 0x01	; 1
    14c4:	79 f7       	brne	.-34     	; 0x14a4 <prvUnlockQueue+0x22>
    14c6:	8f ef       	ldi	r24, 0xFF	; 255
    14c8:	f8 01       	movw	r30, r16
    14ca:	86 8f       	std	Z+30, r24	; 0x1e
    14cc:	0f 90       	pop	r0
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	f8 94       	cli
    14d4:	0f 92       	push	r0
    14d6:	c5 8d       	ldd	r28, Z+29	; 0x1d
    14d8:	1c 16       	cp	r1, r28
    14da:	ac f4       	brge	.+42     	; 0x1506 <prvUnlockQueue+0x84>
    14dc:	80 85       	ldd	r24, Z+8	; 0x08
    14de:	81 11       	cpse	r24, r1
    14e0:	06 c0       	rjmp	.+12     	; 0x14ee <prvUnlockQueue+0x6c>
    14e2:	11 c0       	rjmp	.+34     	; 0x1506 <prvUnlockQueue+0x84>
    14e4:	f8 01       	movw	r30, r16
    14e6:	90 85       	ldd	r25, Z+8	; 0x08
    14e8:	91 11       	cpse	r25, r1
    14ea:	05 c0       	rjmp	.+10     	; 0x14f6 <prvUnlockQueue+0x74>
    14ec:	0c c0       	rjmp	.+24     	; 0x1506 <prvUnlockQueue+0x84>
    14ee:	78 01       	movw	r14, r16
    14f0:	f8 e0       	ldi	r31, 0x08	; 8
    14f2:	ef 0e       	add	r14, r31
    14f4:	f1 1c       	adc	r15, r1
    14f6:	c7 01       	movw	r24, r14
    14f8:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <xTaskRemoveFromEventList>
    14fc:	81 11       	cpse	r24, r1
    14fe:	0e 94 56 11 	call	0x22ac	; 0x22ac <vTaskMissedYield>
    1502:	c1 50       	subi	r28, 0x01	; 1
    1504:	79 f7       	brne	.-34     	; 0x14e4 <prvUnlockQueue+0x62>
    1506:	8f ef       	ldi	r24, 0xFF	; 255
    1508:	f8 01       	movw	r30, r16
    150a:	85 8f       	std	Z+29, r24	; 0x1d
    150c:	0f 90       	pop	r0
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cf 91       	pop	r28
    1512:	1f 91       	pop	r17
    1514:	0f 91       	pop	r16
    1516:	ff 90       	pop	r15
    1518:	ef 90       	pop	r14
    151a:	08 95       	ret

0000151c <xQueueGenericReset>:
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	ec 01       	movw	r28, r24
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	0f 92       	push	r0
    1528:	48 81       	ld	r20, Y
    152a:	59 81       	ldd	r21, Y+1	; 0x01
    152c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1532:	72 9f       	mul	r23, r18
    1534:	c0 01       	movw	r24, r0
    1536:	73 9f       	mul	r23, r19
    1538:	90 0d       	add	r25, r0
    153a:	11 24       	eor	r1, r1
    153c:	fa 01       	movw	r30, r20
    153e:	e8 0f       	add	r30, r24
    1540:	f9 1f       	adc	r31, r25
    1542:	fb 83       	std	Y+3, r31	; 0x03
    1544:	ea 83       	std	Y+2, r30	; 0x02
    1546:	1a 8e       	std	Y+26, r1	; 0x1a
    1548:	5d 83       	std	Y+5, r21	; 0x05
    154a:	4c 83       	std	Y+4, r20	; 0x04
    154c:	82 1b       	sub	r24, r18
    154e:	93 0b       	sbc	r25, r19
    1550:	84 0f       	add	r24, r20
    1552:	95 1f       	adc	r25, r21
    1554:	9f 83       	std	Y+7, r25	; 0x07
    1556:	8e 83       	std	Y+6, r24	; 0x06
    1558:	8f ef       	ldi	r24, 0xFF	; 255
    155a:	8d 8f       	std	Y+29, r24	; 0x1d
    155c:	8e 8f       	std	Y+30, r24	; 0x1e
    155e:	61 11       	cpse	r22, r1
    1560:	0c c0       	rjmp	.+24     	; 0x157a <xQueueGenericReset+0x5e>
    1562:	88 85       	ldd	r24, Y+8	; 0x08
    1564:	88 23       	and	r24, r24
    1566:	89 f0       	breq	.+34     	; 0x158a <xQueueGenericReset+0x6e>
    1568:	ce 01       	movw	r24, r28
    156a:	08 96       	adiw	r24, 0x08	; 8
    156c:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <xTaskRemoveFromEventList>
    1570:	88 23       	and	r24, r24
    1572:	59 f0       	breq	.+22     	; 0x158a <xQueueGenericReset+0x6e>
    1574:	0e 94 52 07 	call	0xea4	; 0xea4 <vPortYield>
    1578:	08 c0       	rjmp	.+16     	; 0x158a <xQueueGenericReset+0x6e>
    157a:	ce 01       	movw	r24, r28
    157c:	08 96       	adiw	r24, 0x08	; 8
    157e:	0e 94 22 06 	call	0xc44	; 0xc44 <vListInitialise>
    1582:	ce 01       	movw	r24, r28
    1584:	41 96       	adiw	r24, 0x11	; 17
    1586:	0e 94 22 06 	call	0xc44	; 0xc44 <vListInitialise>
    158a:	0f 90       	pop	r0
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	df 91       	pop	r29
    1592:	cf 91       	pop	r28
    1594:	08 95       	ret

00001596 <xQueueGenericCreate>:
    1596:	ff 92       	push	r15
    1598:	0f 93       	push	r16
    159a:	1f 93       	push	r17
    159c:	cf 93       	push	r28
    159e:	df 93       	push	r29
    15a0:	08 2f       	mov	r16, r24
    15a2:	16 2f       	mov	r17, r22
    15a4:	f4 2e       	mov	r15, r20
    15a6:	66 23       	and	r22, r22
    15a8:	c9 f0       	breq	.+50     	; 0x15dc <xQueueGenericCreate+0x46>
    15aa:	86 9f       	mul	r24, r22
    15ac:	c0 01       	movw	r24, r0
    15ae:	11 24       	eor	r1, r1
    15b0:	81 96       	adiw	r24, 0x21	; 33
    15b2:	0e 94 0a 08 	call	0x1014	; 0x1014 <pvPortMalloc>
    15b6:	ec 01       	movw	r28, r24
    15b8:	00 97       	sbiw	r24, 0x00	; 0
    15ba:	49 f4       	brne	.+18     	; 0x15ce <xQueueGenericCreate+0x38>
    15bc:	16 c0       	rjmp	.+44     	; 0x15ea <xQueueGenericCreate+0x54>
    15be:	0b 8f       	std	Y+27, r16	; 0x1b
    15c0:	1c 8f       	std	Y+28, r17	; 0x1c
    15c2:	61 e0       	ldi	r22, 0x01	; 1
    15c4:	ce 01       	movw	r24, r28
    15c6:	0e 94 8e 0a 	call	0x151c	; 0x151c <xQueueGenericReset>
    15ca:	f8 a2       	std	Y+32, r15	; 0x20
    15cc:	0e c0       	rjmp	.+28     	; 0x15ea <xQueueGenericCreate+0x54>
    15ce:	81 96       	adiw	r24, 0x21	; 33
    15d0:	99 83       	std	Y+1, r25	; 0x01
    15d2:	88 83       	st	Y, r24
    15d4:	f4 cf       	rjmp	.-24     	; 0x15be <xQueueGenericCreate+0x28>
    15d6:	d9 83       	std	Y+1, r29	; 0x01
    15d8:	c8 83       	st	Y, r28
    15da:	f1 cf       	rjmp	.-30     	; 0x15be <xQueueGenericCreate+0x28>
    15dc:	81 e2       	ldi	r24, 0x21	; 33
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	0e 94 0a 08 	call	0x1014	; 0x1014 <pvPortMalloc>
    15e4:	ec 01       	movw	r28, r24
    15e6:	89 2b       	or	r24, r25
    15e8:	b1 f7       	brne	.-20     	; 0x15d6 <xQueueGenericCreate+0x40>
    15ea:	ce 01       	movw	r24, r28
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	1f 91       	pop	r17
    15f2:	0f 91       	pop	r16
    15f4:	ff 90       	pop	r15
    15f6:	08 95       	ret

000015f8 <xQueueGenericSend>:
    15f8:	9f 92       	push	r9
    15fa:	af 92       	push	r10
    15fc:	bf 92       	push	r11
    15fe:	cf 92       	push	r12
    1600:	df 92       	push	r13
    1602:	ef 92       	push	r14
    1604:	ff 92       	push	r15
    1606:	0f 93       	push	r16
    1608:	1f 93       	push	r17
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	00 d0       	rcall	.+0      	; 0x1610 <xQueueGenericSend+0x18>
    1610:	00 d0       	rcall	.+0      	; 0x1612 <xQueueGenericSend+0x1a>
    1612:	1f 92       	push	r1
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	8c 01       	movw	r16, r24
    161a:	6b 01       	movw	r12, r22
    161c:	5d 83       	std	Y+5, r21	; 0x05
    161e:	4c 83       	std	Y+4, r20	; 0x04
    1620:	a2 2e       	mov	r10, r18
    1622:	b1 2c       	mov	r11, r1
    1624:	99 24       	eor	r9, r9
    1626:	93 94       	inc	r9
    1628:	7c 01       	movw	r14, r24
    162a:	88 e0       	ldi	r24, 0x08	; 8
    162c:	e8 0e       	add	r14, r24
    162e:	f1 1c       	adc	r15, r1
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	0f 92       	push	r0
    1636:	f8 01       	movw	r30, r16
    1638:	32 8d       	ldd	r19, Z+26	; 0x1a
    163a:	93 8d       	ldd	r25, Z+27	; 0x1b
    163c:	39 17       	cp	r19, r25
    163e:	18 f0       	brcs	.+6      	; 0x1646 <xQueueGenericSend+0x4e>
    1640:	f2 e0       	ldi	r31, 0x02	; 2
    1642:	af 12       	cpse	r10, r31
    1644:	19 c0       	rjmp	.+50     	; 0x1678 <xQueueGenericSend+0x80>
    1646:	4a 2d       	mov	r20, r10
    1648:	b6 01       	movw	r22, r12
    164a:	c8 01       	movw	r24, r16
    164c:	0e 94 c6 09 	call	0x138c	; 0x138c <prvCopyDataToQueue>
    1650:	f8 01       	movw	r30, r16
    1652:	91 89       	ldd	r25, Z+17	; 0x11
    1654:	99 23       	and	r25, r25
    1656:	49 f0       	breq	.+18     	; 0x166a <xQueueGenericSend+0x72>
    1658:	c8 01       	movw	r24, r16
    165a:	41 96       	adiw	r24, 0x11	; 17
    165c:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <xTaskRemoveFromEventList>
    1660:	88 23       	and	r24, r24
    1662:	31 f0       	breq	.+12     	; 0x1670 <xQueueGenericSend+0x78>
    1664:	0e 94 52 07 	call	0xea4	; 0xea4 <vPortYield>
    1668:	03 c0       	rjmp	.+6      	; 0x1670 <xQueueGenericSend+0x78>
    166a:	81 11       	cpse	r24, r1
    166c:	0e 94 52 07 	call	0xea4	; 0xea4 <vPortYield>
    1670:	0f 90       	pop	r0
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	50 c0       	rjmp	.+160    	; 0x1718 <xQueueGenericSend+0x120>
    1678:	ec 81       	ldd	r30, Y+4	; 0x04
    167a:	fd 81       	ldd	r31, Y+5	; 0x05
    167c:	ef 2b       	or	r30, r31
    167e:	21 f4       	brne	.+8      	; 0x1688 <xQueueGenericSend+0x90>
    1680:	0f 90       	pop	r0
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	48 c0       	rjmp	.+144    	; 0x1718 <xQueueGenericSend+0x120>
    1688:	b1 10       	cpse	r11, r1
    168a:	05 c0       	rjmp	.+10     	; 0x1696 <xQueueGenericSend+0x9e>
    168c:	ce 01       	movw	r24, r28
    168e:	01 96       	adiw	r24, 0x01	; 1
    1690:	0e 94 19 11 	call	0x2232	; 0x2232 <vTaskSetTimeOutState>
    1694:	b9 2c       	mov	r11, r9
    1696:	0f 90       	pop	r0
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <vTaskSuspendAll>
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	0f 92       	push	r0
    16a4:	f8 01       	movw	r30, r16
    16a6:	85 8d       	ldd	r24, Z+29	; 0x1d
    16a8:	8f 3f       	cpi	r24, 0xFF	; 255
    16aa:	09 f4       	brne	.+2      	; 0x16ae <xQueueGenericSend+0xb6>
    16ac:	15 8e       	std	Z+29, r1	; 0x1d
    16ae:	f8 01       	movw	r30, r16
    16b0:	86 8d       	ldd	r24, Z+30	; 0x1e
    16b2:	8f 3f       	cpi	r24, 0xFF	; 255
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <xQueueGenericSend+0xc0>
    16b6:	16 8e       	std	Z+30, r1	; 0x1e
    16b8:	0f 90       	pop	r0
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	be 01       	movw	r22, r28
    16be:	6c 5f       	subi	r22, 0xFC	; 252
    16c0:	7f 4f       	sbci	r23, 0xFF	; 255
    16c2:	ce 01       	movw	r24, r28
    16c4:	01 96       	adiw	r24, 0x01	; 1
    16c6:	0e 94 24 11 	call	0x2248	; 0x2248 <xTaskCheckForTimeOut>
    16ca:	81 11       	cpse	r24, r1
    16cc:	1f c0       	rjmp	.+62     	; 0x170c <xQueueGenericSend+0x114>
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	0f 92       	push	r0
    16d4:	f8 01       	movw	r30, r16
    16d6:	92 8d       	ldd	r25, Z+26	; 0x1a
    16d8:	0f 90       	pop	r0
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	83 8d       	ldd	r24, Z+27	; 0x1b
    16de:	98 13       	cpse	r25, r24
    16e0:	0f c0       	rjmp	.+30     	; 0x1700 <xQueueGenericSend+0x108>
    16e2:	6c 81       	ldd	r22, Y+4	; 0x04
    16e4:	7d 81       	ldd	r23, Y+5	; 0x05
    16e6:	c7 01       	movw	r24, r14
    16e8:	0e 94 a4 10 	call	0x2148	; 0x2148 <vTaskPlaceOnEventList>
    16ec:	c8 01       	movw	r24, r16
    16ee:	0e 94 41 0a 	call	0x1482	; 0x1482 <prvUnlockQueue>
    16f2:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <xTaskResumeAll>
    16f6:	81 11       	cpse	r24, r1
    16f8:	9b cf       	rjmp	.-202    	; 0x1630 <xQueueGenericSend+0x38>
    16fa:	0e 94 52 07 	call	0xea4	; 0xea4 <vPortYield>
    16fe:	98 cf       	rjmp	.-208    	; 0x1630 <xQueueGenericSend+0x38>
    1700:	c8 01       	movw	r24, r16
    1702:	0e 94 41 0a 	call	0x1482	; 0x1482 <prvUnlockQueue>
    1706:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <xTaskResumeAll>
    170a:	92 cf       	rjmp	.-220    	; 0x1630 <xQueueGenericSend+0x38>
    170c:	c8 01       	movw	r24, r16
    170e:	0e 94 41 0a 	call	0x1482	; 0x1482 <prvUnlockQueue>
    1712:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <xTaskResumeAll>
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	1f 91       	pop	r17
    1728:	0f 91       	pop	r16
    172a:	ff 90       	pop	r15
    172c:	ef 90       	pop	r14
    172e:	df 90       	pop	r13
    1730:	cf 90       	pop	r12
    1732:	bf 90       	pop	r11
    1734:	af 90       	pop	r10
    1736:	9f 90       	pop	r9
    1738:	08 95       	ret

0000173a <xQueueCreateMutex>:
    173a:	cf 93       	push	r28
    173c:	df 93       	push	r29
    173e:	48 2f       	mov	r20, r24
    1740:	60 e0       	ldi	r22, 0x00	; 0
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	0e 94 cb 0a 	call	0x1596	; 0x1596 <xQueueGenericCreate>
    1748:	ec 01       	movw	r28, r24
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	61 f0       	breq	.+24     	; 0x1766 <xQueueCreateMutex+0x2c>
    174e:	1b 82       	std	Y+3, r1	; 0x03
    1750:	1a 82       	std	Y+2, r1	; 0x02
    1752:	19 82       	std	Y+1, r1	; 0x01
    1754:	18 82       	st	Y, r1
    1756:	1e 82       	std	Y+6, r1	; 0x06
    1758:	20 e0       	ldi	r18, 0x00	; 0
    175a:	40 e0       	ldi	r20, 0x00	; 0
    175c:	50 e0       	ldi	r21, 0x00	; 0
    175e:	60 e0       	ldi	r22, 0x00	; 0
    1760:	70 e0       	ldi	r23, 0x00	; 0
    1762:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <xQueueGenericSend>
    1766:	ce 01       	movw	r24, r28
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	08 95       	ret

0000176e <xQueueGenericSendFromISR>:
    176e:	ef 92       	push	r14
    1770:	ff 92       	push	r15
    1772:	0f 93       	push	r16
    1774:	1f 93       	push	r17
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    177a:	8a 01       	movw	r16, r20
    177c:	fc 01       	movw	r30, r24
    177e:	52 8d       	ldd	r21, Z+26	; 0x1a
    1780:	33 8d       	ldd	r19, Z+27	; 0x1b
    1782:	53 17       	cp	r21, r19
    1784:	10 f0       	brcs	.+4      	; 0x178a <xQueueGenericSendFromISR+0x1c>
    1786:	22 30       	cpi	r18, 0x02	; 2
    1788:	f1 f4       	brne	.+60     	; 0x17c6 <xQueueGenericSendFromISR+0x58>
    178a:	42 2f       	mov	r20, r18
    178c:	78 01       	movw	r14, r16
    178e:	ec 01       	movw	r28, r24
    1790:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1792:	0e 94 c6 09 	call	0x138c	; 0x138c <prvCopyDataToQueue>
    1796:	1f 3f       	cpi	r17, 0xFF	; 255
    1798:	81 f4       	brne	.+32     	; 0x17ba <xQueueGenericSendFromISR+0x4c>
    179a:	89 89       	ldd	r24, Y+17	; 0x11
    179c:	88 23       	and	r24, r24
    179e:	a9 f0       	breq	.+42     	; 0x17ca <xQueueGenericSendFromISR+0x5c>
    17a0:	ce 01       	movw	r24, r28
    17a2:	41 96       	adiw	r24, 0x11	; 17
    17a4:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <xTaskRemoveFromEventList>
    17a8:	88 23       	and	r24, r24
    17aa:	89 f0       	breq	.+34     	; 0x17ce <xQueueGenericSendFromISR+0x60>
    17ac:	e1 14       	cp	r14, r1
    17ae:	f1 04       	cpc	r15, r1
    17b0:	81 f0       	breq	.+32     	; 0x17d2 <xQueueGenericSendFromISR+0x64>
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	f7 01       	movw	r30, r14
    17b6:	80 83       	st	Z, r24
    17b8:	0d c0       	rjmp	.+26     	; 0x17d4 <xQueueGenericSendFromISR+0x66>
    17ba:	ff 24       	eor	r15, r15
    17bc:	f3 94       	inc	r15
    17be:	f1 0e       	add	r15, r17
    17c0:	fe 8e       	std	Y+30, r15	; 0x1e
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	07 c0       	rjmp	.+14     	; 0x17d4 <xQueueGenericSendFromISR+0x66>
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	05 c0       	rjmp	.+10     	; 0x17d4 <xQueueGenericSendFromISR+0x66>
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	03 c0       	rjmp	.+6      	; 0x17d4 <xQueueGenericSendFromISR+0x66>
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	01 c0       	rjmp	.+2      	; 0x17d4 <xQueueGenericSendFromISR+0x66>
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	df 91       	pop	r29
    17d6:	cf 91       	pop	r28
    17d8:	1f 91       	pop	r17
    17da:	0f 91       	pop	r16
    17dc:	ff 90       	pop	r15
    17de:	ef 90       	pop	r14
    17e0:	08 95       	ret

000017e2 <xQueueGenericReceive>:
    17e2:	8f 92       	push	r8
    17e4:	9f 92       	push	r9
    17e6:	af 92       	push	r10
    17e8:	bf 92       	push	r11
    17ea:	cf 92       	push	r12
    17ec:	df 92       	push	r13
    17ee:	ef 92       	push	r14
    17f0:	ff 92       	push	r15
    17f2:	0f 93       	push	r16
    17f4:	1f 93       	push	r17
    17f6:	cf 93       	push	r28
    17f8:	df 93       	push	r29
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <xQueueGenericReceive+0x1a>
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <xQueueGenericReceive+0x1c>
    17fe:	1f 92       	push	r1
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	8c 01       	movw	r16, r24
    1806:	5b 01       	movw	r10, r22
    1808:	5d 83       	std	Y+5, r21	; 0x05
    180a:	4c 83       	std	Y+4, r20	; 0x04
    180c:	82 2e       	mov	r8, r18
    180e:	e1 2c       	mov	r14, r1
    1810:	99 24       	eor	r9, r9
    1812:	93 94       	inc	r9
    1814:	6c 01       	movw	r12, r24
    1816:	81 e1       	ldi	r24, 0x11	; 17
    1818:	c8 0e       	add	r12, r24
    181a:	d1 1c       	adc	r13, r1
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	0f 92       	push	r0
    1822:	f8 01       	movw	r30, r16
    1824:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1826:	ff 20       	and	r15, r15
    1828:	91 f1       	breq	.+100    	; 0x188e <xQueueGenericReceive+0xac>
    182a:	c6 80       	ldd	r12, Z+6	; 0x06
    182c:	d7 80       	ldd	r13, Z+7	; 0x07
    182e:	b5 01       	movw	r22, r10
    1830:	c8 01       	movw	r24, r16
    1832:	0e 94 27 0a 	call	0x144e	; 0x144e <prvCopyDataFromQueue>
    1836:	81 10       	cpse	r8, r1
    1838:	19 c0       	rjmp	.+50     	; 0x186c <xQueueGenericReceive+0x8a>
    183a:	fa 94       	dec	r15
    183c:	f8 01       	movw	r30, r16
    183e:	f2 8e       	std	Z+26, r15	; 0x1a
    1840:	80 81       	ld	r24, Z
    1842:	91 81       	ldd	r25, Z+1	; 0x01
    1844:	89 2b       	or	r24, r25
    1846:	29 f4       	brne	.+10     	; 0x1852 <xQueueGenericReceive+0x70>
    1848:	0e 94 0a 12 	call	0x2414	; 0x2414 <pvTaskIncrementMutexHeldCount>
    184c:	f8 01       	movw	r30, r16
    184e:	93 83       	std	Z+3, r25	; 0x03
    1850:	82 83       	std	Z+2, r24	; 0x02
    1852:	f8 01       	movw	r30, r16
    1854:	80 85       	ldd	r24, Z+8	; 0x08
    1856:	88 23       	and	r24, r24
    1858:	b1 f0       	breq	.+44     	; 0x1886 <xQueueGenericReceive+0xa4>
    185a:	c8 01       	movw	r24, r16
    185c:	08 96       	adiw	r24, 0x08	; 8
    185e:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <xTaskRemoveFromEventList>
    1862:	88 23       	and	r24, r24
    1864:	81 f0       	breq	.+32     	; 0x1886 <xQueueGenericReceive+0xa4>
    1866:	0e 94 52 07 	call	0xea4	; 0xea4 <vPortYield>
    186a:	0d c0       	rjmp	.+26     	; 0x1886 <xQueueGenericReceive+0xa4>
    186c:	f8 01       	movw	r30, r16
    186e:	d7 82       	std	Z+7, r13	; 0x07
    1870:	c6 82       	std	Z+6, r12	; 0x06
    1872:	81 89       	ldd	r24, Z+17	; 0x11
    1874:	88 23       	and	r24, r24
    1876:	39 f0       	breq	.+14     	; 0x1886 <xQueueGenericReceive+0xa4>
    1878:	c8 01       	movw	r24, r16
    187a:	41 96       	adiw	r24, 0x11	; 17
    187c:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <xTaskRemoveFromEventList>
    1880:	81 11       	cpse	r24, r1
    1882:	0e 94 52 07 	call	0xea4	; 0xea4 <vPortYield>
    1886:	0f 90       	pop	r0
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	64 c0       	rjmp	.+200    	; 0x1956 <xQueueGenericReceive+0x174>
    188e:	4c 81       	ldd	r20, Y+4	; 0x04
    1890:	5d 81       	ldd	r21, Y+5	; 0x05
    1892:	45 2b       	or	r20, r21
    1894:	21 f4       	brne	.+8      	; 0x189e <xQueueGenericReceive+0xbc>
    1896:	0f 90       	pop	r0
    1898:	0f be       	out	0x3f, r0	; 63
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	5c c0       	rjmp	.+184    	; 0x1956 <xQueueGenericReceive+0x174>
    189e:	e1 10       	cpse	r14, r1
    18a0:	05 c0       	rjmp	.+10     	; 0x18ac <xQueueGenericReceive+0xca>
    18a2:	ce 01       	movw	r24, r28
    18a4:	01 96       	adiw	r24, 0x01	; 1
    18a6:	0e 94 19 11 	call	0x2232	; 0x2232 <vTaskSetTimeOutState>
    18aa:	e9 2c       	mov	r14, r9
    18ac:	0f 90       	pop	r0
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <vTaskSuspendAll>
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	f8 94       	cli
    18b8:	0f 92       	push	r0
    18ba:	f8 01       	movw	r30, r16
    18bc:	85 8d       	ldd	r24, Z+29	; 0x1d
    18be:	8f 3f       	cpi	r24, 0xFF	; 255
    18c0:	09 f4       	brne	.+2      	; 0x18c4 <xQueueGenericReceive+0xe2>
    18c2:	15 8e       	std	Z+29, r1	; 0x1d
    18c4:	f8 01       	movw	r30, r16
    18c6:	96 8d       	ldd	r25, Z+30	; 0x1e
    18c8:	9f 3f       	cpi	r25, 0xFF	; 255
    18ca:	09 f4       	brne	.+2      	; 0x18ce <xQueueGenericReceive+0xec>
    18cc:	16 8e       	std	Z+30, r1	; 0x1e
    18ce:	0f 90       	pop	r0
    18d0:	0f be       	out	0x3f, r0	; 63
    18d2:	be 01       	movw	r22, r28
    18d4:	6c 5f       	subi	r22, 0xFC	; 252
    18d6:	7f 4f       	sbci	r23, 0xFF	; 255
    18d8:	ce 01       	movw	r24, r28
    18da:	01 96       	adiw	r24, 0x01	; 1
    18dc:	0e 94 24 11 	call	0x2248	; 0x2248 <xTaskCheckForTimeOut>
    18e0:	81 11       	cpse	r24, r1
    18e2:	2b c0       	rjmp	.+86     	; 0x193a <xQueueGenericReceive+0x158>
    18e4:	0f b6       	in	r0, 0x3f	; 63
    18e6:	f8 94       	cli
    18e8:	0f 92       	push	r0
    18ea:	f8 01       	movw	r30, r16
    18ec:	82 8d       	ldd	r24, Z+26	; 0x1a
    18ee:	0f 90       	pop	r0
    18f0:	0f be       	out	0x3f, r0	; 63
    18f2:	81 11       	cpse	r24, r1
    18f4:	1c c0       	rjmp	.+56     	; 0x192e <xQueueGenericReceive+0x14c>
    18f6:	80 81       	ld	r24, Z
    18f8:	91 81       	ldd	r25, Z+1	; 0x01
    18fa:	89 2b       	or	r24, r25
    18fc:	49 f4       	brne	.+18     	; 0x1910 <xQueueGenericReceive+0x12e>
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	0f 92       	push	r0
    1904:	82 81       	ldd	r24, Z+2	; 0x02
    1906:	93 81       	ldd	r25, Z+3	; 0x03
    1908:	0e 94 68 11 	call	0x22d0	; 0x22d0 <vTaskPriorityInherit>
    190c:	0f 90       	pop	r0
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	6c 81       	ldd	r22, Y+4	; 0x04
    1912:	7d 81       	ldd	r23, Y+5	; 0x05
    1914:	c6 01       	movw	r24, r12
    1916:	0e 94 a4 10 	call	0x2148	; 0x2148 <vTaskPlaceOnEventList>
    191a:	c8 01       	movw	r24, r16
    191c:	0e 94 41 0a 	call	0x1482	; 0x1482 <prvUnlockQueue>
    1920:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <xTaskResumeAll>
    1924:	81 11       	cpse	r24, r1
    1926:	7a cf       	rjmp	.-268    	; 0x181c <xQueueGenericReceive+0x3a>
    1928:	0e 94 52 07 	call	0xea4	; 0xea4 <vPortYield>
    192c:	77 cf       	rjmp	.-274    	; 0x181c <xQueueGenericReceive+0x3a>
    192e:	c8 01       	movw	r24, r16
    1930:	0e 94 41 0a 	call	0x1482	; 0x1482 <prvUnlockQueue>
    1934:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <xTaskResumeAll>
    1938:	71 cf       	rjmp	.-286    	; 0x181c <xQueueGenericReceive+0x3a>
    193a:	c8 01       	movw	r24, r16
    193c:	0e 94 41 0a 	call	0x1482	; 0x1482 <prvUnlockQueue>
    1940:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <xTaskResumeAll>
    1944:	0f b6       	in	r0, 0x3f	; 63
    1946:	f8 94       	cli
    1948:	0f 92       	push	r0
    194a:	f8 01       	movw	r30, r16
    194c:	82 8d       	ldd	r24, Z+26	; 0x1a
    194e:	0f 90       	pop	r0
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	81 11       	cpse	r24, r1
    1954:	63 cf       	rjmp	.-314    	; 0x181c <xQueueGenericReceive+0x3a>
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	df 91       	pop	r29
    1962:	cf 91       	pop	r28
    1964:	1f 91       	pop	r17
    1966:	0f 91       	pop	r16
    1968:	ff 90       	pop	r15
    196a:	ef 90       	pop	r14
    196c:	df 90       	pop	r13
    196e:	cf 90       	pop	r12
    1970:	bf 90       	pop	r11
    1972:	af 90       	pop	r10
    1974:	9f 90       	pop	r9
    1976:	8f 90       	pop	r8
    1978:	08 95       	ret

0000197a <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    197a:	cf 93       	push	r28
    197c:	df 93       	push	r29
    197e:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	f8 94       	cli
    1984:	0f 92       	push	r0
    1986:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1988:	8f 3f       	cpi	r24, 0xFF	; 255
    198a:	09 f4       	brne	.+2      	; 0x198e <vQueueWaitForMessageRestricted+0x14>
    198c:	1d 8e       	std	Y+29, r1	; 0x1d
    198e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1990:	8f 3f       	cpi	r24, 0xFF	; 255
    1992:	09 f4       	brne	.+2      	; 0x1996 <vQueueWaitForMessageRestricted+0x1c>
    1994:	1e 8e       	std	Y+30, r1	; 0x1e
    1996:	0f 90       	pop	r0
    1998:	0f be       	out	0x3f, r0	; 63
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    199a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    199c:	81 11       	cpse	r24, r1
    199e:	04 c0       	rjmp	.+8      	; 0x19a8 <vQueueWaitForMessageRestricted+0x2e>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    19a0:	ce 01       	movw	r24, r28
    19a2:	41 96       	adiw	r24, 0x11	; 17
    19a4:	0e 94 b7 10 	call	0x216e	; 0x216e <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    19a8:	ce 01       	movw	r24, r28
    19aa:	0e 94 41 0a 	call	0x1482	; 0x1482 <prvUnlockQueue>
	}
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	08 95       	ret

000019b4 <prvResetNextTaskUnblockTime>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
    19b4:	e0 91 5a 08 	lds	r30, 0x085A	; 0x80085a <pxDelayedTaskList>
    19b8:	f0 91 5b 08 	lds	r31, 0x085B	; 0x80085b <pxDelayedTaskList+0x1>
    19bc:	80 81       	ld	r24, Z
    19be:	81 11       	cpse	r24, r1
    19c0:	07 c0       	rjmp	.+14     	; 0x19d0 <prvResetNextTaskUnblockTime+0x1c>
    19c2:	8f ef       	ldi	r24, 0xFF	; 255
    19c4:	9f ef       	ldi	r25, 0xFF	; 255
    19c6:	90 93 3b 08 	sts	0x083B, r25	; 0x80083b <xNextTaskUnblockTime+0x1>
    19ca:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <xNextTaskUnblockTime>
    19ce:	08 95       	ret
    19d0:	e0 91 5a 08 	lds	r30, 0x085A	; 0x80085a <pxDelayedTaskList>
    19d4:	f0 91 5b 08 	lds	r31, 0x085B	; 0x80085b <pxDelayedTaskList+0x1>
    19d8:	05 80       	ldd	r0, Z+5	; 0x05
    19da:	f6 81       	ldd	r31, Z+6	; 0x06
    19dc:	e0 2d       	mov	r30, r0
    19de:	06 80       	ldd	r0, Z+6	; 0x06
    19e0:	f7 81       	ldd	r31, Z+7	; 0x07
    19e2:	e0 2d       	mov	r30, r0
    19e4:	82 81       	ldd	r24, Z+2	; 0x02
    19e6:	93 81       	ldd	r25, Z+3	; 0x03
    19e8:	90 93 3b 08 	sts	0x083B, r25	; 0x80083b <xNextTaskUnblockTime+0x1>
    19ec:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <xNextTaskUnblockTime>
    19f0:	08 95       	ret

000019f2 <prvAddCurrentTaskToDelayedList>:
    19f2:	0f 93       	push	r16
    19f4:	1f 93       	push	r17
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
    19fa:	ec 01       	movw	r28, r24
    19fc:	00 91 42 08 	lds	r16, 0x0842	; 0x800842 <xTickCount>
    1a00:	10 91 43 08 	lds	r17, 0x0843	; 0x800843 <xTickCount+0x1>
    1a04:	80 91 b6 08 	lds	r24, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    1a08:	90 91 b7 08 	lds	r25, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    1a0c:	02 96       	adiw	r24, 0x02	; 2
    1a0e:	0e 94 86 06 	call	0xd0c	; 0xd0c <uxListRemove>
    1a12:	c0 0f       	add	r28, r16
    1a14:	d1 1f       	adc	r29, r17
    1a16:	e0 91 b6 08 	lds	r30, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    1a1a:	f0 91 b7 08 	lds	r31, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    1a1e:	d3 83       	std	Z+3, r29	; 0x03
    1a20:	c2 83       	std	Z+2, r28	; 0x02
    1a22:	c0 17       	cp	r28, r16
    1a24:	d1 07       	cpc	r29, r17
    1a26:	68 f4       	brcc	.+26     	; 0x1a42 <prvAddCurrentTaskToDelayedList+0x50>
    1a28:	60 91 b6 08 	lds	r22, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    1a2c:	70 91 b7 08 	lds	r23, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    1a30:	80 91 58 08 	lds	r24, 0x0858	; 0x800858 <pxOverflowDelayedTaskList>
    1a34:	90 91 59 08 	lds	r25, 0x0859	; 0x800859 <pxOverflowDelayedTaskList+0x1>
    1a38:	6e 5f       	subi	r22, 0xFE	; 254
    1a3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3c:	0e 94 55 06 	call	0xcaa	; 0xcaa <vListInsert>
    1a40:	17 c0       	rjmp	.+46     	; 0x1a70 <prvAddCurrentTaskToDelayedList+0x7e>
    1a42:	60 91 b6 08 	lds	r22, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    1a46:	70 91 b7 08 	lds	r23, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    1a4a:	80 91 5a 08 	lds	r24, 0x085A	; 0x80085a <pxDelayedTaskList>
    1a4e:	90 91 5b 08 	lds	r25, 0x085B	; 0x80085b <pxDelayedTaskList+0x1>
    1a52:	6e 5f       	subi	r22, 0xFE	; 254
    1a54:	7f 4f       	sbci	r23, 0xFF	; 255
    1a56:	0e 94 55 06 	call	0xcaa	; 0xcaa <vListInsert>
    1a5a:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <xNextTaskUnblockTime>
    1a5e:	90 91 3b 08 	lds	r25, 0x083B	; 0x80083b <xNextTaskUnblockTime+0x1>
    1a62:	c8 17       	cp	r28, r24
    1a64:	d9 07       	cpc	r29, r25
    1a66:	20 f4       	brcc	.+8      	; 0x1a70 <prvAddCurrentTaskToDelayedList+0x7e>
    1a68:	d0 93 3b 08 	sts	0x083B, r29	; 0x80083b <xNextTaskUnblockTime+0x1>
    1a6c:	c0 93 3a 08 	sts	0x083A, r28	; 0x80083a <xNextTaskUnblockTime>
    1a70:	df 91       	pop	r29
    1a72:	cf 91       	pop	r28
    1a74:	1f 91       	pop	r17
    1a76:	0f 91       	pop	r16
    1a78:	08 95       	ret

00001a7a <xTaskCreate>:
    1a7a:	4f 92       	push	r4
    1a7c:	5f 92       	push	r5
    1a7e:	6f 92       	push	r6
    1a80:	7f 92       	push	r7
    1a82:	8f 92       	push	r8
    1a84:	9f 92       	push	r9
    1a86:	af 92       	push	r10
    1a88:	bf 92       	push	r11
    1a8a:	cf 92       	push	r12
    1a8c:	df 92       	push	r13
    1a8e:	ef 92       	push	r14
    1a90:	ff 92       	push	r15
    1a92:	0f 93       	push	r16
    1a94:	1f 93       	push	r17
    1a96:	cf 93       	push	r28
    1a98:	df 93       	push	r29
    1a9a:	4c 01       	movw	r8, r24
    1a9c:	eb 01       	movw	r28, r22
    1a9e:	6a 01       	movw	r12, r20
    1aa0:	29 01       	movw	r4, r18
    1aa2:	ca 01       	movw	r24, r20
    1aa4:	0e 94 0a 08 	call	0x1014	; 0x1014 <pvPortMalloc>
    1aa8:	5c 01       	movw	r10, r24
    1aaa:	89 2b       	or	r24, r25
    1aac:	09 f4       	brne	.+2      	; 0x1ab0 <xTaskCreate+0x36>
    1aae:	ec c0       	rjmp	.+472    	; 0x1c88 <xTaskCreate+0x20e>
    1ab0:	8c e2       	ldi	r24, 0x2C	; 44
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	0e 94 0a 08 	call	0x1014	; 0x1014 <pvPortMalloc>
    1ab8:	3c 01       	movw	r6, r24
    1aba:	00 97       	sbiw	r24, 0x00	; 0
    1abc:	b9 f0       	breq	.+46     	; 0x1aec <xTaskCreate+0x72>
    1abe:	fc 01       	movw	r30, r24
    1ac0:	b0 8e       	std	Z+24, r11	; 0x18
    1ac2:	a7 8a       	std	Z+23, r10	; 0x17
    1ac4:	a6 01       	movw	r20, r12
    1ac6:	65 ea       	ldi	r22, 0xA5	; 165
    1ac8:	70 e0       	ldi	r23, 0x00	; 0
    1aca:	c5 01       	movw	r24, r10
    1acc:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <memset>
    1ad0:	f1 e0       	ldi	r31, 0x01	; 1
    1ad2:	cf 1a       	sub	r12, r31
    1ad4:	d1 08       	sbc	r13, r1
    1ad6:	f3 01       	movw	r30, r6
    1ad8:	87 89       	ldd	r24, Z+23	; 0x17
    1ada:	90 8d       	ldd	r25, Z+24	; 0x18
    1adc:	c8 0e       	add	r12, r24
    1ade:	d9 1e       	adc	r13, r25
    1ae0:	88 81       	ld	r24, Y
    1ae2:	81 8f       	std	Z+25, r24	; 0x19
    1ae4:	88 81       	ld	r24, Y
    1ae6:	81 11       	cpse	r24, r1
    1ae8:	05 c0       	rjmp	.+10     	; 0x1af4 <xTaskCreate+0x7a>
    1aea:	14 c0       	rjmp	.+40     	; 0x1b14 <xTaskCreate+0x9a>
    1aec:	c5 01       	movw	r24, r10
    1aee:	0e 94 3f 08 	call	0x107e	; 0x107e <vPortFree>
    1af2:	ca c0       	rjmp	.+404    	; 0x1c88 <xTaskCreate+0x20e>
    1af4:	d3 01       	movw	r26, r6
    1af6:	5a 96       	adiw	r26, 0x1a	; 26
    1af8:	fe 01       	movw	r30, r28
    1afa:	31 96       	adiw	r30, 0x01	; 1
    1afc:	9e 01       	movw	r18, r28
    1afe:	28 5f       	subi	r18, 0xF8	; 248
    1b00:	3f 4f       	sbci	r19, 0xFF	; 255
    1b02:	ef 01       	movw	r28, r30
    1b04:	81 91       	ld	r24, Z+
    1b06:	8d 93       	st	X+, r24
    1b08:	88 81       	ld	r24, Y
    1b0a:	88 23       	and	r24, r24
    1b0c:	19 f0       	breq	.+6      	; 0x1b14 <xTaskCreate+0x9a>
    1b0e:	e2 17       	cp	r30, r18
    1b10:	f3 07       	cpc	r31, r19
    1b12:	b9 f7       	brne	.-18     	; 0x1b02 <xTaskCreate+0x88>
    1b14:	f3 01       	movw	r30, r6
    1b16:	10 a2       	std	Z+32, r1	; 0x20
    1b18:	08 30       	cpi	r16, 0x08	; 8
    1b1a:	08 f0       	brcs	.+2      	; 0x1b1e <xTaskCreate+0xa4>
    1b1c:	07 e0       	ldi	r16, 0x07	; 7
    1b1e:	f3 01       	movw	r30, r6
    1b20:	06 8b       	std	Z+22, r16	; 0x16
    1b22:	03 a3       	std	Z+35, r16	; 0x23
    1b24:	14 a2       	std	Z+36, r1	; 0x24
    1b26:	e3 01       	movw	r28, r6
    1b28:	22 96       	adiw	r28, 0x02	; 2
    1b2a:	ce 01       	movw	r24, r28
    1b2c:	0e 94 30 06 	call	0xc60	; 0xc60 <vListInitialiseItem>
    1b30:	c3 01       	movw	r24, r6
    1b32:	0c 96       	adiw	r24, 0x0c	; 12
    1b34:	0e 94 30 06 	call	0xc60	; 0xc60 <vListInitialiseItem>
    1b38:	f3 01       	movw	r30, r6
    1b3a:	71 86       	std	Z+9, r7	; 0x09
    1b3c:	60 86       	std	Z+8, r6	; 0x08
    1b3e:	88 e0       	ldi	r24, 0x08	; 8
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	80 1b       	sub	r24, r16
    1b44:	91 09       	sbc	r25, r1
    1b46:	95 87       	std	Z+13, r25	; 0x0d
    1b48:	84 87       	std	Z+12, r24	; 0x0c
    1b4a:	73 8a       	std	Z+19, r7	; 0x13
    1b4c:	62 8a       	std	Z+18, r6	; 0x12
    1b4e:	16 a2       	std	Z+38, r1	; 0x26
    1b50:	15 a2       	std	Z+37, r1	; 0x25
    1b52:	17 a2       	std	Z+39, r1	; 0x27
    1b54:	10 a6       	std	Z+40, r1	; 0x28
    1b56:	11 a6       	std	Z+41, r1	; 0x29
    1b58:	12 a6       	std	Z+42, r1	; 0x2a
    1b5a:	13 a6       	std	Z+43, r1	; 0x2b
    1b5c:	a2 01       	movw	r20, r4
    1b5e:	b4 01       	movw	r22, r8
    1b60:	c6 01       	movw	r24, r12
    1b62:	0e 94 ac 06 	call	0xd58	; 0xd58 <pxPortInitialiseStack>
    1b66:	f3 01       	movw	r30, r6
    1b68:	91 83       	std	Z+1, r25	; 0x01
    1b6a:	80 83       	st	Z, r24
    1b6c:	e1 14       	cp	r14, r1
    1b6e:	f1 04       	cpc	r15, r1
    1b70:	19 f0       	breq	.+6      	; 0x1b78 <xTaskCreate+0xfe>
    1b72:	f7 01       	movw	r30, r14
    1b74:	71 82       	std	Z+1, r7	; 0x01
    1b76:	60 82       	st	Z, r6
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	0f 92       	push	r0
    1b7e:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <uxCurrentNumberOfTasks>
    1b82:	8f 5f       	subi	r24, 0xFF	; 255
    1b84:	80 93 44 08 	sts	0x0844, r24	; 0x800844 <uxCurrentNumberOfTasks>
    1b88:	80 91 b6 08 	lds	r24, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    1b8c:	90 91 b7 08 	lds	r25, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    1b90:	89 2b       	or	r24, r25
    1b92:	a9 f5       	brne	.+106    	; 0x1bfe <xTaskCreate+0x184>
    1b94:	70 92 b7 08 	sts	0x08B7, r7	; 0x8008b7 <pxCurrentTCB+0x1>
    1b98:	60 92 b6 08 	sts	0x08B6, r6	; 0x8008b6 <pxCurrentTCB>
    1b9c:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <uxCurrentNumberOfTasks>
    1ba0:	81 30       	cpi	r24, 0x01	; 1
    1ba2:	f1 f5       	brne	.+124    	; 0x1c20 <xTaskCreate+0x1a6>
    1ba4:	0e e6       	ldi	r16, 0x6E	; 110
    1ba6:	18 e0       	ldi	r17, 0x08	; 8
    1ba8:	0f 2e       	mov	r0, r31
    1baa:	f6 eb       	ldi	r31, 0xB6	; 182
    1bac:	ef 2e       	mov	r14, r31
    1bae:	f8 e0       	ldi	r31, 0x08	; 8
    1bb0:	ff 2e       	mov	r15, r31
    1bb2:	f0 2d       	mov	r31, r0
    1bb4:	c8 01       	movw	r24, r16
    1bb6:	0e 94 22 06 	call	0xc44	; 0xc44 <vListInitialise>
    1bba:	07 5f       	subi	r16, 0xF7	; 247
    1bbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbe:	0e 15       	cp	r16, r14
    1bc0:	1f 05       	cpc	r17, r15
    1bc2:	c1 f7       	brne	.-16     	; 0x1bb4 <xTaskCreate+0x13a>
    1bc4:	85 e6       	ldi	r24, 0x65	; 101
    1bc6:	98 e0       	ldi	r25, 0x08	; 8
    1bc8:	0e 94 22 06 	call	0xc44	; 0xc44 <vListInitialise>
    1bcc:	8c e5       	ldi	r24, 0x5C	; 92
    1bce:	98 e0       	ldi	r25, 0x08	; 8
    1bd0:	0e 94 22 06 	call	0xc44	; 0xc44 <vListInitialise>
    1bd4:	8f e4       	ldi	r24, 0x4F	; 79
    1bd6:	98 e0       	ldi	r25, 0x08	; 8
    1bd8:	0e 94 22 06 	call	0xc44	; 0xc44 <vListInitialise>
    1bdc:	86 e4       	ldi	r24, 0x46	; 70
    1bde:	98 e0       	ldi	r25, 0x08	; 8
    1be0:	0e 94 22 06 	call	0xc44	; 0xc44 <vListInitialise>
    1be4:	85 e6       	ldi	r24, 0x65	; 101
    1be6:	98 e0       	ldi	r25, 0x08	; 8
    1be8:	90 93 5b 08 	sts	0x085B, r25	; 0x80085b <pxDelayedTaskList+0x1>
    1bec:	80 93 5a 08 	sts	0x085A, r24	; 0x80085a <pxDelayedTaskList>
    1bf0:	8c e5       	ldi	r24, 0x5C	; 92
    1bf2:	98 e0       	ldi	r25, 0x08	; 8
    1bf4:	90 93 59 08 	sts	0x0859, r25	; 0x800859 <pxOverflowDelayedTaskList+0x1>
    1bf8:	80 93 58 08 	sts	0x0858, r24	; 0x800858 <pxOverflowDelayedTaskList>
    1bfc:	11 c0       	rjmp	.+34     	; 0x1c20 <xTaskCreate+0x1a6>
    1bfe:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <xSchedulerRunning>
    1c02:	81 11       	cpse	r24, r1
    1c04:	0d c0       	rjmp	.+26     	; 0x1c20 <xTaskCreate+0x1a6>
    1c06:	e0 91 b6 08 	lds	r30, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    1c0a:	f0 91 b7 08 	lds	r31, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    1c0e:	96 89       	ldd	r25, Z+22	; 0x16
    1c10:	f3 01       	movw	r30, r6
    1c12:	86 89       	ldd	r24, Z+22	; 0x16
    1c14:	89 17       	cp	r24, r25
    1c16:	20 f0       	brcs	.+8      	; 0x1c20 <xTaskCreate+0x1a6>
    1c18:	70 92 b7 08 	sts	0x08B7, r7	; 0x8008b7 <pxCurrentTCB+0x1>
    1c1c:	60 92 b6 08 	sts	0x08B6, r6	; 0x8008b6 <pxCurrentTCB>
    1c20:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <uxTaskNumber>
    1c24:	8f 5f       	subi	r24, 0xFF	; 255
    1c26:	80 93 3c 08 	sts	0x083C, r24	; 0x80083c <uxTaskNumber>
    1c2a:	f3 01       	movw	r30, r6
    1c2c:	81 a3       	std	Z+33, r24	; 0x21
    1c2e:	86 89       	ldd	r24, Z+22	; 0x16
    1c30:	90 91 41 08 	lds	r25, 0x0841	; 0x800841 <uxTopReadyPriority>
    1c34:	98 17       	cp	r25, r24
    1c36:	10 f4       	brcc	.+4      	; 0x1c3c <xTaskCreate+0x1c2>
    1c38:	80 93 41 08 	sts	0x0841, r24	; 0x800841 <uxTopReadyPriority>
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	9c 01       	movw	r18, r24
    1c40:	22 0f       	add	r18, r18
    1c42:	33 1f       	adc	r19, r19
    1c44:	22 0f       	add	r18, r18
    1c46:	33 1f       	adc	r19, r19
    1c48:	22 0f       	add	r18, r18
    1c4a:	33 1f       	adc	r19, r19
    1c4c:	82 0f       	add	r24, r18
    1c4e:	93 1f       	adc	r25, r19
    1c50:	be 01       	movw	r22, r28
    1c52:	82 59       	subi	r24, 0x92	; 146
    1c54:	97 4f       	sbci	r25, 0xF7	; 247
    1c56:	0e 94 34 06 	call	0xc68	; 0xc68 <vListInsertEnd>
    1c5a:	0f 90       	pop	r0
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <xSchedulerRunning>
    1c62:	88 23       	and	r24, r24
    1c64:	69 f0       	breq	.+26     	; 0x1c80 <xTaskCreate+0x206>
    1c66:	e0 91 b6 08 	lds	r30, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    1c6a:	f0 91 b7 08 	lds	r31, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    1c6e:	96 89       	ldd	r25, Z+22	; 0x16
    1c70:	f3 01       	movw	r30, r6
    1c72:	86 89       	ldd	r24, Z+22	; 0x16
    1c74:	98 17       	cp	r25, r24
    1c76:	30 f4       	brcc	.+12     	; 0x1c84 <xTaskCreate+0x20a>
    1c78:	0e 94 52 07 	call	0xea4	; 0xea4 <vPortYield>
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	05 c0       	rjmp	.+10     	; 0x1c8a <xTaskCreate+0x210>
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	03 c0       	rjmp	.+6      	; 0x1c8a <xTaskCreate+0x210>
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	01 c0       	rjmp	.+2      	; 0x1c8a <xTaskCreate+0x210>
    1c88:	8f ef       	ldi	r24, 0xFF	; 255
    1c8a:	df 91       	pop	r29
    1c8c:	cf 91       	pop	r28
    1c8e:	1f 91       	pop	r17
    1c90:	0f 91       	pop	r16
    1c92:	ff 90       	pop	r15
    1c94:	ef 90       	pop	r14
    1c96:	df 90       	pop	r13
    1c98:	cf 90       	pop	r12
    1c9a:	bf 90       	pop	r11
    1c9c:	af 90       	pop	r10
    1c9e:	9f 90       	pop	r9
    1ca0:	8f 90       	pop	r8
    1ca2:	7f 90       	pop	r7
    1ca4:	6f 90       	pop	r6
    1ca6:	5f 90       	pop	r5
    1ca8:	4f 90       	pop	r4
    1caa:	08 95       	ret

00001cac <vTaskStartScheduler>:
    1cac:	ef 92       	push	r14
    1cae:	ff 92       	push	r15
    1cb0:	0f 93       	push	r16
    1cb2:	0f 2e       	mov	r0, r31
    1cb4:	f8 e3       	ldi	r31, 0x38	; 56
    1cb6:	ef 2e       	mov	r14, r31
    1cb8:	f8 e0       	ldi	r31, 0x08	; 8
    1cba:	ff 2e       	mov	r15, r31
    1cbc:	f0 2d       	mov	r31, r0
    1cbe:	00 e0       	ldi	r16, 0x00	; 0
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	45 e5       	ldi	r20, 0x55	; 85
    1cc6:	50 e0       	ldi	r21, 0x00	; 0
    1cc8:	6e e4       	ldi	r22, 0x4E	; 78
    1cca:	71 e0       	ldi	r23, 0x01	; 1
    1ccc:	82 ee       	ldi	r24, 0xE2	; 226
    1cce:	9f e0       	ldi	r25, 0x0F	; 15
    1cd0:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <xTaskCreate>
    1cd4:	81 30       	cpi	r24, 0x01	; 1
    1cd6:	a1 f4       	brne	.+40     	; 0x1d00 <vTaskStartScheduler+0x54>
    1cd8:	0e 94 74 12 	call	0x24e8	; 0x24e8 <xTimerCreateTimerTask>
    1cdc:	81 30       	cpi	r24, 0x01	; 1
    1cde:	81 f4       	brne	.+32     	; 0x1d00 <vTaskStartScheduler+0x54>
    1ce0:	f8 94       	cli
    1ce2:	8f ef       	ldi	r24, 0xFF	; 255
    1ce4:	9f ef       	ldi	r25, 0xFF	; 255
    1ce6:	90 93 3b 08 	sts	0x083B, r25	; 0x80083b <xNextTaskUnblockTime+0x1>
    1cea:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <xNextTaskUnblockTime>
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <xSchedulerRunning>
    1cf4:	10 92 43 08 	sts	0x0843, r1	; 0x800843 <xTickCount+0x1>
    1cf8:	10 92 42 08 	sts	0x0842, r1	; 0x800842 <xTickCount>
    1cfc:	0e 94 18 07 	call	0xe30	; 0xe30 <xPortStartScheduler>
    1d00:	0f 91       	pop	r16
    1d02:	ff 90       	pop	r15
    1d04:	ef 90       	pop	r14
    1d06:	08 95       	ret

00001d08 <vTaskSuspendAll>:
    1d08:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <uxSchedulerSuspended>
    1d0c:	8f 5f       	subi	r24, 0xFF	; 255
    1d0e:	80 93 37 08 	sts	0x0837, r24	; 0x800837 <uxSchedulerSuspended>
    1d12:	08 95       	ret

00001d14 <xTaskGetTickCount>:
    1d14:	0f b6       	in	r0, 0x3f	; 63
    1d16:	f8 94       	cli
    1d18:	0f 92       	push	r0
    1d1a:	80 91 42 08 	lds	r24, 0x0842	; 0x800842 <xTickCount>
    1d1e:	90 91 43 08 	lds	r25, 0x0843	; 0x800843 <xTickCount+0x1>
    1d22:	0f 90       	pop	r0
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	08 95       	ret

00001d28 <xTaskIncrementTick>:
    1d28:	cf 92       	push	r12
    1d2a:	df 92       	push	r13
    1d2c:	ef 92       	push	r14
    1d2e:	ff 92       	push	r15
    1d30:	0f 93       	push	r16
    1d32:	1f 93       	push	r17
    1d34:	cf 93       	push	r28
    1d36:	df 93       	push	r29
    1d38:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <uxSchedulerSuspended>
    1d3c:	81 11       	cpse	r24, r1
    1d3e:	99 c0       	rjmp	.+306    	; 0x1e72 <xTaskIncrementTick+0x14a>
    1d40:	e0 90 42 08 	lds	r14, 0x0842	; 0x800842 <xTickCount>
    1d44:	f0 90 43 08 	lds	r15, 0x0843	; 0x800843 <xTickCount+0x1>
    1d48:	8f ef       	ldi	r24, 0xFF	; 255
    1d4a:	e8 1a       	sub	r14, r24
    1d4c:	f8 0a       	sbc	r15, r24
    1d4e:	f0 92 43 08 	sts	0x0843, r15	; 0x800843 <xTickCount+0x1>
    1d52:	e0 92 42 08 	sts	0x0842, r14	; 0x800842 <xTickCount>
    1d56:	e1 14       	cp	r14, r1
    1d58:	f1 04       	cpc	r15, r1
    1d5a:	b9 f4       	brne	.+46     	; 0x1d8a <xTaskIncrementTick+0x62>
    1d5c:	80 91 5a 08 	lds	r24, 0x085A	; 0x80085a <pxDelayedTaskList>
    1d60:	90 91 5b 08 	lds	r25, 0x085B	; 0x80085b <pxDelayedTaskList+0x1>
    1d64:	20 91 58 08 	lds	r18, 0x0858	; 0x800858 <pxOverflowDelayedTaskList>
    1d68:	30 91 59 08 	lds	r19, 0x0859	; 0x800859 <pxOverflowDelayedTaskList+0x1>
    1d6c:	30 93 5b 08 	sts	0x085B, r19	; 0x80085b <pxDelayedTaskList+0x1>
    1d70:	20 93 5a 08 	sts	0x085A, r18	; 0x80085a <pxDelayedTaskList>
    1d74:	90 93 59 08 	sts	0x0859, r25	; 0x800859 <pxOverflowDelayedTaskList+0x1>
    1d78:	80 93 58 08 	sts	0x0858, r24	; 0x800858 <pxOverflowDelayedTaskList>
    1d7c:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <xNumOfOverflows>
    1d80:	8f 5f       	subi	r24, 0xFF	; 255
    1d82:	80 93 3d 08 	sts	0x083D, r24	; 0x80083d <xNumOfOverflows>
    1d86:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <prvResetNextTaskUnblockTime>
    1d8a:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <xNextTaskUnblockTime>
    1d8e:	90 91 3b 08 	lds	r25, 0x083B	; 0x80083b <xNextTaskUnblockTime+0x1>
    1d92:	e8 16       	cp	r14, r24
    1d94:	f9 06       	cpc	r15, r25
    1d96:	10 f4       	brcc	.+4      	; 0x1d9c <xTaskIncrementTick+0x74>
    1d98:	d1 2c       	mov	r13, r1
    1d9a:	53 c0       	rjmp	.+166    	; 0x1e42 <xTaskIncrementTick+0x11a>
    1d9c:	d1 2c       	mov	r13, r1
    1d9e:	cc 24       	eor	r12, r12
    1da0:	c3 94       	inc	r12
    1da2:	e0 91 5a 08 	lds	r30, 0x085A	; 0x80085a <pxDelayedTaskList>
    1da6:	f0 91 5b 08 	lds	r31, 0x085B	; 0x80085b <pxDelayedTaskList+0x1>
    1daa:	90 81       	ld	r25, Z
    1dac:	91 11       	cpse	r25, r1
    1dae:	07 c0       	rjmp	.+14     	; 0x1dbe <xTaskIncrementTick+0x96>
    1db0:	8f ef       	ldi	r24, 0xFF	; 255
    1db2:	9f ef       	ldi	r25, 0xFF	; 255
    1db4:	90 93 3b 08 	sts	0x083B, r25	; 0x80083b <xNextTaskUnblockTime+0x1>
    1db8:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <xNextTaskUnblockTime>
    1dbc:	42 c0       	rjmp	.+132    	; 0x1e42 <xTaskIncrementTick+0x11a>
    1dbe:	e0 91 5a 08 	lds	r30, 0x085A	; 0x80085a <pxDelayedTaskList>
    1dc2:	f0 91 5b 08 	lds	r31, 0x085B	; 0x80085b <pxDelayedTaskList+0x1>
    1dc6:	05 80       	ldd	r0, Z+5	; 0x05
    1dc8:	f6 81       	ldd	r31, Z+6	; 0x06
    1dca:	e0 2d       	mov	r30, r0
    1dcc:	c6 81       	ldd	r28, Z+6	; 0x06
    1dce:	d7 81       	ldd	r29, Z+7	; 0x07
    1dd0:	2a 81       	ldd	r18, Y+2	; 0x02
    1dd2:	3b 81       	ldd	r19, Y+3	; 0x03
    1dd4:	e2 16       	cp	r14, r18
    1dd6:	f3 06       	cpc	r15, r19
    1dd8:	28 f4       	brcc	.+10     	; 0x1de4 <xTaskIncrementTick+0xbc>
    1dda:	30 93 3b 08 	sts	0x083B, r19	; 0x80083b <xNextTaskUnblockTime+0x1>
    1dde:	20 93 3a 08 	sts	0x083A, r18	; 0x80083a <xNextTaskUnblockTime>
    1de2:	2f c0       	rjmp	.+94     	; 0x1e42 <xTaskIncrementTick+0x11a>
    1de4:	8e 01       	movw	r16, r28
    1de6:	0e 5f       	subi	r16, 0xFE	; 254
    1de8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dea:	c8 01       	movw	r24, r16
    1dec:	0e 94 86 06 	call	0xd0c	; 0xd0c <uxListRemove>
    1df0:	8c 89       	ldd	r24, Y+20	; 0x14
    1df2:	9d 89       	ldd	r25, Y+21	; 0x15
    1df4:	89 2b       	or	r24, r25
    1df6:	21 f0       	breq	.+8      	; 0x1e00 <xTaskIncrementTick+0xd8>
    1df8:	ce 01       	movw	r24, r28
    1dfa:	0c 96       	adiw	r24, 0x0c	; 12
    1dfc:	0e 94 86 06 	call	0xd0c	; 0xd0c <uxListRemove>
    1e00:	2e 89       	ldd	r18, Y+22	; 0x16
    1e02:	80 91 41 08 	lds	r24, 0x0841	; 0x800841 <uxTopReadyPriority>
    1e06:	82 17       	cp	r24, r18
    1e08:	10 f4       	brcc	.+4      	; 0x1e0e <xTaskIncrementTick+0xe6>
    1e0a:	20 93 41 08 	sts	0x0841, r18	; 0x800841 <uxTopReadyPriority>
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	c9 01       	movw	r24, r18
    1e12:	88 0f       	add	r24, r24
    1e14:	99 1f       	adc	r25, r25
    1e16:	88 0f       	add	r24, r24
    1e18:	99 1f       	adc	r25, r25
    1e1a:	88 0f       	add	r24, r24
    1e1c:	99 1f       	adc	r25, r25
    1e1e:	82 0f       	add	r24, r18
    1e20:	93 1f       	adc	r25, r19
    1e22:	b8 01       	movw	r22, r16
    1e24:	82 59       	subi	r24, 0x92	; 146
    1e26:	97 4f       	sbci	r25, 0xF7	; 247
    1e28:	0e 94 34 06 	call	0xc68	; 0xc68 <vListInsertEnd>
    1e2c:	e0 91 b6 08 	lds	r30, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    1e30:	f0 91 b7 08 	lds	r31, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    1e34:	9e 89       	ldd	r25, Y+22	; 0x16
    1e36:	86 89       	ldd	r24, Z+22	; 0x16
    1e38:	98 17       	cp	r25, r24
    1e3a:	08 f4       	brcc	.+2      	; 0x1e3e <xTaskIncrementTick+0x116>
    1e3c:	b2 cf       	rjmp	.-156    	; 0x1da2 <xTaskIncrementTick+0x7a>
    1e3e:	dc 2c       	mov	r13, r12
    1e40:	b0 cf       	rjmp	.-160    	; 0x1da2 <xTaskIncrementTick+0x7a>
    1e42:	e0 91 b6 08 	lds	r30, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    1e46:	f0 91 b7 08 	lds	r31, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    1e4a:	86 89       	ldd	r24, Z+22	; 0x16
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	fc 01       	movw	r30, r24
    1e50:	ee 0f       	add	r30, r30
    1e52:	ff 1f       	adc	r31, r31
    1e54:	ee 0f       	add	r30, r30
    1e56:	ff 1f       	adc	r31, r31
    1e58:	ee 0f       	add	r30, r30
    1e5a:	ff 1f       	adc	r31, r31
    1e5c:	8e 0f       	add	r24, r30
    1e5e:	9f 1f       	adc	r25, r31
    1e60:	fc 01       	movw	r30, r24
    1e62:	e2 59       	subi	r30, 0x92	; 146
    1e64:	f7 4f       	sbci	r31, 0xF7	; 247
    1e66:	80 81       	ld	r24, Z
    1e68:	82 30       	cpi	r24, 0x02	; 2
    1e6a:	48 f0       	brcs	.+18     	; 0x1e7e <xTaskIncrementTick+0x156>
    1e6c:	dd 24       	eor	r13, r13
    1e6e:	d3 94       	inc	r13
    1e70:	06 c0       	rjmp	.+12     	; 0x1e7e <xTaskIncrementTick+0x156>
    1e72:	80 91 3f 08 	lds	r24, 0x083F	; 0x80083f <uxPendedTicks>
    1e76:	8f 5f       	subi	r24, 0xFF	; 255
    1e78:	80 93 3f 08 	sts	0x083F, r24	; 0x80083f <uxPendedTicks>
    1e7c:	d1 2c       	mov	r13, r1
    1e7e:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <xYieldPending>
    1e82:	88 23       	and	r24, r24
    1e84:	11 f0       	breq	.+4      	; 0x1e8a <xTaskIncrementTick+0x162>
    1e86:	dd 24       	eor	r13, r13
    1e88:	d3 94       	inc	r13
    1e8a:	8d 2d       	mov	r24, r13
    1e8c:	df 91       	pop	r29
    1e8e:	cf 91       	pop	r28
    1e90:	1f 91       	pop	r17
    1e92:	0f 91       	pop	r16
    1e94:	ff 90       	pop	r15
    1e96:	ef 90       	pop	r14
    1e98:	df 90       	pop	r13
    1e9a:	cf 90       	pop	r12
    1e9c:	08 95       	ret

00001e9e <xTaskResumeAll>:
    1e9e:	df 92       	push	r13
    1ea0:	ef 92       	push	r14
    1ea2:	ff 92       	push	r15
    1ea4:	0f 93       	push	r16
    1ea6:	1f 93       	push	r17
    1ea8:	cf 93       	push	r28
    1eaa:	df 93       	push	r29
    1eac:	0f b6       	in	r0, 0x3f	; 63
    1eae:	f8 94       	cli
    1eb0:	0f 92       	push	r0
    1eb2:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <uxSchedulerSuspended>
    1eb6:	81 50       	subi	r24, 0x01	; 1
    1eb8:	80 93 37 08 	sts	0x0837, r24	; 0x800837 <uxSchedulerSuspended>
    1ebc:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <uxSchedulerSuspended>
    1ec0:	81 11       	cpse	r24, r1
    1ec2:	5f c0       	rjmp	.+190    	; 0x1f82 <xTaskResumeAll+0xe4>
    1ec4:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <uxCurrentNumberOfTasks>
    1ec8:	81 11       	cpse	r24, r1
    1eca:	33 c0       	rjmp	.+102    	; 0x1f32 <xTaskResumeAll+0x94>
    1ecc:	5d c0       	rjmp	.+186    	; 0x1f88 <xTaskResumeAll+0xea>
    1ece:	d7 01       	movw	r26, r14
    1ed0:	15 96       	adiw	r26, 0x05	; 5
    1ed2:	ed 91       	ld	r30, X+
    1ed4:	fc 91       	ld	r31, X
    1ed6:	16 97       	sbiw	r26, 0x06	; 6
    1ed8:	c6 81       	ldd	r28, Z+6	; 0x06
    1eda:	d7 81       	ldd	r29, Z+7	; 0x07
    1edc:	ce 01       	movw	r24, r28
    1ede:	0c 96       	adiw	r24, 0x0c	; 12
    1ee0:	0e 94 86 06 	call	0xd0c	; 0xd0c <uxListRemove>
    1ee4:	8e 01       	movw	r16, r28
    1ee6:	0e 5f       	subi	r16, 0xFE	; 254
    1ee8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eea:	c8 01       	movw	r24, r16
    1eec:	0e 94 86 06 	call	0xd0c	; 0xd0c <uxListRemove>
    1ef0:	2e 89       	ldd	r18, Y+22	; 0x16
    1ef2:	80 91 41 08 	lds	r24, 0x0841	; 0x800841 <uxTopReadyPriority>
    1ef6:	82 17       	cp	r24, r18
    1ef8:	10 f4       	brcc	.+4      	; 0x1efe <xTaskResumeAll+0x60>
    1efa:	20 93 41 08 	sts	0x0841, r18	; 0x800841 <uxTopReadyPriority>
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	c9 01       	movw	r24, r18
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	88 0f       	add	r24, r24
    1f0c:	99 1f       	adc	r25, r25
    1f0e:	82 0f       	add	r24, r18
    1f10:	93 1f       	adc	r25, r19
    1f12:	b8 01       	movw	r22, r16
    1f14:	82 59       	subi	r24, 0x92	; 146
    1f16:	97 4f       	sbci	r25, 0xF7	; 247
    1f18:	0e 94 34 06 	call	0xc68	; 0xc68 <vListInsertEnd>
    1f1c:	e0 91 b6 08 	lds	r30, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    1f20:	f0 91 b7 08 	lds	r31, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    1f24:	9e 89       	ldd	r25, Y+22	; 0x16
    1f26:	86 89       	ldd	r24, Z+22	; 0x16
    1f28:	98 17       	cp	r25, r24
    1f2a:	68 f0       	brcs	.+26     	; 0x1f46 <xTaskResumeAll+0xa8>
    1f2c:	d0 92 3e 08 	sts	0x083E, r13	; 0x80083e <xYieldPending>
    1f30:	0a c0       	rjmp	.+20     	; 0x1f46 <xTaskResumeAll+0xa8>
    1f32:	c0 e0       	ldi	r28, 0x00	; 0
    1f34:	d0 e0       	ldi	r29, 0x00	; 0
    1f36:	0f 2e       	mov	r0, r31
    1f38:	ff e4       	ldi	r31, 0x4F	; 79
    1f3a:	ef 2e       	mov	r14, r31
    1f3c:	f8 e0       	ldi	r31, 0x08	; 8
    1f3e:	ff 2e       	mov	r15, r31
    1f40:	f0 2d       	mov	r31, r0
    1f42:	dd 24       	eor	r13, r13
    1f44:	d3 94       	inc	r13
    1f46:	f7 01       	movw	r30, r14
    1f48:	80 81       	ld	r24, Z
    1f4a:	81 11       	cpse	r24, r1
    1f4c:	c0 cf       	rjmp	.-128    	; 0x1ece <xTaskResumeAll+0x30>
    1f4e:	cd 2b       	or	r28, r29
    1f50:	11 f0       	breq	.+4      	; 0x1f56 <xTaskResumeAll+0xb8>
    1f52:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <prvResetNextTaskUnblockTime>
    1f56:	c0 91 3f 08 	lds	r28, 0x083F	; 0x80083f <uxPendedTicks>
    1f5a:	cc 23       	and	r28, r28
    1f5c:	51 f0       	breq	.+20     	; 0x1f72 <xTaskResumeAll+0xd4>
    1f5e:	d1 e0       	ldi	r29, 0x01	; 1
    1f60:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <xTaskIncrementTick>
    1f64:	81 11       	cpse	r24, r1
    1f66:	d0 93 3e 08 	sts	0x083E, r29	; 0x80083e <xYieldPending>
    1f6a:	c1 50       	subi	r28, 0x01	; 1
    1f6c:	c9 f7       	brne	.-14     	; 0x1f60 <xTaskResumeAll+0xc2>
    1f6e:	10 92 3f 08 	sts	0x083F, r1	; 0x80083f <uxPendedTicks>
    1f72:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <xYieldPending>
    1f76:	88 23       	and	r24, r24
    1f78:	31 f0       	breq	.+12     	; 0x1f86 <xTaskResumeAll+0xe8>
    1f7a:	0e 94 52 07 	call	0xea4	; 0xea4 <vPortYield>
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	03 c0       	rjmp	.+6      	; 0x1f88 <xTaskResumeAll+0xea>
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	01 c0       	rjmp	.+2      	; 0x1f88 <xTaskResumeAll+0xea>
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	0f 90       	pop	r0
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	df 91       	pop	r29
    1f8e:	cf 91       	pop	r28
    1f90:	1f 91       	pop	r17
    1f92:	0f 91       	pop	r16
    1f94:	ff 90       	pop	r15
    1f96:	ef 90       	pop	r14
    1f98:	df 90       	pop	r13
    1f9a:	08 95       	ret

00001f9c <vTaskDelay>:
    1f9c:	cf 93       	push	r28
    1f9e:	df 93       	push	r29
    1fa0:	ec 01       	movw	r28, r24
    1fa2:	89 2b       	or	r24, r25
    1fa4:	51 f0       	breq	.+20     	; 0x1fba <vTaskDelay+0x1e>
    1fa6:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <vTaskSuspendAll>
    1faa:	60 e0       	ldi	r22, 0x00	; 0
    1fac:	ce 01       	movw	r24, r28
    1fae:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <prvAddCurrentTaskToDelayedList>
    1fb2:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <xTaskResumeAll>
    1fb6:	81 11       	cpse	r24, r1
    1fb8:	02 c0       	rjmp	.+4      	; 0x1fbe <vTaskDelay+0x22>
    1fba:	0e 94 52 07 	call	0xea4	; 0xea4 <vPortYield>
    1fbe:	df 91       	pop	r29
    1fc0:	cf 91       	pop	r28
    1fc2:	08 95       	ret

00001fc4 <prvIdleTask>:
    1fc4:	06 e4       	ldi	r16, 0x46	; 70
    1fc6:	18 e0       	ldi	r17, 0x08	; 8
    1fc8:	0f 2e       	mov	r0, r31
    1fca:	fe e6       	ldi	r31, 0x6E	; 110
    1fcc:	ef 2e       	mov	r14, r31
    1fce:	f8 e0       	ldi	r31, 0x08	; 8
    1fd0:	ff 2e       	mov	r15, r31
    1fd2:	f0 2d       	mov	r31, r0
    1fd4:	29 c0       	rjmp	.+82     	; 0x2028 <prvIdleTask+0x64>
    1fd6:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <vTaskSuspendAll>
    1fda:	d8 01       	movw	r26, r16
    1fdc:	cc 91       	ld	r28, X
    1fde:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <xTaskResumeAll>
    1fe2:	cc 23       	and	r28, r28
    1fe4:	09 f1       	breq	.+66     	; 0x2028 <prvIdleTask+0x64>
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	0f 92       	push	r0
    1fec:	d8 01       	movw	r26, r16
    1fee:	15 96       	adiw	r26, 0x05	; 5
    1ff0:	ed 91       	ld	r30, X+
    1ff2:	fc 91       	ld	r31, X
    1ff4:	16 97       	sbiw	r26, 0x06	; 6
    1ff6:	c6 81       	ldd	r28, Z+6	; 0x06
    1ff8:	d7 81       	ldd	r29, Z+7	; 0x07
    1ffa:	ce 01       	movw	r24, r28
    1ffc:	02 96       	adiw	r24, 0x02	; 2
    1ffe:	0e 94 86 06 	call	0xd0c	; 0xd0c <uxListRemove>
    2002:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <uxCurrentNumberOfTasks>
    2006:	81 50       	subi	r24, 0x01	; 1
    2008:	80 93 44 08 	sts	0x0844, r24	; 0x800844 <uxCurrentNumberOfTasks>
    200c:	80 91 45 08 	lds	r24, 0x0845	; 0x800845 <uxDeletedTasksWaitingCleanUp>
    2010:	81 50       	subi	r24, 0x01	; 1
    2012:	80 93 45 08 	sts	0x0845, r24	; 0x800845 <uxDeletedTasksWaitingCleanUp>
    2016:	0f 90       	pop	r0
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	8f 89       	ldd	r24, Y+23	; 0x17
    201c:	98 8d       	ldd	r25, Y+24	; 0x18
    201e:	0e 94 3f 08 	call	0x107e	; 0x107e <vPortFree>
    2022:	ce 01       	movw	r24, r28
    2024:	0e 94 3f 08 	call	0x107e	; 0x107e <vPortFree>
    2028:	80 91 45 08 	lds	r24, 0x0845	; 0x800845 <uxDeletedTasksWaitingCleanUp>
    202c:	81 11       	cpse	r24, r1
    202e:	d3 cf       	rjmp	.-90     	; 0x1fd6 <prvIdleTask+0x12>
    2030:	f7 01       	movw	r30, r14
    2032:	80 81       	ld	r24, Z
    2034:	82 30       	cpi	r24, 0x02	; 2
    2036:	10 f0       	brcs	.+4      	; 0x203c <prvIdleTask+0x78>
    2038:	0e 94 52 07 	call	0xea4	; 0xea4 <vPortYield>
    203c:	0e 94 ef 04 	call	0x9de	; 0x9de <vApplicationIdleHook>
    2040:	f3 cf       	rjmp	.-26     	; 0x2028 <prvIdleTask+0x64>

00002042 <vTaskSetApplicationTaskTag>:
    2042:	00 97       	sbiw	r24, 0x00	; 0
    2044:	21 f4       	brne	.+8      	; 0x204e <vTaskSetApplicationTaskTag+0xc>
    2046:	80 91 b6 08 	lds	r24, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    204a:	90 91 b7 08 	lds	r25, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	f8 94       	cli
    2052:	0f 92       	push	r0
    2054:	fc 01       	movw	r30, r24
    2056:	76 a3       	std	Z+38, r23	; 0x26
    2058:	65 a3       	std	Z+37, r22	; 0x25
    205a:	0f 90       	pop	r0
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	08 95       	ret

00002060 <vTaskSwitchContext>:
    2060:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <uxSchedulerSuspended>
    2064:	88 23       	and	r24, r24
    2066:	21 f0       	breq	.+8      	; 0x2070 <vTaskSwitchContext+0x10>
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	80 93 3e 08 	sts	0x083E, r24	; 0x80083e <xYieldPending>
    206e:	08 95       	ret
    2070:	10 92 3e 08 	sts	0x083E, r1	; 0x80083e <xYieldPending>
    2074:	e0 91 b6 08 	lds	r30, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    2078:	f0 91 b7 08 	lds	r31, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    207c:	85 a1       	ldd	r24, Z+37	; 0x25
    207e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <switch_out>
    2082:	20 91 41 08 	lds	r18, 0x0841	; 0x800841 <uxTopReadyPriority>
    2086:	82 2f       	mov	r24, r18
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	fc 01       	movw	r30, r24
    208c:	ee 0f       	add	r30, r30
    208e:	ff 1f       	adc	r31, r31
    2090:	ee 0f       	add	r30, r30
    2092:	ff 1f       	adc	r31, r31
    2094:	ee 0f       	add	r30, r30
    2096:	ff 1f       	adc	r31, r31
    2098:	e8 0f       	add	r30, r24
    209a:	f9 1f       	adc	r31, r25
    209c:	e2 59       	subi	r30, 0x92	; 146
    209e:	f7 4f       	sbci	r31, 0xF7	; 247
    20a0:	30 81       	ld	r19, Z
    20a2:	31 11       	cpse	r19, r1
    20a4:	11 c0       	rjmp	.+34     	; 0x20c8 <vTaskSwitchContext+0x68>
    20a6:	21 50       	subi	r18, 0x01	; 1
    20a8:	82 2f       	mov	r24, r18
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	fc 01       	movw	r30, r24
    20ae:	ee 0f       	add	r30, r30
    20b0:	ff 1f       	adc	r31, r31
    20b2:	ee 0f       	add	r30, r30
    20b4:	ff 1f       	adc	r31, r31
    20b6:	ee 0f       	add	r30, r30
    20b8:	ff 1f       	adc	r31, r31
    20ba:	e8 0f       	add	r30, r24
    20bc:	f9 1f       	adc	r31, r25
    20be:	e2 59       	subi	r30, 0x92	; 146
    20c0:	f7 4f       	sbci	r31, 0xF7	; 247
    20c2:	30 81       	ld	r19, Z
    20c4:	33 23       	and	r19, r19
    20c6:	79 f3       	breq	.-34     	; 0x20a6 <vTaskSwitchContext+0x46>
    20c8:	ac 01       	movw	r20, r24
    20ca:	44 0f       	add	r20, r20
    20cc:	55 1f       	adc	r21, r21
    20ce:	44 0f       	add	r20, r20
    20d0:	55 1f       	adc	r21, r21
    20d2:	44 0f       	add	r20, r20
    20d4:	55 1f       	adc	r21, r21
    20d6:	48 0f       	add	r20, r24
    20d8:	59 1f       	adc	r21, r25
    20da:	da 01       	movw	r26, r20
    20dc:	a2 59       	subi	r26, 0x92	; 146
    20de:	b7 4f       	sbci	r27, 0xF7	; 247
    20e0:	11 96       	adiw	r26, 0x01	; 1
    20e2:	ed 91       	ld	r30, X+
    20e4:	fc 91       	ld	r31, X
    20e6:	12 97       	sbiw	r26, 0x02	; 2
    20e8:	02 80       	ldd	r0, Z+2	; 0x02
    20ea:	f3 81       	ldd	r31, Z+3	; 0x03
    20ec:	e0 2d       	mov	r30, r0
    20ee:	12 96       	adiw	r26, 0x02	; 2
    20f0:	fc 93       	st	X, r31
    20f2:	ee 93       	st	-X, r30
    20f4:	11 97       	sbiw	r26, 0x01	; 1
    20f6:	4f 58       	subi	r20, 0x8F	; 143
    20f8:	57 4f       	sbci	r21, 0xF7	; 247
    20fa:	e4 17       	cp	r30, r20
    20fc:	f5 07       	cpc	r31, r21
    20fe:	29 f4       	brne	.+10     	; 0x210a <vTaskSwitchContext+0xaa>
    2100:	42 81       	ldd	r20, Z+2	; 0x02
    2102:	53 81       	ldd	r21, Z+3	; 0x03
    2104:	fd 01       	movw	r30, r26
    2106:	52 83       	std	Z+2, r21	; 0x02
    2108:	41 83       	std	Z+1, r20	; 0x01
    210a:	fc 01       	movw	r30, r24
    210c:	ee 0f       	add	r30, r30
    210e:	ff 1f       	adc	r31, r31
    2110:	ee 0f       	add	r30, r30
    2112:	ff 1f       	adc	r31, r31
    2114:	ee 0f       	add	r30, r30
    2116:	ff 1f       	adc	r31, r31
    2118:	8e 0f       	add	r24, r30
    211a:	9f 1f       	adc	r25, r31
    211c:	fc 01       	movw	r30, r24
    211e:	e2 59       	subi	r30, 0x92	; 146
    2120:	f7 4f       	sbci	r31, 0xF7	; 247
    2122:	01 80       	ldd	r0, Z+1	; 0x01
    2124:	f2 81       	ldd	r31, Z+2	; 0x02
    2126:	e0 2d       	mov	r30, r0
    2128:	86 81       	ldd	r24, Z+6	; 0x06
    212a:	97 81       	ldd	r25, Z+7	; 0x07
    212c:	90 93 b7 08 	sts	0x08B7, r25	; 0x8008b7 <pxCurrentTCB+0x1>
    2130:	80 93 b6 08 	sts	0x08B6, r24	; 0x8008b6 <pxCurrentTCB>
    2134:	20 93 41 08 	sts	0x0841, r18	; 0x800841 <uxTopReadyPriority>
    2138:	e0 91 b6 08 	lds	r30, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    213c:	f0 91 b7 08 	lds	r31, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    2140:	85 a1       	ldd	r24, Z+37	; 0x25
    2142:	0e 94 d0 05 	call	0xba0	; 0xba0 <switch_in>
    2146:	08 95       	ret

00002148 <vTaskPlaceOnEventList>:
    2148:	cf 93       	push	r28
    214a:	df 93       	push	r29
    214c:	eb 01       	movw	r28, r22
    214e:	20 91 b6 08 	lds	r18, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    2152:	30 91 b7 08 	lds	r19, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    2156:	b9 01       	movw	r22, r18
    2158:	64 5f       	subi	r22, 0xF4	; 244
    215a:	7f 4f       	sbci	r23, 0xFF	; 255
    215c:	0e 94 55 06 	call	0xcaa	; 0xcaa <vListInsert>
    2160:	61 e0       	ldi	r22, 0x01	; 1
    2162:	ce 01       	movw	r24, r28
    2164:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <prvAddCurrentTaskToDelayedList>
    2168:	df 91       	pop	r29
    216a:	cf 91       	pop	r28
    216c:	08 95       	ret

0000216e <vTaskPlaceOnEventListRestricted>:
    216e:	0f 93       	push	r16
    2170:	1f 93       	push	r17
    2172:	cf 93       	push	r28
    2174:	8b 01       	movw	r16, r22
    2176:	c4 2f       	mov	r28, r20
    2178:	20 91 b6 08 	lds	r18, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    217c:	30 91 b7 08 	lds	r19, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    2180:	b9 01       	movw	r22, r18
    2182:	64 5f       	subi	r22, 0xF4	; 244
    2184:	7f 4f       	sbci	r23, 0xFF	; 255
    2186:	0e 94 34 06 	call	0xc68	; 0xc68 <vListInsertEnd>
    218a:	cc 23       	and	r28, r28
    218c:	11 f0       	breq	.+4      	; 0x2192 <vTaskPlaceOnEventListRestricted+0x24>
    218e:	0f ef       	ldi	r16, 0xFF	; 255
    2190:	1f ef       	ldi	r17, 0xFF	; 255
    2192:	6c 2f       	mov	r22, r28
    2194:	c8 01       	movw	r24, r16
    2196:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <prvAddCurrentTaskToDelayedList>
    219a:	cf 91       	pop	r28
    219c:	1f 91       	pop	r17
    219e:	0f 91       	pop	r16
    21a0:	08 95       	ret

000021a2 <xTaskRemoveFromEventList>:
    21a2:	0f 93       	push	r16
    21a4:	1f 93       	push	r17
    21a6:	cf 93       	push	r28
    21a8:	df 93       	push	r29
    21aa:	dc 01       	movw	r26, r24
    21ac:	15 96       	adiw	r26, 0x05	; 5
    21ae:	ed 91       	ld	r30, X+
    21b0:	fc 91       	ld	r31, X
    21b2:	16 97       	sbiw	r26, 0x06	; 6
    21b4:	c6 81       	ldd	r28, Z+6	; 0x06
    21b6:	d7 81       	ldd	r29, Z+7	; 0x07
    21b8:	8e 01       	movw	r16, r28
    21ba:	04 5f       	subi	r16, 0xF4	; 244
    21bc:	1f 4f       	sbci	r17, 0xFF	; 255
    21be:	c8 01       	movw	r24, r16
    21c0:	0e 94 86 06 	call	0xd0c	; 0xd0c <uxListRemove>
    21c4:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <uxSchedulerSuspended>
    21c8:	81 11       	cpse	r24, r1
    21ca:	1c c0       	rjmp	.+56     	; 0x2204 <xTaskRemoveFromEventList+0x62>
    21cc:	0a 50       	subi	r16, 0x0A	; 10
    21ce:	11 09       	sbc	r17, r1
    21d0:	c8 01       	movw	r24, r16
    21d2:	0e 94 86 06 	call	0xd0c	; 0xd0c <uxListRemove>
    21d6:	2e 89       	ldd	r18, Y+22	; 0x16
    21d8:	80 91 41 08 	lds	r24, 0x0841	; 0x800841 <uxTopReadyPriority>
    21dc:	82 17       	cp	r24, r18
    21de:	10 f4       	brcc	.+4      	; 0x21e4 <xTaskRemoveFromEventList+0x42>
    21e0:	20 93 41 08 	sts	0x0841, r18	; 0x800841 <uxTopReadyPriority>
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	c9 01       	movw	r24, r18
    21e8:	88 0f       	add	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	88 0f       	add	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	88 0f       	add	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	82 0f       	add	r24, r18
    21f6:	93 1f       	adc	r25, r19
    21f8:	b8 01       	movw	r22, r16
    21fa:	82 59       	subi	r24, 0x92	; 146
    21fc:	97 4f       	sbci	r25, 0xF7	; 247
    21fe:	0e 94 34 06 	call	0xc68	; 0xc68 <vListInsertEnd>
    2202:	05 c0       	rjmp	.+10     	; 0x220e <xTaskRemoveFromEventList+0x6c>
    2204:	b8 01       	movw	r22, r16
    2206:	8f e4       	ldi	r24, 0x4F	; 79
    2208:	98 e0       	ldi	r25, 0x08	; 8
    220a:	0e 94 34 06 	call	0xc68	; 0xc68 <vListInsertEnd>
    220e:	e0 91 b6 08 	lds	r30, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    2212:	f0 91 b7 08 	lds	r31, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    2216:	9e 89       	ldd	r25, Y+22	; 0x16
    2218:	86 89       	ldd	r24, Z+22	; 0x16
    221a:	89 17       	cp	r24, r25
    221c:	20 f4       	brcc	.+8      	; 0x2226 <xTaskRemoveFromEventList+0x84>
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	80 93 3e 08 	sts	0x083E, r24	; 0x80083e <xYieldPending>
    2224:	01 c0       	rjmp	.+2      	; 0x2228 <xTaskRemoveFromEventList+0x86>
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	1f 91       	pop	r17
    222e:	0f 91       	pop	r16
    2230:	08 95       	ret

00002232 <vTaskSetTimeOutState>:
    2232:	20 91 3d 08 	lds	r18, 0x083D	; 0x80083d <xNumOfOverflows>
    2236:	fc 01       	movw	r30, r24
    2238:	20 83       	st	Z, r18
    223a:	20 91 42 08 	lds	r18, 0x0842	; 0x800842 <xTickCount>
    223e:	30 91 43 08 	lds	r19, 0x0843	; 0x800843 <xTickCount+0x1>
    2242:	32 83       	std	Z+2, r19	; 0x02
    2244:	21 83       	std	Z+1, r18	; 0x01
    2246:	08 95       	ret

00002248 <xTaskCheckForTimeOut>:
    2248:	cf 93       	push	r28
    224a:	df 93       	push	r29
    224c:	fc 01       	movw	r30, r24
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	0f 92       	push	r0
    2254:	20 91 42 08 	lds	r18, 0x0842	; 0x800842 <xTickCount>
    2258:	30 91 43 08 	lds	r19, 0x0843	; 0x800843 <xTickCount+0x1>
    225c:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <xNumOfOverflows>
    2260:	90 81       	ld	r25, Z
    2262:	98 17       	cp	r25, r24
    2264:	29 f0       	breq	.+10     	; 0x2270 <xTaskCheckForTimeOut+0x28>
    2266:	81 81       	ldd	r24, Z+1	; 0x01
    2268:	92 81       	ldd	r25, Z+2	; 0x02
    226a:	28 17       	cp	r18, r24
    226c:	39 07       	cpc	r19, r25
    226e:	b0 f4       	brcc	.+44     	; 0x229c <xTaskCheckForTimeOut+0x54>
    2270:	a1 81       	ldd	r26, Z+1	; 0x01
    2272:	b2 81       	ldd	r27, Z+2	; 0x02
    2274:	eb 01       	movw	r28, r22
    2276:	48 81       	ld	r20, Y
    2278:	59 81       	ldd	r21, Y+1	; 0x01
    227a:	c9 01       	movw	r24, r18
    227c:	8a 1b       	sub	r24, r26
    227e:	9b 0b       	sbc	r25, r27
    2280:	84 17       	cp	r24, r20
    2282:	95 07       	cpc	r25, r21
    2284:	68 f4       	brcc	.+26     	; 0x22a0 <xTaskCheckForTimeOut+0x58>
    2286:	cf 01       	movw	r24, r30
    2288:	a2 1b       	sub	r26, r18
    228a:	b3 0b       	sbc	r27, r19
    228c:	4a 0f       	add	r20, r26
    228e:	5b 1f       	adc	r21, r27
    2290:	59 83       	std	Y+1, r21	; 0x01
    2292:	48 83       	st	Y, r20
    2294:	0e 94 19 11 	call	0x2232	; 0x2232 <vTaskSetTimeOutState>
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	03 c0       	rjmp	.+6      	; 0x22a2 <xTaskCheckForTimeOut+0x5a>
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	01 c0       	rjmp	.+2      	; 0x22a2 <xTaskCheckForTimeOut+0x5a>
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	0f 90       	pop	r0
    22a4:	0f be       	out	0x3f, r0	; 63
    22a6:	df 91       	pop	r29
    22a8:	cf 91       	pop	r28
    22aa:	08 95       	ret

000022ac <vTaskMissedYield>:
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	80 93 3e 08 	sts	0x083E, r24	; 0x80083e <xYieldPending>
    22b2:	08 95       	ret

000022b4 <xTaskGetSchedulerState>:
    22b4:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <xSchedulerRunning>
    22b8:	88 23       	and	r24, r24
    22ba:	31 f0       	breq	.+12     	; 0x22c8 <xTaskGetSchedulerState+0x14>
    22bc:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <uxSchedulerSuspended>
    22c0:	88 23       	and	r24, r24
    22c2:	21 f0       	breq	.+8      	; 0x22cc <xTaskGetSchedulerState+0x18>
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	08 95       	ret
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	08 95       	ret
    22cc:	82 e0       	ldi	r24, 0x02	; 2
    22ce:	08 95       	ret

000022d0 <vTaskPriorityInherit>:
    22d0:	0f 93       	push	r16
    22d2:	1f 93       	push	r17
    22d4:	cf 93       	push	r28
    22d6:	df 93       	push	r29
    22d8:	fc 01       	movw	r30, r24
    22da:	89 2b       	or	r24, r25
    22dc:	09 f4       	brne	.+2      	; 0x22e0 <vTaskPriorityInherit+0x10>
    22de:	55 c0       	rjmp	.+170    	; 0x238a <vTaskPriorityInherit+0xba>
    22e0:	26 89       	ldd	r18, Z+22	; 0x16
    22e2:	a0 91 b6 08 	lds	r26, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    22e6:	b0 91 b7 08 	lds	r27, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    22ea:	56 96       	adiw	r26, 0x16	; 22
    22ec:	8c 91       	ld	r24, X
    22ee:	28 17       	cp	r18, r24
    22f0:	08 f0       	brcs	.+2      	; 0x22f4 <vTaskPriorityInherit+0x24>
    22f2:	4b c0       	rjmp	.+150    	; 0x238a <vTaskPriorityInherit+0xba>
    22f4:	84 85       	ldd	r24, Z+12	; 0x0c
    22f6:	95 85       	ldd	r25, Z+13	; 0x0d
    22f8:	99 23       	and	r25, r25
    22fa:	64 f0       	brlt	.+24     	; 0x2314 <vTaskPriorityInherit+0x44>
    22fc:	a0 91 b6 08 	lds	r26, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    2300:	b0 91 b7 08 	lds	r27, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    2304:	56 96       	adiw	r26, 0x16	; 22
    2306:	3c 91       	ld	r19, X
    2308:	88 e0       	ldi	r24, 0x08	; 8
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	83 1b       	sub	r24, r19
    230e:	91 09       	sbc	r25, r1
    2310:	95 87       	std	Z+13, r25	; 0x0d
    2312:	84 87       	std	Z+12, r24	; 0x0c
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	c9 01       	movw	r24, r18
    2318:	88 0f       	add	r24, r24
    231a:	99 1f       	adc	r25, r25
    231c:	88 0f       	add	r24, r24
    231e:	99 1f       	adc	r25, r25
    2320:	88 0f       	add	r24, r24
    2322:	99 1f       	adc	r25, r25
    2324:	28 0f       	add	r18, r24
    2326:	39 1f       	adc	r19, r25
    2328:	22 59       	subi	r18, 0x92	; 146
    232a:	37 4f       	sbci	r19, 0xF7	; 247
    232c:	82 85       	ldd	r24, Z+10	; 0x0a
    232e:	93 85       	ldd	r25, Z+11	; 0x0b
    2330:	82 17       	cp	r24, r18
    2332:	93 07       	cpc	r25, r19
    2334:	19 f5       	brne	.+70     	; 0x237c <vTaskPriorityInherit+0xac>
    2336:	8f 01       	movw	r16, r30
    2338:	ef 01       	movw	r28, r30
    233a:	22 96       	adiw	r28, 0x02	; 2
    233c:	ce 01       	movw	r24, r28
    233e:	0e 94 86 06 	call	0xd0c	; 0xd0c <uxListRemove>
    2342:	e0 91 b6 08 	lds	r30, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    2346:	f0 91 b7 08 	lds	r31, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    234a:	26 89       	ldd	r18, Z+22	; 0x16
    234c:	f8 01       	movw	r30, r16
    234e:	26 8b       	std	Z+22, r18	; 0x16
    2350:	80 91 41 08 	lds	r24, 0x0841	; 0x800841 <uxTopReadyPriority>
    2354:	82 17       	cp	r24, r18
    2356:	10 f4       	brcc	.+4      	; 0x235c <vTaskPriorityInherit+0x8c>
    2358:	20 93 41 08 	sts	0x0841, r18	; 0x800841 <uxTopReadyPriority>
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	c9 01       	movw	r24, r18
    2360:	88 0f       	add	r24, r24
    2362:	99 1f       	adc	r25, r25
    2364:	88 0f       	add	r24, r24
    2366:	99 1f       	adc	r25, r25
    2368:	88 0f       	add	r24, r24
    236a:	99 1f       	adc	r25, r25
    236c:	82 0f       	add	r24, r18
    236e:	93 1f       	adc	r25, r19
    2370:	be 01       	movw	r22, r28
    2372:	82 59       	subi	r24, 0x92	; 146
    2374:	97 4f       	sbci	r25, 0xF7	; 247
    2376:	0e 94 34 06 	call	0xc68	; 0xc68 <vListInsertEnd>
    237a:	07 c0       	rjmp	.+14     	; 0x238a <vTaskPriorityInherit+0xba>
    237c:	a0 91 b6 08 	lds	r26, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    2380:	b0 91 b7 08 	lds	r27, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    2384:	56 96       	adiw	r26, 0x16	; 22
    2386:	8c 91       	ld	r24, X
    2388:	86 8b       	std	Z+22, r24	; 0x16
    238a:	df 91       	pop	r29
    238c:	cf 91       	pop	r28
    238e:	1f 91       	pop	r17
    2390:	0f 91       	pop	r16
    2392:	08 95       	ret

00002394 <xTaskPriorityDisinherit>:
    2394:	0f 93       	push	r16
    2396:	1f 93       	push	r17
    2398:	cf 93       	push	r28
    239a:	df 93       	push	r29
    239c:	fc 01       	movw	r30, r24
    239e:	89 2b       	or	r24, r25
    23a0:	79 f1       	breq	.+94     	; 0x2400 <xTaskPriorityDisinherit+0x6c>
    23a2:	84 a1       	ldd	r24, Z+36	; 0x24
    23a4:	81 50       	subi	r24, 0x01	; 1
    23a6:	84 a3       	std	Z+36, r24	; 0x24
    23a8:	26 89       	ldd	r18, Z+22	; 0x16
    23aa:	93 a1       	ldd	r25, Z+35	; 0x23
    23ac:	29 17       	cp	r18, r25
    23ae:	51 f1       	breq	.+84     	; 0x2404 <xTaskPriorityDisinherit+0x70>
    23b0:	81 11       	cpse	r24, r1
    23b2:	2a c0       	rjmp	.+84     	; 0x2408 <xTaskPriorityDisinherit+0x74>
    23b4:	ef 01       	movw	r28, r30
    23b6:	8f 01       	movw	r16, r30
    23b8:	0e 5f       	subi	r16, 0xFE	; 254
    23ba:	1f 4f       	sbci	r17, 0xFF	; 255
    23bc:	c8 01       	movw	r24, r16
    23be:	0e 94 86 06 	call	0xd0c	; 0xd0c <uxListRemove>
    23c2:	2b a1       	ldd	r18, Y+35	; 0x23
    23c4:	2e 8b       	std	Y+22, r18	; 0x16
    23c6:	48 e0       	ldi	r20, 0x08	; 8
    23c8:	50 e0       	ldi	r21, 0x00	; 0
    23ca:	42 1b       	sub	r20, r18
    23cc:	51 09       	sbc	r21, r1
    23ce:	5d 87       	std	Y+13, r21	; 0x0d
    23d0:	4c 87       	std	Y+12, r20	; 0x0c
    23d2:	80 91 41 08 	lds	r24, 0x0841	; 0x800841 <uxTopReadyPriority>
    23d6:	82 17       	cp	r24, r18
    23d8:	10 f4       	brcc	.+4      	; 0x23de <xTaskPriorityDisinherit+0x4a>
    23da:	20 93 41 08 	sts	0x0841, r18	; 0x800841 <uxTopReadyPriority>
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	c9 01       	movw	r24, r18
    23e2:	88 0f       	add	r24, r24
    23e4:	99 1f       	adc	r25, r25
    23e6:	88 0f       	add	r24, r24
    23e8:	99 1f       	adc	r25, r25
    23ea:	88 0f       	add	r24, r24
    23ec:	99 1f       	adc	r25, r25
    23ee:	82 0f       	add	r24, r18
    23f0:	93 1f       	adc	r25, r19
    23f2:	b8 01       	movw	r22, r16
    23f4:	82 59       	subi	r24, 0x92	; 146
    23f6:	97 4f       	sbci	r25, 0xF7	; 247
    23f8:	0e 94 34 06 	call	0xc68	; 0xc68 <vListInsertEnd>
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	05 c0       	rjmp	.+10     	; 0x240a <xTaskPriorityDisinherit+0x76>
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	03 c0       	rjmp	.+6      	; 0x240a <xTaskPriorityDisinherit+0x76>
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	01 c0       	rjmp	.+2      	; 0x240a <xTaskPriorityDisinherit+0x76>
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	df 91       	pop	r29
    240c:	cf 91       	pop	r28
    240e:	1f 91       	pop	r17
    2410:	0f 91       	pop	r16
    2412:	08 95       	ret

00002414 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    2414:	80 91 b6 08 	lds	r24, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    2418:	90 91 b7 08 	lds	r25, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    241c:	89 2b       	or	r24, r25
    241e:	39 f0       	breq	.+14     	; 0x242e <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    2420:	e0 91 b6 08 	lds	r30, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    2424:	f0 91 b7 08 	lds	r31, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    2428:	84 a1       	ldd	r24, Z+36	; 0x24
    242a:	8f 5f       	subi	r24, 0xFF	; 255
    242c:	84 a3       	std	Z+36, r24	; 0x24
		}

		return pxCurrentTCB;
    242e:	80 91 b6 08 	lds	r24, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    2432:	90 91 b7 08 	lds	r25, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
	}
    2436:	08 95       	ret

00002438 <prvInsertTimerInActiveList>:
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
	}
    2438:	fc 01       	movw	r30, r24
    243a:	73 83       	std	Z+3, r23	; 0x03
    243c:	62 83       	std	Z+2, r22	; 0x02
    243e:	91 87       	std	Z+9, r25	; 0x09
    2440:	80 87       	std	Z+8, r24	; 0x08
    2442:	46 17       	cp	r20, r22
    2444:	57 07       	cpc	r21, r23
    2446:	90 f0       	brcs	.+36     	; 0x246c <prvInsertTimerInActiveList+0x34>
    2448:	42 1b       	sub	r20, r18
    244a:	53 0b       	sbc	r21, r19
    244c:	84 85       	ldd	r24, Z+12	; 0x0c
    244e:	95 85       	ldd	r25, Z+13	; 0x0d
    2450:	48 17       	cp	r20, r24
    2452:	59 07       	cpc	r21, r25
    2454:	e0 f4       	brcc	.+56     	; 0x248e <prvInsertTimerInActiveList+0x56>
    2456:	bf 01       	movw	r22, r30
    2458:	6e 5f       	subi	r22, 0xFE	; 254
    245a:	7f 4f       	sbci	r23, 0xFF	; 255
    245c:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <pxOverflowTimerList>
    2460:	90 91 bf 08 	lds	r25, 0x08BF	; 0x8008bf <pxOverflowTimerList+0x1>
    2464:	0e 94 55 06 	call	0xcaa	; 0xcaa <vListInsert>
    2468:	80 e0       	ldi	r24, 0x00	; 0
    246a:	08 95       	ret
    246c:	42 17       	cp	r20, r18
    246e:	53 07       	cpc	r21, r19
    2470:	18 f4       	brcc	.+6      	; 0x2478 <prvInsertTimerInActiveList+0x40>
    2472:	62 17       	cp	r22, r18
    2474:	73 07       	cpc	r23, r19
    2476:	68 f4       	brcc	.+26     	; 0x2492 <prvInsertTimerInActiveList+0x5a>
    2478:	bf 01       	movw	r22, r30
    247a:	6e 5f       	subi	r22, 0xFE	; 254
    247c:	7f 4f       	sbci	r23, 0xFF	; 255
    247e:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <pxCurrentTimerList>
    2482:	90 91 c1 08 	lds	r25, 0x08C1	; 0x8008c1 <pxCurrentTimerList+0x1>
    2486:	0e 94 55 06 	call	0xcaa	; 0xcaa <vListInsert>
    248a:	80 e0       	ldi	r24, 0x00	; 0
    248c:	08 95       	ret
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	08 95       	ret
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	08 95       	ret

00002496 <prvCheckForValidListAndQueue>:
    2496:	0f b6       	in	r0, 0x3f	; 63
    2498:	f8 94       	cli
    249a:	0f 92       	push	r0
    249c:	80 91 bc 08 	lds	r24, 0x08BC	; 0x8008bc <xTimerQueue>
    24a0:	90 91 bd 08 	lds	r25, 0x08BD	; 0x8008bd <xTimerQueue+0x1>
    24a4:	89 2b       	or	r24, r25
    24a6:	e9 f4       	brne	.+58     	; 0x24e2 <prvCheckForValidListAndQueue+0x4c>
    24a8:	8b ec       	ldi	r24, 0xCB	; 203
    24aa:	98 e0       	ldi	r25, 0x08	; 8
    24ac:	0e 94 22 06 	call	0xc44	; 0xc44 <vListInitialise>
    24b0:	82 ec       	ldi	r24, 0xC2	; 194
    24b2:	98 e0       	ldi	r25, 0x08	; 8
    24b4:	0e 94 22 06 	call	0xc44	; 0xc44 <vListInitialise>
    24b8:	8b ec       	ldi	r24, 0xCB	; 203
    24ba:	98 e0       	ldi	r25, 0x08	; 8
    24bc:	90 93 c1 08 	sts	0x08C1, r25	; 0x8008c1 <pxCurrentTimerList+0x1>
    24c0:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <pxCurrentTimerList>
    24c4:	82 ec       	ldi	r24, 0xC2	; 194
    24c6:	98 e0       	ldi	r25, 0x08	; 8
    24c8:	90 93 bf 08 	sts	0x08BF, r25	; 0x8008bf <pxOverflowTimerList+0x1>
    24cc:	80 93 be 08 	sts	0x08BE, r24	; 0x8008be <pxOverflowTimerList>
    24d0:	40 e0       	ldi	r20, 0x00	; 0
    24d2:	65 e0       	ldi	r22, 0x05	; 5
    24d4:	82 e0       	ldi	r24, 0x02	; 2
    24d6:	0e 94 cb 0a 	call	0x1596	; 0x1596 <xQueueGenericCreate>
    24da:	90 93 bd 08 	sts	0x08BD, r25	; 0x8008bd <xTimerQueue+0x1>
    24de:	80 93 bc 08 	sts	0x08BC, r24	; 0x8008bc <xTimerQueue>
    24e2:	0f 90       	pop	r0
    24e4:	0f be       	out	0x3f, r0	; 63
    24e6:	08 95       	ret

000024e8 <xTimerCreateTimerTask>:
    24e8:	ef 92       	push	r14
    24ea:	ff 92       	push	r15
    24ec:	0f 93       	push	r16
    24ee:	0e 94 4b 12 	call	0x2496	; 0x2496 <prvCheckForValidListAndQueue>
    24f2:	80 91 bc 08 	lds	r24, 0x08BC	; 0x8008bc <xTimerQueue>
    24f6:	90 91 bd 08 	lds	r25, 0x08BD	; 0x8008bd <xTimerQueue+0x1>
    24fa:	89 2b       	or	r24, r25
    24fc:	91 f0       	breq	.+36     	; 0x2522 <xTimerCreateTimerTask+0x3a>
    24fe:	0f 2e       	mov	r0, r31
    2500:	fa eb       	ldi	r31, 0xBA	; 186
    2502:	ef 2e       	mov	r14, r31
    2504:	f8 e0       	ldi	r31, 0x08	; 8
    2506:	ff 2e       	mov	r15, r31
    2508:	f0 2d       	mov	r31, r0
    250a:	07 e0       	ldi	r16, 0x07	; 7
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	42 e3       	ldi	r20, 0x32	; 50
    2512:	50 e0       	ldi	r21, 0x00	; 0
    2514:	63 e5       	ldi	r22, 0x53	; 83
    2516:	71 e0       	ldi	r23, 0x01	; 1
    2518:	8e e4       	ldi	r24, 0x4E	; 78
    251a:	93 e1       	ldi	r25, 0x13	; 19
    251c:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <xTaskCreate>
    2520:	01 c0       	rjmp	.+2      	; 0x2524 <xTimerCreateTimerTask+0x3c>
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	0f 91       	pop	r16
    2526:	ff 90       	pop	r15
    2528:	ef 90       	pop	r14
    252a:	08 95       	ret

0000252c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    252c:	0f 93       	push	r16
    252e:	1f 93       	push	r17
    2530:	cf 93       	push	r28
    2532:	df 93       	push	r29
    2534:	00 d0       	rcall	.+0      	; 0x2536 <xTimerGenericCommand+0xa>
    2536:	00 d0       	rcall	.+0      	; 0x2538 <xTimerGenericCommand+0xc>
    2538:	1f 92       	push	r1
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    253e:	e0 91 bc 08 	lds	r30, 0x08BC	; 0x8008bc <xTimerQueue>
    2542:	f0 91 bd 08 	lds	r31, 0x08BD	; 0x8008bd <xTimerQueue+0x1>
    2546:	30 97       	sbiw	r30, 0x00	; 0
    2548:	71 f1       	breq	.+92     	; 0x25a6 <xTimerGenericCommand+0x7a>
    254a:	d9 01       	movw	r26, r18
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    254c:	69 83       	std	Y+1, r22	; 0x01
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    254e:	5b 83       	std	Y+3, r21	; 0x03
    2550:	4a 83       	std	Y+2, r20	; 0x02
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    2552:	9d 83       	std	Y+5, r25	; 0x05
    2554:	8c 83       	std	Y+4, r24	; 0x04

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2556:	66 30       	cpi	r22, 0x06	; 6
    2558:	ec f4       	brge	.+58     	; 0x2594 <xTimerGenericCommand+0x68>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    255a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <xTaskGetSchedulerState>
    255e:	82 30       	cpi	r24, 0x02	; 2
    2560:	61 f4       	brne	.+24     	; 0x257a <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	a8 01       	movw	r20, r16
    2566:	be 01       	movw	r22, r28
    2568:	6f 5f       	subi	r22, 0xFF	; 255
    256a:	7f 4f       	sbci	r23, 0xFF	; 255
    256c:	80 91 bc 08 	lds	r24, 0x08BC	; 0x8008bc <xTimerQueue>
    2570:	90 91 bd 08 	lds	r25, 0x08BD	; 0x8008bd <xTimerQueue+0x1>
    2574:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <xQueueGenericSend>
    2578:	17 c0       	rjmp	.+46     	; 0x25a8 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	40 e0       	ldi	r20, 0x00	; 0
    257e:	50 e0       	ldi	r21, 0x00	; 0
    2580:	be 01       	movw	r22, r28
    2582:	6f 5f       	subi	r22, 0xFF	; 255
    2584:	7f 4f       	sbci	r23, 0xFF	; 255
    2586:	80 91 bc 08 	lds	r24, 0x08BC	; 0x8008bc <xTimerQueue>
    258a:	90 91 bd 08 	lds	r25, 0x08BD	; 0x8008bd <xTimerQueue+0x1>
    258e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <xQueueGenericSend>
    2592:	0a c0       	rjmp	.+20     	; 0x25a8 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	ad 01       	movw	r20, r26
    2598:	be 01       	movw	r22, r28
    259a:	6f 5f       	subi	r22, 0xFF	; 255
    259c:	7f 4f       	sbci	r23, 0xFF	; 255
    259e:	cf 01       	movw	r24, r30
    25a0:	0e 94 b7 0b 	call	0x176e	; 0x176e <xQueueGenericSendFromISR>
    25a4:	01 c0       	rjmp	.+2      	; 0x25a8 <xTimerGenericCommand+0x7c>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    25a6:	80 e0       	ldi	r24, 0x00	; 0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    25a8:	0f 90       	pop	r0
    25aa:	0f 90       	pop	r0
    25ac:	0f 90       	pop	r0
    25ae:	0f 90       	pop	r0
    25b0:	0f 90       	pop	r0
    25b2:	df 91       	pop	r29
    25b4:	cf 91       	pop	r28
    25b6:	1f 91       	pop	r17
    25b8:	0f 91       	pop	r16
    25ba:	08 95       	ret

000025bc <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    25bc:	af 92       	push	r10
    25be:	bf 92       	push	r11
    25c0:	cf 92       	push	r12
    25c2:	df 92       	push	r13
    25c4:	ef 92       	push	r14
    25c6:	ff 92       	push	r15
    25c8:	0f 93       	push	r16
    25ca:	1f 93       	push	r17
    25cc:	cf 93       	push	r28
    25ce:	df 93       	push	r29
    25d0:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    25d2:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <xTaskGetTickCount>
    25d6:	7c 01       	movw	r14, r24

	if( xTimeNow < xLastTime )
    25d8:	80 91 b8 08 	lds	r24, 0x08B8	; 0x8008b8 <xLastTime.2242>
    25dc:	90 91 b9 08 	lds	r25, 0x08B9	; 0x8008b9 <xLastTime.2242+0x1>
    25e0:	e8 16       	cp	r14, r24
    25e2:	f9 06       	cpc	r15, r25
    25e4:	08 f0       	brcs	.+2      	; 0x25e8 <prvSampleTimeNow+0x2c>
    25e6:	48 c0       	rjmp	.+144    	; 0x2678 <prvSampleTimeNow+0xbc>
    25e8:	30 c0       	rjmp	.+96     	; 0x264a <prvSampleTimeNow+0x8e>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    25ea:	05 80       	ldd	r0, Z+5	; 0x05
    25ec:	f6 81       	ldd	r31, Z+6	; 0x06
    25ee:	e0 2d       	mov	r30, r0
    25f0:	a0 80       	ld	r10, Z
    25f2:	b1 80       	ldd	r11, Z+1	; 0x01

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    25f4:	c6 81       	ldd	r28, Z+6	; 0x06
    25f6:	d7 81       	ldd	r29, Z+7	; 0x07
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    25f8:	8e 01       	movw	r16, r28
    25fa:	0e 5f       	subi	r16, 0xFE	; 254
    25fc:	1f 4f       	sbci	r17, 0xFF	; 255
    25fe:	c8 01       	movw	r24, r16
    2600:	0e 94 86 06 	call	0xd0c	; 0xd0c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2604:	e9 89       	ldd	r30, Y+17	; 0x11
    2606:	fa 89       	ldd	r31, Y+18	; 0x12
    2608:	ce 01       	movw	r24, r28
    260a:	09 95       	icall

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    260c:	8e 85       	ldd	r24, Y+14	; 0x0e
    260e:	81 30       	cpi	r24, 0x01	; 1
    2610:	e1 f4       	brne	.+56     	; 0x264a <prvSampleTimeNow+0x8e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2612:	8c 85       	ldd	r24, Y+12	; 0x0c
    2614:	9d 85       	ldd	r25, Y+13	; 0x0d
    2616:	8a 0d       	add	r24, r10
    2618:	9b 1d       	adc	r25, r11
			if( xReloadTime > xNextExpireTime )
    261a:	a8 16       	cp	r10, r24
    261c:	b9 06       	cpc	r11, r25
    261e:	60 f4       	brcc	.+24     	; 0x2638 <prvSampleTimeNow+0x7c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2620:	9b 83       	std	Y+3, r25	; 0x03
    2622:	8a 83       	std	Y+2, r24	; 0x02
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2624:	d9 87       	std	Y+9, r29	; 0x09
    2626:	c8 87       	std	Y+8, r28	; 0x08
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2628:	b8 01       	movw	r22, r16
    262a:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <pxCurrentTimerList>
    262e:	90 91 c1 08 	lds	r25, 0x08C1	; 0x8008c1 <pxCurrentTimerList+0x1>
    2632:	0e 94 55 06 	call	0xcaa	; 0xcaa <vListInsert>
    2636:	09 c0       	rjmp	.+18     	; 0x264a <prvSampleTimeNow+0x8e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2638:	00 e0       	ldi	r16, 0x00	; 0
    263a:	10 e0       	ldi	r17, 0x00	; 0
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	a5 01       	movw	r20, r10
    2642:	60 e0       	ldi	r22, 0x00	; 0
    2644:	ce 01       	movw	r24, r28
    2646:	0e 94 96 12 	call	0x252c	; 0x252c <xTimerGenericCommand>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    264a:	e0 91 c0 08 	lds	r30, 0x08C0	; 0x8008c0 <pxCurrentTimerList>
    264e:	f0 91 c1 08 	lds	r31, 0x08C1	; 0x8008c1 <pxCurrentTimerList+0x1>
    2652:	90 81       	ld	r25, Z
    2654:	91 11       	cpse	r25, r1
    2656:	c9 cf       	rjmp	.-110    	; 0x25ea <prvSampleTimeNow+0x2e>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
    2658:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <pxOverflowTimerList>
    265c:	90 91 bf 08 	lds	r25, 0x08BF	; 0x8008bf <pxOverflowTimerList+0x1>
    2660:	90 93 c1 08 	sts	0x08C1, r25	; 0x8008c1 <pxCurrentTimerList+0x1>
    2664:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <pxCurrentTimerList>
	pxOverflowTimerList = pxTemp;
    2668:	f0 93 bf 08 	sts	0x08BF, r31	; 0x8008bf <pxOverflowTimerList+0x1>
    266c:	e0 93 be 08 	sts	0x08BE, r30	; 0x8008be <pxOverflowTimerList>
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	f6 01       	movw	r30, r12
    2674:	80 83       	st	Z, r24
    2676:	02 c0       	rjmp	.+4      	; 0x267c <prvSampleTimeNow+0xc0>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    2678:	f6 01       	movw	r30, r12
    267a:	10 82       	st	Z, r1
	}

	xLastTime = xTimeNow;
    267c:	f0 92 b9 08 	sts	0x08B9, r15	; 0x8008b9 <xLastTime.2242+0x1>
    2680:	e0 92 b8 08 	sts	0x08B8, r14	; 0x8008b8 <xLastTime.2242>

	return xTimeNow;
}
    2684:	c7 01       	movw	r24, r14
    2686:	df 91       	pop	r29
    2688:	cf 91       	pop	r28
    268a:	1f 91       	pop	r17
    268c:	0f 91       	pop	r16
    268e:	ff 90       	pop	r15
    2690:	ef 90       	pop	r14
    2692:	df 90       	pop	r13
    2694:	cf 90       	pop	r12
    2696:	bf 90       	pop	r11
    2698:	af 90       	pop	r10
    269a:	08 95       	ret

0000269c <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    269c:	cf 93       	push	r28
    269e:	df 93       	push	r29
    26a0:	00 d0       	rcall	.+0      	; 0x26a2 <prvTimerTask+0x6>
    26a2:	00 d0       	rcall	.+0      	; 0x26a4 <prvTimerTask+0x8>
    26a4:	00 d0       	rcall	.+0      	; 0x26a6 <prvTimerTask+0xa>
    26a6:	cd b7       	in	r28, 0x3d	; 61
    26a8:	de b7       	in	r29, 0x3e	; 62
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    26aa:	ce 01       	movw	r24, r28
    26ac:	01 96       	adiw	r24, 0x01	; 1
    26ae:	4c 01       	movw	r8, r24
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    26b0:	44 24       	eor	r4, r4
    26b2:	43 94       	inc	r4
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    26b4:	e1 2c       	mov	r14, r1
    26b6:	f1 2c       	mov	r15, r1
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    26b8:	d1 2c       	mov	r13, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    26ba:	58 2e       	mov	r5, r24
    26bc:	c9 2c       	mov	r12, r9
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    26be:	e0 91 c0 08 	lds	r30, 0x08C0	; 0x8008c0 <pxCurrentTimerList>
    26c2:	f0 91 c1 08 	lds	r31, 0x08C1	; 0x8008c1 <pxCurrentTimerList+0x1>
	if( *pxListWasEmpty == pdFALSE )
    26c6:	80 81       	ld	r24, Z
    26c8:	88 23       	and	r24, r24
    26ca:	79 f0       	breq	.+30     	; 0x26ea <prvTimerTask+0x4e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    26cc:	05 80       	ldd	r0, Z+5	; 0x05
    26ce:	f6 81       	ldd	r31, Z+6	; 0x06
    26d0:	e0 2d       	mov	r30, r0
    26d2:	a0 80       	ld	r10, Z
    26d4:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    26d6:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    26da:	c4 01       	movw	r24, r8
    26dc:	0e 94 de 12 	call	0x25bc	; 0x25bc <prvSampleTimeNow>
    26e0:	8c 01       	movw	r16, r24
		if( xTimerListsWereSwitched == pdFALSE )
    26e2:	89 81       	ldd	r24, Y+1	; 0x01
    26e4:	88 23       	and	r24, r24
    26e6:	59 f0       	breq	.+22     	; 0x26fe <prvTimerTask+0x62>
    26e8:	5d c0       	rjmp	.+186    	; 0x27a4 <prvTimerTask+0x108>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    26ea:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    26ee:	c4 01       	movw	r24, r8
    26f0:	0e 94 de 12 	call	0x25bc	; 0x25bc <prvSampleTimeNow>
    26f4:	8c 01       	movw	r16, r24
		if( xTimerListsWereSwitched == pdFALSE )
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
    26f8:	88 23       	and	r24, r24
    26fa:	c1 f1       	breq	.+112    	; 0x276c <prvTimerTask+0xd0>
    26fc:	53 c0       	rjmp	.+166    	; 0x27a4 <prvTimerTask+0x108>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    26fe:	0a 15       	cp	r16, r10
    2700:	1b 05       	cpc	r17, r11
    2702:	08 f4       	brcc	.+2      	; 0x2706 <prvTimerTask+0x6a>
    2704:	3e c0       	rjmp	.+124    	; 0x2782 <prvTimerTask+0xe6>
			{
				( void ) xTaskResumeAll();
    2706:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    270a:	e0 91 c0 08 	lds	r30, 0x08C0	; 0x8008c0 <pxCurrentTimerList>
    270e:	f0 91 c1 08 	lds	r31, 0x08C1	; 0x8008c1 <pxCurrentTimerList+0x1>
    2712:	05 80       	ldd	r0, Z+5	; 0x05
    2714:	f6 81       	ldd	r31, Z+6	; 0x06
    2716:	e0 2d       	mov	r30, r0
    2718:	66 80       	ldd	r6, Z+6	; 0x06
    271a:	77 80       	ldd	r7, Z+7	; 0x07

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    271c:	c3 01       	movw	r24, r6
    271e:	02 96       	adiw	r24, 0x02	; 2
    2720:	0e 94 86 06 	call	0xd0c	; 0xd0c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2724:	d3 01       	movw	r26, r6
    2726:	1e 96       	adiw	r26, 0x0e	; 14
    2728:	8c 91       	ld	r24, X
    272a:	1e 97       	sbiw	r26, 0x0e	; 14
    272c:	81 30       	cpi	r24, 0x01	; 1
    272e:	b1 f4       	brne	.+44     	; 0x275c <prvTimerTask+0xc0>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2730:	1c 96       	adiw	r26, 0x0c	; 12
    2732:	6d 91       	ld	r22, X+
    2734:	7c 91       	ld	r23, X
    2736:	1d 97       	sbiw	r26, 0x0d	; 13
    2738:	6a 0d       	add	r22, r10
    273a:	7b 1d       	adc	r23, r11
    273c:	95 01       	movw	r18, r10
    273e:	a8 01       	movw	r20, r16
    2740:	c3 01       	movw	r24, r6
    2742:	0e 94 1c 12 	call	0x2438	; 0x2438 <prvInsertTimerInActiveList>
    2746:	88 23       	and	r24, r24
    2748:	49 f0       	breq	.+18     	; 0x275c <prvTimerTask+0xc0>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    274a:	0e 2d       	mov	r16, r14
    274c:	1f 2d       	mov	r17, r15
    274e:	2e 2d       	mov	r18, r14
    2750:	3f 2d       	mov	r19, r15
    2752:	a5 01       	movw	r20, r10
    2754:	6d 2d       	mov	r22, r13
    2756:	c3 01       	movw	r24, r6
    2758:	0e 94 96 12 	call	0x252c	; 0x252c <xTimerGenericCommand>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    275c:	d3 01       	movw	r26, r6
    275e:	51 96       	adiw	r26, 0x11	; 17
    2760:	ed 91       	ld	r30, X+
    2762:	fc 91       	ld	r31, X
    2764:	52 97       	sbiw	r26, 0x12	; 18
    2766:	c3 01       	movw	r24, r6
    2768:	09 95       	icall
    276a:	7c c0       	rjmp	.+248    	; 0x2864 <prvTimerTask+0x1c8>
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    276c:	e0 91 be 08 	lds	r30, 0x08BE	; 0x8008be <pxOverflowTimerList>
    2770:	f0 91 bf 08 	lds	r31, 0x08BF	; 0x8008bf <pxOverflowTimerList+0x1>
    2774:	44 2d       	mov	r20, r4
    2776:	80 81       	ld	r24, Z
    2778:	81 11       	cpse	r24, r1
    277a:	4d 2d       	mov	r20, r13
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    277c:	ae 2c       	mov	r10, r14
    277e:	bf 2c       	mov	r11, r15
    2780:	01 c0       	rjmp	.+2      	; 0x2784 <prvTimerTask+0xe8>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2782:	4d 2d       	mov	r20, r13
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2784:	b5 01       	movw	r22, r10
    2786:	60 1b       	sub	r22, r16
    2788:	71 0b       	sbc	r23, r17
    278a:	80 91 bc 08 	lds	r24, 0x08BC	; 0x8008bc <xTimerQueue>
    278e:	90 91 bd 08 	lds	r25, 0x08BD	; 0x8008bd <xTimerQueue+0x1>
    2792:	0e 94 bd 0c 	call	0x197a	; 0x197a <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
    2796:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <xTaskResumeAll>
    279a:	81 11       	cpse	r24, r1
    279c:	63 c0       	rjmp	.+198    	; 0x2864 <prvTimerTask+0x1c8>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
    279e:	0e 94 52 07 	call	0xea4	; 0xea4 <vPortYield>
    27a2:	60 c0       	rjmp	.+192    	; 0x2864 <prvTimerTask+0x1c8>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    27a4:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <xTaskResumeAll>
    27a8:	5d c0       	rjmp	.+186    	; 0x2864 <prvTimerTask+0x1c8>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
    27ac:	88 23       	and	r24, r24
    27ae:	0c f4       	brge	.+2      	; 0x27b2 <prvTimerTask+0x116>
    27b0:	59 c0       	rjmp	.+178    	; 0x2864 <prvTimerTask+0x1c8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    27b2:	ac 80       	ldd	r10, Y+4	; 0x04
    27b4:	bd 80       	ldd	r11, Y+5	; 0x05

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    27b6:	f5 01       	movw	r30, r10
    27b8:	82 85       	ldd	r24, Z+10	; 0x0a
    27ba:	93 85       	ldd	r25, Z+11	; 0x0b
    27bc:	89 2b       	or	r24, r25
    27be:	21 f0       	breq	.+8      	; 0x27c8 <prvTimerTask+0x12c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    27c0:	c5 01       	movw	r24, r10
    27c2:	02 96       	adiw	r24, 0x02	; 2
    27c4:	0e 94 86 06 	call	0xd0c	; 0xd0c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    27c8:	ce 01       	movw	r24, r28
    27ca:	06 96       	adiw	r24, 0x06	; 6
    27cc:	0e 94 de 12 	call	0x25bc	; 0x25bc <prvSampleTimeNow>

			switch( xMessage.xMessageID )
    27d0:	e9 81       	ldd	r30, Y+1	; 0x01
    27d2:	0e 2f       	mov	r16, r30
    27d4:	ee 0f       	add	r30, r30
    27d6:	11 0b       	sbc	r17, r17
    27d8:	22 0b       	sbc	r18, r18
    27da:	33 0b       	sbc	r19, r19
    27dc:	0a 30       	cpi	r16, 0x0A	; 10
    27de:	11 05       	cpc	r17, r1
    27e0:	08 f0       	brcs	.+2      	; 0x27e4 <prvTimerTask+0x148>
    27e2:	40 c0       	rjmp	.+128    	; 0x2864 <prvTimerTask+0x1c8>
    27e4:	f8 01       	movw	r30, r16
    27e6:	e2 5c       	subi	r30, 0xC2	; 194
    27e8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ea:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__tablejump2__>
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    27ee:	2a 81       	ldd	r18, Y+2	; 0x02
    27f0:	3b 81       	ldd	r19, Y+3	; 0x03
    27f2:	d5 01       	movw	r26, r10
    27f4:	1c 96       	adiw	r26, 0x0c	; 12
    27f6:	6d 91       	ld	r22, X+
    27f8:	7c 91       	ld	r23, X
    27fa:	1d 97       	sbiw	r26, 0x0d	; 13
    27fc:	62 0f       	add	r22, r18
    27fe:	73 1f       	adc	r23, r19
    2800:	ac 01       	movw	r20, r24
    2802:	c5 01       	movw	r24, r10
    2804:	0e 94 1c 12 	call	0x2438	; 0x2438 <prvInsertTimerInActiveList>
    2808:	88 23       	and	r24, r24
    280a:	61 f1       	breq	.+88     	; 0x2864 <prvTimerTask+0x1c8>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    280c:	d5 01       	movw	r26, r10
    280e:	51 96       	adiw	r26, 0x11	; 17
    2810:	ed 91       	ld	r30, X+
    2812:	fc 91       	ld	r31, X
    2814:	52 97       	sbiw	r26, 0x12	; 18
    2816:	c5 01       	movw	r24, r10
    2818:	09 95       	icall
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    281a:	f5 01       	movw	r30, r10
    281c:	86 85       	ldd	r24, Z+14	; 0x0e
    281e:	81 30       	cpi	r24, 0x01	; 1
    2820:	09 f5       	brne	.+66     	; 0x2864 <prvTimerTask+0x1c8>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2822:	44 85       	ldd	r20, Z+12	; 0x0c
    2824:	55 85       	ldd	r21, Z+13	; 0x0d
    2826:	8a 81       	ldd	r24, Y+2	; 0x02
    2828:	9b 81       	ldd	r25, Y+3	; 0x03
    282a:	48 0f       	add	r20, r24
    282c:	59 1f       	adc	r21, r25
    282e:	0e 2d       	mov	r16, r14
    2830:	1f 2d       	mov	r17, r15
    2832:	2e 2d       	mov	r18, r14
    2834:	3f 2d       	mov	r19, r15
    2836:	6d 2d       	mov	r22, r13
    2838:	c5 01       	movw	r24, r10
    283a:	0e 94 96 12 	call	0x252c	; 0x252c <xTimerGenericCommand>
    283e:	12 c0       	rjmp	.+36     	; 0x2864 <prvTimerTask+0x1c8>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2840:	6a 81       	ldd	r22, Y+2	; 0x02
    2842:	7b 81       	ldd	r23, Y+3	; 0x03
    2844:	d5 01       	movw	r26, r10
    2846:	1d 96       	adiw	r26, 0x0d	; 13
    2848:	7c 93       	st	X, r23
    284a:	6e 93       	st	-X, r22
    284c:	1c 97       	sbiw	r26, 0x0c	; 12
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    284e:	68 0f       	add	r22, r24
    2850:	79 1f       	adc	r23, r25
    2852:	9c 01       	movw	r18, r24
    2854:	ac 01       	movw	r20, r24
    2856:	c5 01       	movw	r24, r10
    2858:	0e 94 1c 12 	call	0x2438	; 0x2438 <prvInsertTimerInActiveList>
    285c:	03 c0       	rjmp	.+6      	; 0x2864 <prvTimerTask+0x1c8>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
    285e:	c5 01       	movw	r24, r10
    2860:	0e 94 3f 08 	call	0x107e	; 0x107e <vPortFree>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2864:	2d 2d       	mov	r18, r13
    2866:	4e 2d       	mov	r20, r14
    2868:	5f 2d       	mov	r21, r15
    286a:	65 2d       	mov	r22, r5
    286c:	7c 2d       	mov	r23, r12
    286e:	80 91 bc 08 	lds	r24, 0x08BC	; 0x8008bc <xTimerQueue>
    2872:	90 91 bd 08 	lds	r25, 0x08BD	; 0x8008bd <xTimerQueue+0x1>
    2876:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <xQueueGenericReceive>
    287a:	81 11       	cpse	r24, r1
    287c:	96 cf       	rjmp	.-212    	; 0x27aa <prvTimerTask+0x10e>
    287e:	1f cf       	rjmp	.-450    	; 0x26be <prvTimerTask+0x22>

00002880 <__udivmodsi4>:
    2880:	a1 e2       	ldi	r26, 0x21	; 33
    2882:	1a 2e       	mov	r1, r26
    2884:	aa 1b       	sub	r26, r26
    2886:	bb 1b       	sub	r27, r27
    2888:	fd 01       	movw	r30, r26
    288a:	0d c0       	rjmp	.+26     	; 0x28a6 <__udivmodsi4_ep>

0000288c <__udivmodsi4_loop>:
    288c:	aa 1f       	adc	r26, r26
    288e:	bb 1f       	adc	r27, r27
    2890:	ee 1f       	adc	r30, r30
    2892:	ff 1f       	adc	r31, r31
    2894:	a2 17       	cp	r26, r18
    2896:	b3 07       	cpc	r27, r19
    2898:	e4 07       	cpc	r30, r20
    289a:	f5 07       	cpc	r31, r21
    289c:	20 f0       	brcs	.+8      	; 0x28a6 <__udivmodsi4_ep>
    289e:	a2 1b       	sub	r26, r18
    28a0:	b3 0b       	sbc	r27, r19
    28a2:	e4 0b       	sbc	r30, r20
    28a4:	f5 0b       	sbc	r31, r21

000028a6 <__udivmodsi4_ep>:
    28a6:	66 1f       	adc	r22, r22
    28a8:	77 1f       	adc	r23, r23
    28aa:	88 1f       	adc	r24, r24
    28ac:	99 1f       	adc	r25, r25
    28ae:	1a 94       	dec	r1
    28b0:	69 f7       	brne	.-38     	; 0x288c <__udivmodsi4_loop>
    28b2:	60 95       	com	r22
    28b4:	70 95       	com	r23
    28b6:	80 95       	com	r24
    28b8:	90 95       	com	r25
    28ba:	9b 01       	movw	r18, r22
    28bc:	ac 01       	movw	r20, r24
    28be:	bd 01       	movw	r22, r26
    28c0:	cf 01       	movw	r24, r30
    28c2:	08 95       	ret

000028c4 <__tablejump2__>:
    28c4:	ee 0f       	add	r30, r30
    28c6:	ff 1f       	adc	r31, r31
    28c8:	05 90       	lpm	r0, Z+
    28ca:	f4 91       	lpm	r31, Z
    28cc:	e0 2d       	mov	r30, r0
    28ce:	09 94       	ijmp

000028d0 <malloc>:
    28d0:	cf 93       	push	r28
    28d2:	df 93       	push	r29
    28d4:	82 30       	cpi	r24, 0x02	; 2
    28d6:	91 05       	cpc	r25, r1
    28d8:	10 f4       	brcc	.+4      	; 0x28de <malloc+0xe>
    28da:	82 e0       	ldi	r24, 0x02	; 2
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	e0 91 d6 08 	lds	r30, 0x08D6	; 0x8008d6 <__flp>
    28e2:	f0 91 d7 08 	lds	r31, 0x08D7	; 0x8008d7 <__flp+0x1>
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	c0 e0       	ldi	r28, 0x00	; 0
    28ec:	d0 e0       	ldi	r29, 0x00	; 0
    28ee:	30 97       	sbiw	r30, 0x00	; 0
    28f0:	11 f1       	breq	.+68     	; 0x2936 <malloc+0x66>
    28f2:	40 81       	ld	r20, Z
    28f4:	51 81       	ldd	r21, Z+1	; 0x01
    28f6:	48 17       	cp	r20, r24
    28f8:	59 07       	cpc	r21, r25
    28fa:	c0 f0       	brcs	.+48     	; 0x292c <malloc+0x5c>
    28fc:	48 17       	cp	r20, r24
    28fe:	59 07       	cpc	r21, r25
    2900:	61 f4       	brne	.+24     	; 0x291a <malloc+0x4a>
    2902:	82 81       	ldd	r24, Z+2	; 0x02
    2904:	93 81       	ldd	r25, Z+3	; 0x03
    2906:	20 97       	sbiw	r28, 0x00	; 0
    2908:	19 f0       	breq	.+6      	; 0x2910 <malloc+0x40>
    290a:	9b 83       	std	Y+3, r25	; 0x03
    290c:	8a 83       	std	Y+2, r24	; 0x02
    290e:	2b c0       	rjmp	.+86     	; 0x2966 <malloc+0x96>
    2910:	90 93 d7 08 	sts	0x08D7, r25	; 0x8008d7 <__flp+0x1>
    2914:	80 93 d6 08 	sts	0x08D6, r24	; 0x8008d6 <__flp>
    2918:	26 c0       	rjmp	.+76     	; 0x2966 <malloc+0x96>
    291a:	21 15       	cp	r18, r1
    291c:	31 05       	cpc	r19, r1
    291e:	19 f0       	breq	.+6      	; 0x2926 <malloc+0x56>
    2920:	42 17       	cp	r20, r18
    2922:	53 07       	cpc	r21, r19
    2924:	18 f4       	brcc	.+6      	; 0x292c <malloc+0x5c>
    2926:	9a 01       	movw	r18, r20
    2928:	be 01       	movw	r22, r28
    292a:	df 01       	movw	r26, r30
    292c:	ef 01       	movw	r28, r30
    292e:	02 80       	ldd	r0, Z+2	; 0x02
    2930:	f3 81       	ldd	r31, Z+3	; 0x03
    2932:	e0 2d       	mov	r30, r0
    2934:	dc cf       	rjmp	.-72     	; 0x28ee <malloc+0x1e>
    2936:	21 15       	cp	r18, r1
    2938:	31 05       	cpc	r19, r1
    293a:	09 f1       	breq	.+66     	; 0x297e <malloc+0xae>
    293c:	28 1b       	sub	r18, r24
    293e:	39 0b       	sbc	r19, r25
    2940:	24 30       	cpi	r18, 0x04	; 4
    2942:	31 05       	cpc	r19, r1
    2944:	90 f4       	brcc	.+36     	; 0x296a <malloc+0x9a>
    2946:	12 96       	adiw	r26, 0x02	; 2
    2948:	8d 91       	ld	r24, X+
    294a:	9c 91       	ld	r25, X
    294c:	13 97       	sbiw	r26, 0x03	; 3
    294e:	61 15       	cp	r22, r1
    2950:	71 05       	cpc	r23, r1
    2952:	21 f0       	breq	.+8      	; 0x295c <malloc+0x8c>
    2954:	fb 01       	movw	r30, r22
    2956:	93 83       	std	Z+3, r25	; 0x03
    2958:	82 83       	std	Z+2, r24	; 0x02
    295a:	04 c0       	rjmp	.+8      	; 0x2964 <malloc+0x94>
    295c:	90 93 d7 08 	sts	0x08D7, r25	; 0x8008d7 <__flp+0x1>
    2960:	80 93 d6 08 	sts	0x08D6, r24	; 0x8008d6 <__flp>
    2964:	fd 01       	movw	r30, r26
    2966:	32 96       	adiw	r30, 0x02	; 2
    2968:	44 c0       	rjmp	.+136    	; 0x29f2 <malloc+0x122>
    296a:	fd 01       	movw	r30, r26
    296c:	e2 0f       	add	r30, r18
    296e:	f3 1f       	adc	r31, r19
    2970:	81 93       	st	Z+, r24
    2972:	91 93       	st	Z+, r25
    2974:	22 50       	subi	r18, 0x02	; 2
    2976:	31 09       	sbc	r19, r1
    2978:	2d 93       	st	X+, r18
    297a:	3c 93       	st	X, r19
    297c:	3a c0       	rjmp	.+116    	; 0x29f2 <malloc+0x122>
    297e:	20 91 d4 08 	lds	r18, 0x08D4	; 0x8008d4 <__brkval>
    2982:	30 91 d5 08 	lds	r19, 0x08D5	; 0x8008d5 <__brkval+0x1>
    2986:	23 2b       	or	r18, r19
    2988:	41 f4       	brne	.+16     	; 0x299a <malloc+0xca>
    298a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    298e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2992:	30 93 d5 08 	sts	0x08D5, r19	; 0x8008d5 <__brkval+0x1>
    2996:	20 93 d4 08 	sts	0x08D4, r18	; 0x8008d4 <__brkval>
    299a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    299e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    29a2:	21 15       	cp	r18, r1
    29a4:	31 05       	cpc	r19, r1
    29a6:	41 f4       	brne	.+16     	; 0x29b8 <malloc+0xe8>
    29a8:	2d b7       	in	r18, 0x3d	; 61
    29aa:	3e b7       	in	r19, 0x3e	; 62
    29ac:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    29b0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    29b4:	24 1b       	sub	r18, r20
    29b6:	35 0b       	sbc	r19, r21
    29b8:	e0 91 d4 08 	lds	r30, 0x08D4	; 0x8008d4 <__brkval>
    29bc:	f0 91 d5 08 	lds	r31, 0x08D5	; 0x8008d5 <__brkval+0x1>
    29c0:	e2 17       	cp	r30, r18
    29c2:	f3 07       	cpc	r31, r19
    29c4:	a0 f4       	brcc	.+40     	; 0x29ee <malloc+0x11e>
    29c6:	2e 1b       	sub	r18, r30
    29c8:	3f 0b       	sbc	r19, r31
    29ca:	28 17       	cp	r18, r24
    29cc:	39 07       	cpc	r19, r25
    29ce:	78 f0       	brcs	.+30     	; 0x29ee <malloc+0x11e>
    29d0:	ac 01       	movw	r20, r24
    29d2:	4e 5f       	subi	r20, 0xFE	; 254
    29d4:	5f 4f       	sbci	r21, 0xFF	; 255
    29d6:	24 17       	cp	r18, r20
    29d8:	35 07       	cpc	r19, r21
    29da:	48 f0       	brcs	.+18     	; 0x29ee <malloc+0x11e>
    29dc:	4e 0f       	add	r20, r30
    29de:	5f 1f       	adc	r21, r31
    29e0:	50 93 d5 08 	sts	0x08D5, r21	; 0x8008d5 <__brkval+0x1>
    29e4:	40 93 d4 08 	sts	0x08D4, r20	; 0x8008d4 <__brkval>
    29e8:	81 93       	st	Z+, r24
    29ea:	91 93       	st	Z+, r25
    29ec:	02 c0       	rjmp	.+4      	; 0x29f2 <malloc+0x122>
    29ee:	e0 e0       	ldi	r30, 0x00	; 0
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	cf 01       	movw	r24, r30
    29f4:	df 91       	pop	r29
    29f6:	cf 91       	pop	r28
    29f8:	08 95       	ret

000029fa <free>:
    29fa:	0f 93       	push	r16
    29fc:	1f 93       	push	r17
    29fe:	cf 93       	push	r28
    2a00:	df 93       	push	r29
    2a02:	00 97       	sbiw	r24, 0x00	; 0
    2a04:	09 f4       	brne	.+2      	; 0x2a08 <free+0xe>
    2a06:	8c c0       	rjmp	.+280    	; 0x2b20 <free+0x126>
    2a08:	fc 01       	movw	r30, r24
    2a0a:	32 97       	sbiw	r30, 0x02	; 2
    2a0c:	13 82       	std	Z+3, r1	; 0x03
    2a0e:	12 82       	std	Z+2, r1	; 0x02
    2a10:	00 91 d6 08 	lds	r16, 0x08D6	; 0x8008d6 <__flp>
    2a14:	10 91 d7 08 	lds	r17, 0x08D7	; 0x8008d7 <__flp+0x1>
    2a18:	01 15       	cp	r16, r1
    2a1a:	11 05       	cpc	r17, r1
    2a1c:	81 f4       	brne	.+32     	; 0x2a3e <free+0x44>
    2a1e:	20 81       	ld	r18, Z
    2a20:	31 81       	ldd	r19, Z+1	; 0x01
    2a22:	82 0f       	add	r24, r18
    2a24:	93 1f       	adc	r25, r19
    2a26:	20 91 d4 08 	lds	r18, 0x08D4	; 0x8008d4 <__brkval>
    2a2a:	30 91 d5 08 	lds	r19, 0x08D5	; 0x8008d5 <__brkval+0x1>
    2a2e:	28 17       	cp	r18, r24
    2a30:	39 07       	cpc	r19, r25
    2a32:	79 f5       	brne	.+94     	; 0x2a92 <free+0x98>
    2a34:	f0 93 d5 08 	sts	0x08D5, r31	; 0x8008d5 <__brkval+0x1>
    2a38:	e0 93 d4 08 	sts	0x08D4, r30	; 0x8008d4 <__brkval>
    2a3c:	71 c0       	rjmp	.+226    	; 0x2b20 <free+0x126>
    2a3e:	d8 01       	movw	r26, r16
    2a40:	40 e0       	ldi	r20, 0x00	; 0
    2a42:	50 e0       	ldi	r21, 0x00	; 0
    2a44:	ae 17       	cp	r26, r30
    2a46:	bf 07       	cpc	r27, r31
    2a48:	50 f4       	brcc	.+20     	; 0x2a5e <free+0x64>
    2a4a:	12 96       	adiw	r26, 0x02	; 2
    2a4c:	2d 91       	ld	r18, X+
    2a4e:	3c 91       	ld	r19, X
    2a50:	13 97       	sbiw	r26, 0x03	; 3
    2a52:	ad 01       	movw	r20, r26
    2a54:	21 15       	cp	r18, r1
    2a56:	31 05       	cpc	r19, r1
    2a58:	09 f1       	breq	.+66     	; 0x2a9c <free+0xa2>
    2a5a:	d9 01       	movw	r26, r18
    2a5c:	f3 cf       	rjmp	.-26     	; 0x2a44 <free+0x4a>
    2a5e:	9d 01       	movw	r18, r26
    2a60:	da 01       	movw	r26, r20
    2a62:	33 83       	std	Z+3, r19	; 0x03
    2a64:	22 83       	std	Z+2, r18	; 0x02
    2a66:	60 81       	ld	r22, Z
    2a68:	71 81       	ldd	r23, Z+1	; 0x01
    2a6a:	86 0f       	add	r24, r22
    2a6c:	97 1f       	adc	r25, r23
    2a6e:	82 17       	cp	r24, r18
    2a70:	93 07       	cpc	r25, r19
    2a72:	69 f4       	brne	.+26     	; 0x2a8e <free+0x94>
    2a74:	ec 01       	movw	r28, r24
    2a76:	28 81       	ld	r18, Y
    2a78:	39 81       	ldd	r19, Y+1	; 0x01
    2a7a:	26 0f       	add	r18, r22
    2a7c:	37 1f       	adc	r19, r23
    2a7e:	2e 5f       	subi	r18, 0xFE	; 254
    2a80:	3f 4f       	sbci	r19, 0xFF	; 255
    2a82:	31 83       	std	Z+1, r19	; 0x01
    2a84:	20 83       	st	Z, r18
    2a86:	8a 81       	ldd	r24, Y+2	; 0x02
    2a88:	9b 81       	ldd	r25, Y+3	; 0x03
    2a8a:	93 83       	std	Z+3, r25	; 0x03
    2a8c:	82 83       	std	Z+2, r24	; 0x02
    2a8e:	45 2b       	or	r20, r21
    2a90:	29 f4       	brne	.+10     	; 0x2a9c <free+0xa2>
    2a92:	f0 93 d7 08 	sts	0x08D7, r31	; 0x8008d7 <__flp+0x1>
    2a96:	e0 93 d6 08 	sts	0x08D6, r30	; 0x8008d6 <__flp>
    2a9a:	42 c0       	rjmp	.+132    	; 0x2b20 <free+0x126>
    2a9c:	13 96       	adiw	r26, 0x03	; 3
    2a9e:	fc 93       	st	X, r31
    2aa0:	ee 93       	st	-X, r30
    2aa2:	12 97       	sbiw	r26, 0x02	; 2
    2aa4:	ed 01       	movw	r28, r26
    2aa6:	49 91       	ld	r20, Y+
    2aa8:	59 91       	ld	r21, Y+
    2aaa:	9e 01       	movw	r18, r28
    2aac:	24 0f       	add	r18, r20
    2aae:	35 1f       	adc	r19, r21
    2ab0:	e2 17       	cp	r30, r18
    2ab2:	f3 07       	cpc	r31, r19
    2ab4:	71 f4       	brne	.+28     	; 0x2ad2 <free+0xd8>
    2ab6:	80 81       	ld	r24, Z
    2ab8:	91 81       	ldd	r25, Z+1	; 0x01
    2aba:	84 0f       	add	r24, r20
    2abc:	95 1f       	adc	r25, r21
    2abe:	02 96       	adiw	r24, 0x02	; 2
    2ac0:	11 96       	adiw	r26, 0x01	; 1
    2ac2:	9c 93       	st	X, r25
    2ac4:	8e 93       	st	-X, r24
    2ac6:	82 81       	ldd	r24, Z+2	; 0x02
    2ac8:	93 81       	ldd	r25, Z+3	; 0x03
    2aca:	13 96       	adiw	r26, 0x03	; 3
    2acc:	9c 93       	st	X, r25
    2ace:	8e 93       	st	-X, r24
    2ad0:	12 97       	sbiw	r26, 0x02	; 2
    2ad2:	e0 e0       	ldi	r30, 0x00	; 0
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	d8 01       	movw	r26, r16
    2ad8:	12 96       	adiw	r26, 0x02	; 2
    2ada:	8d 91       	ld	r24, X+
    2adc:	9c 91       	ld	r25, X
    2ade:	13 97       	sbiw	r26, 0x03	; 3
    2ae0:	00 97       	sbiw	r24, 0x00	; 0
    2ae2:	19 f0       	breq	.+6      	; 0x2aea <free+0xf0>
    2ae4:	f8 01       	movw	r30, r16
    2ae6:	8c 01       	movw	r16, r24
    2ae8:	f6 cf       	rjmp	.-20     	; 0x2ad6 <free+0xdc>
    2aea:	8d 91       	ld	r24, X+
    2aec:	9c 91       	ld	r25, X
    2aee:	98 01       	movw	r18, r16
    2af0:	2e 5f       	subi	r18, 0xFE	; 254
    2af2:	3f 4f       	sbci	r19, 0xFF	; 255
    2af4:	82 0f       	add	r24, r18
    2af6:	93 1f       	adc	r25, r19
    2af8:	20 91 d4 08 	lds	r18, 0x08D4	; 0x8008d4 <__brkval>
    2afc:	30 91 d5 08 	lds	r19, 0x08D5	; 0x8008d5 <__brkval+0x1>
    2b00:	28 17       	cp	r18, r24
    2b02:	39 07       	cpc	r19, r25
    2b04:	69 f4       	brne	.+26     	; 0x2b20 <free+0x126>
    2b06:	30 97       	sbiw	r30, 0x00	; 0
    2b08:	29 f4       	brne	.+10     	; 0x2b14 <free+0x11a>
    2b0a:	10 92 d7 08 	sts	0x08D7, r1	; 0x8008d7 <__flp+0x1>
    2b0e:	10 92 d6 08 	sts	0x08D6, r1	; 0x8008d6 <__flp>
    2b12:	02 c0       	rjmp	.+4      	; 0x2b18 <free+0x11e>
    2b14:	13 82       	std	Z+3, r1	; 0x03
    2b16:	12 82       	std	Z+2, r1	; 0x02
    2b18:	10 93 d5 08 	sts	0x08D5, r17	; 0x8008d5 <__brkval+0x1>
    2b1c:	00 93 d4 08 	sts	0x08D4, r16	; 0x8008d4 <__brkval>
    2b20:	df 91       	pop	r29
    2b22:	cf 91       	pop	r28
    2b24:	1f 91       	pop	r17
    2b26:	0f 91       	pop	r16
    2b28:	08 95       	ret

00002b2a <do_rand>:
    2b2a:	8f 92       	push	r8
    2b2c:	9f 92       	push	r9
    2b2e:	af 92       	push	r10
    2b30:	bf 92       	push	r11
    2b32:	cf 92       	push	r12
    2b34:	df 92       	push	r13
    2b36:	ef 92       	push	r14
    2b38:	ff 92       	push	r15
    2b3a:	cf 93       	push	r28
    2b3c:	df 93       	push	r29
    2b3e:	ec 01       	movw	r28, r24
    2b40:	68 81       	ld	r22, Y
    2b42:	79 81       	ldd	r23, Y+1	; 0x01
    2b44:	8a 81       	ldd	r24, Y+2	; 0x02
    2b46:	9b 81       	ldd	r25, Y+3	; 0x03
    2b48:	61 15       	cp	r22, r1
    2b4a:	71 05       	cpc	r23, r1
    2b4c:	81 05       	cpc	r24, r1
    2b4e:	91 05       	cpc	r25, r1
    2b50:	21 f4       	brne	.+8      	; 0x2b5a <do_rand+0x30>
    2b52:	64 e2       	ldi	r22, 0x24	; 36
    2b54:	79 ed       	ldi	r23, 0xD9	; 217
    2b56:	8b e5       	ldi	r24, 0x5B	; 91
    2b58:	97 e0       	ldi	r25, 0x07	; 7
    2b5a:	2d e1       	ldi	r18, 0x1D	; 29
    2b5c:	33 ef       	ldi	r19, 0xF3	; 243
    2b5e:	41 e0       	ldi	r20, 0x01	; 1
    2b60:	50 e0       	ldi	r21, 0x00	; 0
    2b62:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__divmodsi4>
    2b66:	49 01       	movw	r8, r18
    2b68:	5a 01       	movw	r10, r20
    2b6a:	9b 01       	movw	r18, r22
    2b6c:	ac 01       	movw	r20, r24
    2b6e:	a7 ea       	ldi	r26, 0xA7	; 167
    2b70:	b1 e4       	ldi	r27, 0x41	; 65
    2b72:	0e 94 20 16 	call	0x2c40	; 0x2c40 <__muluhisi3>
    2b76:	6b 01       	movw	r12, r22
    2b78:	7c 01       	movw	r14, r24
    2b7a:	ac ee       	ldi	r26, 0xEC	; 236
    2b7c:	b4 ef       	ldi	r27, 0xF4	; 244
    2b7e:	a5 01       	movw	r20, r10
    2b80:	94 01       	movw	r18, r8
    2b82:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <__mulohisi3>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	8c 0d       	add	r24, r12
    2b8c:	9d 1d       	adc	r25, r13
    2b8e:	ae 1d       	adc	r26, r14
    2b90:	bf 1d       	adc	r27, r15
    2b92:	b7 ff       	sbrs	r27, 7
    2b94:	03 c0       	rjmp	.+6      	; 0x2b9c <do_rand+0x72>
    2b96:	01 97       	sbiw	r24, 0x01	; 1
    2b98:	a1 09       	sbc	r26, r1
    2b9a:	b0 48       	sbci	r27, 0x80	; 128
    2b9c:	88 83       	st	Y, r24
    2b9e:	99 83       	std	Y+1, r25	; 0x01
    2ba0:	aa 83       	std	Y+2, r26	; 0x02
    2ba2:	bb 83       	std	Y+3, r27	; 0x03
    2ba4:	9f 77       	andi	r25, 0x7F	; 127
    2ba6:	df 91       	pop	r29
    2ba8:	cf 91       	pop	r28
    2baa:	ff 90       	pop	r15
    2bac:	ef 90       	pop	r14
    2bae:	df 90       	pop	r13
    2bb0:	cf 90       	pop	r12
    2bb2:	bf 90       	pop	r11
    2bb4:	af 90       	pop	r10
    2bb6:	9f 90       	pop	r9
    2bb8:	8f 90       	pop	r8
    2bba:	08 95       	ret

00002bbc <rand_r>:
    2bbc:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <do_rand>
    2bc0:	08 95       	ret

00002bc2 <rand>:
    2bc2:	86 e0       	ldi	r24, 0x06	; 6
    2bc4:	91 e0       	ldi	r25, 0x01	; 1
    2bc6:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <do_rand>
    2bca:	08 95       	ret

00002bcc <srand>:
    2bcc:	a0 e0       	ldi	r26, 0x00	; 0
    2bce:	b0 e0       	ldi	r27, 0x00	; 0
    2bd0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    2bd4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    2bd8:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    2bdc:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    2be0:	08 95       	ret

00002be2 <memcpy>:
    2be2:	fb 01       	movw	r30, r22
    2be4:	dc 01       	movw	r26, r24
    2be6:	02 c0       	rjmp	.+4      	; 0x2bec <memcpy+0xa>
    2be8:	01 90       	ld	r0, Z+
    2bea:	0d 92       	st	X+, r0
    2bec:	41 50       	subi	r20, 0x01	; 1
    2bee:	50 40       	sbci	r21, 0x00	; 0
    2bf0:	d8 f7       	brcc	.-10     	; 0x2be8 <memcpy+0x6>
    2bf2:	08 95       	ret

00002bf4 <memset>:
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	01 c0       	rjmp	.+2      	; 0x2bfa <memset+0x6>
    2bf8:	6d 93       	st	X+, r22
    2bfa:	41 50       	subi	r20, 0x01	; 1
    2bfc:	50 40       	sbci	r21, 0x00	; 0
    2bfe:	e0 f7       	brcc	.-8      	; 0x2bf8 <memset+0x4>
    2c00:	08 95       	ret

00002c02 <__divmodsi4>:
    2c02:	05 2e       	mov	r0, r21
    2c04:	97 fb       	bst	r25, 7
    2c06:	1e f4       	brtc	.+6      	; 0x2c0e <__divmodsi4+0xc>
    2c08:	00 94       	com	r0
    2c0a:	0e 94 18 16 	call	0x2c30	; 0x2c30 <__negsi2>
    2c0e:	57 fd       	sbrc	r21, 7
    2c10:	07 d0       	rcall	.+14     	; 0x2c20 <__divmodsi4_neg2>
    2c12:	0e 94 40 14 	call	0x2880	; 0x2880 <__udivmodsi4>
    2c16:	07 fc       	sbrc	r0, 7
    2c18:	03 d0       	rcall	.+6      	; 0x2c20 <__divmodsi4_neg2>
    2c1a:	4e f4       	brtc	.+18     	; 0x2c2e <__divmodsi4_exit>
    2c1c:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <__negsi2>

00002c20 <__divmodsi4_neg2>:
    2c20:	50 95       	com	r21
    2c22:	40 95       	com	r20
    2c24:	30 95       	com	r19
    2c26:	21 95       	neg	r18
    2c28:	3f 4f       	sbci	r19, 0xFF	; 255
    2c2a:	4f 4f       	sbci	r20, 0xFF	; 255
    2c2c:	5f 4f       	sbci	r21, 0xFF	; 255

00002c2e <__divmodsi4_exit>:
    2c2e:	08 95       	ret

00002c30 <__negsi2>:
    2c30:	90 95       	com	r25
    2c32:	80 95       	com	r24
    2c34:	70 95       	com	r23
    2c36:	61 95       	neg	r22
    2c38:	7f 4f       	sbci	r23, 0xFF	; 255
    2c3a:	8f 4f       	sbci	r24, 0xFF	; 255
    2c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c3e:	08 95       	ret

00002c40 <__muluhisi3>:
    2c40:	0e 94 33 16 	call	0x2c66	; 0x2c66 <__umulhisi3>
    2c44:	a5 9f       	mul	r26, r21
    2c46:	90 0d       	add	r25, r0
    2c48:	b4 9f       	mul	r27, r20
    2c4a:	90 0d       	add	r25, r0
    2c4c:	a4 9f       	mul	r26, r20
    2c4e:	80 0d       	add	r24, r0
    2c50:	91 1d       	adc	r25, r1
    2c52:	11 24       	eor	r1, r1
    2c54:	08 95       	ret

00002c56 <__mulshisi3>:
    2c56:	b7 ff       	sbrs	r27, 7
    2c58:	0c 94 20 16 	jmp	0x2c40	; 0x2c40 <__muluhisi3>

00002c5c <__mulohisi3>:
    2c5c:	0e 94 20 16 	call	0x2c40	; 0x2c40 <__muluhisi3>
    2c60:	82 1b       	sub	r24, r18
    2c62:	93 0b       	sbc	r25, r19
    2c64:	08 95       	ret

00002c66 <__umulhisi3>:
    2c66:	a2 9f       	mul	r26, r18
    2c68:	b0 01       	movw	r22, r0
    2c6a:	b3 9f       	mul	r27, r19
    2c6c:	c0 01       	movw	r24, r0
    2c6e:	a3 9f       	mul	r26, r19
    2c70:	70 0d       	add	r23, r0
    2c72:	81 1d       	adc	r24, r1
    2c74:	11 24       	eor	r1, r1
    2c76:	91 1d       	adc	r25, r1
    2c78:	b2 9f       	mul	r27, r18
    2c7a:	70 0d       	add	r23, r0
    2c7c:	81 1d       	adc	r24, r1
    2c7e:	11 24       	eor	r1, r1
    2c80:	91 1d       	adc	r25, r1
    2c82:	08 95       	ret

00002c84 <_exit>:
    2c84:	f8 94       	cli

00002c86 <__stop_program>:
    2c86:	ff cf       	rjmp	.-2      	; 0x2c86 <__stop_program>
