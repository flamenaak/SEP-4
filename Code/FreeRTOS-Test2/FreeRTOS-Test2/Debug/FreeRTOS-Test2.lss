
FreeRTOS-Test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00002cb8  00002d4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002cb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000077c  0080015c  0080015c  00002da8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002da8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002dd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000548  00000000  00000000  00002e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006fc5  00000000  00000000  00003360  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a85  00000000  00000000  0000a325  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000387e  00000000  00000000  0000bdaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000111c  00000000  00000000  0000f628  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002132  00000000  00000000  00010744  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006661  00000000  00000000  00012876  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006d0  00000000  00000000  00018ed7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__vector_13>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__vector_20>
      54:	0c 94 24 09 	jmp	0x1248	; 0x1248 <__vector_21>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 6c 09 	jmp	0x12d8	; 0x12d8 <__vector_28>
      74:	0c 94 aa 09 	jmp	0x1354	; 0x1354 <__vector_29>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	07 14       	cp	r0, r7
      7e:	07 14       	cp	r0, r7
      80:	07 14       	cp	r0, r7
      82:	42 14       	cp	r4, r2
      84:	30 14       	cp	r3, r0
      86:	3f 14       	cp	r3, r15
      88:	07 14       	cp	r0, r7
      8a:	07 14       	cp	r0, r7
      8c:	42 14       	cp	r4, r2
      8e:	30 14       	cp	r3, r0

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf ef       	ldi	r28, 0xFF	; 255
      96:	d8 e0       	ldi	r29, 0x08	; 8
      98:	de bf       	out	0x3e, r29	; 62
      9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
      9c:	11 e0       	ldi	r17, 0x01	; 1
      9e:	a0 e0       	ldi	r26, 0x00	; 0
      a0:	b1 e0       	ldi	r27, 0x01	; 1
      a2:	e8 eb       	ldi	r30, 0xB8	; 184
      a4:	fc e2       	ldi	r31, 0x2C	; 44
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 35       	cpi	r26, 0x5C	; 92
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	28 e0       	ldi	r18, 0x08	; 8
      b4:	ac e5       	ldi	r26, 0x5C	; 92
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a8 3d       	cpi	r26, 0xD8	; 216
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 1c 05 	call	0xa38	; 0xa38 <main>
      c6:	0c 94 5a 16 	jmp	0x2cb4	; 0x2cb4 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <obstacles_task>:
					//retransmit message - aka do nothing, cause there is a timeout
				}
			}

			vTaskDelay(10);
		}
      ce:	62 e0       	ldi	r22, 0x02	; 2
      d0:	70 e0       	ldi	r23, 0x00	; 0
      d2:	80 e0       	ldi	r24, 0x00	; 0
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	0e 94 49 10 	call	0x2092	; 0x2092 <vTaskSetApplicationTaskTag>
      da:	0f 2e       	mov	r0, r31
      dc:	f5 e6       	ldi	r31, 0x65	; 101
      de:	8f 2e       	mov	r8, r31
      e0:	f1 e0       	ldi	r31, 0x01	; 1
      e2:	9f 2e       	mov	r9, r31
      e4:	f0 2d       	mov	r31, r0
      e6:	22 24       	eor	r2, r2
      e8:	23 94       	inc	r2
      ea:	31 2c       	mov	r3, r1
      ec:	0f 2e       	mov	r0, r31
      ee:	f1 e6       	ldi	r31, 0x61	; 97
      f0:	4f 2e       	mov	r4, r31
      f2:	f1 e0       	ldi	r31, 0x01	; 1
      f4:	5f 2e       	mov	r5, r31
      f6:	f0 2d       	mov	r31, r0
      f8:	0f 2e       	mov	r0, r31
      fa:	fd e0       	ldi	r31, 0x0D	; 13
      fc:	cf 2e       	mov	r12, r31
      fe:	f3 e0       	ldi	r31, 0x03	; 3
     100:	df 2e       	mov	r13, r31
     102:	f0 2d       	mov	r31, r0
     104:	0f 2e       	mov	r0, r31
     106:	f9 e6       	ldi	r31, 0x69	; 105
     108:	6f 2e       	mov	r6, r31
     10a:	f1 e0       	ldi	r31, 0x01	; 1
     10c:	7f 2e       	mov	r7, r31
     10e:	f0 2d       	mov	r31, r0
     110:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <stop>
     114:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <stop+0x1>
     118:	89 2b       	or	r24, r25
     11a:	09 f0       	breq	.+2      	; 0x11e <obstacles_task+0x50>
     11c:	fa c0       	rjmp	.+500    	; 0x312 <obstacles_task+0x244>
     11e:	d4 01       	movw	r26, r8
     120:	8d 91       	ld	r24, X+
     122:	9c 91       	ld	r25, X
     124:	11 97       	sbiw	r26, 0x01	; 1
     126:	9c 01       	movw	r18, r24
     128:	22 0f       	add	r18, r18
     12a:	33 1f       	adc	r19, r19
     12c:	88 0f       	add	r24, r24
     12e:	99 1f       	adc	r25, r25
     130:	88 0f       	add	r24, r24
     132:	99 1f       	adc	r25, r25
     134:	88 0f       	add	r24, r24
     136:	99 1f       	adc	r25, r25
     138:	82 0f       	add	r24, r18
     13a:	93 1f       	adc	r25, r19
     13c:	12 96       	adiw	r26, 0x02	; 2
     13e:	ed 91       	ld	r30, X+
     140:	fc 91       	ld	r31, X
     142:	13 97       	sbiw	r26, 0x03	; 3
     144:	8e 0f       	add	r24, r30
     146:	9f 1f       	adc	r25, r31
     148:	fc 01       	movw	r30, r24
     14a:	e0 58       	subi	r30, 0x80	; 128
     14c:	fd 4f       	sbci	r31, 0xFD	; 253
     14e:	80 81       	ld	r24, Z
     150:	81 11       	cpse	r24, r1
     152:	db c0       	rjmp	.+438    	; 0x30a <obstacles_task+0x23c>
     154:	f2 01       	movw	r30, r4
     156:	80 81       	ld	r24, Z
     158:	91 81       	ldd	r25, Z+1	; 0x01
     15a:	9c 01       	movw	r18, r24
     15c:	22 0f       	add	r18, r18
     15e:	33 1f       	adc	r19, r19
     160:	88 0f       	add	r24, r24
     162:	99 1f       	adc	r25, r25
     164:	88 0f       	add	r24, r24
     166:	99 1f       	adc	r25, r25
     168:	88 0f       	add	r24, r24
     16a:	99 1f       	adc	r25, r25
     16c:	82 0f       	add	r24, r18
     16e:	93 1f       	adc	r25, r19
     170:	02 80       	ldd	r0, Z+2	; 0x02
     172:	f3 81       	ldd	r31, Z+3	; 0x03
     174:	e0 2d       	mov	r30, r0
     176:	8e 0f       	add	r24, r30
     178:	9f 1f       	adc	r25, r31
     17a:	fc 01       	movw	r30, r24
     17c:	e0 58       	subi	r30, 0x80	; 128
     17e:	fd 4f       	sbci	r31, 0xFD	; 253
     180:	80 81       	ld	r24, Z
     182:	81 11       	cpse	r24, r1
     184:	c2 c0       	rjmp	.+388    	; 0x30a <obstacles_task+0x23c>
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	4f ef       	ldi	r20, 0xFF	; 255
     18a:	5f ef       	ldi	r21, 0xFF	; 255
     18c:	60 e0       	ldi	r22, 0x00	; 0
     18e:	70 e0       	ldi	r23, 0x00	; 0
     190:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <xMutex>
     194:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <xMutex+0x1>
     198:	0e 94 1b 0c 	call	0x1836	; 0x1836 <xQueueGenericReceive>
     19c:	88 23       	and	r24, r24
     19e:	09 f4       	brne	.+2      	; 0x1a2 <obstacles_task+0xd4>
     1a0:	b8 c0       	rjmp	.+368    	; 0x312 <obstacles_task+0x244>
     1a2:	c1 e8       	ldi	r28, 0x81	; 129
     1a4:	d2 e0       	ldi	r29, 0x02	; 2
     1a6:	6b e6       	ldi	r22, 0x6B	; 107
     1a8:	71 e0       	ldi	r23, 0x01	; 1
     1aa:	ae 01       	movw	r20, r28
     1ac:	0e c0       	rjmp	.+28     	; 0x1ca <obstacles_task+0xfc>
     1ae:	81 91       	ld	r24, Z+
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	8d 93       	st	X+, r24
     1b4:	9d 93       	st	X+, r25
     1b6:	e2 17       	cp	r30, r18
     1b8:	f3 07       	cpc	r31, r19
     1ba:	c9 f7       	brne	.-14     	; 0x1ae <obstacles_task+0xe0>
     1bc:	46 5f       	subi	r20, 0xF6	; 246
     1be:	5f 4f       	sbci	r21, 0xFF	; 255
     1c0:	6c 5e       	subi	r22, 0xEC	; 236
     1c2:	7f 4f       	sbci	r23, 0xFF	; 255
     1c4:	4c 15       	cp	r20, r12
     1c6:	5d 05       	cpc	r21, r13
     1c8:	31 f0       	breq	.+12     	; 0x1d6 <obstacles_task+0x108>
     1ca:	9a 01       	movw	r18, r20
     1cc:	27 5f       	subi	r18, 0xF7	; 247
     1ce:	3f 4f       	sbci	r19, 0xFF	; 255
     1d0:	db 01       	movw	r26, r22
     1d2:	fa 01       	movw	r30, r20
     1d4:	ec cf       	rjmp	.-40     	; 0x1ae <obstacles_task+0xe0>
     1d6:	0f 2e       	mov	r0, r31
     1d8:	fd e7       	ldi	r31, 0x7D	; 125
     1da:	ef 2e       	mov	r14, r31
     1dc:	f1 e0       	ldi	r31, 0x01	; 1
     1de:	ff 2e       	mov	r15, r31
     1e0:	f0 2d       	mov	r31, r0
     1e2:	01 e0       	ldi	r16, 0x01	; 1
     1e4:	10 e0       	ldi	r17, 0x00	; 0
     1e6:	a1 2c       	mov	r10, r1
     1e8:	b1 2c       	mov	r11, r1
     1ea:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <rand>
     1ee:	81 70       	andi	r24, 0x01	; 1
     1f0:	90 78       	andi	r25, 0x80	; 128
     1f2:	99 23       	and	r25, r25
     1f4:	24 f4       	brge	.+8      	; 0x1fe <obstacles_task+0x130>
     1f6:	01 97       	sbiw	r24, 0x01	; 1
     1f8:	8e 6f       	ori	r24, 0xFE	; 254
     1fa:	9f 6f       	ori	r25, 0xFF	; 255
     1fc:	01 96       	adiw	r24, 0x01	; 1
     1fe:	d3 01       	movw	r26, r6
     200:	8d 93       	st	X+, r24
     202:	9c 93       	st	X, r25
     204:	b2 e0       	ldi	r27, 0x02	; 2
     206:	ab 16       	cp	r10, r27
     208:	b1 04       	cpc	r11, r1
     20a:	24 f0       	brlt	.+8      	; 0x214 <obstacles_task+0x146>
     20c:	0d 30       	cpi	r16, 0x0D	; 13
     20e:	11 05       	cpc	r17, r1
     210:	d9 f4       	brne	.+54     	; 0x248 <obstacles_task+0x17a>
     212:	84 c0       	rjmp	.+264    	; 0x31c <obstacles_task+0x24e>
     214:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <rand>
     218:	81 70       	andi	r24, 0x01	; 1
     21a:	90 78       	andi	r25, 0x80	; 128
     21c:	99 23       	and	r25, r25
     21e:	24 f4       	brge	.+8      	; 0x228 <obstacles_task+0x15a>
     220:	01 97       	sbiw	r24, 0x01	; 1
     222:	8e 6f       	ori	r24, 0xFE	; 254
     224:	9f 6f       	ori	r25, 0xFF	; 255
     226:	01 96       	adiw	r24, 0x01	; 1
     228:	f7 01       	movw	r30, r14
     22a:	91 83       	std	Z+1, r25	; 0x01
     22c:	80 83       	st	Z, r24
     22e:	01 97       	sbiw	r24, 0x01	; 1
     230:	19 f4       	brne	.+6      	; 0x238 <obstacles_task+0x16a>
     232:	ff ef       	ldi	r31, 0xFF	; 255
     234:	af 1a       	sub	r10, r31
     236:	bf 0a       	sbc	r11, r31
     238:	c8 01       	movw	r24, r16
     23a:	83 70       	andi	r24, 0x03	; 3
     23c:	99 27       	eor	r25, r25
     23e:	89 2b       	or	r24, r25
     240:	31 f4       	brne	.+12     	; 0x24e <obstacles_task+0x180>
     242:	a1 2c       	mov	r10, r1
     244:	b1 2c       	mov	r11, r1
     246:	03 c0       	rjmp	.+6      	; 0x24e <obstacles_task+0x180>
     248:	d7 01       	movw	r26, r14
     24a:	1d 92       	st	X+, r1
     24c:	1c 92       	st	X, r1
     24e:	0f 5f       	subi	r16, 0xFF	; 255
     250:	1f 4f       	sbci	r17, 0xFF	; 255
     252:	b4 e1       	ldi	r27, 0x14	; 20
     254:	eb 0e       	add	r14, r27
     256:	f1 1c       	adc	r15, r1
     258:	0e 30       	cpi	r16, 0x0E	; 14
     25a:	11 05       	cpc	r17, r1
     25c:	31 f6       	brne	.-116    	; 0x1ea <obstacles_task+0x11c>
     25e:	29 e6       	ldi	r18, 0x69	; 105
     260:	31 e0       	ldi	r19, 0x01	; 1
     262:	0c c0       	rjmp	.+24     	; 0x27c <obstacles_task+0x1ae>
     264:	40 81       	ld	r20, Z
     266:	32 96       	adiw	r30, 0x02	; 2
     268:	4d 93       	st	X+, r20
     26a:	8a 17       	cp	r24, r26
     26c:	9b 07       	cpc	r25, r27
     26e:	d1 f7       	brne	.-12     	; 0x264 <obstacles_task+0x196>
     270:	2c 5e       	subi	r18, 0xEC	; 236
     272:	3f 4f       	sbci	r19, 0xFF	; 255
     274:	2a 96       	adiw	r28, 0x0a	; 10
     276:	cc 15       	cp	r28, r12
     278:	dd 05       	cpc	r29, r13
     27a:	29 f0       	breq	.+10     	; 0x286 <obstacles_task+0x1b8>
     27c:	ce 01       	movw	r24, r28
     27e:	09 96       	adiw	r24, 0x09	; 9
     280:	de 01       	movw	r26, r28
     282:	f9 01       	movw	r30, r18
     284:	ef cf       	rjmp	.-34     	; 0x264 <obstacles_task+0x196>
     286:	f4 01       	movw	r30, r8
     288:	80 81       	ld	r24, Z
     28a:	91 81       	ldd	r25, Z+1	; 0x01
     28c:	fc 01       	movw	r30, r24
     28e:	ee 0f       	add	r30, r30
     290:	ff 1f       	adc	r31, r31
     292:	88 0f       	add	r24, r24
     294:	99 1f       	adc	r25, r25
     296:	88 0f       	add	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	88 0f       	add	r24, r24
     29c:	99 1f       	adc	r25, r25
     29e:	e8 0f       	add	r30, r24
     2a0:	f9 1f       	adc	r31, r25
     2a2:	d4 01       	movw	r26, r8
     2a4:	12 96       	adiw	r26, 0x02	; 2
     2a6:	8d 91       	ld	r24, X+
     2a8:	9c 91       	ld	r25, X
     2aa:	13 97       	sbiw	r26, 0x03	; 3
     2ac:	e8 0f       	add	r30, r24
     2ae:	f9 1f       	adc	r31, r25
     2b0:	ee 0f       	add	r30, r30
     2b2:	ff 1f       	adc	r31, r31
     2b4:	e7 59       	subi	r30, 0x97	; 151
     2b6:	fe 4f       	sbci	r31, 0xFE	; 254
     2b8:	31 82       	std	Z+1, r3	; 0x01
     2ba:	20 82       	st	Z, r2
     2bc:	f2 01       	movw	r30, r4
     2be:	80 81       	ld	r24, Z
     2c0:	91 81       	ldd	r25, Z+1	; 0x01
     2c2:	fc 01       	movw	r30, r24
     2c4:	ee 0f       	add	r30, r30
     2c6:	ff 1f       	adc	r31, r31
     2c8:	88 0f       	add	r24, r24
     2ca:	99 1f       	adc	r25, r25
     2cc:	88 0f       	add	r24, r24
     2ce:	99 1f       	adc	r25, r25
     2d0:	88 0f       	add	r24, r24
     2d2:	99 1f       	adc	r25, r25
     2d4:	e8 0f       	add	r30, r24
     2d6:	f9 1f       	adc	r31, r25
     2d8:	d2 01       	movw	r26, r4
     2da:	12 96       	adiw	r26, 0x02	; 2
     2dc:	8d 91       	ld	r24, X+
     2de:	9c 91       	ld	r25, X
     2e0:	13 97       	sbiw	r26, 0x03	; 3
     2e2:	e8 0f       	add	r30, r24
     2e4:	f9 1f       	adc	r31, r25
     2e6:	ee 0f       	add	r30, r30
     2e8:	ff 1f       	adc	r31, r31
     2ea:	e7 59       	subi	r30, 0x97	; 151
     2ec:	fe 4f       	sbci	r31, 0xFE	; 254
     2ee:	31 82       	std	Z+1, r3	; 0x01
     2f0:	20 82       	st	Z, r2
     2f2:	20 e0       	ldi	r18, 0x00	; 0
     2f4:	40 e0       	ldi	r20, 0x00	; 0
     2f6:	50 e0       	ldi	r21, 0x00	; 0
     2f8:	60 e0       	ldi	r22, 0x00	; 0
     2fa:	70 e0       	ldi	r23, 0x00	; 0
     2fc:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <xMutex>
     300:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <xMutex+0x1>
     304:	0e 94 26 0b 	call	0x164c	; 0x164c <xQueueGenericSend>
     308:	04 c0       	rjmp	.+8      	; 0x312 <obstacles_task+0x244>
     30a:	30 92 60 01 	sts	0x0160, r3	; 0x800160 <stop+0x1>
     30e:	20 92 5f 01 	sts	0x015F, r2	; 0x80015f <stop>
     312:	88 ee       	ldi	r24, 0xE8	; 232
     314:	93 e0       	ldi	r25, 0x03	; 3
     316:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <vTaskDelay>
     31a:	fa ce       	rjmp	.-524    	; 0x110 <obstacles_task+0x42>
     31c:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <rand>
     320:	81 70       	andi	r24, 0x01	; 1
     322:	90 78       	andi	r25, 0x80	; 128
     324:	99 23       	and	r25, r25
     326:	24 f4       	brge	.+8      	; 0x330 <obstacles_task+0x262>
     328:	01 97       	sbiw	r24, 0x01	; 1
     32a:	8e 6f       	ori	r24, 0xFE	; 254
     32c:	9f 6f       	ori	r25, 0xFF	; 255
     32e:	01 96       	adiw	r24, 0x01	; 1
     330:	f7 01       	movw	r30, r14
     332:	91 83       	std	Z+1, r25	; 0x01
     334:	80 83       	st	Z, r24
     336:	01 97       	sbiw	r24, 0x01	; 1
     338:	09 f0       	breq	.+2      	; 0x33c <obstacles_task+0x26e>
     33a:	89 cf       	rjmp	.-238    	; 0x24e <obstacles_task+0x180>
     33c:	7a cf       	rjmp	.-268    	; 0x232 <obstacles_task+0x164>

0000033e <joystickSampler_task>:
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	00 d0       	rcall	.+0      	; 0x344 <joystickSampler_task+0x6>
     344:	00 d0       	rcall	.+0      	; 0x346 <joystickSampler_task+0x8>
     346:	00 d0       	rcall	.+0      	; 0x348 <joystickSampler_task+0xa>
     348:	cd b7       	in	r28, 0x3d	; 61
     34a:	de b7       	in	r29, 0x3e	; 62
     34c:	65 e0       	ldi	r22, 0x05	; 5
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 49 10 	call	0x2092	; 0x2092 <vTaskSetApplicationTaskTag>
     358:	ee 24       	eor	r14, r14
     35a:	e3 94       	inc	r14
     35c:	f1 2c       	mov	r15, r1
     35e:	05 e6       	ldi	r16, 0x65	; 101
     360:	11 e0       	ldi	r17, 0x01	; 1
     362:	0f 2e       	mov	r0, r31
     364:	f3 e0       	ldi	r31, 0x03	; 3
     366:	cf 2e       	mov	r12, r31
     368:	d1 2c       	mov	r13, r1
     36a:	f0 2d       	mov	r31, r0
     36c:	68 94       	set
     36e:	aa 24       	eor	r10, r10
     370:	a1 f8       	bld	r10, 1
     372:	b1 2c       	mov	r11, r1
     374:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <stop>
     378:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <stop+0x1>
     37c:	89 2b       	or	r24, r25
     37e:	09 f0       	breq	.+2      	; 0x382 <joystickSampler_task+0x44>
     380:	4a c0       	rjmp	.+148    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     382:	f8 01       	movw	r30, r16
     384:	80 81       	ld	r24, Z
     386:	91 81       	ldd	r25, Z+1	; 0x01
     388:	9c 83       	std	Y+4, r25	; 0x04
     38a:	8b 83       	std	Y+3, r24	; 0x03
     38c:	82 81       	ldd	r24, Z+2	; 0x02
     38e:	93 81       	ldd	r25, Z+3	; 0x03
     390:	9e 83       	std	Y+6, r25	; 0x06
     392:	8d 83       	std	Y+5, r24	; 0x05
     394:	30 99       	sbic	0x06, 0	; 6
     396:	0e c0       	rjmp	.+28     	; 0x3b4 <joystickSampler_task+0x76>
     398:	1a 82       	std	Y+2, r1	; 0x02
     39a:	19 82       	std	Y+1, r1	; 0x01
     39c:	20 e0       	ldi	r18, 0x00	; 0
     39e:	4f ef       	ldi	r20, 0xFF	; 255
     3a0:	5f ef       	ldi	r21, 0xFF	; 255
     3a2:	be 01       	movw	r22, r28
     3a4:	6f 5f       	subi	r22, 0xFF	; 255
     3a6:	7f 4f       	sbci	r23, 0xFF	; 255
     3a8:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <xInputQueue>
     3ac:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <xInputQueue+0x1>
     3b0:	0e 94 26 0b 	call	0x164c	; 0x164c <xQueueGenericSend>
     3b4:	31 99       	sbic	0x06, 1	; 6
     3b6:	0e c0       	rjmp	.+28     	; 0x3d4 <joystickSampler_task+0x96>
     3b8:	ba 82       	std	Y+2, r11	; 0x02
     3ba:	a9 82       	std	Y+1, r10	; 0x01
     3bc:	20 e0       	ldi	r18, 0x00	; 0
     3be:	4f ef       	ldi	r20, 0xFF	; 255
     3c0:	5f ef       	ldi	r21, 0xFF	; 255
     3c2:	be 01       	movw	r22, r28
     3c4:	6f 5f       	subi	r22, 0xFF	; 255
     3c6:	7f 4f       	sbci	r23, 0xFF	; 255
     3c8:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <xInputQueue>
     3cc:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <xInputQueue+0x1>
     3d0:	0e 94 26 0b 	call	0x164c	; 0x164c <xQueueGenericSend>
     3d4:	36 99       	sbic	0x06, 6	; 6
     3d6:	0e c0       	rjmp	.+28     	; 0x3f4 <joystickSampler_task+0xb6>
     3d8:	fa 82       	std	Y+2, r15	; 0x02
     3da:	e9 82       	std	Y+1, r14	; 0x01
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	4f ef       	ldi	r20, 0xFF	; 255
     3e0:	5f ef       	ldi	r21, 0xFF	; 255
     3e2:	be 01       	movw	r22, r28
     3e4:	6f 5f       	subi	r22, 0xFF	; 255
     3e6:	7f 4f       	sbci	r23, 0xFF	; 255
     3e8:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <xInputQueue>
     3ec:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <xInputQueue+0x1>
     3f0:	0e 94 26 0b 	call	0x164c	; 0x164c <xQueueGenericSend>
     3f4:	37 99       	sbic	0x06, 7	; 6
     3f6:	15 c0       	rjmp	.+42     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     3f8:	da 82       	std	Y+2, r13	; 0x02
     3fa:	c9 82       	std	Y+1, r12	; 0x01
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	4f ef       	ldi	r20, 0xFF	; 255
     400:	5f ef       	ldi	r21, 0xFF	; 255
     402:	be 01       	movw	r22, r28
     404:	6f 5f       	subi	r22, 0xFF	; 255
     406:	7f 4f       	sbci	r23, 0xFF	; 255
     408:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <xInputQueue>
     40c:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <xInputQueue+0x1>
     410:	0e 94 26 0b 	call	0x164c	; 0x164c <xQueueGenericSend>
     414:	06 c0       	rjmp	.+12     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     416:	4b 99       	sbic	0x09, 3	; 9
     418:	04 c0       	rjmp	.+8      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     41a:	f0 92 5e 01 	sts	0x015E, r15	; 0x80015e <restart1+0x1>
     41e:	e0 92 5d 01 	sts	0x015D, r14	; 0x80015d <restart1>
     422:	84 e6       	ldi	r24, 0x64	; 100
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <vTaskDelay>
     42a:	a4 cf       	rjmp	.-184    	; 0x374 <joystickSampler_task+0x36>

0000042c <update>:
     42c:	ef 92       	push	r14
     42e:	ff 92       	push	r15
     430:	0f 93       	push	r16
     432:	1f 93       	push	r17
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	cd e0       	ldi	r28, 0x0D	; 13
     43a:	d3 e0       	ldi	r29, 0x03	; 3
     43c:	49 e6       	ldi	r20, 0x69	; 105
     43e:	51 e0       	ldi	r21, 0x01	; 1
     440:	09 e2       	ldi	r16, 0x29	; 41
     442:	13 e0       	ldi	r17, 0x03	; 3
     444:	61 e0       	ldi	r22, 0x01	; 1
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	de 01       	movw	r26, r28
     44a:	19 82       	std	Y+1, r1	; 0x01
     44c:	18 82       	st	Y, r1
     44e:	fa 01       	movw	r30, r20
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	21 91       	ld	r18, Z+
     456:	31 91       	ld	r19, Z+
     458:	21 30       	cpi	r18, 0x01	; 1
     45a:	31 05       	cpc	r19, r1
     45c:	79 f4       	brne	.+30     	; 0x47c <update+0x50>
     45e:	ed 90       	ld	r14, X+
     460:	fc 90       	ld	r15, X
     462:	11 97       	sbiw	r26, 0x01	; 1
     464:	9b 01       	movw	r18, r22
     466:	08 2e       	mov	r0, r24
     468:	02 c0       	rjmp	.+4      	; 0x46e <update+0x42>
     46a:	22 0f       	add	r18, r18
     46c:	33 1f       	adc	r19, r19
     46e:	0a 94       	dec	r0
     470:	e2 f7       	brpl	.-8      	; 0x46a <update+0x3e>
     472:	2e 29       	or	r18, r14
     474:	3f 29       	or	r19, r15
     476:	11 96       	adiw	r26, 0x01	; 1
     478:	3c 93       	st	X, r19
     47a:	2e 93       	st	-X, r18
     47c:	01 96       	adiw	r24, 0x01	; 1
     47e:	8a 30       	cpi	r24, 0x0A	; 10
     480:	91 05       	cpc	r25, r1
     482:	41 f7       	brne	.-48     	; 0x454 <update+0x28>
     484:	22 96       	adiw	r28, 0x02	; 2
     486:	4c 5e       	subi	r20, 0xEC	; 236
     488:	5f 4f       	sbci	r21, 0xFF	; 255
     48a:	c0 17       	cp	r28, r16
     48c:	d1 07       	cpc	r29, r17
     48e:	e1 f6       	brne	.-72     	; 0x448 <update+0x1c>
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	1f 91       	pop	r17
     496:	0f 91       	pop	r16
     498:	ff 90       	pop	r15
     49a:	ef 90       	pop	r14
     49c:	08 95       	ret

0000049e <moveCar>:
     49e:	81 30       	cpi	r24, 0x01	; 1
     4a0:	91 05       	cpc	r25, r1
     4a2:	09 f4       	brne	.+2      	; 0x4a6 <moveCar+0x8>
     4a4:	62 c0       	rjmp	.+196    	; 0x56a <moveCar+0xcc>
     4a6:	40 f0       	brcs	.+16     	; 0x4b8 <moveCar+0x1a>
     4a8:	82 30       	cpi	r24, 0x02	; 2
     4aa:	91 05       	cpc	r25, r1
     4ac:	09 f4       	brne	.+2      	; 0x4b0 <moveCar+0x12>
     4ae:	bc c0       	rjmp	.+376    	; 0x628 <moveCar+0x18a>
     4b0:	03 97       	sbiw	r24, 0x03	; 3
     4b2:	09 f4       	brne	.+2      	; 0x4b6 <moveCar+0x18>
     4b4:	16 c1       	rjmp	.+556    	; 0x6e2 <moveCar+0x244>
     4b6:	08 95       	ret
     4b8:	db 01       	movw	r26, r22
     4ba:	12 96       	adiw	r26, 0x02	; 2
     4bc:	2d 91       	ld	r18, X+
     4be:	3c 91       	ld	r19, X
     4c0:	13 97       	sbiw	r26, 0x03	; 3
     4c2:	c9 01       	movw	r24, r18
     4c4:	01 96       	adiw	r24, 0x01	; 1
     4c6:	8a 30       	cpi	r24, 0x0A	; 10
     4c8:	91 05       	cpc	r25, r1
     4ca:	08 f0       	brcs	.+2      	; 0x4ce <moveCar+0x30>
     4cc:	65 c1       	rjmp	.+714    	; 0x798 <moveCar+0x2fa>
     4ce:	4d 91       	ld	r20, X+
     4d0:	5c 91       	ld	r21, X
     4d2:	da 01       	movw	r26, r20
     4d4:	aa 0f       	add	r26, r26
     4d6:	bb 1f       	adc	r27, r27
     4d8:	fa 01       	movw	r30, r20
     4da:	ee 0f       	add	r30, r30
     4dc:	ff 1f       	adc	r31, r31
     4de:	ee 0f       	add	r30, r30
     4e0:	ff 1f       	adc	r31, r31
     4e2:	ee 0f       	add	r30, r30
     4e4:	ff 1f       	adc	r31, r31
     4e6:	ea 0f       	add	r30, r26
     4e8:	fb 1f       	adc	r31, r27
     4ea:	e8 0f       	add	r30, r24
     4ec:	f9 1f       	adc	r31, r25
     4ee:	ee 0f       	add	r30, r30
     4f0:	ff 1f       	adc	r31, r31
     4f2:	e7 59       	subi	r30, 0x97	; 151
     4f4:	fe 4f       	sbci	r31, 0xFE	; 254
     4f6:	80 81       	ld	r24, Z
     4f8:	91 81       	ldd	r25, Z+1	; 0x01
     4fa:	89 2b       	or	r24, r25
     4fc:	09 f0       	breq	.+2      	; 0x500 <moveCar+0x62>
     4fe:	4c c1       	rjmp	.+664    	; 0x798 <moveCar+0x2fa>
     500:	fd 01       	movw	r30, r26
     502:	44 0f       	add	r20, r20
     504:	55 1f       	adc	r21, r21
     506:	44 0f       	add	r20, r20
     508:	55 1f       	adc	r21, r21
     50a:	44 0f       	add	r20, r20
     50c:	55 1f       	adc	r21, r21
     50e:	e4 0f       	add	r30, r20
     510:	f5 1f       	adc	r31, r21
     512:	e2 0f       	add	r30, r18
     514:	f3 1f       	adc	r31, r19
     516:	ee 0f       	add	r30, r30
     518:	ff 1f       	adc	r31, r31
     51a:	e7 59       	subi	r30, 0x97	; 151
     51c:	fe 4f       	sbci	r31, 0xFE	; 254
     51e:	11 82       	std	Z+1, r1	; 0x01
     520:	10 82       	st	Z, r1
     522:	fb 01       	movw	r30, r22
     524:	20 81       	ld	r18, Z
     526:	31 81       	ldd	r19, Z+1	; 0x01
     528:	82 81       	ldd	r24, Z+2	; 0x02
     52a:	93 81       	ldd	r25, Z+3	; 0x03
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	93 83       	std	Z+3, r25	; 0x03
     530:	82 83       	std	Z+2, r24	; 0x02
     532:	f9 01       	movw	r30, r18
     534:	ee 0f       	add	r30, r30
     536:	ff 1f       	adc	r31, r31
     538:	22 0f       	add	r18, r18
     53a:	33 1f       	adc	r19, r19
     53c:	22 0f       	add	r18, r18
     53e:	33 1f       	adc	r19, r19
     540:	22 0f       	add	r18, r18
     542:	33 1f       	adc	r19, r19
     544:	e2 0f       	add	r30, r18
     546:	f3 1f       	adc	r31, r19
     548:	e8 0f       	add	r30, r24
     54a:	f9 1f       	adc	r31, r25
     54c:	ee 0f       	add	r30, r30
     54e:	ff 1f       	adc	r31, r31
     550:	e7 59       	subi	r30, 0x97	; 151
     552:	fe 4f       	sbci	r31, 0xFE	; 254
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	91 83       	std	Z+1, r25	; 0x01
     55a:	80 83       	st	Z, r24
     55c:	0e 94 16 02 	call	0x42c	; 0x42c <update>
     560:	88 ec       	ldi	r24, 0xC8	; 200
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <vTaskDelay>
     568:	08 95       	ret
     56a:	db 01       	movw	r26, r22
     56c:	12 96       	adiw	r26, 0x02	; 2
     56e:	2d 91       	ld	r18, X+
     570:	3c 91       	ld	r19, X
     572:	13 97       	sbiw	r26, 0x03	; 3
     574:	21 15       	cp	r18, r1
     576:	31 05       	cpc	r19, r1
     578:	09 f4       	brne	.+2      	; 0x57c <moveCar+0xde>
     57a:	0e c1       	rjmp	.+540    	; 0x798 <moveCar+0x2fa>
     57c:	4d 91       	ld	r20, X+
     57e:	5c 91       	ld	r21, X
     580:	11 97       	sbiw	r26, 0x01	; 1
     582:	fa 01       	movw	r30, r20
     584:	ee 0f       	add	r30, r30
     586:	ff 1f       	adc	r31, r31
     588:	ca 01       	movw	r24, r20
     58a:	88 0f       	add	r24, r24
     58c:	99 1f       	adc	r25, r25
     58e:	88 0f       	add	r24, r24
     590:	99 1f       	adc	r25, r25
     592:	88 0f       	add	r24, r24
     594:	99 1f       	adc	r25, r25
     596:	e8 0f       	add	r30, r24
     598:	f9 1f       	adc	r31, r25
     59a:	c9 01       	movw	r24, r18
     59c:	01 97       	sbiw	r24, 0x01	; 1
     59e:	e8 0f       	add	r30, r24
     5a0:	f9 1f       	adc	r31, r25
     5a2:	ee 0f       	add	r30, r30
     5a4:	ff 1f       	adc	r31, r31
     5a6:	e7 59       	subi	r30, 0x97	; 151
     5a8:	fe 4f       	sbci	r31, 0xFE	; 254
     5aa:	80 81       	ld	r24, Z
     5ac:	91 81       	ldd	r25, Z+1	; 0x01
     5ae:	89 2b       	or	r24, r25
     5b0:	09 f0       	breq	.+2      	; 0x5b4 <moveCar+0x116>
     5b2:	f2 c0       	rjmp	.+484    	; 0x798 <moveCar+0x2fa>
     5b4:	fa 01       	movw	r30, r20
     5b6:	ee 0f       	add	r30, r30
     5b8:	ff 1f       	adc	r31, r31
     5ba:	44 0f       	add	r20, r20
     5bc:	55 1f       	adc	r21, r21
     5be:	44 0f       	add	r20, r20
     5c0:	55 1f       	adc	r21, r21
     5c2:	44 0f       	add	r20, r20
     5c4:	55 1f       	adc	r21, r21
     5c6:	e4 0f       	add	r30, r20
     5c8:	f5 1f       	adc	r31, r21
     5ca:	e2 0f       	add	r30, r18
     5cc:	f3 1f       	adc	r31, r19
     5ce:	ee 0f       	add	r30, r30
     5d0:	ff 1f       	adc	r31, r31
     5d2:	e7 59       	subi	r30, 0x97	; 151
     5d4:	fe 4f       	sbci	r31, 0xFE	; 254
     5d6:	11 82       	std	Z+1, r1	; 0x01
     5d8:	10 82       	st	Z, r1
     5da:	12 96       	adiw	r26, 0x02	; 2
     5dc:	8d 91       	ld	r24, X+
     5de:	9c 91       	ld	r25, X
     5e0:	13 97       	sbiw	r26, 0x03	; 3
     5e2:	01 97       	sbiw	r24, 0x01	; 1
     5e4:	13 96       	adiw	r26, 0x03	; 3
     5e6:	9c 93       	st	X, r25
     5e8:	8e 93       	st	-X, r24
     5ea:	12 97       	sbiw	r26, 0x02	; 2
     5ec:	2d 91       	ld	r18, X+
     5ee:	3c 91       	ld	r19, X
     5f0:	f9 01       	movw	r30, r18
     5f2:	ee 0f       	add	r30, r30
     5f4:	ff 1f       	adc	r31, r31
     5f6:	22 0f       	add	r18, r18
     5f8:	33 1f       	adc	r19, r19
     5fa:	22 0f       	add	r18, r18
     5fc:	33 1f       	adc	r19, r19
     5fe:	22 0f       	add	r18, r18
     600:	33 1f       	adc	r19, r19
     602:	e2 0f       	add	r30, r18
     604:	f3 1f       	adc	r31, r19
     606:	e8 0f       	add	r30, r24
     608:	f9 1f       	adc	r31, r25
     60a:	ee 0f       	add	r30, r30
     60c:	ff 1f       	adc	r31, r31
     60e:	e7 59       	subi	r30, 0x97	; 151
     610:	fe 4f       	sbci	r31, 0xFE	; 254
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	91 83       	std	Z+1, r25	; 0x01
     618:	80 83       	st	Z, r24
     61a:	0e 94 16 02 	call	0x42c	; 0x42c <update>
     61e:	88 ec       	ldi	r24, 0xC8	; 200
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <vTaskDelay>
     626:	08 95       	ret
     628:	fb 01       	movw	r30, r22
     62a:	20 81       	ld	r18, Z
     62c:	31 81       	ldd	r19, Z+1	; 0x01
     62e:	c9 01       	movw	r24, r18
     630:	01 96       	adiw	r24, 0x01	; 1
     632:	8e 30       	cpi	r24, 0x0E	; 14
     634:	91 05       	cpc	r25, r1
     636:	08 f0       	brcs	.+2      	; 0x63a <moveCar+0x19c>
     638:	af c0       	rjmp	.+350    	; 0x798 <moveCar+0x2fa>
     63a:	42 81       	ldd	r20, Z+2	; 0x02
     63c:	53 81       	ldd	r21, Z+3	; 0x03
     63e:	fc 01       	movw	r30, r24
     640:	ee 0f       	add	r30, r30
     642:	ff 1f       	adc	r31, r31
     644:	88 0f       	add	r24, r24
     646:	99 1f       	adc	r25, r25
     648:	88 0f       	add	r24, r24
     64a:	99 1f       	adc	r25, r25
     64c:	88 0f       	add	r24, r24
     64e:	99 1f       	adc	r25, r25
     650:	e8 0f       	add	r30, r24
     652:	f9 1f       	adc	r31, r25
     654:	e4 0f       	add	r30, r20
     656:	f5 1f       	adc	r31, r21
     658:	ee 0f       	add	r30, r30
     65a:	ff 1f       	adc	r31, r31
     65c:	e7 59       	subi	r30, 0x97	; 151
     65e:	fe 4f       	sbci	r31, 0xFE	; 254
     660:	80 81       	ld	r24, Z
     662:	91 81       	ldd	r25, Z+1	; 0x01
     664:	89 2b       	or	r24, r25
     666:	09 f0       	breq	.+2      	; 0x66a <moveCar+0x1cc>
     668:	97 c0       	rjmp	.+302    	; 0x798 <moveCar+0x2fa>
     66a:	c9 01       	movw	r24, r18
     66c:	88 0f       	add	r24, r24
     66e:	99 1f       	adc	r25, r25
     670:	22 0f       	add	r18, r18
     672:	33 1f       	adc	r19, r19
     674:	22 0f       	add	r18, r18
     676:	33 1f       	adc	r19, r19
     678:	22 0f       	add	r18, r18
     67a:	33 1f       	adc	r19, r19
     67c:	28 0f       	add	r18, r24
     67e:	39 1f       	adc	r19, r25
     680:	f9 01       	movw	r30, r18
     682:	e4 0f       	add	r30, r20
     684:	f5 1f       	adc	r31, r21
     686:	ee 0f       	add	r30, r30
     688:	ff 1f       	adc	r31, r31
     68a:	e7 59       	subi	r30, 0x97	; 151
     68c:	fe 4f       	sbci	r31, 0xFE	; 254
     68e:	11 82       	std	Z+1, r1	; 0x01
     690:	10 82       	st	Z, r1
     692:	db 01       	movw	r26, r22
     694:	8d 91       	ld	r24, X+
     696:	9c 91       	ld	r25, X
     698:	11 97       	sbiw	r26, 0x01	; 1
     69a:	01 96       	adiw	r24, 0x01	; 1
     69c:	11 96       	adiw	r26, 0x01	; 1
     69e:	9c 93       	st	X, r25
     6a0:	8e 93       	st	-X, r24
     6a2:	12 96       	adiw	r26, 0x02	; 2
     6a4:	ed 91       	ld	r30, X+
     6a6:	fc 91       	ld	r31, X
     6a8:	13 97       	sbiw	r26, 0x03	; 3
     6aa:	9c 01       	movw	r18, r24
     6ac:	22 0f       	add	r18, r18
     6ae:	33 1f       	adc	r19, r19
     6b0:	88 0f       	add	r24, r24
     6b2:	99 1f       	adc	r25, r25
     6b4:	88 0f       	add	r24, r24
     6b6:	99 1f       	adc	r25, r25
     6b8:	88 0f       	add	r24, r24
     6ba:	99 1f       	adc	r25, r25
     6bc:	82 0f       	add	r24, r18
     6be:	93 1f       	adc	r25, r19
     6c0:	e8 0f       	add	r30, r24
     6c2:	f9 1f       	adc	r31, r25
     6c4:	ee 0f       	add	r30, r30
     6c6:	ff 1f       	adc	r31, r31
     6c8:	e7 59       	subi	r30, 0x97	; 151
     6ca:	fe 4f       	sbci	r31, 0xFE	; 254
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	91 83       	std	Z+1, r25	; 0x01
     6d2:	80 83       	st	Z, r24
     6d4:	0e 94 16 02 	call	0x42c	; 0x42c <update>
     6d8:	88 ec       	ldi	r24, 0xC8	; 200
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <vTaskDelay>
     6e0:	08 95       	ret
     6e2:	fb 01       	movw	r30, r22
     6e4:	20 81       	ld	r18, Z
     6e6:	31 81       	ldd	r19, Z+1	; 0x01
     6e8:	21 15       	cp	r18, r1
     6ea:	31 05       	cpc	r19, r1
     6ec:	09 f4       	brne	.+2      	; 0x6f0 <moveCar+0x252>
     6ee:	54 c0       	rjmp	.+168    	; 0x798 <moveCar+0x2fa>
     6f0:	42 81       	ldd	r20, Z+2	; 0x02
     6f2:	53 81       	ldd	r21, Z+3	; 0x03
     6f4:	c9 01       	movw	r24, r18
     6f6:	01 97       	sbiw	r24, 0x01	; 1
     6f8:	fc 01       	movw	r30, r24
     6fa:	ee 0f       	add	r30, r30
     6fc:	ff 1f       	adc	r31, r31
     6fe:	88 0f       	add	r24, r24
     700:	99 1f       	adc	r25, r25
     702:	88 0f       	add	r24, r24
     704:	99 1f       	adc	r25, r25
     706:	88 0f       	add	r24, r24
     708:	99 1f       	adc	r25, r25
     70a:	e8 0f       	add	r30, r24
     70c:	f9 1f       	adc	r31, r25
     70e:	e4 0f       	add	r30, r20
     710:	f5 1f       	adc	r31, r21
     712:	ee 0f       	add	r30, r30
     714:	ff 1f       	adc	r31, r31
     716:	e7 59       	subi	r30, 0x97	; 151
     718:	fe 4f       	sbci	r31, 0xFE	; 254
     71a:	80 81       	ld	r24, Z
     71c:	91 81       	ldd	r25, Z+1	; 0x01
     71e:	89 2b       	or	r24, r25
     720:	d9 f5       	brne	.+118    	; 0x798 <moveCar+0x2fa>
     722:	c9 01       	movw	r24, r18
     724:	88 0f       	add	r24, r24
     726:	99 1f       	adc	r25, r25
     728:	22 0f       	add	r18, r18
     72a:	33 1f       	adc	r19, r19
     72c:	22 0f       	add	r18, r18
     72e:	33 1f       	adc	r19, r19
     730:	22 0f       	add	r18, r18
     732:	33 1f       	adc	r19, r19
     734:	28 0f       	add	r18, r24
     736:	39 1f       	adc	r19, r25
     738:	f9 01       	movw	r30, r18
     73a:	e4 0f       	add	r30, r20
     73c:	f5 1f       	adc	r31, r21
     73e:	ee 0f       	add	r30, r30
     740:	ff 1f       	adc	r31, r31
     742:	e7 59       	subi	r30, 0x97	; 151
     744:	fe 4f       	sbci	r31, 0xFE	; 254
     746:	11 82       	std	Z+1, r1	; 0x01
     748:	10 82       	st	Z, r1
     74a:	db 01       	movw	r26, r22
     74c:	8d 91       	ld	r24, X+
     74e:	9c 91       	ld	r25, X
     750:	11 97       	sbiw	r26, 0x01	; 1
     752:	01 97       	sbiw	r24, 0x01	; 1
     754:	11 96       	adiw	r26, 0x01	; 1
     756:	9c 93       	st	X, r25
     758:	8e 93       	st	-X, r24
     75a:	12 96       	adiw	r26, 0x02	; 2
     75c:	ed 91       	ld	r30, X+
     75e:	fc 91       	ld	r31, X
     760:	13 97       	sbiw	r26, 0x03	; 3
     762:	9c 01       	movw	r18, r24
     764:	22 0f       	add	r18, r18
     766:	33 1f       	adc	r19, r19
     768:	88 0f       	add	r24, r24
     76a:	99 1f       	adc	r25, r25
     76c:	88 0f       	add	r24, r24
     76e:	99 1f       	adc	r25, r25
     770:	88 0f       	add	r24, r24
     772:	99 1f       	adc	r25, r25
     774:	82 0f       	add	r24, r18
     776:	93 1f       	adc	r25, r19
     778:	e8 0f       	add	r30, r24
     77a:	f9 1f       	adc	r31, r25
     77c:	ee 0f       	add	r30, r30
     77e:	ff 1f       	adc	r31, r31
     780:	e7 59       	subi	r30, 0x97	; 151
     782:	fe 4f       	sbci	r31, 0xFE	; 254
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	91 83       	std	Z+1, r25	; 0x01
     78a:	80 83       	st	Z, r24
     78c:	0e 94 16 02 	call	0x42c	; 0x42c <update>
     790:	88 ec       	ldi	r24, 0xC8	; 200
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <vTaskDelay>
     798:	08 95       	ret

0000079a <displayUpdater_task>:
     79a:	63 e0       	ldi	r22, 0x03	; 3
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 49 10 	call	0x2092	; 0x2092 <vTaskSetApplicationTaskTag>
     7a6:	0e 94 16 02 	call	0x42c	; 0x42c <update>
     7aa:	89 e2       	ldi	r24, 0x29	; 41
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <vTaskDelay>
     7b2:	f9 cf       	rjmp	.-14     	; 0x7a6 <displayUpdater_task+0xc>

000007b4 <setupGame>:
     7b4:	29 e6       	ldi	r18, 0x69	; 105
     7b6:	31 e0       	ldi	r19, 0x01	; 1
     7b8:	e1 e8       	ldi	r30, 0x81	; 129
     7ba:	f2 e0       	ldi	r31, 0x02	; 2
     7bc:	4d e0       	ldi	r20, 0x0D	; 13
     7be:	53 e0       	ldi	r21, 0x03	; 3
     7c0:	0c c0       	rjmp	.+24     	; 0x7da <setupGame+0x26>
     7c2:	1d 92       	st	X+, r1
     7c4:	1d 92       	st	X+, r1
     7c6:	11 92       	st	Z+, r1
     7c8:	e8 17       	cp	r30, r24
     7ca:	f9 07       	cpc	r31, r25
     7cc:	d1 f7       	brne	.-12     	; 0x7c2 <setupGame+0xe>
     7ce:	2c 5e       	subi	r18, 0xEC	; 236
     7d0:	3f 4f       	sbci	r19, 0xFF	; 255
     7d2:	fc 01       	movw	r30, r24
     7d4:	48 17       	cp	r20, r24
     7d6:	59 07       	cpc	r21, r25
     7d8:	21 f0       	breq	.+8      	; 0x7e2 <setupGame+0x2e>
     7da:	cf 01       	movw	r24, r30
     7dc:	0a 96       	adiw	r24, 0x0a	; 10
     7de:	d9 01       	movw	r26, r18
     7e0:	f0 cf       	rjmp	.-32     	; 0x7c2 <setupGame+0xe>
     7e2:	e5 e6       	ldi	r30, 0x65	; 101
     7e4:	f1 e0       	ldi	r31, 0x01	; 1
     7e6:	85 e0       	ldi	r24, 0x05	; 5
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	91 83       	std	Z+1, r25	; 0x01
     7ec:	80 83       	st	Z, r24
     7ee:	89 e0       	ldi	r24, 0x09	; 9
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	93 83       	std	Z+3, r25	; 0x03
     7f4:	82 83       	std	Z+2, r24	; 0x02
     7f6:	e1 e6       	ldi	r30, 0x61	; 97
     7f8:	f1 e0       	ldi	r31, 0x01	; 1
     7fa:	91 83       	std	Z+1, r25	; 0x01
     7fc:	80 83       	st	Z, r24
     7fe:	87 e0       	ldi	r24, 0x07	; 7
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	93 83       	std	Z+3, r25	; 0x03
     804:	82 83       	std	Z+2, r24	; 0x02
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <myMatrix+0x77>
     80e:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <myMatrix+0x76>
     812:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <myMatrix+0xc3>
     816:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <myMatrix+0xc2>
     81a:	08 95       	ret

0000081c <gameLogic_task>:
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	00 d0       	rcall	.+0      	; 0x822 <gameLogic_task+0x6>
     822:	00 d0       	rcall	.+0      	; 0x824 <gameLogic_task+0x8>
     824:	00 d0       	rcall	.+0      	; 0x826 <gameLogic_task+0xa>
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
     82a:	64 e0       	ldi	r22, 0x04	; 4
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	0e 94 49 10 	call	0x2092	; 0x2092 <vTaskSetApplicationTaskTag>
     836:	01 e0       	ldi	r16, 0x01	; 1
     838:	10 e0       	ldi	r17, 0x00	; 0
     83a:	0f 2e       	mov	r0, r31
     83c:	f5 e6       	ldi	r31, 0x65	; 101
     83e:	ef 2e       	mov	r14, r31
     840:	f1 e0       	ldi	r31, 0x01	; 1
     842:	ff 2e       	mov	r15, r31
     844:	f0 2d       	mov	r31, r0
     846:	0f 2e       	mov	r0, r31
     848:	f1 e6       	ldi	r31, 0x61	; 97
     84a:	cf 2e       	mov	r12, r31
     84c:	f1 e0       	ldi	r31, 0x01	; 1
     84e:	df 2e       	mov	r13, r31
     850:	f0 2d       	mov	r31, r0
     852:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <stop>
     856:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <stop+0x1>
     85a:	00 97       	sbiw	r24, 0x00	; 0
     85c:	09 f0       	breq	.+2      	; 0x860 <gameLogic_task+0x44>
     85e:	53 c0       	rjmp	.+166    	; 0x906 <__stack+0x7>
     860:	20 e0       	ldi	r18, 0x00	; 0
     862:	4f ef       	ldi	r20, 0xFF	; 255
     864:	5f ef       	ldi	r21, 0xFF	; 255
     866:	be 01       	movw	r22, r28
     868:	6f 5f       	subi	r22, 0xFF	; 255
     86a:	7f 4f       	sbci	r23, 0xFF	; 255
     86c:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <xInputQueue>
     870:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <xInputQueue+0x1>
     874:	0e 94 1b 0c 	call	0x1836	; 0x1836 <xQueueGenericReceive>
     878:	88 23       	and	r24, r24
     87a:	09 f4       	brne	.+2      	; 0x87e <gameLogic_task+0x62>
     87c:	3f c0       	rjmp	.+126    	; 0x8fc <gameLogic_task+0xe0>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	4f ef       	ldi	r20, 0xFF	; 255
     882:	5f ef       	ldi	r21, 0xFF	; 255
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <xMutex>
     88c:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <xMutex+0x1>
     890:	0e 94 1b 0c 	call	0x1836	; 0x1836 <xQueueGenericReceive>
     894:	88 23       	and	r24, r24
     896:	91 f1       	breq	.+100    	; 0x8fc <gameLogic_task+0xe0>
     898:	8b 81       	ldd	r24, Y+3	; 0x03
     89a:	9c 81       	ldd	r25, Y+4	; 0x04
     89c:	f7 01       	movw	r30, r14
     89e:	20 81       	ld	r18, Z
     8a0:	31 81       	ldd	r19, Z+1	; 0x01
     8a2:	82 17       	cp	r24, r18
     8a4:	93 07       	cpc	r25, r19
     8a6:	69 f4       	brne	.+26     	; 0x8c2 <gameLogic_task+0xa6>
     8a8:	4d 81       	ldd	r20, Y+5	; 0x05
     8aa:	5e 81       	ldd	r21, Y+6	; 0x06
     8ac:	22 81       	ldd	r18, Z+2	; 0x02
     8ae:	33 81       	ldd	r19, Z+3	; 0x03
     8b0:	42 17       	cp	r20, r18
     8b2:	53 07       	cpc	r21, r19
     8b4:	31 f4       	brne	.+12     	; 0x8c2 <gameLogic_task+0xa6>
     8b6:	b7 01       	movw	r22, r14
     8b8:	89 81       	ldd	r24, Y+1	; 0x01
     8ba:	9a 81       	ldd	r25, Y+2	; 0x02
     8bc:	0e 94 4f 02 	call	0x49e	; 0x49e <moveCar>
     8c0:	12 c0       	rjmp	.+36     	; 0x8e6 <gameLogic_task+0xca>
     8c2:	f6 01       	movw	r30, r12
     8c4:	20 81       	ld	r18, Z
     8c6:	31 81       	ldd	r19, Z+1	; 0x01
     8c8:	82 17       	cp	r24, r18
     8ca:	93 07       	cpc	r25, r19
     8cc:	61 f4       	brne	.+24     	; 0x8e6 <gameLogic_task+0xca>
     8ce:	2d 81       	ldd	r18, Y+5	; 0x05
     8d0:	3e 81       	ldd	r19, Y+6	; 0x06
     8d2:	82 81       	ldd	r24, Z+2	; 0x02
     8d4:	93 81       	ldd	r25, Z+3	; 0x03
     8d6:	28 17       	cp	r18, r24
     8d8:	39 07       	cpc	r19, r25
     8da:	29 f4       	brne	.+10     	; 0x8e6 <gameLogic_task+0xca>
     8dc:	b6 01       	movw	r22, r12
     8de:	89 81       	ldd	r24, Y+1	; 0x01
     8e0:	9a 81       	ldd	r25, Y+2	; 0x02
     8e2:	0e 94 4f 02 	call	0x49e	; 0x49e <moveCar>
     8e6:	20 e0       	ldi	r18, 0x00	; 0
     8e8:	40 e0       	ldi	r20, 0x00	; 0
     8ea:	50 e0       	ldi	r21, 0x00	; 0
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <xMutex>
     8f4:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <xMutex+0x1>
     8f8:	0e 94 26 0b 	call	0x164c	; 0x164c <xQueueGenericSend>
     8fc:	82 e3       	ldi	r24, 0x32	; 50
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <vTaskDelay>
     904:	a6 cf       	rjmp	.-180    	; 0x852 <gameLogic_task+0x36>
     906:	40 91 5d 01 	lds	r20, 0x015D	; 0x80015d <restart1>
     90a:	50 91 5e 01 	lds	r21, 0x015E	; 0x80015e <restart1+0x1>
     90e:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <restart2>
     912:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <restart2+0x1>
     916:	24 0f       	add	r18, r20
     918:	35 1f       	adc	r19, r21
     91a:	82 0f       	add	r24, r18
     91c:	93 1f       	adc	r25, r19
     91e:	02 97       	sbiw	r24, 0x02	; 2
     920:	09 f0       	breq	.+2      	; 0x924 <__stack+0x25>
     922:	97 cf       	rjmp	.-210    	; 0x852 <gameLogic_task+0x36>
     924:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <stop+0x1>
     928:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <stop>
     92c:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <restart1+0x1>
     930:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <restart1>
     934:	10 93 0b 01 	sts	0x010B, r17	; 0x80010b <restart2+0x1>
     938:	00 93 0a 01 	sts	0x010A, r16	; 0x80010a <restart2>
     93c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <setupGame>
     940:	88 cf       	rjmp	.-240    	; 0x852 <gameLogic_task+0x36>

00000942 <startup_task>:
     942:	61 e0       	ldi	r22, 0x01	; 1
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	0e 94 49 10 	call	0x2092	; 0x2092 <vTaskSetApplicationTaskTag>
     94e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <setupGame>
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	0e 94 c7 0b 	call	0x178e	; 0x178e <xQueueCreateMutex>
     958:	90 93 30 03 	sts	0x0330, r25	; 0x800330 <xMutex+0x1>
     95c:	80 93 2f 03 	sts	0x032F, r24	; 0x80032f <xMutex>
     960:	e1 2c       	mov	r14, r1
     962:	f1 2c       	mov	r15, r1
     964:	02 e0       	ldi	r16, 0x02	; 2
     966:	20 e0       	ldi	r18, 0x00	; 0
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	45 e5       	ldi	r20, 0x55	; 85
     96c:	50 e0       	ldi	r21, 0x00	; 0
     96e:	60 e1       	ldi	r22, 0x10	; 16
     970:	71 e0       	ldi	r23, 0x01	; 1
     972:	8d ec       	ldi	r24, 0xCD	; 205
     974:	93 e0       	ldi	r25, 0x03	; 3
     976:	0e 94 67 0d 	call	0x1ace	; 0x1ace <xTaskCreate>
     97a:	07 e0       	ldi	r16, 0x07	; 7
     97c:	20 e0       	ldi	r18, 0x00	; 0
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	45 e5       	ldi	r20, 0x55	; 85
     982:	50 e0       	ldi	r21, 0x00	; 0
     984:	60 e2       	ldi	r22, 0x20	; 32
     986:	71 e0       	ldi	r23, 0x01	; 1
     988:	8e e0       	ldi	r24, 0x0E	; 14
     98a:	94 e0       	ldi	r25, 0x04	; 4
     98c:	0e 94 67 0d 	call	0x1ace	; 0x1ace <xTaskCreate>
     990:	06 e0       	ldi	r16, 0x06	; 6
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	45 e5       	ldi	r20, 0x55	; 85
     998:	50 e0       	ldi	r21, 0x00	; 0
     99a:	6b e2       	ldi	r22, 0x2B	; 43
     99c:	71 e0       	ldi	r23, 0x01	; 1
     99e:	87 e6       	ldi	r24, 0x67	; 103
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	0e 94 67 0d 	call	0x1ace	; 0x1ace <xTaskCreate>
     9a6:	03 e0       	ldi	r16, 0x03	; 3
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	45 e5       	ldi	r20, 0x55	; 85
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	65 e3       	ldi	r22, 0x35	; 53
     9b2:	71 e0       	ldi	r23, 0x01	; 1
     9b4:	8f e9       	ldi	r24, 0x9F	; 159
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	0e 94 67 0d 	call	0x1ace	; 0x1ace <xTaskCreate>
     9bc:	ff cf       	rjmp	.-2      	; 0x9bc <startup_task+0x7a>

000009be <prepare_shiftregister>:

// Prepare shift register setting SER = 1
void prepare_shiftregister()
{
	// Set SER to 1
	PORTD |= _BV(PORTD2);
     9be:	5a 9a       	sbi	0x0b, 2	; 11
     9c0:	08 95       	ret

000009c2 <clock_shift_register_and_prepare_for_next_col>:

// clock shift-register
void clock_shift_register_and_prepare_for_next_col()
{
	// one SCK pulse
	PORTD |= _BV(PORTD5);
     9c2:	5d 9a       	sbi	0x0b, 5	; 11
	PORTD &= ~_BV(PORTD5);
     9c4:	5d 98       	cbi	0x0b, 5	; 11
	
	// one RCK pulse
	PORTD |= _BV(PORTD4);
     9c6:	5c 9a       	sbi	0x0b, 4	; 11
	PORTD &= ~_BV(PORTD4);
     9c8:	5c 98       	cbi	0x0b, 4	; 11
	
	// Set SER to 0 - for next column
	PORTD &= ~_BV(PORTD2);
     9ca:	5a 98       	cbi	0x0b, 2	; 11
     9cc:	08 95       	ret

000009ce <load_col_value>:
}

// Load column value for column to show
void load_col_value(uint16_t col_value)
{
	PORTA = ~(col_value & 0xFF);
     9ce:	80 95       	com	r24
     9d0:	82 b9       	out	0x02, r24	; 2
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
     9d2:	85 b1       	in	r24, 0x05	; 5
     9d4:	83 60       	ori	r24, 0x03	; 3
     9d6:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~((col_value >> 8) & 0x03);
     9d8:	85 b1       	in	r24, 0x05	; 5
     9da:	93 70       	andi	r25, 0x03	; 3
     9dc:	90 95       	com	r25
     9de:	89 23       	and	r24, r25
     9e0:	85 b9       	out	0x05, r24	; 5
     9e2:	08 95       	ret

000009e4 <handle_display>:
}

//-----------------------------------------
void handle_display(void)
{
     9e4:	cf 93       	push	r28
	static uint8_t col = 0;
	
	if (col == 0)
     9e6:	c0 91 5c 01 	lds	r28, 0x015C	; 0x80015c <__data_end>
     9ea:	c1 11       	cpse	r28, r1
     9ec:	0e c0       	rjmp	.+28     	; 0xa0a <handle_display+0x26>
	{
		prepare_shiftregister();
     9ee:	0e 94 df 04 	call	0x9be	; 0x9be <prepare_shiftregister>
	}
	
	load_col_value(frame_buf[col]);
     9f2:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <frame_buf>
     9f6:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <frame_buf+0x1>
     9fa:	0e 94 e7 04 	call	0x9ce	; 0x9ce <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
     9fe:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	col++;
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__data_end>
     a08:	14 c0       	rjmp	.+40     	; 0xa32 <handle_display+0x4e>
	if (col == 0)
	{
		prepare_shiftregister();
	}
	
	load_col_value(frame_buf[col]);
     a0a:	ec 2f       	mov	r30, r28
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	ee 0f       	add	r30, r30
     a10:	ff 1f       	adc	r31, r31
     a12:	e3 5f       	subi	r30, 0xF3	; 243
     a14:	fc 4f       	sbci	r31, 0xFC	; 252
     a16:	80 81       	ld	r24, Z
     a18:	91 81       	ldd	r25, Z+1	; 0x01
     a1a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
     a1e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	col++;
     a22:	cf 5f       	subi	r28, 0xFF	; 255
	if (col > 13)
     a24:	ce 30       	cpi	r28, 0x0E	; 14
     a26:	18 f4       	brcc	.+6      	; 0xa2e <handle_display+0x4a>
	load_col_value(frame_buf[col]);
	
	clock_shift_register_and_prepare_for_next_col();
	
	// count column up - prepare for next
	col++;
     a28:	c0 93 5c 01 	sts	0x015C, r28	; 0x80015c <__data_end>
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <handle_display+0x4e>
	if (col > 13)
	{
		col = 0;
     a2e:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <__data_end>
	}
}
     a32:	cf 91       	pop	r28
     a34:	08 95       	ret

00000a36 <vApplicationIdleHook>:

//-----------------------------------------
void vApplicationIdleHook( void )
{
     a36:	08 95       	ret

00000a38 <main>:


//----------------------------------------- MAIN ---------------------------------------------------------------
int main(void)
{
	init_board();
     a38:	0e 94 b2 05 	call	0xb64	; 0xb64 <init_board>
	_x_com_received_chars_queue = xQueueCreate( _COM_RX_QUEUE_LENGTH, ( unsigned portBASE_TYPE ) sizeof( uint8_t ) );
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	61 e0       	ldi	r22, 0x01	; 1
     a40:	8e e1       	ldi	r24, 0x1E	; 30
     a42:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <xQueueGenericCreate>
     a46:	90 93 32 03 	sts	0x0332, r25	; 0x800332 <_x_com_received_chars_queue+0x1>
     a4a:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <_x_com_received_chars_queue>
	//init_com(_x_com_received_chars_queue);
	//sender_timeout = xTimerCreate("Timeout", pdMS_TO_TICKS(100), pdFALSE, 1, vTimeout);

	xSendQueue = xQueueCreate(5, sizeof(unsigned char));
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	61 e0       	ldi	r22, 0x01	; 1
     a52:	85 e0       	ldi	r24, 0x05	; 5
     a54:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <xQueueGenericCreate>
     a58:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <xSendQueue+0x1>
     a5c:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <xSendQueue>
	xACKQueue = xQueueCreate(5, sizeof(unsigned char));
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	61 e0       	ldi	r22, 0x01	; 1
     a64:	85 e0       	ldi	r24, 0x05	; 5
     a66:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <xQueueGenericCreate>
     a6a:	90 93 2c 03 	sts	0x032C, r25	; 0x80032c <xACKQueue+0x1>
     a6e:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <xACKQueue>
	xInputQueue = xQueueCreate(10, sizeof(struct input));
     a72:	40 e0       	ldi	r20, 0x00	; 0
     a74:	66 e0       	ldi	r22, 0x06	; 6
     a76:	8a e0       	ldi	r24, 0x0A	; 10
     a78:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <xQueueGenericCreate>
     a7c:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <xInputQueue+0x1>
     a80:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <xInputQueue>

	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
     a84:	5e 98       	cbi	0x0b, 6	; 11
	
	//Create task to blink gpio
	BaseType_t t1 = xTaskCreate(startup_task, (const char *)"Startup", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
     a86:	e1 2c       	mov	r14, r1
     a88:	f1 2c       	mov	r15, r1
     a8a:	00 e0       	ldi	r16, 0x00	; 0
     a8c:	20 e0       	ldi	r18, 0x00	; 0
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	45 e5       	ldi	r20, 0x55	; 85
     a92:	50 e0       	ldi	r21, 0x00	; 0
     a94:	66 e4       	ldi	r22, 0x46	; 70
     a96:	71 e0       	ldi	r23, 0x01	; 1
     a98:	81 ea       	ldi	r24, 0xA1	; 161
     a9a:	94 e0       	ldi	r25, 0x04	; 4
     a9c:	0e 94 67 0d 	call	0x1ace	; 0x1ace <xTaskCreate>
	

	// Start the display handler timer
	init_display_timer(handle_display);
     aa0:	82 ef       	ldi	r24, 0xF2	; 242
     aa2:	94 e0       	ldi	r25, 0x04	; 4
     aa4:	0e 94 77 05 	call	0xaee	; 0xaee <init_display_timer>
	
	sei();
     aa8:	78 94       	sei
	
	//Start the scheduler
	vTaskStartScheduler();
     aaa:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <vTaskStartScheduler>
     aae:	ff cf       	rjmp	.-2      	; 0xaae <main+0x76>

00000ab0 <_com_call_back>:
	}
}

// ----------------------------------------------------------------------------------------------------------------------
void com_send_bytes(uint8_t *bytes, uint8_t len) {
	serial_send_bytes(_com_serial_instance, bytes, len);
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	00 d0       	rcall	.+0      	; 0xab6 <_com_call_back+0x6>
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
     aba:	6a 83       	std	Y+2, r22	; 0x02
     abc:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <_x_rx_com_queue>
     ac0:	90 91 7c 03 	lds	r25, 0x037C	; 0x80037c <_x_rx_com_queue+0x1>
     ac4:	00 97       	sbiw	r24, 0x00	; 0
     ac6:	71 f0       	breq	.+28     	; 0xae4 <_com_call_back+0x34>
     ac8:	19 82       	std	Y+1, r1	; 0x01
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	ae 01       	movw	r20, r28
     ace:	4f 5f       	subi	r20, 0xFF	; 255
     ad0:	5f 4f       	sbci	r21, 0xFF	; 255
     ad2:	be 01       	movw	r22, r28
     ad4:	6e 5f       	subi	r22, 0xFE	; 254
     ad6:	7f 4f       	sbci	r23, 0xFF	; 255
     ad8:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <xQueueGenericSendFromISR>
     adc:	89 81       	ldd	r24, Y+1	; 0x01
     ade:	81 11       	cpse	r24, r1
     ae0:	0e 94 7e 07 	call	0xefc	; 0xefc <vPortYield>
     ae4:	0f 90       	pop	r0
     ae6:	0f 90       	pop	r0
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	08 95       	ret

00000aee <init_display_timer>:
     aee:	90 93 7a 03 	sts	0x037A, r25	; 0x80037a <cb_ptr+0x1>
     af2:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <cb_ptr>
     af6:	8a e0       	ldi	r24, 0x0A	; 10
     af8:	87 bd       	out	0x27, r24	; 39
     afa:	84 b5       	in	r24, 0x24	; 36
     afc:	82 60       	ori	r24, 0x02	; 2
     afe:	84 bd       	out	0x24, r24	; 36
     b00:	ee e6       	ldi	r30, 0x6E	; 110
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	80 81       	ld	r24, Z
     b06:	82 60       	ori	r24, 0x02	; 2
     b08:	80 83       	st	Z, r24
     b0a:	85 b5       	in	r24, 0x25	; 37
     b0c:	85 60       	ori	r24, 0x05	; 5
     b0e:	85 bd       	out	0x25, r24	; 37
     b10:	08 95       	ret

00000b12 <__vector_16>:
     b12:	1f 92       	push	r1
     b14:	0f 92       	push	r0
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	0f 92       	push	r0
     b1a:	11 24       	eor	r1, r1
     b1c:	2f 93       	push	r18
     b1e:	3f 93       	push	r19
     b20:	4f 93       	push	r20
     b22:	5f 93       	push	r21
     b24:	6f 93       	push	r22
     b26:	7f 93       	push	r23
     b28:	8f 93       	push	r24
     b2a:	9f 93       	push	r25
     b2c:	af 93       	push	r26
     b2e:	bf 93       	push	r27
     b30:	ef 93       	push	r30
     b32:	ff 93       	push	r31
     b34:	e0 91 79 03 	lds	r30, 0x0379	; 0x800379 <cb_ptr>
     b38:	f0 91 7a 03 	lds	r31, 0x037A	; 0x80037a <cb_ptr+0x1>
     b3c:	30 97       	sbiw	r30, 0x00	; 0
     b3e:	09 f0       	breq	.+2      	; 0xb42 <__vector_16+0x30>
     b40:	09 95       	icall
     b42:	ff 91       	pop	r31
     b44:	ef 91       	pop	r30
     b46:	bf 91       	pop	r27
     b48:	af 91       	pop	r26
     b4a:	9f 91       	pop	r25
     b4c:	8f 91       	pop	r24
     b4e:	7f 91       	pop	r23
     b50:	6f 91       	pop	r22
     b52:	5f 91       	pop	r21
     b54:	4f 91       	pop	r20
     b56:	3f 91       	pop	r19
     b58:	2f 91       	pop	r18
     b5a:	0f 90       	pop	r0
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	0f 90       	pop	r0
     b60:	1f 90       	pop	r1
     b62:	18 95       	reti

00000b64 <init_board>:
}

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
     b64:	8f 92       	push	r8
     b66:	9f 92       	push	r9
     b68:	af 92       	push	r10
     b6a:	bf 92       	push	r11
     b6c:	cf 92       	push	r12
     b6e:	df 92       	push	r13
     b70:	ef 92       	push	r14
     b72:	0f 93       	push	r16
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
     b74:	86 e5       	ldi	r24, 0x56	; 86
     b76:	93 e0       	ldi	r25, 0x03	; 3
     b78:	0e 94 0b 06 	call	0xc16	; 0xc16 <buffer_init>
	buffer_init(&_com_tx_buffer);
     b7c:	83 e3       	ldi	r24, 0x33	; 51
     b7e:	93 e0       	ldi	r25, 0x03	; 3
     b80:	0e 94 0b 06 	call	0xc16	; 0xc16 <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
     b84:	0f 2e       	mov	r0, r31
     b86:	f8 e5       	ldi	r31, 0x58	; 88
     b88:	8f 2e       	mov	r8, r31
     b8a:	f5 e0       	ldi	r31, 0x05	; 5
     b8c:	9f 2e       	mov	r9, r31
     b8e:	f0 2d       	mov	r31, r0
     b90:	0f 2e       	mov	r0, r31
     b92:	f3 e3       	ldi	r31, 0x33	; 51
     b94:	af 2e       	mov	r10, r31
     b96:	f3 e0       	ldi	r31, 0x03	; 3
     b98:	bf 2e       	mov	r11, r31
     b9a:	f0 2d       	mov	r31, r0
     b9c:	0f 2e       	mov	r0, r31
     b9e:	f6 e5       	ldi	r31, 0x56	; 86
     ba0:	cf 2e       	mov	r12, r31
     ba2:	f3 e0       	ldi	r31, 0x03	; 3
     ba4:	df 2e       	mov	r13, r31
     ba6:	f0 2d       	mov	r31, r0
     ba8:	e1 2c       	mov	r14, r1
     baa:	00 e0       	ldi	r16, 0x00	; 0
     bac:	23 e0       	ldi	r18, 0x03	; 3
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	52 ec       	ldi	r21, 0xC2	; 194
     bb2:	61 e0       	ldi	r22, 0x01	; 1
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <serial_new_instance>
     bbc:	90 93 7e 03 	sts	0x037E, r25	; 0x80037e <_com_serial_instance+0x1>
     bc0:	80 93 7d 03 	sts	0x037D, r24	; 0x80037d <_com_serial_instance>
	
	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
     bc4:	88 b1       	in	r24, 0x08	; 8
     bc6:	83 6c       	ori	r24, 0xC3	; 195
     bc8:	88 b9       	out	0x08, r24	; 8
	PORTD |= _BV(PORTD3);
     bca:	5b 9a       	sbi	0x0b, 3	; 11
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
     bcc:	8a b1       	in	r24, 0x0a	; 10
     bce:	84 67       	ori	r24, 0x74	; 116
     bd0:	8a b9       	out	0x0a, r24	; 10
	// G (enable output) high
	PORTD |= _BV(PORTD6);
     bd2:	5e 9a       	sbi	0x0b, 6	; 11
	
	// Column pins to output
	DDRA |= 0xFF;
     bd4:	81 b1       	in	r24, 0x01	; 1
     bd6:	8f ef       	ldi	r24, 0xFF	; 255
     bd8:	81 b9       	out	0x01, r24	; 1
	DDRB |= _BV(DDB0) | _BV(DDB1);
     bda:	84 b1       	in	r24, 0x04	; 4
     bdc:	83 60       	ori	r24, 0x03	; 3
     bde:	84 b9       	out	0x04, r24	; 4
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
     be0:	84 b1       	in	r24, 0x04	; 4
     be2:	8c 63       	ori	r24, 0x3C	; 60
     be4:	84 b9       	out	0x04, r24	; 4
}
     be6:	0f 91       	pop	r16
     be8:	ef 90       	pop	r14
     bea:	df 90       	pop	r13
     bec:	cf 90       	pop	r12
     bee:	bf 90       	pop	r11
     bf0:	af 90       	pop	r10
     bf2:	9f 90       	pop	r9
     bf4:	8f 90       	pop	r8
     bf6:	08 95       	ret

00000bf8 <switch_in>:
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
		PORTB &= 0b11000011;
     bf8:	95 b1       	in	r25, 0x05	; 5
     bfa:	93 7c       	andi	r25, 0xC3	; 195
     bfc:	95 b9       	out	0x05, r25	; 5
		PORTB |= task_no << 2;
     bfe:	25 b1       	in	r18, 0x05	; 5
     c00:	34 e0       	ldi	r19, 0x04	; 4
     c02:	83 9f       	mul	r24, r19
     c04:	c0 01       	movw	r24, r0
     c06:	11 24       	eor	r1, r1
     c08:	82 2b       	or	r24, r18
     c0a:	85 b9       	out	0x05, r24	; 5
     c0c:	08 95       	ret

00000c0e <switch_out>:
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
		PORTB &= 0b11000011;
     c0e:	85 b1       	in	r24, 0x05	; 5
     c10:	83 7c       	andi	r24, 0xC3	; 195
     c12:	85 b9       	out	0x05, r24	; 5
     c14:	08 95       	ret

00000c16 <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
     c16:	fc 01       	movw	r30, r24
	buffer->in_i = 0;
     c18:	10 a2       	std	Z+32, r1	; 0x20
	buffer->out_i = 0;
     c1a:	11 a2       	std	Z+33, r1	; 0x21
	buffer->no_in_buffer = 0;
     c1c:	12 a2       	std	Z+34, r1	; 0x22
     c1e:	08 95       	ret

00000c20 <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
     c20:	fc 01       	movw	r30, r24
	if (buffer->no_in_buffer > 0) {
     c22:	82 a1       	ldd	r24, Z+34	; 0x22
     c24:	88 23       	and	r24, r24
     c26:	d9 f0       	breq	.+54     	; 0xc5e <buffer_get_item+0x3e>
		*item = buffer->storage[buffer->out_i];
     c28:	81 a1       	ldd	r24, Z+33	; 0x21
     c2a:	df 01       	movw	r26, r30
     c2c:	a8 0f       	add	r26, r24
     c2e:	b1 1d       	adc	r27, r1
     c30:	8c 91       	ld	r24, X
     c32:	db 01       	movw	r26, r22
     c34:	8c 93       	st	X, r24
		buffer->out_i = INCREMENT(buffer->out_i);
     c36:	21 a1       	ldd	r18, Z+33	; 0x21
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	2f 5f       	subi	r18, 0xFF	; 255
     c3c:	3f 4f       	sbci	r19, 0xFF	; 255
     c3e:	2f 71       	andi	r18, 0x1F	; 31
     c40:	30 78       	andi	r19, 0x80	; 128
     c42:	33 23       	and	r19, r19
     c44:	34 f4       	brge	.+12     	; 0xc52 <buffer_get_item+0x32>
     c46:	21 50       	subi	r18, 0x01	; 1
     c48:	31 09       	sbc	r19, r1
     c4a:	20 6e       	ori	r18, 0xE0	; 224
     c4c:	3f 6f       	ori	r19, 0xFF	; 255
     c4e:	2f 5f       	subi	r18, 0xFF	; 255
     c50:	3f 4f       	sbci	r19, 0xFF	; 255
     c52:	21 a3       	std	Z+33, r18	; 0x21
		buffer->no_in_buffer--;
     c54:	82 a1       	ldd	r24, Z+34	; 0x22
     c56:	81 50       	subi	r24, 0x01	; 1
     c58:	82 a3       	std	Z+34, r24	; 0x22
		return BUFFER_OK;
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	08 95       	ret
	}
	return BUFFER_EMPTY;
     c5e:	81 e0       	ldi	r24, 0x01	; 1
}
     c60:	08 95       	ret

00000c62 <buffer_put_item>:
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
	if (buffer->no_in_buffer<BUFFER_SIZE) {
     c62:	fc 01       	movw	r30, r24
     c64:	42 a1       	ldd	r20, Z+34	; 0x22
     c66:	40 32       	cpi	r20, 0x20	; 32
     c68:	b8 f4       	brcc	.+46     	; 0xc98 <buffer_put_item+0x36>
		buffer->storage[buffer->in_i] = item;
     c6a:	20 a1       	ldd	r18, Z+32	; 0x20
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	e2 0f       	add	r30, r18
     c70:	f3 1f       	adc	r31, r19
     c72:	60 83       	st	Z, r22
		buffer->in_i = INCREMENT(buffer->in_i);
     c74:	2f 5f       	subi	r18, 0xFF	; 255
     c76:	3f 4f       	sbci	r19, 0xFF	; 255
     c78:	2f 71       	andi	r18, 0x1F	; 31
     c7a:	30 78       	andi	r19, 0x80	; 128
     c7c:	33 23       	and	r19, r19
     c7e:	34 f4       	brge	.+12     	; 0xc8c <buffer_put_item+0x2a>
     c80:	21 50       	subi	r18, 0x01	; 1
     c82:	31 09       	sbc	r19, r1
     c84:	20 6e       	ori	r18, 0xE0	; 224
     c86:	3f 6f       	ori	r19, 0xFF	; 255
     c88:	2f 5f       	subi	r18, 0xFF	; 255
     c8a:	3f 4f       	sbci	r19, 0xFF	; 255
     c8c:	fc 01       	movw	r30, r24
     c8e:	20 a3       	std	Z+32, r18	; 0x20
		buffer->no_in_buffer++;
     c90:	4f 5f       	subi	r20, 0xFF	; 255
     c92:	42 a3       	std	Z+34, r20	; 0x22
		return BUFFER_OK;
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	08 95       	ret
	}
	return BUFFER_FULL;
     c98:	82 e0       	ldi	r24, 0x02	; 2
}
     c9a:	08 95       	ret

00000c9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     c9c:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c9e:	03 96       	adiw	r24, 0x03	; 3
     ca0:	92 83       	std	Z+2, r25	; 0x02
     ca2:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     ca4:	2f ef       	ldi	r18, 0xFF	; 255
     ca6:	3f ef       	ldi	r19, 0xFF	; 255
     ca8:	34 83       	std	Z+4, r19	; 0x04
     caa:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     cac:	96 83       	std	Z+6, r25	; 0x06
     cae:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     cb0:	90 87       	std	Z+8, r25	; 0x08
     cb2:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     cb4:	10 82       	st	Z, r1
     cb6:	08 95       	ret

00000cb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     cb8:	fc 01       	movw	r30, r24
     cba:	11 86       	std	Z+9, r1	; 0x09
     cbc:	10 86       	std	Z+8, r1	; 0x08
     cbe:	08 95       	ret

00000cc0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	9c 01       	movw	r18, r24
     cc6:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     cc8:	dc 01       	movw	r26, r24
     cca:	11 96       	adiw	r26, 0x01	; 1
     ccc:	cd 91       	ld	r28, X+
     cce:	dc 91       	ld	r29, X
     cd0:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     cd2:	d3 83       	std	Z+3, r29	; 0x03
     cd4:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     cd6:	8c 81       	ldd	r24, Y+4	; 0x04
     cd8:	9d 81       	ldd	r25, Y+5	; 0x05
     cda:	95 83       	std	Z+5, r25	; 0x05
     cdc:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     cde:	8c 81       	ldd	r24, Y+4	; 0x04
     ce0:	9d 81       	ldd	r25, Y+5	; 0x05
     ce2:	dc 01       	movw	r26, r24
     ce4:	13 96       	adiw	r26, 0x03	; 3
     ce6:	7c 93       	st	X, r23
     ce8:	6e 93       	st	-X, r22
     cea:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     cec:	7d 83       	std	Y+5, r23	; 0x05
     cee:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     cf0:	31 87       	std	Z+9, r19	; 0x09
     cf2:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     cf4:	f9 01       	movw	r30, r18
     cf6:	80 81       	ld	r24, Z
     cf8:	8f 5f       	subi	r24, 0xFF	; 255
     cfa:	80 83       	st	Z, r24
}
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	08 95       	ret

00000d02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
     d06:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     d08:	48 81       	ld	r20, Y
     d0a:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     d0c:	4f 3f       	cpi	r20, 0xFF	; 255
     d0e:	2f ef       	ldi	r18, 0xFF	; 255
     d10:	52 07       	cpc	r21, r18
     d12:	21 f4       	brne	.+8      	; 0xd1c <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     d14:	fc 01       	movw	r30, r24
     d16:	a7 81       	ldd	r26, Z+7	; 0x07
     d18:	b0 85       	ldd	r27, Z+8	; 0x08
     d1a:	0d c0       	rjmp	.+26     	; 0xd36 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d1c:	dc 01       	movw	r26, r24
     d1e:	13 96       	adiw	r26, 0x03	; 3
     d20:	01 c0       	rjmp	.+2      	; 0xd24 <vListInsert+0x22>
     d22:	df 01       	movw	r26, r30
     d24:	12 96       	adiw	r26, 0x02	; 2
     d26:	ed 91       	ld	r30, X+
     d28:	fc 91       	ld	r31, X
     d2a:	13 97       	sbiw	r26, 0x03	; 3
     d2c:	20 81       	ld	r18, Z
     d2e:	31 81       	ldd	r19, Z+1	; 0x01
     d30:	42 17       	cp	r20, r18
     d32:	53 07       	cpc	r21, r19
     d34:	b0 f7       	brcc	.-20     	; 0xd22 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     d36:	12 96       	adiw	r26, 0x02	; 2
     d38:	ed 91       	ld	r30, X+
     d3a:	fc 91       	ld	r31, X
     d3c:	13 97       	sbiw	r26, 0x03	; 3
     d3e:	fb 83       	std	Y+3, r31	; 0x03
     d40:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     d42:	d5 83       	std	Z+5, r29	; 0x05
     d44:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     d46:	bd 83       	std	Y+5, r27	; 0x05
     d48:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     d4a:	13 96       	adiw	r26, 0x03	; 3
     d4c:	dc 93       	st	X, r29
     d4e:	ce 93       	st	-X, r28
     d50:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     d52:	99 87       	std	Y+9, r25	; 0x09
     d54:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     d56:	fc 01       	movw	r30, r24
     d58:	20 81       	ld	r18, Z
     d5a:	2f 5f       	subi	r18, 0xFF	; 255
     d5c:	20 83       	st	Z, r18
}
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	08 95       	ret

00000d64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     d6a:	a0 85       	ldd	r26, Z+8	; 0x08
     d6c:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     d6e:	c2 81       	ldd	r28, Z+2	; 0x02
     d70:	d3 81       	ldd	r29, Z+3	; 0x03
     d72:	84 81       	ldd	r24, Z+4	; 0x04
     d74:	95 81       	ldd	r25, Z+5	; 0x05
     d76:	9d 83       	std	Y+5, r25	; 0x05
     d78:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     d7a:	c4 81       	ldd	r28, Z+4	; 0x04
     d7c:	d5 81       	ldd	r29, Z+5	; 0x05
     d7e:	82 81       	ldd	r24, Z+2	; 0x02
     d80:	93 81       	ldd	r25, Z+3	; 0x03
     d82:	9b 83       	std	Y+3, r25	; 0x03
     d84:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	8d 91       	ld	r24, X+
     d8a:	9c 91       	ld	r25, X
     d8c:	12 97       	sbiw	r26, 0x02	; 2
     d8e:	e8 17       	cp	r30, r24
     d90:	f9 07       	cpc	r31, r25
     d92:	31 f4       	brne	.+12     	; 0xda0 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     d94:	84 81       	ldd	r24, Z+4	; 0x04
     d96:	95 81       	ldd	r25, Z+5	; 0x05
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	9c 93       	st	X, r25
     d9c:	8e 93       	st	-X, r24
     d9e:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     da0:	11 86       	std	Z+9, r1	; 0x09
     da2:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     da4:	8c 91       	ld	r24, X
     da6:	81 50       	subi	r24, 0x01	; 1
     da8:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	08 95       	ret

00000db0 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     db0:	31 e1       	ldi	r19, 0x11	; 17
     db2:	fc 01       	movw	r30, r24
     db4:	30 83       	st	Z, r19
     db6:	31 97       	sbiw	r30, 0x01	; 1
     db8:	22 e2       	ldi	r18, 0x22	; 34
     dba:	20 83       	st	Z, r18
     dbc:	31 97       	sbiw	r30, 0x01	; 1
     dbe:	a3 e3       	ldi	r26, 0x33	; 51
     dc0:	a0 83       	st	Z, r26
     dc2:	31 97       	sbiw	r30, 0x01	; 1
     dc4:	60 83       	st	Z, r22
     dc6:	31 97       	sbiw	r30, 0x01	; 1
     dc8:	70 83       	st	Z, r23
     dca:	31 97       	sbiw	r30, 0x01	; 1
     dcc:	10 82       	st	Z, r1
     dce:	31 97       	sbiw	r30, 0x01	; 1
     dd0:	60 e8       	ldi	r22, 0x80	; 128
     dd2:	60 83       	st	Z, r22
     dd4:	31 97       	sbiw	r30, 0x01	; 1
     dd6:	10 82       	st	Z, r1
     dd8:	31 97       	sbiw	r30, 0x01	; 1
     dda:	62 e0       	ldi	r22, 0x02	; 2
     ddc:	60 83       	st	Z, r22
     dde:	31 97       	sbiw	r30, 0x01	; 1
     de0:	63 e0       	ldi	r22, 0x03	; 3
     de2:	60 83       	st	Z, r22
     de4:	31 97       	sbiw	r30, 0x01	; 1
     de6:	64 e0       	ldi	r22, 0x04	; 4
     de8:	60 83       	st	Z, r22
     dea:	31 97       	sbiw	r30, 0x01	; 1
     dec:	65 e0       	ldi	r22, 0x05	; 5
     dee:	60 83       	st	Z, r22
     df0:	31 97       	sbiw	r30, 0x01	; 1
     df2:	66 e0       	ldi	r22, 0x06	; 6
     df4:	60 83       	st	Z, r22
     df6:	31 97       	sbiw	r30, 0x01	; 1
     df8:	67 e0       	ldi	r22, 0x07	; 7
     dfa:	60 83       	st	Z, r22
     dfc:	31 97       	sbiw	r30, 0x01	; 1
     dfe:	68 e0       	ldi	r22, 0x08	; 8
     e00:	60 83       	st	Z, r22
     e02:	31 97       	sbiw	r30, 0x01	; 1
     e04:	69 e0       	ldi	r22, 0x09	; 9
     e06:	60 83       	st	Z, r22
     e08:	31 97       	sbiw	r30, 0x01	; 1
     e0a:	60 e1       	ldi	r22, 0x10	; 16
     e0c:	60 83       	st	Z, r22
     e0e:	31 97       	sbiw	r30, 0x01	; 1
     e10:	30 83       	st	Z, r19
     e12:	31 97       	sbiw	r30, 0x01	; 1
     e14:	32 e1       	ldi	r19, 0x12	; 18
     e16:	30 83       	st	Z, r19
     e18:	31 97       	sbiw	r30, 0x01	; 1
     e1a:	33 e1       	ldi	r19, 0x13	; 19
     e1c:	30 83       	st	Z, r19
     e1e:	31 97       	sbiw	r30, 0x01	; 1
     e20:	34 e1       	ldi	r19, 0x14	; 20
     e22:	30 83       	st	Z, r19
     e24:	31 97       	sbiw	r30, 0x01	; 1
     e26:	35 e1       	ldi	r19, 0x15	; 21
     e28:	30 83       	st	Z, r19
     e2a:	31 97       	sbiw	r30, 0x01	; 1
     e2c:	36 e1       	ldi	r19, 0x16	; 22
     e2e:	30 83       	st	Z, r19
     e30:	31 97       	sbiw	r30, 0x01	; 1
     e32:	37 e1       	ldi	r19, 0x17	; 23
     e34:	30 83       	st	Z, r19
     e36:	31 97       	sbiw	r30, 0x01	; 1
     e38:	38 e1       	ldi	r19, 0x18	; 24
     e3a:	30 83       	st	Z, r19
     e3c:	31 97       	sbiw	r30, 0x01	; 1
     e3e:	39 e1       	ldi	r19, 0x19	; 25
     e40:	30 83       	st	Z, r19
     e42:	31 97       	sbiw	r30, 0x01	; 1
     e44:	30 e2       	ldi	r19, 0x20	; 32
     e46:	30 83       	st	Z, r19
     e48:	31 97       	sbiw	r30, 0x01	; 1
     e4a:	31 e2       	ldi	r19, 0x21	; 33
     e4c:	30 83       	st	Z, r19
     e4e:	31 97       	sbiw	r30, 0x01	; 1
     e50:	20 83       	st	Z, r18
     e52:	31 97       	sbiw	r30, 0x01	; 1
     e54:	23 e2       	ldi	r18, 0x23	; 35
     e56:	20 83       	st	Z, r18
     e58:	31 97       	sbiw	r30, 0x01	; 1
     e5a:	40 83       	st	Z, r20
     e5c:	31 97       	sbiw	r30, 0x01	; 1
     e5e:	50 83       	st	Z, r21
     e60:	31 97       	sbiw	r30, 0x01	; 1
     e62:	26 e2       	ldi	r18, 0x26	; 38
     e64:	20 83       	st	Z, r18
     e66:	31 97       	sbiw	r30, 0x01	; 1
     e68:	27 e2       	ldi	r18, 0x27	; 39
     e6a:	20 83       	st	Z, r18
     e6c:	31 97       	sbiw	r30, 0x01	; 1
     e6e:	28 e2       	ldi	r18, 0x28	; 40
     e70:	20 83       	st	Z, r18
     e72:	31 97       	sbiw	r30, 0x01	; 1
     e74:	29 e2       	ldi	r18, 0x29	; 41
     e76:	20 83       	st	Z, r18
     e78:	31 97       	sbiw	r30, 0x01	; 1
     e7a:	20 e3       	ldi	r18, 0x30	; 48
     e7c:	20 83       	st	Z, r18
     e7e:	31 97       	sbiw	r30, 0x01	; 1
     e80:	21 e3       	ldi	r18, 0x31	; 49
     e82:	20 83       	st	Z, r18
     e84:	86 97       	sbiw	r24, 0x26	; 38
     e86:	08 95       	ret

00000e88 <xPortStartScheduler>:
     e88:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     e8c:	85 ee       	ldi	r24, 0xE5	; 229
     e8e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     e92:	8b e0       	ldi	r24, 0x0B	; 11
     e94:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     e98:	ef e6       	ldi	r30, 0x6F	; 111
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	82 60       	ori	r24, 0x02	; 2
     ea0:	80 83       	st	Z, r24
     ea2:	a0 91 b6 08 	lds	r26, 0x08B6	; 0x8008b6 <pxCurrentTCB>
     ea6:	b0 91 b7 08 	lds	r27, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
     eaa:	cd 91       	ld	r28, X+
     eac:	cd bf       	out	0x3d, r28	; 61
     eae:	dd 91       	ld	r29, X+
     eb0:	de bf       	out	0x3e, r29	; 62
     eb2:	ff 91       	pop	r31
     eb4:	ef 91       	pop	r30
     eb6:	df 91       	pop	r29
     eb8:	cf 91       	pop	r28
     eba:	bf 91       	pop	r27
     ebc:	af 91       	pop	r26
     ebe:	9f 91       	pop	r25
     ec0:	8f 91       	pop	r24
     ec2:	7f 91       	pop	r23
     ec4:	6f 91       	pop	r22
     ec6:	5f 91       	pop	r21
     ec8:	4f 91       	pop	r20
     eca:	3f 91       	pop	r19
     ecc:	2f 91       	pop	r18
     ece:	1f 91       	pop	r17
     ed0:	0f 91       	pop	r16
     ed2:	ff 90       	pop	r15
     ed4:	ef 90       	pop	r14
     ed6:	df 90       	pop	r13
     ed8:	cf 90       	pop	r12
     eda:	bf 90       	pop	r11
     edc:	af 90       	pop	r10
     ede:	9f 90       	pop	r9
     ee0:	8f 90       	pop	r8
     ee2:	7f 90       	pop	r7
     ee4:	6f 90       	pop	r6
     ee6:	5f 90       	pop	r5
     ee8:	4f 90       	pop	r4
     eea:	3f 90       	pop	r3
     eec:	2f 90       	pop	r2
     eee:	1f 90       	pop	r1
     ef0:	0f 90       	pop	r0
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	0f 90       	pop	r0
     ef6:	08 95       	ret
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	08 95       	ret

00000efc <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     efc:	0f 92       	push	r0
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	f8 94       	cli
     f02:	0f 92       	push	r0
     f04:	1f 92       	push	r1
     f06:	11 24       	eor	r1, r1
     f08:	2f 92       	push	r2
     f0a:	3f 92       	push	r3
     f0c:	4f 92       	push	r4
     f0e:	5f 92       	push	r5
     f10:	6f 92       	push	r6
     f12:	7f 92       	push	r7
     f14:	8f 92       	push	r8
     f16:	9f 92       	push	r9
     f18:	af 92       	push	r10
     f1a:	bf 92       	push	r11
     f1c:	cf 92       	push	r12
     f1e:	df 92       	push	r13
     f20:	ef 92       	push	r14
     f22:	ff 92       	push	r15
     f24:	0f 93       	push	r16
     f26:	1f 93       	push	r17
     f28:	2f 93       	push	r18
     f2a:	3f 93       	push	r19
     f2c:	4f 93       	push	r20
     f2e:	5f 93       	push	r21
     f30:	6f 93       	push	r22
     f32:	7f 93       	push	r23
     f34:	8f 93       	push	r24
     f36:	9f 93       	push	r25
     f38:	af 93       	push	r26
     f3a:	bf 93       	push	r27
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	ef 93       	push	r30
     f42:	ff 93       	push	r31
     f44:	a0 91 b6 08 	lds	r26, 0x08B6	; 0x8008b6 <pxCurrentTCB>
     f48:	b0 91 b7 08 	lds	r27, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
     f4c:	0d b6       	in	r0, 0x3d	; 61
     f4e:	0d 92       	st	X+, r0
     f50:	0e b6       	in	r0, 0x3e	; 62
     f52:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     f54:	0e 94 58 10 	call	0x20b0	; 0x20b0 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     f58:	a0 91 b6 08 	lds	r26, 0x08B6	; 0x8008b6 <pxCurrentTCB>
     f5c:	b0 91 b7 08 	lds	r27, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
     f60:	cd 91       	ld	r28, X+
     f62:	cd bf       	out	0x3d, r28	; 61
     f64:	dd 91       	ld	r29, X+
     f66:	de bf       	out	0x3e, r29	; 62
     f68:	ff 91       	pop	r31
     f6a:	ef 91       	pop	r30
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	bf 91       	pop	r27
     f72:	af 91       	pop	r26
     f74:	9f 91       	pop	r25
     f76:	8f 91       	pop	r24
     f78:	7f 91       	pop	r23
     f7a:	6f 91       	pop	r22
     f7c:	5f 91       	pop	r21
     f7e:	4f 91       	pop	r20
     f80:	3f 91       	pop	r19
     f82:	2f 91       	pop	r18
     f84:	1f 91       	pop	r17
     f86:	0f 91       	pop	r16
     f88:	ff 90       	pop	r15
     f8a:	ef 90       	pop	r14
     f8c:	df 90       	pop	r13
     f8e:	cf 90       	pop	r12
     f90:	bf 90       	pop	r11
     f92:	af 90       	pop	r10
     f94:	9f 90       	pop	r9
     f96:	8f 90       	pop	r8
     f98:	7f 90       	pop	r7
     f9a:	6f 90       	pop	r6
     f9c:	5f 90       	pop	r5
     f9e:	4f 90       	pop	r4
     fa0:	3f 90       	pop	r3
     fa2:	2f 90       	pop	r2
     fa4:	1f 90       	pop	r1
     fa6:	0f 90       	pop	r0
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	0f 90       	pop	r0

	asm volatile ( "ret" );
     fac:	08 95       	ret

00000fae <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     fae:	0f 92       	push	r0
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	0f 92       	push	r0
     fb6:	1f 92       	push	r1
     fb8:	11 24       	eor	r1, r1
     fba:	2f 92       	push	r2
     fbc:	3f 92       	push	r3
     fbe:	4f 92       	push	r4
     fc0:	5f 92       	push	r5
     fc2:	6f 92       	push	r6
     fc4:	7f 92       	push	r7
     fc6:	8f 92       	push	r8
     fc8:	9f 92       	push	r9
     fca:	af 92       	push	r10
     fcc:	bf 92       	push	r11
     fce:	cf 92       	push	r12
     fd0:	df 92       	push	r13
     fd2:	ef 92       	push	r14
     fd4:	ff 92       	push	r15
     fd6:	0f 93       	push	r16
     fd8:	1f 93       	push	r17
     fda:	2f 93       	push	r18
     fdc:	3f 93       	push	r19
     fde:	4f 93       	push	r20
     fe0:	5f 93       	push	r21
     fe2:	6f 93       	push	r22
     fe4:	7f 93       	push	r23
     fe6:	8f 93       	push	r24
     fe8:	9f 93       	push	r25
     fea:	af 93       	push	r26
     fec:	bf 93       	push	r27
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	ef 93       	push	r30
     ff4:	ff 93       	push	r31
     ff6:	a0 91 b6 08 	lds	r26, 0x08B6	; 0x8008b6 <pxCurrentTCB>
     ffa:	b0 91 b7 08 	lds	r27, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
     ffe:	0d b6       	in	r0, 0x3d	; 61
    1000:	0d 92       	st	X+, r0
    1002:	0e b6       	in	r0, 0x3e	; 62
    1004:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    1006:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <xTaskIncrementTick>
    100a:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    100c:	0e 94 58 10 	call	0x20b0	; 0x20b0 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    1010:	a0 91 b6 08 	lds	r26, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    1014:	b0 91 b7 08 	lds	r27, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    1018:	cd 91       	ld	r28, X+
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	dd 91       	ld	r29, X+
    101e:	de bf       	out	0x3e, r29	; 62
    1020:	ff 91       	pop	r31
    1022:	ef 91       	pop	r30
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	bf 91       	pop	r27
    102a:	af 91       	pop	r26
    102c:	9f 91       	pop	r25
    102e:	8f 91       	pop	r24
    1030:	7f 91       	pop	r23
    1032:	6f 91       	pop	r22
    1034:	5f 91       	pop	r21
    1036:	4f 91       	pop	r20
    1038:	3f 91       	pop	r19
    103a:	2f 91       	pop	r18
    103c:	1f 91       	pop	r17
    103e:	0f 91       	pop	r16
    1040:	ff 90       	pop	r15
    1042:	ef 90       	pop	r14
    1044:	df 90       	pop	r13
    1046:	cf 90       	pop	r12
    1048:	bf 90       	pop	r11
    104a:	af 90       	pop	r10
    104c:	9f 90       	pop	r9
    104e:	8f 90       	pop	r8
    1050:	7f 90       	pop	r7
    1052:	6f 90       	pop	r6
    1054:	5f 90       	pop	r5
    1056:	4f 90       	pop	r4
    1058:	3f 90       	pop	r3
    105a:	2f 90       	pop	r2
    105c:	1f 90       	pop	r1
    105e:	0f 90       	pop	r0
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1064:	08 95       	ret

00001066 <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
    1066:	0e 94 d7 07 	call	0xfae	; 0xfae <vPortYieldFromTick>
		asm volatile ( "reti" );
    106a:	18 95       	reti

0000106c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    106c:	cf 93       	push	r28
    106e:	df 93       	push	r29
    1070:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    1072:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    1076:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <pucAlignedHeap.2084>
    107a:	90 91 80 03 	lds	r25, 0x0380	; 0x800380 <pucAlignedHeap.2084+0x1>
    107e:	89 2b       	or	r24, r25
    1080:	31 f4       	brne	.+12     	; 0x108e <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1082:	84 e8       	ldi	r24, 0x84	; 132
    1084:	93 e0       	ldi	r25, 0x03	; 3
    1086:	90 93 80 03 	sts	0x0380, r25	; 0x800380 <pucAlignedHeap.2084+0x1>
    108a:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <pucAlignedHeap.2084>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    108e:	20 91 81 03 	lds	r18, 0x0381	; 0x800381 <xNextFreeByte>
    1092:	30 91 82 03 	lds	r19, 0x0382	; 0x800382 <xNextFreeByte+0x1>
    1096:	c9 01       	movw	r24, r18
    1098:	8c 0f       	add	r24, r28
    109a:	9d 1f       	adc	r25, r29
    109c:	8f 3a       	cpi	r24, 0xAF	; 175
    109e:	44 e0       	ldi	r20, 0x04	; 4
    10a0:	94 07       	cpc	r25, r20
    10a2:	70 f4       	brcc	.+28     	; 0x10c0 <pvPortMalloc+0x54>
    10a4:	28 17       	cp	r18, r24
    10a6:	39 07       	cpc	r19, r25
    10a8:	70 f4       	brcc	.+28     	; 0x10c6 <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    10aa:	c0 91 7f 03 	lds	r28, 0x037F	; 0x80037f <pucAlignedHeap.2084>
    10ae:	d0 91 80 03 	lds	r29, 0x0380	; 0x800380 <pucAlignedHeap.2084+0x1>
    10b2:	c2 0f       	add	r28, r18
    10b4:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
    10b6:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <xNextFreeByte+0x1>
    10ba:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <xNextFreeByte>
    10be:	05 c0       	rjmp	.+10     	; 0x10ca <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    10c0:	c0 e0       	ldi	r28, 0x00	; 0
    10c2:	d0 e0       	ldi	r29, 0x00	; 0
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <pvPortMalloc+0x5e>
    10c6:	c0 e0       	ldi	r28, 0x00	; 0
    10c8:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    10ca:	0e 94 77 0f 	call	0x1eee	; 0x1eee <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    10ce:	ce 01       	movw	r24, r28
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	08 95       	ret

000010d6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    10d6:	08 95       	ret

000010d8 <serial_new_instance>:
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
}
    10d8:	4f 92       	push	r4
    10da:	5f 92       	push	r5
    10dc:	6f 92       	push	r6
    10de:	7f 92       	push	r7
    10e0:	8f 92       	push	r8
    10e2:	9f 92       	push	r9
    10e4:	af 92       	push	r10
    10e6:	bf 92       	push	r11
    10e8:	cf 92       	push	r12
    10ea:	df 92       	push	r13
    10ec:	ff 92       	push	r15
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	f8 2e       	mov	r15, r24
    10fc:	2a 01       	movw	r4, r20
    10fe:	3b 01       	movw	r6, r22
    1100:	88 e0       	ldi	r24, 0x08	; 8
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	0e 94 8c 14 	call	0x2918	; 0x2918 <malloc>
    1108:	8c 01       	movw	r16, r24
    110a:	8f 2d       	mov	r24, r15
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	fc 01       	movw	r30, r24
    1114:	ed 5c       	subi	r30, 0xCD	; 205
    1116:	f7 4f       	sbci	r31, 0xF7	; 247
    1118:	11 83       	std	Z+1, r17	; 0x01
    111a:	00 83       	st	Z, r16
    111c:	fc 01       	movw	r30, r24
    111e:	e4 5f       	subi	r30, 0xF4	; 244
    1120:	fe 4f       	sbci	r31, 0xFE	; 254
    1122:	80 81       	ld	r24, Z
    1124:	91 81       	ldd	r25, Z+1	; 0x01
    1126:	d8 01       	movw	r26, r16
    1128:	11 96       	adiw	r26, 0x01	; 1
    112a:	9c 93       	st	X, r25
    112c:	8e 93       	st	-X, r24
    112e:	13 96       	adiw	r26, 0x03	; 3
    1130:	bc 92       	st	X, r11
    1132:	ae 92       	st	-X, r10
    1134:	12 97       	sbiw	r26, 0x02	; 2
    1136:	15 96       	adiw	r26, 0x05	; 5
    1138:	dc 92       	st	X, r13
    113a:	ce 92       	st	-X, r12
    113c:	14 97       	sbiw	r26, 0x04	; 4
    113e:	17 96       	adiw	r26, 0x07	; 7
    1140:	9c 92       	st	X, r9
    1142:	8e 92       	st	-X, r8
    1144:	16 97       	sbiw	r26, 0x06	; 6
    1146:	ff b6       	in	r15, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	ed 91       	ld	r30, X+
    114c:	fc 91       	ld	r31, X
    114e:	11 97       	sbiw	r26, 0x01	; 1
    1150:	36 97       	sbiw	r30, 0x06	; 6
    1152:	80 81       	ld	r24, Z
    1154:	82 60       	ori	r24, 0x02	; 2
    1156:	80 83       	st	Z, r24
    1158:	cd 90       	ld	r12, X+
    115a:	dc 90       	ld	r13, X
    115c:	d3 01       	movw	r26, r6
    115e:	c2 01       	movw	r24, r4
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	aa 1f       	adc	r26, r26
    1166:	bb 1f       	adc	r27, r27
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	aa 1f       	adc	r26, r26
    116e:	bb 1f       	adc	r27, r27
    1170:	9c 01       	movw	r18, r24
    1172:	ad 01       	movw	r20, r26
    1174:	22 0f       	add	r18, r18
    1176:	33 1f       	adc	r19, r19
    1178:	44 1f       	adc	r20, r20
    117a:	55 1f       	adc	r21, r21
    117c:	60 e0       	ldi	r22, 0x00	; 0
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	81 ee       	ldi	r24, 0xE1	; 225
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0e 94 64 14 	call	0x28c8	; 0x28c8 <__udivmodsi4>
    1188:	21 50       	subi	r18, 0x01	; 1
    118a:	f6 01       	movw	r30, r12
    118c:	32 97       	sbiw	r30, 0x02	; 2
    118e:	20 83       	st	Z, r18
    1190:	d8 01       	movw	r26, r16
    1192:	ed 91       	ld	r30, X+
    1194:	fc 91       	ld	r31, X
    1196:	11 97       	sbiw	r26, 0x01	; 1
    1198:	35 97       	sbiw	r30, 0x05	; 5
    119a:	88 e9       	ldi	r24, 0x98	; 152
    119c:	80 83       	st	Z, r24
    119e:	ed 91       	ld	r30, X+
    11a0:	fc 91       	ld	r31, X
    11a2:	34 97       	sbiw	r30, 0x04	; 4
    11a4:	86 e0       	ldi	r24, 0x06	; 6
    11a6:	80 83       	st	Z, r24
    11a8:	ff be       	out	0x3f, r15	; 63
    11aa:	c8 01       	movw	r24, r16
    11ac:	df 91       	pop	r29
    11ae:	cf 91       	pop	r28
    11b0:	1f 91       	pop	r17
    11b2:	0f 91       	pop	r16
    11b4:	ff 90       	pop	r15
    11b6:	df 90       	pop	r13
    11b8:	cf 90       	pop	r12
    11ba:	bf 90       	pop	r11
    11bc:	af 90       	pop	r10
    11be:	9f 90       	pop	r9
    11c0:	8f 90       	pop	r8
    11c2:	7f 90       	pop	r7
    11c4:	6f 90       	pop	r6
    11c6:	5f 90       	pop	r5
    11c8:	4f 90       	pop	r4
    11ca:	08 95       	ret

000011cc <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    11cc:	1f 92       	push	r1
    11ce:	0f 92       	push	r0
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	0f 92       	push	r0
    11d4:	11 24       	eor	r1, r1
    11d6:	2f 93       	push	r18
    11d8:	3f 93       	push	r19
    11da:	4f 93       	push	r20
    11dc:	5f 93       	push	r21
    11de:	6f 93       	push	r22
    11e0:	7f 93       	push	r23
    11e2:	8f 93       	push	r24
    11e4:	9f 93       	push	r25
    11e6:	af 93       	push	r26
    11e8:	bf 93       	push	r27
    11ea:	cf 93       	push	r28
    11ec:	ef 93       	push	r30
    11ee:	ff 93       	push	r31
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    11f0:	e0 91 33 08 	lds	r30, 0x0833	; 0x800833 <_ser_handle>
    11f4:	f0 91 34 08 	lds	r31, 0x0834	; 0x800834 <_ser_handle+0x1>
    11f8:	30 97       	sbiw	r30, 0x00	; 0
    11fa:	a1 f0       	breq	.+40     	; 0x1224 <__vector_20+0x58>
		item = UDR0;
    11fc:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    1200:	6c 2f       	mov	r22, r28
    1202:	84 81       	ldd	r24, Z+4	; 0x04
    1204:	95 81       	ldd	r25, Z+5	; 0x05
    1206:	0e 94 31 06 	call	0xc62	; 0xc62 <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    120a:	80 91 33 08 	lds	r24, 0x0833	; 0x800833 <_ser_handle>
    120e:	90 91 34 08 	lds	r25, 0x0834	; 0x800834 <_ser_handle+0x1>
    1212:	dc 01       	movw	r26, r24
    1214:	16 96       	adiw	r26, 0x06	; 6
    1216:	ed 91       	ld	r30, X+
    1218:	fc 91       	ld	r31, X
    121a:	17 97       	sbiw	r26, 0x07	; 7
    121c:	30 97       	sbiw	r30, 0x00	; 0
    121e:	11 f0       	breq	.+4      	; 0x1224 <__vector_20+0x58>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    1220:	6c 2f       	mov	r22, r28
    1222:	09 95       	icall
		}
	}
}
    1224:	ff 91       	pop	r31
    1226:	ef 91       	pop	r30
    1228:	cf 91       	pop	r28
    122a:	bf 91       	pop	r27
    122c:	af 91       	pop	r26
    122e:	9f 91       	pop	r25
    1230:	8f 91       	pop	r24
    1232:	7f 91       	pop	r23
    1234:	6f 91       	pop	r22
    1236:	5f 91       	pop	r21
    1238:	4f 91       	pop	r20
    123a:	3f 91       	pop	r19
    123c:	2f 91       	pop	r18
    123e:	0f 90       	pop	r0
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	0f 90       	pop	r0
    1244:	1f 90       	pop	r1
    1246:	18 95       	reti

00001248 <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    1248:	1f 92       	push	r1
    124a:	0f 92       	push	r0
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	0f 92       	push	r0
    1250:	11 24       	eor	r1, r1
    1252:	2f 93       	push	r18
    1254:	3f 93       	push	r19
    1256:	4f 93       	push	r20
    1258:	5f 93       	push	r21
    125a:	6f 93       	push	r22
    125c:	7f 93       	push	r23
    125e:	8f 93       	push	r24
    1260:	9f 93       	push	r25
    1262:	af 93       	push	r26
    1264:	bf 93       	push	r27
    1266:	ef 93       	push	r30
    1268:	ff 93       	push	r31
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	1f 92       	push	r1
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    1274:	e0 91 33 08 	lds	r30, 0x0833	; 0x800833 <_ser_handle>
    1278:	f0 91 34 08 	lds	r31, 0x0834	; 0x800834 <_ser_handle+0x1>
    127c:	30 97       	sbiw	r30, 0x00	; 0
    127e:	99 f0       	breq	.+38     	; 0x12a6 <__vector_21+0x5e>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    1280:	be 01       	movw	r22, r28
    1282:	6f 5f       	subi	r22, 0xFF	; 255
    1284:	7f 4f       	sbci	r23, 0xFF	; 255
    1286:	82 81       	ldd	r24, Z+2	; 0x02
    1288:	93 81       	ldd	r25, Z+3	; 0x03
    128a:	0e 94 10 06 	call	0xc20	; 0xc20 <buffer_get_item>
    128e:	81 11       	cpse	r24, r1
    1290:	04 c0       	rjmp	.+8      	; 0x129a <__vector_21+0x52>
			UDR0 = item;
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1298:	0b c0       	rjmp	.+22     	; 0x12b0 <__vector_21+0x68>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    129a:	e1 ec       	ldi	r30, 0xC1	; 193
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	8f 7d       	andi	r24, 0xDF	; 223
    12a2:	80 83       	st	Z, r24
    12a4:	05 c0       	rjmp	.+10     	; 0x12b0 <__vector_21+0x68>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    12a6:	e1 ec       	ldi	r30, 0xC1	; 193
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	8f 7d       	andi	r24, 0xDF	; 223
    12ae:	80 83       	st	Z, r24
	}
}
    12b0:	0f 90       	pop	r0
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	ff 91       	pop	r31
    12b8:	ef 91       	pop	r30
    12ba:	bf 91       	pop	r27
    12bc:	af 91       	pop	r26
    12be:	9f 91       	pop	r25
    12c0:	8f 91       	pop	r24
    12c2:	7f 91       	pop	r23
    12c4:	6f 91       	pop	r22
    12c6:	5f 91       	pop	r21
    12c8:	4f 91       	pop	r20
    12ca:	3f 91       	pop	r19
    12cc:	2f 91       	pop	r18
    12ce:	0f 90       	pop	r0
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	0f 90       	pop	r0
    12d4:	1f 90       	pop	r1
    12d6:	18 95       	reti

000012d8 <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    12d8:	1f 92       	push	r1
    12da:	0f 92       	push	r0
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	0f 92       	push	r0
    12e0:	11 24       	eor	r1, r1
    12e2:	2f 93       	push	r18
    12e4:	3f 93       	push	r19
    12e6:	4f 93       	push	r20
    12e8:	5f 93       	push	r21
    12ea:	6f 93       	push	r22
    12ec:	7f 93       	push	r23
    12ee:	8f 93       	push	r24
    12f0:	9f 93       	push	r25
    12f2:	af 93       	push	r26
    12f4:	bf 93       	push	r27
    12f6:	cf 93       	push	r28
    12f8:	ef 93       	push	r30
    12fa:	ff 93       	push	r31
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    12fc:	e0 91 35 08 	lds	r30, 0x0835	; 0x800835 <_ser_handle+0x2>
    1300:	f0 91 36 08 	lds	r31, 0x0836	; 0x800836 <_ser_handle+0x3>
    1304:	30 97       	sbiw	r30, 0x00	; 0
    1306:	a1 f0       	breq	.+40     	; 0x1330 <__vector_28+0x58>
		item = UDR1;
    1308:	c0 91 ce 00 	lds	r28, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    130c:	6c 2f       	mov	r22, r28
    130e:	84 81       	ldd	r24, Z+4	; 0x04
    1310:	95 81       	ldd	r25, Z+5	; 0x05
    1312:	0e 94 31 06 	call	0xc62	; 0xc62 <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    1316:	80 91 35 08 	lds	r24, 0x0835	; 0x800835 <_ser_handle+0x2>
    131a:	90 91 36 08 	lds	r25, 0x0836	; 0x800836 <_ser_handle+0x3>
    131e:	dc 01       	movw	r26, r24
    1320:	16 96       	adiw	r26, 0x06	; 6
    1322:	ed 91       	ld	r30, X+
    1324:	fc 91       	ld	r31, X
    1326:	17 97       	sbiw	r26, 0x07	; 7
    1328:	30 97       	sbiw	r30, 0x00	; 0
    132a:	11 f0       	breq	.+4      	; 0x1330 <__vector_28+0x58>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    132c:	6c 2f       	mov	r22, r28
    132e:	09 95       	icall
		}
	}
}
    1330:	ff 91       	pop	r31
    1332:	ef 91       	pop	r30
    1334:	cf 91       	pop	r28
    1336:	bf 91       	pop	r27
    1338:	af 91       	pop	r26
    133a:	9f 91       	pop	r25
    133c:	8f 91       	pop	r24
    133e:	7f 91       	pop	r23
    1340:	6f 91       	pop	r22
    1342:	5f 91       	pop	r21
    1344:	4f 91       	pop	r20
    1346:	3f 91       	pop	r19
    1348:	2f 91       	pop	r18
    134a:	0f 90       	pop	r0
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	0f 90       	pop	r0
    1350:	1f 90       	pop	r1
    1352:	18 95       	reti

00001354 <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    1354:	1f 92       	push	r1
    1356:	0f 92       	push	r0
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	0f 92       	push	r0
    135c:	11 24       	eor	r1, r1
    135e:	2f 93       	push	r18
    1360:	3f 93       	push	r19
    1362:	4f 93       	push	r20
    1364:	5f 93       	push	r21
    1366:	6f 93       	push	r22
    1368:	7f 93       	push	r23
    136a:	8f 93       	push	r24
    136c:	9f 93       	push	r25
    136e:	af 93       	push	r26
    1370:	bf 93       	push	r27
    1372:	ef 93       	push	r30
    1374:	ff 93       	push	r31
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	1f 92       	push	r1
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    1380:	e0 91 35 08 	lds	r30, 0x0835	; 0x800835 <_ser_handle+0x2>
    1384:	f0 91 36 08 	lds	r31, 0x0836	; 0x800836 <_ser_handle+0x3>
    1388:	30 97       	sbiw	r30, 0x00	; 0
    138a:	99 f0       	breq	.+38     	; 0x13b2 <__vector_29+0x5e>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    138c:	be 01       	movw	r22, r28
    138e:	6f 5f       	subi	r22, 0xFF	; 255
    1390:	7f 4f       	sbci	r23, 0xFF	; 255
    1392:	82 81       	ldd	r24, Z+2	; 0x02
    1394:	93 81       	ldd	r25, Z+3	; 0x03
    1396:	0e 94 10 06 	call	0xc20	; 0xc20 <buffer_get_item>
    139a:	81 11       	cpse	r24, r1
    139c:	04 c0       	rjmp	.+8      	; 0x13a6 <__vector_29+0x52>
			UDR1 = item;
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    13a4:	0b c0       	rjmp	.+22     	; 0x13bc <__vector_29+0x68>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    13a6:	e9 ec       	ldi	r30, 0xC9	; 201
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	8f 7d       	andi	r24, 0xDF	; 223
    13ae:	80 83       	st	Z, r24
    13b0:	05 c0       	rjmp	.+10     	; 0x13bc <__vector_29+0x68>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    13b2:	e9 ec       	ldi	r30, 0xC9	; 201
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	8f 7d       	andi	r24, 0xDF	; 223
    13ba:	80 83       	st	Z, r24
	}
}
    13bc:	0f 90       	pop	r0
    13be:	df 91       	pop	r29
    13c0:	cf 91       	pop	r28
    13c2:	ff 91       	pop	r31
    13c4:	ef 91       	pop	r30
    13c6:	bf 91       	pop	r27
    13c8:	af 91       	pop	r26
    13ca:	9f 91       	pop	r25
    13cc:	8f 91       	pop	r24
    13ce:	7f 91       	pop	r23
    13d0:	6f 91       	pop	r22
    13d2:	5f 91       	pop	r21
    13d4:	4f 91       	pop	r20
    13d6:	3f 91       	pop	r19
    13d8:	2f 91       	pop	r18
    13da:	0f 90       	pop	r0
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	0f 90       	pop	r0
    13e0:	1f 90       	pop	r1
    13e2:	18 95       	reti

000013e4 <prvCopyDataToQueue>:
		{
			xReturn = pdFAIL;
		}

		return xReturn;
	}
    13e4:	0f 93       	push	r16
    13e6:	1f 93       	push	r17
    13e8:	cf 93       	push	r28
    13ea:	df 93       	push	r29
    13ec:	ec 01       	movw	r28, r24
    13ee:	04 2f       	mov	r16, r20
    13f0:	1a 8d       	ldd	r17, Y+26	; 0x1a
    13f2:	4c 8d       	ldd	r20, Y+28	; 0x1c
    13f4:	41 11       	cpse	r20, r1
    13f6:	0c c0       	rjmp	.+24     	; 0x1410 <prvCopyDataToQueue+0x2c>
    13f8:	88 81       	ld	r24, Y
    13fa:	99 81       	ldd	r25, Y+1	; 0x01
    13fc:	89 2b       	or	r24, r25
    13fe:	09 f0       	breq	.+2      	; 0x1402 <prvCopyDataToQueue+0x1e>
    1400:	42 c0       	rjmp	.+132    	; 0x1486 <prvCopyDataToQueue+0xa2>
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	9b 81       	ldd	r25, Y+3	; 0x03
    1406:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <xTaskPriorityDisinherit>
    140a:	1b 82       	std	Y+3, r1	; 0x03
    140c:	1a 82       	std	Y+2, r1	; 0x02
    140e:	42 c0       	rjmp	.+132    	; 0x1494 <prvCopyDataToQueue+0xb0>
    1410:	01 11       	cpse	r16, r1
    1412:	17 c0       	rjmp	.+46     	; 0x1442 <prvCopyDataToQueue+0x5e>
    1414:	50 e0       	ldi	r21, 0x00	; 0
    1416:	8c 81       	ldd	r24, Y+4	; 0x04
    1418:	9d 81       	ldd	r25, Y+5	; 0x05
    141a:	0e 94 09 16 	call	0x2c12	; 0x2c12 <memcpy>
    141e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1420:	8c 81       	ldd	r24, Y+4	; 0x04
    1422:	9d 81       	ldd	r25, Y+5	; 0x05
    1424:	82 0f       	add	r24, r18
    1426:	91 1d       	adc	r25, r1
    1428:	9d 83       	std	Y+5, r25	; 0x05
    142a:	8c 83       	std	Y+4, r24	; 0x04
    142c:	2a 81       	ldd	r18, Y+2	; 0x02
    142e:	3b 81       	ldd	r19, Y+3	; 0x03
    1430:	82 17       	cp	r24, r18
    1432:	93 07       	cpc	r25, r19
    1434:	50 f1       	brcs	.+84     	; 0x148a <prvCopyDataToQueue+0xa6>
    1436:	88 81       	ld	r24, Y
    1438:	99 81       	ldd	r25, Y+1	; 0x01
    143a:	9d 83       	std	Y+5, r25	; 0x05
    143c:	8c 83       	std	Y+4, r24	; 0x04
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	29 c0       	rjmp	.+82     	; 0x1494 <prvCopyDataToQueue+0xb0>
    1442:	50 e0       	ldi	r21, 0x00	; 0
    1444:	8e 81       	ldd	r24, Y+6	; 0x06
    1446:	9f 81       	ldd	r25, Y+7	; 0x07
    1448:	0e 94 09 16 	call	0x2c12	; 0x2c12 <memcpy>
    144c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	91 95       	neg	r25
    1452:	81 95       	neg	r24
    1454:	91 09       	sbc	r25, r1
    1456:	2e 81       	ldd	r18, Y+6	; 0x06
    1458:	3f 81       	ldd	r19, Y+7	; 0x07
    145a:	28 0f       	add	r18, r24
    145c:	39 1f       	adc	r19, r25
    145e:	3f 83       	std	Y+7, r19	; 0x07
    1460:	2e 83       	std	Y+6, r18	; 0x06
    1462:	48 81       	ld	r20, Y
    1464:	59 81       	ldd	r21, Y+1	; 0x01
    1466:	24 17       	cp	r18, r20
    1468:	35 07       	cpc	r19, r21
    146a:	30 f4       	brcc	.+12     	; 0x1478 <prvCopyDataToQueue+0x94>
    146c:	2a 81       	ldd	r18, Y+2	; 0x02
    146e:	3b 81       	ldd	r19, Y+3	; 0x03
    1470:	82 0f       	add	r24, r18
    1472:	93 1f       	adc	r25, r19
    1474:	9f 83       	std	Y+7, r25	; 0x07
    1476:	8e 83       	std	Y+6, r24	; 0x06
    1478:	02 30       	cpi	r16, 0x02	; 2
    147a:	49 f4       	brne	.+18     	; 0x148e <prvCopyDataToQueue+0xaa>
    147c:	11 23       	and	r17, r17
    147e:	49 f0       	breq	.+18     	; 0x1492 <prvCopyDataToQueue+0xae>
    1480:	11 50       	subi	r17, 0x01	; 1
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	07 c0       	rjmp	.+14     	; 0x1494 <prvCopyDataToQueue+0xb0>
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	05 c0       	rjmp	.+10     	; 0x1494 <prvCopyDataToQueue+0xb0>
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	03 c0       	rjmp	.+6      	; 0x1494 <prvCopyDataToQueue+0xb0>
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	01 c0       	rjmp	.+2      	; 0x1494 <prvCopyDataToQueue+0xb0>
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	1f 5f       	subi	r17, 0xFF	; 255
    1496:	1a 8f       	std	Y+26, r17	; 0x1a
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	1f 91       	pop	r17
    149e:	0f 91       	pop	r16
    14a0:	08 95       	ret

000014a2 <prvCopyDataFromQueue>:
    14a2:	fc 01       	movw	r30, r24
    14a4:	44 8d       	ldd	r20, Z+28	; 0x1c
    14a6:	44 23       	and	r20, r20
    14a8:	a9 f0       	breq	.+42     	; 0x14d4 <prvCopyDataFromQueue+0x32>
    14aa:	50 e0       	ldi	r21, 0x00	; 0
    14ac:	26 81       	ldd	r18, Z+6	; 0x06
    14ae:	37 81       	ldd	r19, Z+7	; 0x07
    14b0:	24 0f       	add	r18, r20
    14b2:	35 1f       	adc	r19, r21
    14b4:	37 83       	std	Z+7, r19	; 0x07
    14b6:	26 83       	std	Z+6, r18	; 0x06
    14b8:	82 81       	ldd	r24, Z+2	; 0x02
    14ba:	93 81       	ldd	r25, Z+3	; 0x03
    14bc:	28 17       	cp	r18, r24
    14be:	39 07       	cpc	r19, r25
    14c0:	20 f0       	brcs	.+8      	; 0x14ca <prvCopyDataFromQueue+0x28>
    14c2:	80 81       	ld	r24, Z
    14c4:	91 81       	ldd	r25, Z+1	; 0x01
    14c6:	97 83       	std	Z+7, r25	; 0x07
    14c8:	86 83       	std	Z+6, r24	; 0x06
    14ca:	cb 01       	movw	r24, r22
    14cc:	66 81       	ldd	r22, Z+6	; 0x06
    14ce:	77 81       	ldd	r23, Z+7	; 0x07
    14d0:	0e 94 09 16 	call	0x2c12	; 0x2c12 <memcpy>
    14d4:	08 95       	ret

000014d6 <prvUnlockQueue>:
    14d6:	ef 92       	push	r14
    14d8:	ff 92       	push	r15
    14da:	0f 93       	push	r16
    14dc:	1f 93       	push	r17
    14de:	cf 93       	push	r28
    14e0:	8c 01       	movw	r16, r24
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	f8 94       	cli
    14e6:	0f 92       	push	r0
    14e8:	fc 01       	movw	r30, r24
    14ea:	c6 8d       	ldd	r28, Z+30	; 0x1e
    14ec:	1c 16       	cp	r1, r28
    14ee:	ac f4       	brge	.+42     	; 0x151a <prvUnlockQueue+0x44>
    14f0:	81 89       	ldd	r24, Z+17	; 0x11
    14f2:	81 11       	cpse	r24, r1
    14f4:	06 c0       	rjmp	.+12     	; 0x1502 <prvUnlockQueue+0x2c>
    14f6:	11 c0       	rjmp	.+34     	; 0x151a <prvUnlockQueue+0x44>
    14f8:	f8 01       	movw	r30, r16
    14fa:	81 89       	ldd	r24, Z+17	; 0x11
    14fc:	81 11       	cpse	r24, r1
    14fe:	05 c0       	rjmp	.+10     	; 0x150a <prvUnlockQueue+0x34>
    1500:	0c c0       	rjmp	.+24     	; 0x151a <prvUnlockQueue+0x44>
    1502:	78 01       	movw	r14, r16
    1504:	f1 e1       	ldi	r31, 0x11	; 17
    1506:	ef 0e       	add	r14, r31
    1508:	f1 1c       	adc	r15, r1
    150a:	c7 01       	movw	r24, r14
    150c:	0e 94 f7 10 	call	0x21ee	; 0x21ee <xTaskRemoveFromEventList>
    1510:	81 11       	cpse	r24, r1
    1512:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <vTaskMissedYield>
    1516:	c1 50       	subi	r28, 0x01	; 1
    1518:	79 f7       	brne	.-34     	; 0x14f8 <prvUnlockQueue+0x22>
    151a:	8f ef       	ldi	r24, 0xFF	; 255
    151c:	f8 01       	movw	r30, r16
    151e:	86 8f       	std	Z+30, r24	; 0x1e
    1520:	0f 90       	pop	r0
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	0f 92       	push	r0
    152a:	c5 8d       	ldd	r28, Z+29	; 0x1d
    152c:	1c 16       	cp	r1, r28
    152e:	ac f4       	brge	.+42     	; 0x155a <prvUnlockQueue+0x84>
    1530:	80 85       	ldd	r24, Z+8	; 0x08
    1532:	81 11       	cpse	r24, r1
    1534:	06 c0       	rjmp	.+12     	; 0x1542 <prvUnlockQueue+0x6c>
    1536:	11 c0       	rjmp	.+34     	; 0x155a <prvUnlockQueue+0x84>
    1538:	f8 01       	movw	r30, r16
    153a:	80 85       	ldd	r24, Z+8	; 0x08
    153c:	81 11       	cpse	r24, r1
    153e:	05 c0       	rjmp	.+10     	; 0x154a <prvUnlockQueue+0x74>
    1540:	0c c0       	rjmp	.+24     	; 0x155a <prvUnlockQueue+0x84>
    1542:	78 01       	movw	r14, r16
    1544:	f8 e0       	ldi	r31, 0x08	; 8
    1546:	ef 0e       	add	r14, r31
    1548:	f1 1c       	adc	r15, r1
    154a:	c7 01       	movw	r24, r14
    154c:	0e 94 f7 10 	call	0x21ee	; 0x21ee <xTaskRemoveFromEventList>
    1550:	81 11       	cpse	r24, r1
    1552:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <vTaskMissedYield>
    1556:	c1 50       	subi	r28, 0x01	; 1
    1558:	79 f7       	brne	.-34     	; 0x1538 <prvUnlockQueue+0x62>
    155a:	8f ef       	ldi	r24, 0xFF	; 255
    155c:	f8 01       	movw	r30, r16
    155e:	85 8f       	std	Z+29, r24	; 0x1d
    1560:	0f 90       	pop	r0
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cf 91       	pop	r28
    1566:	1f 91       	pop	r17
    1568:	0f 91       	pop	r16
    156a:	ff 90       	pop	r15
    156c:	ef 90       	pop	r14
    156e:	08 95       	ret

00001570 <xQueueGenericReset>:
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	ec 01       	movw	r28, r24
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	0f 92       	push	r0
    157c:	48 81       	ld	r20, Y
    157e:	59 81       	ldd	r21, Y+1	; 0x01
    1580:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1586:	72 9f       	mul	r23, r18
    1588:	c0 01       	movw	r24, r0
    158a:	73 9f       	mul	r23, r19
    158c:	90 0d       	add	r25, r0
    158e:	11 24       	eor	r1, r1
    1590:	fa 01       	movw	r30, r20
    1592:	e8 0f       	add	r30, r24
    1594:	f9 1f       	adc	r31, r25
    1596:	fb 83       	std	Y+3, r31	; 0x03
    1598:	ea 83       	std	Y+2, r30	; 0x02
    159a:	1a 8e       	std	Y+26, r1	; 0x1a
    159c:	5d 83       	std	Y+5, r21	; 0x05
    159e:	4c 83       	std	Y+4, r20	; 0x04
    15a0:	82 1b       	sub	r24, r18
    15a2:	93 0b       	sbc	r25, r19
    15a4:	84 0f       	add	r24, r20
    15a6:	95 1f       	adc	r25, r21
    15a8:	9f 83       	std	Y+7, r25	; 0x07
    15aa:	8e 83       	std	Y+6, r24	; 0x06
    15ac:	8f ef       	ldi	r24, 0xFF	; 255
    15ae:	8d 8f       	std	Y+29, r24	; 0x1d
    15b0:	8e 8f       	std	Y+30, r24	; 0x1e
    15b2:	61 11       	cpse	r22, r1
    15b4:	0c c0       	rjmp	.+24     	; 0x15ce <xQueueGenericReset+0x5e>
    15b6:	88 85       	ldd	r24, Y+8	; 0x08
    15b8:	88 23       	and	r24, r24
    15ba:	89 f0       	breq	.+34     	; 0x15de <xQueueGenericReset+0x6e>
    15bc:	ce 01       	movw	r24, r28
    15be:	08 96       	adiw	r24, 0x08	; 8
    15c0:	0e 94 f7 10 	call	0x21ee	; 0x21ee <xTaskRemoveFromEventList>
    15c4:	88 23       	and	r24, r24
    15c6:	59 f0       	breq	.+22     	; 0x15de <xQueueGenericReset+0x6e>
    15c8:	0e 94 7e 07 	call	0xefc	; 0xefc <vPortYield>
    15cc:	08 c0       	rjmp	.+16     	; 0x15de <xQueueGenericReset+0x6e>
    15ce:	ce 01       	movw	r24, r28
    15d0:	08 96       	adiw	r24, 0x08	; 8
    15d2:	0e 94 4e 06 	call	0xc9c	; 0xc9c <vListInitialise>
    15d6:	ce 01       	movw	r24, r28
    15d8:	41 96       	adiw	r24, 0x11	; 17
    15da:	0e 94 4e 06 	call	0xc9c	; 0xc9c <vListInitialise>
    15de:	0f 90       	pop	r0
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	08 95       	ret

000015ea <xQueueGenericCreate>:
    15ea:	ff 92       	push	r15
    15ec:	0f 93       	push	r16
    15ee:	1f 93       	push	r17
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
    15f4:	08 2f       	mov	r16, r24
    15f6:	16 2f       	mov	r17, r22
    15f8:	f4 2e       	mov	r15, r20
    15fa:	66 23       	and	r22, r22
    15fc:	c9 f0       	breq	.+50     	; 0x1630 <xQueueGenericCreate+0x46>
    15fe:	86 9f       	mul	r24, r22
    1600:	c0 01       	movw	r24, r0
    1602:	11 24       	eor	r1, r1
    1604:	81 96       	adiw	r24, 0x21	; 33
    1606:	0e 94 36 08 	call	0x106c	; 0x106c <pvPortMalloc>
    160a:	ec 01       	movw	r28, r24
    160c:	00 97       	sbiw	r24, 0x00	; 0
    160e:	49 f4       	brne	.+18     	; 0x1622 <xQueueGenericCreate+0x38>
    1610:	16 c0       	rjmp	.+44     	; 0x163e <xQueueGenericCreate+0x54>
    1612:	0b 8f       	std	Y+27, r16	; 0x1b
    1614:	1c 8f       	std	Y+28, r17	; 0x1c
    1616:	61 e0       	ldi	r22, 0x01	; 1
    1618:	ce 01       	movw	r24, r28
    161a:	0e 94 b8 0a 	call	0x1570	; 0x1570 <xQueueGenericReset>
    161e:	f8 a2       	std	Y+32, r15	; 0x20
    1620:	0e c0       	rjmp	.+28     	; 0x163e <xQueueGenericCreate+0x54>
    1622:	81 96       	adiw	r24, 0x21	; 33
    1624:	99 83       	std	Y+1, r25	; 0x01
    1626:	88 83       	st	Y, r24
    1628:	f4 cf       	rjmp	.-24     	; 0x1612 <xQueueGenericCreate+0x28>
    162a:	d9 83       	std	Y+1, r29	; 0x01
    162c:	c8 83       	st	Y, r28
    162e:	f1 cf       	rjmp	.-30     	; 0x1612 <xQueueGenericCreate+0x28>
    1630:	81 e2       	ldi	r24, 0x21	; 33
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	0e 94 36 08 	call	0x106c	; 0x106c <pvPortMalloc>
    1638:	ec 01       	movw	r28, r24
    163a:	89 2b       	or	r24, r25
    163c:	b1 f7       	brne	.-20     	; 0x162a <xQueueGenericCreate+0x40>
    163e:	ce 01       	movw	r24, r28
    1640:	df 91       	pop	r29
    1642:	cf 91       	pop	r28
    1644:	1f 91       	pop	r17
    1646:	0f 91       	pop	r16
    1648:	ff 90       	pop	r15
    164a:	08 95       	ret

0000164c <xQueueGenericSend>:
    164c:	9f 92       	push	r9
    164e:	af 92       	push	r10
    1650:	bf 92       	push	r11
    1652:	cf 92       	push	r12
    1654:	df 92       	push	r13
    1656:	ef 92       	push	r14
    1658:	ff 92       	push	r15
    165a:	0f 93       	push	r16
    165c:	1f 93       	push	r17
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	00 d0       	rcall	.+0      	; 0x1664 <xQueueGenericSend+0x18>
    1664:	00 d0       	rcall	.+0      	; 0x1666 <xQueueGenericSend+0x1a>
    1666:	1f 92       	push	r1
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	8c 01       	movw	r16, r24
    166e:	6b 01       	movw	r12, r22
    1670:	5d 83       	std	Y+5, r21	; 0x05
    1672:	4c 83       	std	Y+4, r20	; 0x04
    1674:	a2 2e       	mov	r10, r18
    1676:	b1 2c       	mov	r11, r1
    1678:	99 24       	eor	r9, r9
    167a:	93 94       	inc	r9
    167c:	7c 01       	movw	r14, r24
    167e:	88 e0       	ldi	r24, 0x08	; 8
    1680:	e8 0e       	add	r14, r24
    1682:	f1 1c       	adc	r15, r1
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	0f 92       	push	r0
    168a:	f8 01       	movw	r30, r16
    168c:	92 8d       	ldd	r25, Z+26	; 0x1a
    168e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1690:	98 17       	cp	r25, r24
    1692:	18 f0       	brcs	.+6      	; 0x169a <xQueueGenericSend+0x4e>
    1694:	f2 e0       	ldi	r31, 0x02	; 2
    1696:	af 12       	cpse	r10, r31
    1698:	19 c0       	rjmp	.+50     	; 0x16cc <xQueueGenericSend+0x80>
    169a:	4a 2d       	mov	r20, r10
    169c:	b6 01       	movw	r22, r12
    169e:	c8 01       	movw	r24, r16
    16a0:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <prvCopyDataToQueue>
    16a4:	f8 01       	movw	r30, r16
    16a6:	91 89       	ldd	r25, Z+17	; 0x11
    16a8:	99 23       	and	r25, r25
    16aa:	49 f0       	breq	.+18     	; 0x16be <xQueueGenericSend+0x72>
    16ac:	c8 01       	movw	r24, r16
    16ae:	41 96       	adiw	r24, 0x11	; 17
    16b0:	0e 94 f7 10 	call	0x21ee	; 0x21ee <xTaskRemoveFromEventList>
    16b4:	88 23       	and	r24, r24
    16b6:	31 f0       	breq	.+12     	; 0x16c4 <xQueueGenericSend+0x78>
    16b8:	0e 94 7e 07 	call	0xefc	; 0xefc <vPortYield>
    16bc:	03 c0       	rjmp	.+6      	; 0x16c4 <xQueueGenericSend+0x78>
    16be:	81 11       	cpse	r24, r1
    16c0:	0e 94 7e 07 	call	0xefc	; 0xefc <vPortYield>
    16c4:	0f 90       	pop	r0
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	50 c0       	rjmp	.+160    	; 0x176c <xQueueGenericSend+0x120>
    16cc:	8c 81       	ldd	r24, Y+4	; 0x04
    16ce:	9d 81       	ldd	r25, Y+5	; 0x05
    16d0:	89 2b       	or	r24, r25
    16d2:	21 f4       	brne	.+8      	; 0x16dc <xQueueGenericSend+0x90>
    16d4:	0f 90       	pop	r0
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	48 c0       	rjmp	.+144    	; 0x176c <xQueueGenericSend+0x120>
    16dc:	b1 10       	cpse	r11, r1
    16de:	05 c0       	rjmp	.+10     	; 0x16ea <xQueueGenericSend+0x9e>
    16e0:	ce 01       	movw	r24, r28
    16e2:	01 96       	adiw	r24, 0x01	; 1
    16e4:	0e 94 3f 11 	call	0x227e	; 0x227e <vTaskSetTimeOutState>
    16e8:	b9 2c       	mov	r11, r9
    16ea:	0f 90       	pop	r0
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <vTaskSuspendAll>
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	f8 94       	cli
    16f6:	0f 92       	push	r0
    16f8:	f8 01       	movw	r30, r16
    16fa:	85 8d       	ldd	r24, Z+29	; 0x1d
    16fc:	8f 3f       	cpi	r24, 0xFF	; 255
    16fe:	09 f4       	brne	.+2      	; 0x1702 <xQueueGenericSend+0xb6>
    1700:	15 8e       	std	Z+29, r1	; 0x1d
    1702:	f8 01       	movw	r30, r16
    1704:	86 8d       	ldd	r24, Z+30	; 0x1e
    1706:	8f 3f       	cpi	r24, 0xFF	; 255
    1708:	09 f4       	brne	.+2      	; 0x170c <xQueueGenericSend+0xc0>
    170a:	16 8e       	std	Z+30, r1	; 0x1e
    170c:	0f 90       	pop	r0
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	be 01       	movw	r22, r28
    1712:	6c 5f       	subi	r22, 0xFC	; 252
    1714:	7f 4f       	sbci	r23, 0xFF	; 255
    1716:	ce 01       	movw	r24, r28
    1718:	01 96       	adiw	r24, 0x01	; 1
    171a:	0e 94 4a 11 	call	0x2294	; 0x2294 <xTaskCheckForTimeOut>
    171e:	81 11       	cpse	r24, r1
    1720:	1f c0       	rjmp	.+62     	; 0x1760 <xQueueGenericSend+0x114>
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	f8 94       	cli
    1726:	0f 92       	push	r0
    1728:	f8 01       	movw	r30, r16
    172a:	92 8d       	ldd	r25, Z+26	; 0x1a
    172c:	0f 90       	pop	r0
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	83 8d       	ldd	r24, Z+27	; 0x1b
    1732:	98 13       	cpse	r25, r24
    1734:	0f c0       	rjmp	.+30     	; 0x1754 <xQueueGenericSend+0x108>
    1736:	6c 81       	ldd	r22, Y+4	; 0x04
    1738:	7d 81       	ldd	r23, Y+5	; 0x05
    173a:	c7 01       	movw	r24, r14
    173c:	0e 94 cc 10 	call	0x2198	; 0x2198 <vTaskPlaceOnEventList>
    1740:	c8 01       	movw	r24, r16
    1742:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <prvUnlockQueue>
    1746:	0e 94 77 0f 	call	0x1eee	; 0x1eee <xTaskResumeAll>
    174a:	81 11       	cpse	r24, r1
    174c:	9b cf       	rjmp	.-202    	; 0x1684 <xQueueGenericSend+0x38>
    174e:	0e 94 7e 07 	call	0xefc	; 0xefc <vPortYield>
    1752:	98 cf       	rjmp	.-208    	; 0x1684 <xQueueGenericSend+0x38>
    1754:	c8 01       	movw	r24, r16
    1756:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <prvUnlockQueue>
    175a:	0e 94 77 0f 	call	0x1eee	; 0x1eee <xTaskResumeAll>
    175e:	92 cf       	rjmp	.-220    	; 0x1684 <xQueueGenericSend+0x38>
    1760:	c8 01       	movw	r24, r16
    1762:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <prvUnlockQueue>
    1766:	0e 94 77 0f 	call	0x1eee	; 0x1eee <xTaskResumeAll>
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	df 91       	pop	r29
    1778:	cf 91       	pop	r28
    177a:	1f 91       	pop	r17
    177c:	0f 91       	pop	r16
    177e:	ff 90       	pop	r15
    1780:	ef 90       	pop	r14
    1782:	df 90       	pop	r13
    1784:	cf 90       	pop	r12
    1786:	bf 90       	pop	r11
    1788:	af 90       	pop	r10
    178a:	9f 90       	pop	r9
    178c:	08 95       	ret

0000178e <xQueueCreateMutex>:
    178e:	cf 93       	push	r28
    1790:	df 93       	push	r29
    1792:	48 2f       	mov	r20, r24
    1794:	60 e0       	ldi	r22, 0x00	; 0
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <xQueueGenericCreate>
    179c:	ec 01       	movw	r28, r24
    179e:	00 97       	sbiw	r24, 0x00	; 0
    17a0:	61 f0       	breq	.+24     	; 0x17ba <xQueueCreateMutex+0x2c>
    17a2:	1b 82       	std	Y+3, r1	; 0x03
    17a4:	1a 82       	std	Y+2, r1	; 0x02
    17a6:	19 82       	std	Y+1, r1	; 0x01
    17a8:	18 82       	st	Y, r1
    17aa:	1e 82       	std	Y+6, r1	; 0x06
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	40 e0       	ldi	r20, 0x00	; 0
    17b0:	50 e0       	ldi	r21, 0x00	; 0
    17b2:	60 e0       	ldi	r22, 0x00	; 0
    17b4:	70 e0       	ldi	r23, 0x00	; 0
    17b6:	0e 94 26 0b 	call	0x164c	; 0x164c <xQueueGenericSend>
    17ba:	ce 01       	movw	r24, r28
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	08 95       	ret

000017c2 <xQueueGenericSendFromISR>:
    17c2:	ef 92       	push	r14
    17c4:	ff 92       	push	r15
    17c6:	0f 93       	push	r16
    17c8:	1f 93       	push	r17
    17ca:	cf 93       	push	r28
    17cc:	df 93       	push	r29
    17ce:	8a 01       	movw	r16, r20
    17d0:	fc 01       	movw	r30, r24
    17d2:	52 8d       	ldd	r21, Z+26	; 0x1a
    17d4:	33 8d       	ldd	r19, Z+27	; 0x1b
    17d6:	53 17       	cp	r21, r19
    17d8:	10 f0       	brcs	.+4      	; 0x17de <xQueueGenericSendFromISR+0x1c>
    17da:	22 30       	cpi	r18, 0x02	; 2
    17dc:	f1 f4       	brne	.+60     	; 0x181a <xQueueGenericSendFromISR+0x58>
    17de:	42 2f       	mov	r20, r18
    17e0:	78 01       	movw	r14, r16
    17e2:	ec 01       	movw	r28, r24
    17e4:	1e 8d       	ldd	r17, Y+30	; 0x1e
    17e6:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <prvCopyDataToQueue>
    17ea:	1f 3f       	cpi	r17, 0xFF	; 255
    17ec:	81 f4       	brne	.+32     	; 0x180e <xQueueGenericSendFromISR+0x4c>
    17ee:	89 89       	ldd	r24, Y+17	; 0x11
    17f0:	88 23       	and	r24, r24
    17f2:	a9 f0       	breq	.+42     	; 0x181e <xQueueGenericSendFromISR+0x5c>
    17f4:	ce 01       	movw	r24, r28
    17f6:	41 96       	adiw	r24, 0x11	; 17
    17f8:	0e 94 f7 10 	call	0x21ee	; 0x21ee <xTaskRemoveFromEventList>
    17fc:	88 23       	and	r24, r24
    17fe:	89 f0       	breq	.+34     	; 0x1822 <xQueueGenericSendFromISR+0x60>
    1800:	e1 14       	cp	r14, r1
    1802:	f1 04       	cpc	r15, r1
    1804:	81 f0       	breq	.+32     	; 0x1826 <xQueueGenericSendFromISR+0x64>
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	f7 01       	movw	r30, r14
    180a:	80 83       	st	Z, r24
    180c:	0d c0       	rjmp	.+26     	; 0x1828 <xQueueGenericSendFromISR+0x66>
    180e:	ff 24       	eor	r15, r15
    1810:	f3 94       	inc	r15
    1812:	f1 0e       	add	r15, r17
    1814:	fe 8e       	std	Y+30, r15	; 0x1e
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	07 c0       	rjmp	.+14     	; 0x1828 <xQueueGenericSendFromISR+0x66>
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	05 c0       	rjmp	.+10     	; 0x1828 <xQueueGenericSendFromISR+0x66>
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	03 c0       	rjmp	.+6      	; 0x1828 <xQueueGenericSendFromISR+0x66>
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	01 c0       	rjmp	.+2      	; 0x1828 <xQueueGenericSendFromISR+0x66>
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	df 91       	pop	r29
    182a:	cf 91       	pop	r28
    182c:	1f 91       	pop	r17
    182e:	0f 91       	pop	r16
    1830:	ff 90       	pop	r15
    1832:	ef 90       	pop	r14
    1834:	08 95       	ret

00001836 <xQueueGenericReceive>:
    1836:	8f 92       	push	r8
    1838:	9f 92       	push	r9
    183a:	af 92       	push	r10
    183c:	bf 92       	push	r11
    183e:	cf 92       	push	r12
    1840:	df 92       	push	r13
    1842:	ef 92       	push	r14
    1844:	ff 92       	push	r15
    1846:	0f 93       	push	r16
    1848:	1f 93       	push	r17
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
    184e:	00 d0       	rcall	.+0      	; 0x1850 <xQueueGenericReceive+0x1a>
    1850:	00 d0       	rcall	.+0      	; 0x1852 <xQueueGenericReceive+0x1c>
    1852:	1f 92       	push	r1
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    1858:	8c 01       	movw	r16, r24
    185a:	5b 01       	movw	r10, r22
    185c:	5d 83       	std	Y+5, r21	; 0x05
    185e:	4c 83       	std	Y+4, r20	; 0x04
    1860:	82 2e       	mov	r8, r18
    1862:	e1 2c       	mov	r14, r1
    1864:	99 24       	eor	r9, r9
    1866:	93 94       	inc	r9
    1868:	6c 01       	movw	r12, r24
    186a:	81 e1       	ldi	r24, 0x11	; 17
    186c:	c8 0e       	add	r12, r24
    186e:	d1 1c       	adc	r13, r1
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	0f 92       	push	r0
    1876:	f8 01       	movw	r30, r16
    1878:	f2 8c       	ldd	r15, Z+26	; 0x1a
    187a:	ff 20       	and	r15, r15
    187c:	91 f1       	breq	.+100    	; 0x18e2 <xQueueGenericReceive+0xac>
    187e:	c6 80       	ldd	r12, Z+6	; 0x06
    1880:	d7 80       	ldd	r13, Z+7	; 0x07
    1882:	b5 01       	movw	r22, r10
    1884:	c8 01       	movw	r24, r16
    1886:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <prvCopyDataFromQueue>
    188a:	81 10       	cpse	r8, r1
    188c:	19 c0       	rjmp	.+50     	; 0x18c0 <xQueueGenericReceive+0x8a>
    188e:	fa 94       	dec	r15
    1890:	f8 01       	movw	r30, r16
    1892:	f2 8e       	std	Z+26, r15	; 0x1a
    1894:	80 81       	ld	r24, Z
    1896:	91 81       	ldd	r25, Z+1	; 0x01
    1898:	89 2b       	or	r24, r25
    189a:	29 f4       	brne	.+10     	; 0x18a6 <xQueueGenericReceive+0x70>
    189c:	0e 94 30 12 	call	0x2460	; 0x2460 <pvTaskIncrementMutexHeldCount>
    18a0:	f8 01       	movw	r30, r16
    18a2:	93 83       	std	Z+3, r25	; 0x03
    18a4:	82 83       	std	Z+2, r24	; 0x02
    18a6:	f8 01       	movw	r30, r16
    18a8:	80 85       	ldd	r24, Z+8	; 0x08
    18aa:	88 23       	and	r24, r24
    18ac:	b1 f0       	breq	.+44     	; 0x18da <xQueueGenericReceive+0xa4>
    18ae:	c8 01       	movw	r24, r16
    18b0:	08 96       	adiw	r24, 0x08	; 8
    18b2:	0e 94 f7 10 	call	0x21ee	; 0x21ee <xTaskRemoveFromEventList>
    18b6:	88 23       	and	r24, r24
    18b8:	81 f0       	breq	.+32     	; 0x18da <xQueueGenericReceive+0xa4>
    18ba:	0e 94 7e 07 	call	0xefc	; 0xefc <vPortYield>
    18be:	0d c0       	rjmp	.+26     	; 0x18da <xQueueGenericReceive+0xa4>
    18c0:	f8 01       	movw	r30, r16
    18c2:	d7 82       	std	Z+7, r13	; 0x07
    18c4:	c6 82       	std	Z+6, r12	; 0x06
    18c6:	81 89       	ldd	r24, Z+17	; 0x11
    18c8:	88 23       	and	r24, r24
    18ca:	39 f0       	breq	.+14     	; 0x18da <xQueueGenericReceive+0xa4>
    18cc:	c8 01       	movw	r24, r16
    18ce:	41 96       	adiw	r24, 0x11	; 17
    18d0:	0e 94 f7 10 	call	0x21ee	; 0x21ee <xTaskRemoveFromEventList>
    18d4:	81 11       	cpse	r24, r1
    18d6:	0e 94 7e 07 	call	0xefc	; 0xefc <vPortYield>
    18da:	0f 90       	pop	r0
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	64 c0       	rjmp	.+200    	; 0x19aa <xQueueGenericReceive+0x174>
    18e2:	8c 81       	ldd	r24, Y+4	; 0x04
    18e4:	9d 81       	ldd	r25, Y+5	; 0x05
    18e6:	89 2b       	or	r24, r25
    18e8:	21 f4       	brne	.+8      	; 0x18f2 <xQueueGenericReceive+0xbc>
    18ea:	0f 90       	pop	r0
    18ec:	0f be       	out	0x3f, r0	; 63
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	5c c0       	rjmp	.+184    	; 0x19aa <xQueueGenericReceive+0x174>
    18f2:	e1 10       	cpse	r14, r1
    18f4:	05 c0       	rjmp	.+10     	; 0x1900 <xQueueGenericReceive+0xca>
    18f6:	ce 01       	movw	r24, r28
    18f8:	01 96       	adiw	r24, 0x01	; 1
    18fa:	0e 94 3f 11 	call	0x227e	; 0x227e <vTaskSetTimeOutState>
    18fe:	e9 2c       	mov	r14, r9
    1900:	0f 90       	pop	r0
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <vTaskSuspendAll>
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	f8 94       	cli
    190c:	0f 92       	push	r0
    190e:	f8 01       	movw	r30, r16
    1910:	85 8d       	ldd	r24, Z+29	; 0x1d
    1912:	8f 3f       	cpi	r24, 0xFF	; 255
    1914:	09 f4       	brne	.+2      	; 0x1918 <xQueueGenericReceive+0xe2>
    1916:	15 8e       	std	Z+29, r1	; 0x1d
    1918:	f8 01       	movw	r30, r16
    191a:	86 8d       	ldd	r24, Z+30	; 0x1e
    191c:	8f 3f       	cpi	r24, 0xFF	; 255
    191e:	09 f4       	brne	.+2      	; 0x1922 <xQueueGenericReceive+0xec>
    1920:	16 8e       	std	Z+30, r1	; 0x1e
    1922:	0f 90       	pop	r0
    1924:	0f be       	out	0x3f, r0	; 63
    1926:	be 01       	movw	r22, r28
    1928:	6c 5f       	subi	r22, 0xFC	; 252
    192a:	7f 4f       	sbci	r23, 0xFF	; 255
    192c:	ce 01       	movw	r24, r28
    192e:	01 96       	adiw	r24, 0x01	; 1
    1930:	0e 94 4a 11 	call	0x2294	; 0x2294 <xTaskCheckForTimeOut>
    1934:	81 11       	cpse	r24, r1
    1936:	2b c0       	rjmp	.+86     	; 0x198e <xQueueGenericReceive+0x158>
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	0f 92       	push	r0
    193e:	f8 01       	movw	r30, r16
    1940:	82 8d       	ldd	r24, Z+26	; 0x1a
    1942:	0f 90       	pop	r0
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	81 11       	cpse	r24, r1
    1948:	1c c0       	rjmp	.+56     	; 0x1982 <xQueueGenericReceive+0x14c>
    194a:	80 81       	ld	r24, Z
    194c:	91 81       	ldd	r25, Z+1	; 0x01
    194e:	89 2b       	or	r24, r25
    1950:	49 f4       	brne	.+18     	; 0x1964 <xQueueGenericReceive+0x12e>
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	0f 92       	push	r0
    1958:	82 81       	ldd	r24, Z+2	; 0x02
    195a:	93 81       	ldd	r25, Z+3	; 0x03
    195c:	0e 94 8e 11 	call	0x231c	; 0x231c <vTaskPriorityInherit>
    1960:	0f 90       	pop	r0
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	6c 81       	ldd	r22, Y+4	; 0x04
    1966:	7d 81       	ldd	r23, Y+5	; 0x05
    1968:	c6 01       	movw	r24, r12
    196a:	0e 94 cc 10 	call	0x2198	; 0x2198 <vTaskPlaceOnEventList>
    196e:	c8 01       	movw	r24, r16
    1970:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <prvUnlockQueue>
    1974:	0e 94 77 0f 	call	0x1eee	; 0x1eee <xTaskResumeAll>
    1978:	81 11       	cpse	r24, r1
    197a:	7a cf       	rjmp	.-268    	; 0x1870 <xQueueGenericReceive+0x3a>
    197c:	0e 94 7e 07 	call	0xefc	; 0xefc <vPortYield>
    1980:	77 cf       	rjmp	.-274    	; 0x1870 <xQueueGenericReceive+0x3a>
    1982:	c8 01       	movw	r24, r16
    1984:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <prvUnlockQueue>
    1988:	0e 94 77 0f 	call	0x1eee	; 0x1eee <xTaskResumeAll>
    198c:	71 cf       	rjmp	.-286    	; 0x1870 <xQueueGenericReceive+0x3a>
    198e:	c8 01       	movw	r24, r16
    1990:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <prvUnlockQueue>
    1994:	0e 94 77 0f 	call	0x1eee	; 0x1eee <xTaskResumeAll>
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	f8 94       	cli
    199c:	0f 92       	push	r0
    199e:	f8 01       	movw	r30, r16
    19a0:	82 8d       	ldd	r24, Z+26	; 0x1a
    19a2:	0f 90       	pop	r0
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	81 11       	cpse	r24, r1
    19a8:	63 cf       	rjmp	.-314    	; 0x1870 <xQueueGenericReceive+0x3a>
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	df 91       	pop	r29
    19b6:	cf 91       	pop	r28
    19b8:	1f 91       	pop	r17
    19ba:	0f 91       	pop	r16
    19bc:	ff 90       	pop	r15
    19be:	ef 90       	pop	r14
    19c0:	df 90       	pop	r13
    19c2:	cf 90       	pop	r12
    19c4:	bf 90       	pop	r11
    19c6:	af 90       	pop	r10
    19c8:	9f 90       	pop	r9
    19ca:	8f 90       	pop	r8
    19cc:	08 95       	ret

000019ce <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
    19d2:	ec 01       	movw	r28, r24
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    19d4:	0f b6       	in	r0, 0x3f	; 63
    19d6:	f8 94       	cli
    19d8:	0f 92       	push	r0
    19da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19dc:	8f 3f       	cpi	r24, 0xFF	; 255
    19de:	09 f4       	brne	.+2      	; 0x19e2 <vQueueWaitForMessageRestricted+0x14>
    19e0:	1d 8e       	std	Y+29, r1	; 0x1d
    19e2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19e4:	8f 3f       	cpi	r24, 0xFF	; 255
    19e6:	09 f4       	brne	.+2      	; 0x19ea <vQueueWaitForMessageRestricted+0x1c>
    19e8:	1e 8e       	std	Y+30, r1	; 0x1e
    19ea:	0f 90       	pop	r0
    19ec:	0f be       	out	0x3f, r0	; 63
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    19ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19f0:	81 11       	cpse	r24, r1
    19f2:	04 c0       	rjmp	.+8      	; 0x19fc <vQueueWaitForMessageRestricted+0x2e>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    19f4:	ce 01       	movw	r24, r28
    19f6:	41 96       	adiw	r24, 0x11	; 17
    19f8:	0e 94 de 10 	call	0x21bc	; 0x21bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    19fc:	ce 01       	movw	r24, r28
    19fe:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <prvUnlockQueue>
	}
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	08 95       	ret

00001a08 <prvResetNextTaskUnblockTime>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
    1a08:	e0 91 5a 08 	lds	r30, 0x085A	; 0x80085a <pxDelayedTaskList>
    1a0c:	f0 91 5b 08 	lds	r31, 0x085B	; 0x80085b <pxDelayedTaskList+0x1>
    1a10:	80 81       	ld	r24, Z
    1a12:	81 11       	cpse	r24, r1
    1a14:	07 c0       	rjmp	.+14     	; 0x1a24 <prvResetNextTaskUnblockTime+0x1c>
    1a16:	8f ef       	ldi	r24, 0xFF	; 255
    1a18:	9f ef       	ldi	r25, 0xFF	; 255
    1a1a:	90 93 3b 08 	sts	0x083B, r25	; 0x80083b <xNextTaskUnblockTime+0x1>
    1a1e:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <xNextTaskUnblockTime>
    1a22:	08 95       	ret
    1a24:	e0 91 5a 08 	lds	r30, 0x085A	; 0x80085a <pxDelayedTaskList>
    1a28:	f0 91 5b 08 	lds	r31, 0x085B	; 0x80085b <pxDelayedTaskList+0x1>
    1a2c:	05 80       	ldd	r0, Z+5	; 0x05
    1a2e:	f6 81       	ldd	r31, Z+6	; 0x06
    1a30:	e0 2d       	mov	r30, r0
    1a32:	06 80       	ldd	r0, Z+6	; 0x06
    1a34:	f7 81       	ldd	r31, Z+7	; 0x07
    1a36:	e0 2d       	mov	r30, r0
    1a38:	82 81       	ldd	r24, Z+2	; 0x02
    1a3a:	93 81       	ldd	r25, Z+3	; 0x03
    1a3c:	90 93 3b 08 	sts	0x083B, r25	; 0x80083b <xNextTaskUnblockTime+0x1>
    1a40:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <xNextTaskUnblockTime>
    1a44:	08 95       	ret

00001a46 <prvAddCurrentTaskToDelayedList>:
    1a46:	0f 93       	push	r16
    1a48:	1f 93       	push	r17
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	ec 01       	movw	r28, r24
    1a50:	00 91 42 08 	lds	r16, 0x0842	; 0x800842 <xTickCount>
    1a54:	10 91 43 08 	lds	r17, 0x0843	; 0x800843 <xTickCount+0x1>
    1a58:	80 91 b6 08 	lds	r24, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    1a5c:	90 91 b7 08 	lds	r25, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    1a60:	02 96       	adiw	r24, 0x02	; 2
    1a62:	0e 94 b2 06 	call	0xd64	; 0xd64 <uxListRemove>
    1a66:	c0 0f       	add	r28, r16
    1a68:	d1 1f       	adc	r29, r17
    1a6a:	e0 91 b6 08 	lds	r30, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    1a6e:	f0 91 b7 08 	lds	r31, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    1a72:	d3 83       	std	Z+3, r29	; 0x03
    1a74:	c2 83       	std	Z+2, r28	; 0x02
    1a76:	c0 17       	cp	r28, r16
    1a78:	d1 07       	cpc	r29, r17
    1a7a:	68 f4       	brcc	.+26     	; 0x1a96 <prvAddCurrentTaskToDelayedList+0x50>
    1a7c:	60 91 b6 08 	lds	r22, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    1a80:	70 91 b7 08 	lds	r23, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    1a84:	80 91 58 08 	lds	r24, 0x0858	; 0x800858 <pxOverflowDelayedTaskList>
    1a88:	90 91 59 08 	lds	r25, 0x0859	; 0x800859 <pxOverflowDelayedTaskList+0x1>
    1a8c:	6e 5f       	subi	r22, 0xFE	; 254
    1a8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a90:	0e 94 81 06 	call	0xd02	; 0xd02 <vListInsert>
    1a94:	17 c0       	rjmp	.+46     	; 0x1ac4 <prvAddCurrentTaskToDelayedList+0x7e>
    1a96:	60 91 b6 08 	lds	r22, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    1a9a:	70 91 b7 08 	lds	r23, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    1a9e:	80 91 5a 08 	lds	r24, 0x085A	; 0x80085a <pxDelayedTaskList>
    1aa2:	90 91 5b 08 	lds	r25, 0x085B	; 0x80085b <pxDelayedTaskList+0x1>
    1aa6:	6e 5f       	subi	r22, 0xFE	; 254
    1aa8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aaa:	0e 94 81 06 	call	0xd02	; 0xd02 <vListInsert>
    1aae:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <xNextTaskUnblockTime>
    1ab2:	90 91 3b 08 	lds	r25, 0x083B	; 0x80083b <xNextTaskUnblockTime+0x1>
    1ab6:	c8 17       	cp	r28, r24
    1ab8:	d9 07       	cpc	r29, r25
    1aba:	20 f4       	brcc	.+8      	; 0x1ac4 <prvAddCurrentTaskToDelayedList+0x7e>
    1abc:	d0 93 3b 08 	sts	0x083B, r29	; 0x80083b <xNextTaskUnblockTime+0x1>
    1ac0:	c0 93 3a 08 	sts	0x083A, r28	; 0x80083a <xNextTaskUnblockTime>
    1ac4:	df 91       	pop	r29
    1ac6:	cf 91       	pop	r28
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	08 95       	ret

00001ace <xTaskCreate>:
    1ace:	4f 92       	push	r4
    1ad0:	5f 92       	push	r5
    1ad2:	6f 92       	push	r6
    1ad4:	7f 92       	push	r7
    1ad6:	8f 92       	push	r8
    1ad8:	9f 92       	push	r9
    1ada:	af 92       	push	r10
    1adc:	bf 92       	push	r11
    1ade:	cf 92       	push	r12
    1ae0:	df 92       	push	r13
    1ae2:	ef 92       	push	r14
    1ae4:	ff 92       	push	r15
    1ae6:	0f 93       	push	r16
    1ae8:	1f 93       	push	r17
    1aea:	cf 93       	push	r28
    1aec:	df 93       	push	r29
    1aee:	4c 01       	movw	r8, r24
    1af0:	6b 01       	movw	r12, r22
    1af2:	5a 01       	movw	r10, r20
    1af4:	29 01       	movw	r4, r18
    1af6:	ca 01       	movw	r24, r20
    1af8:	0e 94 36 08 	call	0x106c	; 0x106c <pvPortMalloc>
    1afc:	3c 01       	movw	r6, r24
    1afe:	89 2b       	or	r24, r25
    1b00:	09 f4       	brne	.+2      	; 0x1b04 <xTaskCreate+0x36>
    1b02:	ea c0       	rjmp	.+468    	; 0x1cd8 <xTaskCreate+0x20a>
    1b04:	8c e2       	ldi	r24, 0x2C	; 44
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	0e 94 36 08 	call	0x106c	; 0x106c <pvPortMalloc>
    1b0c:	ec 01       	movw	r28, r24
    1b0e:	89 2b       	or	r24, r25
    1b10:	b1 f0       	breq	.+44     	; 0x1b3e <xTaskCreate+0x70>
    1b12:	78 8e       	std	Y+24, r7	; 0x18
    1b14:	6f 8a       	std	Y+23, r6	; 0x17
    1b16:	a5 01       	movw	r20, r10
    1b18:	65 ea       	ldi	r22, 0xA5	; 165
    1b1a:	70 e0       	ldi	r23, 0x00	; 0
    1b1c:	c3 01       	movw	r24, r6
    1b1e:	0e 94 12 16 	call	0x2c24	; 0x2c24 <memset>
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	a8 1a       	sub	r10, r24
    1b26:	b1 08       	sbc	r11, r1
    1b28:	8f 89       	ldd	r24, Y+23	; 0x17
    1b2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b2c:	a8 0e       	add	r10, r24
    1b2e:	b9 1e       	adc	r11, r25
    1b30:	d6 01       	movw	r26, r12
    1b32:	8c 91       	ld	r24, X
    1b34:	89 8f       	std	Y+25, r24	; 0x19
    1b36:	8c 91       	ld	r24, X
    1b38:	81 11       	cpse	r24, r1
    1b3a:	05 c0       	rjmp	.+10     	; 0x1b46 <xTaskCreate+0x78>
    1b3c:	18 c0       	rjmp	.+48     	; 0x1b6e <xTaskCreate+0xa0>
    1b3e:	c3 01       	movw	r24, r6
    1b40:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <vPortFree>
    1b44:	c9 c0       	rjmp	.+402    	; 0x1cd8 <xTaskCreate+0x20a>
    1b46:	ae 01       	movw	r20, r28
    1b48:	46 5e       	subi	r20, 0xE6	; 230
    1b4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b4c:	f6 01       	movw	r30, r12
    1b4e:	31 96       	adiw	r30, 0x01	; 1
    1b50:	b8 e0       	ldi	r27, 0x08	; 8
    1b52:	cb 0e       	add	r12, r27
    1b54:	d1 1c       	adc	r13, r1
    1b56:	cf 01       	movw	r24, r30
    1b58:	21 91       	ld	r18, Z+
    1b5a:	da 01       	movw	r26, r20
    1b5c:	2d 93       	st	X+, r18
    1b5e:	ad 01       	movw	r20, r26
    1b60:	dc 01       	movw	r26, r24
    1b62:	8c 91       	ld	r24, X
    1b64:	88 23       	and	r24, r24
    1b66:	19 f0       	breq	.+6      	; 0x1b6e <xTaskCreate+0xa0>
    1b68:	ce 16       	cp	r12, r30
    1b6a:	df 06       	cpc	r13, r31
    1b6c:	a1 f7       	brne	.-24     	; 0x1b56 <xTaskCreate+0x88>
    1b6e:	18 a2       	std	Y+32, r1	; 0x20
    1b70:	08 30       	cpi	r16, 0x08	; 8
    1b72:	08 f0       	brcs	.+2      	; 0x1b76 <xTaskCreate+0xa8>
    1b74:	07 e0       	ldi	r16, 0x07	; 7
    1b76:	0e 8b       	std	Y+22, r16	; 0x16
    1b78:	0b a3       	std	Y+35, r16	; 0x23
    1b7a:	1c a2       	std	Y+36, r1	; 0x24
    1b7c:	6e 01       	movw	r12, r28
    1b7e:	b2 e0       	ldi	r27, 0x02	; 2
    1b80:	cb 0e       	add	r12, r27
    1b82:	d1 1c       	adc	r13, r1
    1b84:	c6 01       	movw	r24, r12
    1b86:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <vListInitialiseItem>
    1b8a:	ce 01       	movw	r24, r28
    1b8c:	0c 96       	adiw	r24, 0x0c	; 12
    1b8e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <vListInitialiseItem>
    1b92:	d9 87       	std	Y+9, r29	; 0x09
    1b94:	c8 87       	std	Y+8, r28	; 0x08
    1b96:	88 e0       	ldi	r24, 0x08	; 8
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	80 1b       	sub	r24, r16
    1b9c:	91 09       	sbc	r25, r1
    1b9e:	9d 87       	std	Y+13, r25	; 0x0d
    1ba0:	8c 87       	std	Y+12, r24	; 0x0c
    1ba2:	db 8b       	std	Y+19, r29	; 0x13
    1ba4:	ca 8b       	std	Y+18, r28	; 0x12
    1ba6:	1e a2       	std	Y+38, r1	; 0x26
    1ba8:	1d a2       	std	Y+37, r1	; 0x25
    1baa:	1f a2       	std	Y+39, r1	; 0x27
    1bac:	18 a6       	std	Y+40, r1	; 0x28
    1bae:	19 a6       	std	Y+41, r1	; 0x29
    1bb0:	1a a6       	std	Y+42, r1	; 0x2a
    1bb2:	1b a6       	std	Y+43, r1	; 0x2b
    1bb4:	a2 01       	movw	r20, r4
    1bb6:	b4 01       	movw	r22, r8
    1bb8:	c5 01       	movw	r24, r10
    1bba:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <pxPortInitialiseStack>
    1bbe:	99 83       	std	Y+1, r25	; 0x01
    1bc0:	88 83       	st	Y, r24
    1bc2:	e1 14       	cp	r14, r1
    1bc4:	f1 04       	cpc	r15, r1
    1bc6:	19 f0       	breq	.+6      	; 0x1bce <xTaskCreate+0x100>
    1bc8:	f7 01       	movw	r30, r14
    1bca:	d1 83       	std	Z+1, r29	; 0x01
    1bcc:	c0 83       	st	Z, r28
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	0f 92       	push	r0
    1bd4:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <uxCurrentNumberOfTasks>
    1bd8:	8f 5f       	subi	r24, 0xFF	; 255
    1bda:	80 93 44 08 	sts	0x0844, r24	; 0x800844 <uxCurrentNumberOfTasks>
    1bde:	80 91 b6 08 	lds	r24, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    1be2:	90 91 b7 08 	lds	r25, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    1be6:	89 2b       	or	r24, r25
    1be8:	a9 f5       	brne	.+106    	; 0x1c54 <xTaskCreate+0x186>
    1bea:	d0 93 b7 08 	sts	0x08B7, r29	; 0x8008b7 <pxCurrentTCB+0x1>
    1bee:	c0 93 b6 08 	sts	0x08B6, r28	; 0x8008b6 <pxCurrentTCB>
    1bf2:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <uxCurrentNumberOfTasks>
    1bf6:	81 30       	cpi	r24, 0x01	; 1
    1bf8:	e9 f5       	brne	.+122    	; 0x1c74 <xTaskCreate+0x1a6>
    1bfa:	0e e6       	ldi	r16, 0x6E	; 110
    1bfc:	18 e0       	ldi	r17, 0x08	; 8
    1bfe:	0f 2e       	mov	r0, r31
    1c00:	f6 eb       	ldi	r31, 0xB6	; 182
    1c02:	ef 2e       	mov	r14, r31
    1c04:	f8 e0       	ldi	r31, 0x08	; 8
    1c06:	ff 2e       	mov	r15, r31
    1c08:	f0 2d       	mov	r31, r0
    1c0a:	c8 01       	movw	r24, r16
    1c0c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <vListInitialise>
    1c10:	07 5f       	subi	r16, 0xF7	; 247
    1c12:	1f 4f       	sbci	r17, 0xFF	; 255
    1c14:	0e 15       	cp	r16, r14
    1c16:	1f 05       	cpc	r17, r15
    1c18:	c1 f7       	brne	.-16     	; 0x1c0a <xTaskCreate+0x13c>
    1c1a:	85 e6       	ldi	r24, 0x65	; 101
    1c1c:	98 e0       	ldi	r25, 0x08	; 8
    1c1e:	0e 94 4e 06 	call	0xc9c	; 0xc9c <vListInitialise>
    1c22:	8c e5       	ldi	r24, 0x5C	; 92
    1c24:	98 e0       	ldi	r25, 0x08	; 8
    1c26:	0e 94 4e 06 	call	0xc9c	; 0xc9c <vListInitialise>
    1c2a:	8f e4       	ldi	r24, 0x4F	; 79
    1c2c:	98 e0       	ldi	r25, 0x08	; 8
    1c2e:	0e 94 4e 06 	call	0xc9c	; 0xc9c <vListInitialise>
    1c32:	86 e4       	ldi	r24, 0x46	; 70
    1c34:	98 e0       	ldi	r25, 0x08	; 8
    1c36:	0e 94 4e 06 	call	0xc9c	; 0xc9c <vListInitialise>
    1c3a:	85 e6       	ldi	r24, 0x65	; 101
    1c3c:	98 e0       	ldi	r25, 0x08	; 8
    1c3e:	90 93 5b 08 	sts	0x085B, r25	; 0x80085b <pxDelayedTaskList+0x1>
    1c42:	80 93 5a 08 	sts	0x085A, r24	; 0x80085a <pxDelayedTaskList>
    1c46:	8c e5       	ldi	r24, 0x5C	; 92
    1c48:	98 e0       	ldi	r25, 0x08	; 8
    1c4a:	90 93 59 08 	sts	0x0859, r25	; 0x800859 <pxOverflowDelayedTaskList+0x1>
    1c4e:	80 93 58 08 	sts	0x0858, r24	; 0x800858 <pxOverflowDelayedTaskList>
    1c52:	10 c0       	rjmp	.+32     	; 0x1c74 <xTaskCreate+0x1a6>
    1c54:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <xSchedulerRunning>
    1c58:	81 11       	cpse	r24, r1
    1c5a:	0c c0       	rjmp	.+24     	; 0x1c74 <xTaskCreate+0x1a6>
    1c5c:	e0 91 b6 08 	lds	r30, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    1c60:	f0 91 b7 08 	lds	r31, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    1c64:	96 89       	ldd	r25, Z+22	; 0x16
    1c66:	8e 89       	ldd	r24, Y+22	; 0x16
    1c68:	89 17       	cp	r24, r25
    1c6a:	20 f0       	brcs	.+8      	; 0x1c74 <xTaskCreate+0x1a6>
    1c6c:	d0 93 b7 08 	sts	0x08B7, r29	; 0x8008b7 <pxCurrentTCB+0x1>
    1c70:	c0 93 b6 08 	sts	0x08B6, r28	; 0x8008b6 <pxCurrentTCB>
    1c74:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <uxTaskNumber>
    1c78:	8f 5f       	subi	r24, 0xFF	; 255
    1c7a:	80 93 3c 08 	sts	0x083C, r24	; 0x80083c <uxTaskNumber>
    1c7e:	89 a3       	std	Y+33, r24	; 0x21
    1c80:	8e 89       	ldd	r24, Y+22	; 0x16
    1c82:	90 91 41 08 	lds	r25, 0x0841	; 0x800841 <uxTopReadyPriority>
    1c86:	98 17       	cp	r25, r24
    1c88:	10 f4       	brcc	.+4      	; 0x1c8e <xTaskCreate+0x1c0>
    1c8a:	80 93 41 08 	sts	0x0841, r24	; 0x800841 <uxTopReadyPriority>
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	9c 01       	movw	r18, r24
    1c92:	22 0f       	add	r18, r18
    1c94:	33 1f       	adc	r19, r19
    1c96:	22 0f       	add	r18, r18
    1c98:	33 1f       	adc	r19, r19
    1c9a:	22 0f       	add	r18, r18
    1c9c:	33 1f       	adc	r19, r19
    1c9e:	82 0f       	add	r24, r18
    1ca0:	93 1f       	adc	r25, r19
    1ca2:	b6 01       	movw	r22, r12
    1ca4:	82 59       	subi	r24, 0x92	; 146
    1ca6:	97 4f       	sbci	r25, 0xF7	; 247
    1ca8:	0e 94 60 06 	call	0xcc0	; 0xcc0 <vListInsertEnd>
    1cac:	0f 90       	pop	r0
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <xSchedulerRunning>
    1cb4:	88 23       	and	r24, r24
    1cb6:	61 f0       	breq	.+24     	; 0x1cd0 <xTaskCreate+0x202>
    1cb8:	e0 91 b6 08 	lds	r30, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    1cbc:	f0 91 b7 08 	lds	r31, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    1cc0:	96 89       	ldd	r25, Z+22	; 0x16
    1cc2:	8e 89       	ldd	r24, Y+22	; 0x16
    1cc4:	98 17       	cp	r25, r24
    1cc6:	30 f4       	brcc	.+12     	; 0x1cd4 <xTaskCreate+0x206>
    1cc8:	0e 94 7e 07 	call	0xefc	; 0xefc <vPortYield>
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	05 c0       	rjmp	.+10     	; 0x1cda <xTaskCreate+0x20c>
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	03 c0       	rjmp	.+6      	; 0x1cda <xTaskCreate+0x20c>
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	01 c0       	rjmp	.+2      	; 0x1cda <xTaskCreate+0x20c>
    1cd8:	8f ef       	ldi	r24, 0xFF	; 255
    1cda:	df 91       	pop	r29
    1cdc:	cf 91       	pop	r28
    1cde:	1f 91       	pop	r17
    1ce0:	0f 91       	pop	r16
    1ce2:	ff 90       	pop	r15
    1ce4:	ef 90       	pop	r14
    1ce6:	df 90       	pop	r13
    1ce8:	cf 90       	pop	r12
    1cea:	bf 90       	pop	r11
    1cec:	af 90       	pop	r10
    1cee:	9f 90       	pop	r9
    1cf0:	8f 90       	pop	r8
    1cf2:	7f 90       	pop	r7
    1cf4:	6f 90       	pop	r6
    1cf6:	5f 90       	pop	r5
    1cf8:	4f 90       	pop	r4
    1cfa:	08 95       	ret

00001cfc <vTaskStartScheduler>:
    1cfc:	ef 92       	push	r14
    1cfe:	ff 92       	push	r15
    1d00:	0f 93       	push	r16
    1d02:	0f 2e       	mov	r0, r31
    1d04:	f8 e3       	ldi	r31, 0x38	; 56
    1d06:	ef 2e       	mov	r14, r31
    1d08:	f8 e0       	ldi	r31, 0x08	; 8
    1d0a:	ff 2e       	mov	r15, r31
    1d0c:	f0 2d       	mov	r31, r0
    1d0e:	00 e0       	ldi	r16, 0x00	; 0
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	45 e5       	ldi	r20, 0x55	; 85
    1d16:	50 e0       	ldi	r21, 0x00	; 0
    1d18:	6e e4       	ldi	r22, 0x4E	; 78
    1d1a:	71 e0       	ldi	r23, 0x01	; 1
    1d1c:	8a e0       	ldi	r24, 0x0A	; 10
    1d1e:	90 e1       	ldi	r25, 0x10	; 16
    1d20:	0e 94 67 0d 	call	0x1ace	; 0x1ace <xTaskCreate>
    1d24:	81 30       	cpi	r24, 0x01	; 1
    1d26:	a1 f4       	brne	.+40     	; 0x1d50 <vTaskStartScheduler+0x54>
    1d28:	0e 94 9a 12 	call	0x2534	; 0x2534 <xTimerCreateTimerTask>
    1d2c:	81 30       	cpi	r24, 0x01	; 1
    1d2e:	81 f4       	brne	.+32     	; 0x1d50 <vTaskStartScheduler+0x54>
    1d30:	f8 94       	cli
    1d32:	8f ef       	ldi	r24, 0xFF	; 255
    1d34:	9f ef       	ldi	r25, 0xFF	; 255
    1d36:	90 93 3b 08 	sts	0x083B, r25	; 0x80083b <xNextTaskUnblockTime+0x1>
    1d3a:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <xNextTaskUnblockTime>
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <xSchedulerRunning>
    1d44:	10 92 43 08 	sts	0x0843, r1	; 0x800843 <xTickCount+0x1>
    1d48:	10 92 42 08 	sts	0x0842, r1	; 0x800842 <xTickCount>
    1d4c:	0e 94 44 07 	call	0xe88	; 0xe88 <xPortStartScheduler>
    1d50:	0f 91       	pop	r16
    1d52:	ff 90       	pop	r15
    1d54:	ef 90       	pop	r14
    1d56:	08 95       	ret

00001d58 <vTaskSuspendAll>:
    1d58:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <uxSchedulerSuspended>
    1d5c:	8f 5f       	subi	r24, 0xFF	; 255
    1d5e:	80 93 37 08 	sts	0x0837, r24	; 0x800837 <uxSchedulerSuspended>
    1d62:	08 95       	ret

00001d64 <xTaskGetTickCount>:
    1d64:	0f b6       	in	r0, 0x3f	; 63
    1d66:	f8 94       	cli
    1d68:	0f 92       	push	r0
    1d6a:	80 91 42 08 	lds	r24, 0x0842	; 0x800842 <xTickCount>
    1d6e:	90 91 43 08 	lds	r25, 0x0843	; 0x800843 <xTickCount+0x1>
    1d72:	0f 90       	pop	r0
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	08 95       	ret

00001d78 <xTaskIncrementTick>:
    1d78:	cf 92       	push	r12
    1d7a:	df 92       	push	r13
    1d7c:	ef 92       	push	r14
    1d7e:	ff 92       	push	r15
    1d80:	0f 93       	push	r16
    1d82:	1f 93       	push	r17
    1d84:	cf 93       	push	r28
    1d86:	df 93       	push	r29
    1d88:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <uxSchedulerSuspended>
    1d8c:	81 11       	cpse	r24, r1
    1d8e:	99 c0       	rjmp	.+306    	; 0x1ec2 <xTaskIncrementTick+0x14a>
    1d90:	e0 90 42 08 	lds	r14, 0x0842	; 0x800842 <xTickCount>
    1d94:	f0 90 43 08 	lds	r15, 0x0843	; 0x800843 <xTickCount+0x1>
    1d98:	8f ef       	ldi	r24, 0xFF	; 255
    1d9a:	e8 1a       	sub	r14, r24
    1d9c:	f8 0a       	sbc	r15, r24
    1d9e:	f0 92 43 08 	sts	0x0843, r15	; 0x800843 <xTickCount+0x1>
    1da2:	e0 92 42 08 	sts	0x0842, r14	; 0x800842 <xTickCount>
    1da6:	e1 14       	cp	r14, r1
    1da8:	f1 04       	cpc	r15, r1
    1daa:	b9 f4       	brne	.+46     	; 0x1dda <xTaskIncrementTick+0x62>
    1dac:	80 91 5a 08 	lds	r24, 0x085A	; 0x80085a <pxDelayedTaskList>
    1db0:	90 91 5b 08 	lds	r25, 0x085B	; 0x80085b <pxDelayedTaskList+0x1>
    1db4:	20 91 58 08 	lds	r18, 0x0858	; 0x800858 <pxOverflowDelayedTaskList>
    1db8:	30 91 59 08 	lds	r19, 0x0859	; 0x800859 <pxOverflowDelayedTaskList+0x1>
    1dbc:	30 93 5b 08 	sts	0x085B, r19	; 0x80085b <pxDelayedTaskList+0x1>
    1dc0:	20 93 5a 08 	sts	0x085A, r18	; 0x80085a <pxDelayedTaskList>
    1dc4:	90 93 59 08 	sts	0x0859, r25	; 0x800859 <pxOverflowDelayedTaskList+0x1>
    1dc8:	80 93 58 08 	sts	0x0858, r24	; 0x800858 <pxOverflowDelayedTaskList>
    1dcc:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <xNumOfOverflows>
    1dd0:	8f 5f       	subi	r24, 0xFF	; 255
    1dd2:	80 93 3d 08 	sts	0x083D, r24	; 0x80083d <xNumOfOverflows>
    1dd6:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <prvResetNextTaskUnblockTime>
    1dda:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <xNextTaskUnblockTime>
    1dde:	90 91 3b 08 	lds	r25, 0x083B	; 0x80083b <xNextTaskUnblockTime+0x1>
    1de2:	e8 16       	cp	r14, r24
    1de4:	f9 06       	cpc	r15, r25
    1de6:	10 f4       	brcc	.+4      	; 0x1dec <xTaskIncrementTick+0x74>
    1de8:	d1 2c       	mov	r13, r1
    1dea:	53 c0       	rjmp	.+166    	; 0x1e92 <xTaskIncrementTick+0x11a>
    1dec:	d1 2c       	mov	r13, r1
    1dee:	cc 24       	eor	r12, r12
    1df0:	c3 94       	inc	r12
    1df2:	e0 91 5a 08 	lds	r30, 0x085A	; 0x80085a <pxDelayedTaskList>
    1df6:	f0 91 5b 08 	lds	r31, 0x085B	; 0x80085b <pxDelayedTaskList+0x1>
    1dfa:	80 81       	ld	r24, Z
    1dfc:	81 11       	cpse	r24, r1
    1dfe:	07 c0       	rjmp	.+14     	; 0x1e0e <xTaskIncrementTick+0x96>
    1e00:	8f ef       	ldi	r24, 0xFF	; 255
    1e02:	9f ef       	ldi	r25, 0xFF	; 255
    1e04:	90 93 3b 08 	sts	0x083B, r25	; 0x80083b <xNextTaskUnblockTime+0x1>
    1e08:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <xNextTaskUnblockTime>
    1e0c:	42 c0       	rjmp	.+132    	; 0x1e92 <xTaskIncrementTick+0x11a>
    1e0e:	e0 91 5a 08 	lds	r30, 0x085A	; 0x80085a <pxDelayedTaskList>
    1e12:	f0 91 5b 08 	lds	r31, 0x085B	; 0x80085b <pxDelayedTaskList+0x1>
    1e16:	05 80       	ldd	r0, Z+5	; 0x05
    1e18:	f6 81       	ldd	r31, Z+6	; 0x06
    1e1a:	e0 2d       	mov	r30, r0
    1e1c:	c6 81       	ldd	r28, Z+6	; 0x06
    1e1e:	d7 81       	ldd	r29, Z+7	; 0x07
    1e20:	8a 81       	ldd	r24, Y+2	; 0x02
    1e22:	9b 81       	ldd	r25, Y+3	; 0x03
    1e24:	e8 16       	cp	r14, r24
    1e26:	f9 06       	cpc	r15, r25
    1e28:	28 f4       	brcc	.+10     	; 0x1e34 <xTaskIncrementTick+0xbc>
    1e2a:	90 93 3b 08 	sts	0x083B, r25	; 0x80083b <xNextTaskUnblockTime+0x1>
    1e2e:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <xNextTaskUnblockTime>
    1e32:	2f c0       	rjmp	.+94     	; 0x1e92 <xTaskIncrementTick+0x11a>
    1e34:	8e 01       	movw	r16, r28
    1e36:	0e 5f       	subi	r16, 0xFE	; 254
    1e38:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3a:	c8 01       	movw	r24, r16
    1e3c:	0e 94 b2 06 	call	0xd64	; 0xd64 <uxListRemove>
    1e40:	8c 89       	ldd	r24, Y+20	; 0x14
    1e42:	9d 89       	ldd	r25, Y+21	; 0x15
    1e44:	89 2b       	or	r24, r25
    1e46:	21 f0       	breq	.+8      	; 0x1e50 <xTaskIncrementTick+0xd8>
    1e48:	ce 01       	movw	r24, r28
    1e4a:	0c 96       	adiw	r24, 0x0c	; 12
    1e4c:	0e 94 b2 06 	call	0xd64	; 0xd64 <uxListRemove>
    1e50:	8e 89       	ldd	r24, Y+22	; 0x16
    1e52:	90 91 41 08 	lds	r25, 0x0841	; 0x800841 <uxTopReadyPriority>
    1e56:	98 17       	cp	r25, r24
    1e58:	10 f4       	brcc	.+4      	; 0x1e5e <xTaskIncrementTick+0xe6>
    1e5a:	80 93 41 08 	sts	0x0841, r24	; 0x800841 <uxTopReadyPriority>
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	9c 01       	movw	r18, r24
    1e62:	22 0f       	add	r18, r18
    1e64:	33 1f       	adc	r19, r19
    1e66:	22 0f       	add	r18, r18
    1e68:	33 1f       	adc	r19, r19
    1e6a:	22 0f       	add	r18, r18
    1e6c:	33 1f       	adc	r19, r19
    1e6e:	82 0f       	add	r24, r18
    1e70:	93 1f       	adc	r25, r19
    1e72:	b8 01       	movw	r22, r16
    1e74:	82 59       	subi	r24, 0x92	; 146
    1e76:	97 4f       	sbci	r25, 0xF7	; 247
    1e78:	0e 94 60 06 	call	0xcc0	; 0xcc0 <vListInsertEnd>
    1e7c:	e0 91 b6 08 	lds	r30, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    1e80:	f0 91 b7 08 	lds	r31, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    1e84:	9e 89       	ldd	r25, Y+22	; 0x16
    1e86:	86 89       	ldd	r24, Z+22	; 0x16
    1e88:	98 17       	cp	r25, r24
    1e8a:	08 f4       	brcc	.+2      	; 0x1e8e <xTaskIncrementTick+0x116>
    1e8c:	b2 cf       	rjmp	.-156    	; 0x1df2 <xTaskIncrementTick+0x7a>
    1e8e:	dc 2c       	mov	r13, r12
    1e90:	b0 cf       	rjmp	.-160    	; 0x1df2 <xTaskIncrementTick+0x7a>
    1e92:	e0 91 b6 08 	lds	r30, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    1e96:	f0 91 b7 08 	lds	r31, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    1e9a:	86 89       	ldd	r24, Z+22	; 0x16
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	ee 0f       	add	r30, r30
    1ea2:	ff 1f       	adc	r31, r31
    1ea4:	ee 0f       	add	r30, r30
    1ea6:	ff 1f       	adc	r31, r31
    1ea8:	ee 0f       	add	r30, r30
    1eaa:	ff 1f       	adc	r31, r31
    1eac:	8e 0f       	add	r24, r30
    1eae:	9f 1f       	adc	r25, r31
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	e2 59       	subi	r30, 0x92	; 146
    1eb4:	f7 4f       	sbci	r31, 0xF7	; 247
    1eb6:	80 81       	ld	r24, Z
    1eb8:	82 30       	cpi	r24, 0x02	; 2
    1eba:	48 f0       	brcs	.+18     	; 0x1ece <xTaskIncrementTick+0x156>
    1ebc:	dd 24       	eor	r13, r13
    1ebe:	d3 94       	inc	r13
    1ec0:	06 c0       	rjmp	.+12     	; 0x1ece <xTaskIncrementTick+0x156>
    1ec2:	80 91 3f 08 	lds	r24, 0x083F	; 0x80083f <uxPendedTicks>
    1ec6:	8f 5f       	subi	r24, 0xFF	; 255
    1ec8:	80 93 3f 08 	sts	0x083F, r24	; 0x80083f <uxPendedTicks>
    1ecc:	d1 2c       	mov	r13, r1
    1ece:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <xYieldPending>
    1ed2:	88 23       	and	r24, r24
    1ed4:	11 f0       	breq	.+4      	; 0x1eda <xTaskIncrementTick+0x162>
    1ed6:	dd 24       	eor	r13, r13
    1ed8:	d3 94       	inc	r13
    1eda:	8d 2d       	mov	r24, r13
    1edc:	df 91       	pop	r29
    1ede:	cf 91       	pop	r28
    1ee0:	1f 91       	pop	r17
    1ee2:	0f 91       	pop	r16
    1ee4:	ff 90       	pop	r15
    1ee6:	ef 90       	pop	r14
    1ee8:	df 90       	pop	r13
    1eea:	cf 90       	pop	r12
    1eec:	08 95       	ret

00001eee <xTaskResumeAll>:
    1eee:	df 92       	push	r13
    1ef0:	ef 92       	push	r14
    1ef2:	ff 92       	push	r15
    1ef4:	0f 93       	push	r16
    1ef6:	1f 93       	push	r17
    1ef8:	cf 93       	push	r28
    1efa:	df 93       	push	r29
    1efc:	0f b6       	in	r0, 0x3f	; 63
    1efe:	f8 94       	cli
    1f00:	0f 92       	push	r0
    1f02:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <uxSchedulerSuspended>
    1f06:	81 50       	subi	r24, 0x01	; 1
    1f08:	80 93 37 08 	sts	0x0837, r24	; 0x800837 <uxSchedulerSuspended>
    1f0c:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <uxSchedulerSuspended>
    1f10:	81 11       	cpse	r24, r1
    1f12:	5f c0       	rjmp	.+190    	; 0x1fd2 <xTaskResumeAll+0xe4>
    1f14:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <uxCurrentNumberOfTasks>
    1f18:	81 11       	cpse	r24, r1
    1f1a:	33 c0       	rjmp	.+102    	; 0x1f82 <xTaskResumeAll+0x94>
    1f1c:	5d c0       	rjmp	.+186    	; 0x1fd8 <xTaskResumeAll+0xea>
    1f1e:	d7 01       	movw	r26, r14
    1f20:	15 96       	adiw	r26, 0x05	; 5
    1f22:	ed 91       	ld	r30, X+
    1f24:	fc 91       	ld	r31, X
    1f26:	16 97       	sbiw	r26, 0x06	; 6
    1f28:	c6 81       	ldd	r28, Z+6	; 0x06
    1f2a:	d7 81       	ldd	r29, Z+7	; 0x07
    1f2c:	ce 01       	movw	r24, r28
    1f2e:	0c 96       	adiw	r24, 0x0c	; 12
    1f30:	0e 94 b2 06 	call	0xd64	; 0xd64 <uxListRemove>
    1f34:	8e 01       	movw	r16, r28
    1f36:	0e 5f       	subi	r16, 0xFE	; 254
    1f38:	1f 4f       	sbci	r17, 0xFF	; 255
    1f3a:	c8 01       	movw	r24, r16
    1f3c:	0e 94 b2 06 	call	0xd64	; 0xd64 <uxListRemove>
    1f40:	8e 89       	ldd	r24, Y+22	; 0x16
    1f42:	90 91 41 08 	lds	r25, 0x0841	; 0x800841 <uxTopReadyPriority>
    1f46:	98 17       	cp	r25, r24
    1f48:	10 f4       	brcc	.+4      	; 0x1f4e <xTaskResumeAll+0x60>
    1f4a:	80 93 41 08 	sts	0x0841, r24	; 0x800841 <uxTopReadyPriority>
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	9c 01       	movw	r18, r24
    1f52:	22 0f       	add	r18, r18
    1f54:	33 1f       	adc	r19, r19
    1f56:	22 0f       	add	r18, r18
    1f58:	33 1f       	adc	r19, r19
    1f5a:	22 0f       	add	r18, r18
    1f5c:	33 1f       	adc	r19, r19
    1f5e:	82 0f       	add	r24, r18
    1f60:	93 1f       	adc	r25, r19
    1f62:	b8 01       	movw	r22, r16
    1f64:	82 59       	subi	r24, 0x92	; 146
    1f66:	97 4f       	sbci	r25, 0xF7	; 247
    1f68:	0e 94 60 06 	call	0xcc0	; 0xcc0 <vListInsertEnd>
    1f6c:	e0 91 b6 08 	lds	r30, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    1f70:	f0 91 b7 08 	lds	r31, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    1f74:	9e 89       	ldd	r25, Y+22	; 0x16
    1f76:	86 89       	ldd	r24, Z+22	; 0x16
    1f78:	98 17       	cp	r25, r24
    1f7a:	68 f0       	brcs	.+26     	; 0x1f96 <xTaskResumeAll+0xa8>
    1f7c:	d0 92 3e 08 	sts	0x083E, r13	; 0x80083e <xYieldPending>
    1f80:	0a c0       	rjmp	.+20     	; 0x1f96 <xTaskResumeAll+0xa8>
    1f82:	c0 e0       	ldi	r28, 0x00	; 0
    1f84:	d0 e0       	ldi	r29, 0x00	; 0
    1f86:	0f 2e       	mov	r0, r31
    1f88:	ff e4       	ldi	r31, 0x4F	; 79
    1f8a:	ef 2e       	mov	r14, r31
    1f8c:	f8 e0       	ldi	r31, 0x08	; 8
    1f8e:	ff 2e       	mov	r15, r31
    1f90:	f0 2d       	mov	r31, r0
    1f92:	dd 24       	eor	r13, r13
    1f94:	d3 94       	inc	r13
    1f96:	f7 01       	movw	r30, r14
    1f98:	80 81       	ld	r24, Z
    1f9a:	81 11       	cpse	r24, r1
    1f9c:	c0 cf       	rjmp	.-128    	; 0x1f1e <xTaskResumeAll+0x30>
    1f9e:	cd 2b       	or	r28, r29
    1fa0:	11 f0       	breq	.+4      	; 0x1fa6 <xTaskResumeAll+0xb8>
    1fa2:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <prvResetNextTaskUnblockTime>
    1fa6:	c0 91 3f 08 	lds	r28, 0x083F	; 0x80083f <uxPendedTicks>
    1faa:	cc 23       	and	r28, r28
    1fac:	51 f0       	breq	.+20     	; 0x1fc2 <xTaskResumeAll+0xd4>
    1fae:	d1 e0       	ldi	r29, 0x01	; 1
    1fb0:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <xTaskIncrementTick>
    1fb4:	81 11       	cpse	r24, r1
    1fb6:	d0 93 3e 08 	sts	0x083E, r29	; 0x80083e <xYieldPending>
    1fba:	c1 50       	subi	r28, 0x01	; 1
    1fbc:	c9 f7       	brne	.-14     	; 0x1fb0 <xTaskResumeAll+0xc2>
    1fbe:	10 92 3f 08 	sts	0x083F, r1	; 0x80083f <uxPendedTicks>
    1fc2:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <xYieldPending>
    1fc6:	88 23       	and	r24, r24
    1fc8:	31 f0       	breq	.+12     	; 0x1fd6 <xTaskResumeAll+0xe8>
    1fca:	0e 94 7e 07 	call	0xefc	; 0xefc <vPortYield>
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	03 c0       	rjmp	.+6      	; 0x1fd8 <xTaskResumeAll+0xea>
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	01 c0       	rjmp	.+2      	; 0x1fd8 <xTaskResumeAll+0xea>
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	0f 90       	pop	r0
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	df 91       	pop	r29
    1fde:	cf 91       	pop	r28
    1fe0:	1f 91       	pop	r17
    1fe2:	0f 91       	pop	r16
    1fe4:	ff 90       	pop	r15
    1fe6:	ef 90       	pop	r14
    1fe8:	df 90       	pop	r13
    1fea:	08 95       	ret

00001fec <vTaskDelay>:
    1fec:	cf 93       	push	r28
    1fee:	df 93       	push	r29
    1ff0:	ec 01       	movw	r28, r24
    1ff2:	89 2b       	or	r24, r25
    1ff4:	51 f0       	breq	.+20     	; 0x200a <vTaskDelay+0x1e>
    1ff6:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <vTaskSuspendAll>
    1ffa:	60 e0       	ldi	r22, 0x00	; 0
    1ffc:	ce 01       	movw	r24, r28
    1ffe:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <prvAddCurrentTaskToDelayedList>
    2002:	0e 94 77 0f 	call	0x1eee	; 0x1eee <xTaskResumeAll>
    2006:	81 11       	cpse	r24, r1
    2008:	02 c0       	rjmp	.+4      	; 0x200e <vTaskDelay+0x22>
    200a:	0e 94 7e 07 	call	0xefc	; 0xefc <vPortYield>
    200e:	df 91       	pop	r29
    2010:	cf 91       	pop	r28
    2012:	08 95       	ret

00002014 <prvIdleTask>:
    2014:	06 e4       	ldi	r16, 0x46	; 70
    2016:	18 e0       	ldi	r17, 0x08	; 8
    2018:	0f 2e       	mov	r0, r31
    201a:	fe e6       	ldi	r31, 0x6E	; 110
    201c:	ef 2e       	mov	r14, r31
    201e:	f8 e0       	ldi	r31, 0x08	; 8
    2020:	ff 2e       	mov	r15, r31
    2022:	f0 2d       	mov	r31, r0
    2024:	29 c0       	rjmp	.+82     	; 0x2078 <prvIdleTask+0x64>
    2026:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <vTaskSuspendAll>
    202a:	d8 01       	movw	r26, r16
    202c:	cc 91       	ld	r28, X
    202e:	0e 94 77 0f 	call	0x1eee	; 0x1eee <xTaskResumeAll>
    2032:	cc 23       	and	r28, r28
    2034:	09 f1       	breq	.+66     	; 0x2078 <prvIdleTask+0x64>
    2036:	0f b6       	in	r0, 0x3f	; 63
    2038:	f8 94       	cli
    203a:	0f 92       	push	r0
    203c:	d8 01       	movw	r26, r16
    203e:	15 96       	adiw	r26, 0x05	; 5
    2040:	ed 91       	ld	r30, X+
    2042:	fc 91       	ld	r31, X
    2044:	16 97       	sbiw	r26, 0x06	; 6
    2046:	c6 81       	ldd	r28, Z+6	; 0x06
    2048:	d7 81       	ldd	r29, Z+7	; 0x07
    204a:	ce 01       	movw	r24, r28
    204c:	02 96       	adiw	r24, 0x02	; 2
    204e:	0e 94 b2 06 	call	0xd64	; 0xd64 <uxListRemove>
    2052:	80 91 44 08 	lds	r24, 0x0844	; 0x800844 <uxCurrentNumberOfTasks>
    2056:	81 50       	subi	r24, 0x01	; 1
    2058:	80 93 44 08 	sts	0x0844, r24	; 0x800844 <uxCurrentNumberOfTasks>
    205c:	80 91 45 08 	lds	r24, 0x0845	; 0x800845 <uxDeletedTasksWaitingCleanUp>
    2060:	81 50       	subi	r24, 0x01	; 1
    2062:	80 93 45 08 	sts	0x0845, r24	; 0x800845 <uxDeletedTasksWaitingCleanUp>
    2066:	0f 90       	pop	r0
    2068:	0f be       	out	0x3f, r0	; 63
    206a:	8f 89       	ldd	r24, Y+23	; 0x17
    206c:	98 8d       	ldd	r25, Y+24	; 0x18
    206e:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <vPortFree>
    2072:	ce 01       	movw	r24, r28
    2074:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <vPortFree>
    2078:	80 91 45 08 	lds	r24, 0x0845	; 0x800845 <uxDeletedTasksWaitingCleanUp>
    207c:	81 11       	cpse	r24, r1
    207e:	d3 cf       	rjmp	.-90     	; 0x2026 <prvIdleTask+0x12>
    2080:	f7 01       	movw	r30, r14
    2082:	80 81       	ld	r24, Z
    2084:	82 30       	cpi	r24, 0x02	; 2
    2086:	10 f0       	brcs	.+4      	; 0x208c <prvIdleTask+0x78>
    2088:	0e 94 7e 07 	call	0xefc	; 0xefc <vPortYield>
    208c:	0e 94 1b 05 	call	0xa36	; 0xa36 <vApplicationIdleHook>
    2090:	f3 cf       	rjmp	.-26     	; 0x2078 <prvIdleTask+0x64>

00002092 <vTaskSetApplicationTaskTag>:
    2092:	00 97       	sbiw	r24, 0x00	; 0
    2094:	21 f4       	brne	.+8      	; 0x209e <vTaskSetApplicationTaskTag+0xc>
    2096:	80 91 b6 08 	lds	r24, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    209a:	90 91 b7 08 	lds	r25, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    209e:	0f b6       	in	r0, 0x3f	; 63
    20a0:	f8 94       	cli
    20a2:	0f 92       	push	r0
    20a4:	fc 01       	movw	r30, r24
    20a6:	76 a3       	std	Z+38, r23	; 0x26
    20a8:	65 a3       	std	Z+37, r22	; 0x25
    20aa:	0f 90       	pop	r0
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	08 95       	ret

000020b0 <vTaskSwitchContext>:
    20b0:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <uxSchedulerSuspended>
    20b4:	88 23       	and	r24, r24
    20b6:	21 f0       	breq	.+8      	; 0x20c0 <vTaskSwitchContext+0x10>
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	80 93 3e 08 	sts	0x083E, r24	; 0x80083e <xYieldPending>
    20be:	08 95       	ret
    20c0:	10 92 3e 08 	sts	0x083E, r1	; 0x80083e <xYieldPending>
    20c4:	e0 91 b6 08 	lds	r30, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    20c8:	f0 91 b7 08 	lds	r31, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    20cc:	85 a1       	ldd	r24, Z+37	; 0x25
    20ce:	0e 94 07 06 	call	0xc0e	; 0xc0e <switch_out>
    20d2:	20 91 41 08 	lds	r18, 0x0841	; 0x800841 <uxTopReadyPriority>
    20d6:	82 2f       	mov	r24, r18
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	fc 01       	movw	r30, r24
    20dc:	ee 0f       	add	r30, r30
    20de:	ff 1f       	adc	r31, r31
    20e0:	ee 0f       	add	r30, r30
    20e2:	ff 1f       	adc	r31, r31
    20e4:	ee 0f       	add	r30, r30
    20e6:	ff 1f       	adc	r31, r31
    20e8:	e8 0f       	add	r30, r24
    20ea:	f9 1f       	adc	r31, r25
    20ec:	e2 59       	subi	r30, 0x92	; 146
    20ee:	f7 4f       	sbci	r31, 0xF7	; 247
    20f0:	30 81       	ld	r19, Z
    20f2:	31 11       	cpse	r19, r1
    20f4:	11 c0       	rjmp	.+34     	; 0x2118 <vTaskSwitchContext+0x68>
    20f6:	21 50       	subi	r18, 0x01	; 1
    20f8:	82 2f       	mov	r24, r18
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	fc 01       	movw	r30, r24
    20fe:	ee 0f       	add	r30, r30
    2100:	ff 1f       	adc	r31, r31
    2102:	ee 0f       	add	r30, r30
    2104:	ff 1f       	adc	r31, r31
    2106:	ee 0f       	add	r30, r30
    2108:	ff 1f       	adc	r31, r31
    210a:	e8 0f       	add	r30, r24
    210c:	f9 1f       	adc	r31, r25
    210e:	e2 59       	subi	r30, 0x92	; 146
    2110:	f7 4f       	sbci	r31, 0xF7	; 247
    2112:	30 81       	ld	r19, Z
    2114:	33 23       	and	r19, r19
    2116:	79 f3       	breq	.-34     	; 0x20f6 <vTaskSwitchContext+0x46>
    2118:	ac 01       	movw	r20, r24
    211a:	44 0f       	add	r20, r20
    211c:	55 1f       	adc	r21, r21
    211e:	44 0f       	add	r20, r20
    2120:	55 1f       	adc	r21, r21
    2122:	44 0f       	add	r20, r20
    2124:	55 1f       	adc	r21, r21
    2126:	48 0f       	add	r20, r24
    2128:	59 1f       	adc	r21, r25
    212a:	da 01       	movw	r26, r20
    212c:	a2 59       	subi	r26, 0x92	; 146
    212e:	b7 4f       	sbci	r27, 0xF7	; 247
    2130:	11 96       	adiw	r26, 0x01	; 1
    2132:	ed 91       	ld	r30, X+
    2134:	fc 91       	ld	r31, X
    2136:	12 97       	sbiw	r26, 0x02	; 2
    2138:	02 80       	ldd	r0, Z+2	; 0x02
    213a:	f3 81       	ldd	r31, Z+3	; 0x03
    213c:	e0 2d       	mov	r30, r0
    213e:	12 96       	adiw	r26, 0x02	; 2
    2140:	fc 93       	st	X, r31
    2142:	ee 93       	st	-X, r30
    2144:	11 97       	sbiw	r26, 0x01	; 1
    2146:	4f 58       	subi	r20, 0x8F	; 143
    2148:	57 4f       	sbci	r21, 0xF7	; 247
    214a:	e4 17       	cp	r30, r20
    214c:	f5 07       	cpc	r31, r21
    214e:	29 f4       	brne	.+10     	; 0x215a <vTaskSwitchContext+0xaa>
    2150:	42 81       	ldd	r20, Z+2	; 0x02
    2152:	53 81       	ldd	r21, Z+3	; 0x03
    2154:	fd 01       	movw	r30, r26
    2156:	52 83       	std	Z+2, r21	; 0x02
    2158:	41 83       	std	Z+1, r20	; 0x01
    215a:	fc 01       	movw	r30, r24
    215c:	ee 0f       	add	r30, r30
    215e:	ff 1f       	adc	r31, r31
    2160:	ee 0f       	add	r30, r30
    2162:	ff 1f       	adc	r31, r31
    2164:	ee 0f       	add	r30, r30
    2166:	ff 1f       	adc	r31, r31
    2168:	8e 0f       	add	r24, r30
    216a:	9f 1f       	adc	r25, r31
    216c:	fc 01       	movw	r30, r24
    216e:	e2 59       	subi	r30, 0x92	; 146
    2170:	f7 4f       	sbci	r31, 0xF7	; 247
    2172:	01 80       	ldd	r0, Z+1	; 0x01
    2174:	f2 81       	ldd	r31, Z+2	; 0x02
    2176:	e0 2d       	mov	r30, r0
    2178:	86 81       	ldd	r24, Z+6	; 0x06
    217a:	97 81       	ldd	r25, Z+7	; 0x07
    217c:	90 93 b7 08 	sts	0x08B7, r25	; 0x8008b7 <pxCurrentTCB+0x1>
    2180:	80 93 b6 08 	sts	0x08B6, r24	; 0x8008b6 <pxCurrentTCB>
    2184:	20 93 41 08 	sts	0x0841, r18	; 0x800841 <uxTopReadyPriority>
    2188:	e0 91 b6 08 	lds	r30, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    218c:	f0 91 b7 08 	lds	r31, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    2190:	85 a1       	ldd	r24, Z+37	; 0x25
    2192:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <switch_in>
    2196:	08 95       	ret

00002198 <vTaskPlaceOnEventList>:
    2198:	cf 93       	push	r28
    219a:	df 93       	push	r29
    219c:	eb 01       	movw	r28, r22
    219e:	60 91 b6 08 	lds	r22, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    21a2:	70 91 b7 08 	lds	r23, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    21a6:	64 5f       	subi	r22, 0xF4	; 244
    21a8:	7f 4f       	sbci	r23, 0xFF	; 255
    21aa:	0e 94 81 06 	call	0xd02	; 0xd02 <vListInsert>
    21ae:	61 e0       	ldi	r22, 0x01	; 1
    21b0:	ce 01       	movw	r24, r28
    21b2:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <prvAddCurrentTaskToDelayedList>
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
    21ba:	08 95       	ret

000021bc <vTaskPlaceOnEventListRestricted>:
    21bc:	0f 93       	push	r16
    21be:	1f 93       	push	r17
    21c0:	cf 93       	push	r28
    21c2:	8b 01       	movw	r16, r22
    21c4:	c4 2f       	mov	r28, r20
    21c6:	60 91 b6 08 	lds	r22, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    21ca:	70 91 b7 08 	lds	r23, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    21ce:	64 5f       	subi	r22, 0xF4	; 244
    21d0:	7f 4f       	sbci	r23, 0xFF	; 255
    21d2:	0e 94 60 06 	call	0xcc0	; 0xcc0 <vListInsertEnd>
    21d6:	cc 23       	and	r28, r28
    21d8:	11 f0       	breq	.+4      	; 0x21de <vTaskPlaceOnEventListRestricted+0x22>
    21da:	0f ef       	ldi	r16, 0xFF	; 255
    21dc:	1f ef       	ldi	r17, 0xFF	; 255
    21de:	6c 2f       	mov	r22, r28
    21e0:	c8 01       	movw	r24, r16
    21e2:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <prvAddCurrentTaskToDelayedList>
    21e6:	cf 91       	pop	r28
    21e8:	1f 91       	pop	r17
    21ea:	0f 91       	pop	r16
    21ec:	08 95       	ret

000021ee <xTaskRemoveFromEventList>:
    21ee:	0f 93       	push	r16
    21f0:	1f 93       	push	r17
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	dc 01       	movw	r26, r24
    21f8:	15 96       	adiw	r26, 0x05	; 5
    21fa:	ed 91       	ld	r30, X+
    21fc:	fc 91       	ld	r31, X
    21fe:	16 97       	sbiw	r26, 0x06	; 6
    2200:	c6 81       	ldd	r28, Z+6	; 0x06
    2202:	d7 81       	ldd	r29, Z+7	; 0x07
    2204:	8e 01       	movw	r16, r28
    2206:	04 5f       	subi	r16, 0xF4	; 244
    2208:	1f 4f       	sbci	r17, 0xFF	; 255
    220a:	c8 01       	movw	r24, r16
    220c:	0e 94 b2 06 	call	0xd64	; 0xd64 <uxListRemove>
    2210:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <uxSchedulerSuspended>
    2214:	81 11       	cpse	r24, r1
    2216:	1c c0       	rjmp	.+56     	; 0x2250 <xTaskRemoveFromEventList+0x62>
    2218:	0a 50       	subi	r16, 0x0A	; 10
    221a:	11 09       	sbc	r17, r1
    221c:	c8 01       	movw	r24, r16
    221e:	0e 94 b2 06 	call	0xd64	; 0xd64 <uxListRemove>
    2222:	8e 89       	ldd	r24, Y+22	; 0x16
    2224:	90 91 41 08 	lds	r25, 0x0841	; 0x800841 <uxTopReadyPriority>
    2228:	98 17       	cp	r25, r24
    222a:	10 f4       	brcc	.+4      	; 0x2230 <xTaskRemoveFromEventList+0x42>
    222c:	80 93 41 08 	sts	0x0841, r24	; 0x800841 <uxTopReadyPriority>
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	9c 01       	movw	r18, r24
    2234:	22 0f       	add	r18, r18
    2236:	33 1f       	adc	r19, r19
    2238:	22 0f       	add	r18, r18
    223a:	33 1f       	adc	r19, r19
    223c:	22 0f       	add	r18, r18
    223e:	33 1f       	adc	r19, r19
    2240:	82 0f       	add	r24, r18
    2242:	93 1f       	adc	r25, r19
    2244:	b8 01       	movw	r22, r16
    2246:	82 59       	subi	r24, 0x92	; 146
    2248:	97 4f       	sbci	r25, 0xF7	; 247
    224a:	0e 94 60 06 	call	0xcc0	; 0xcc0 <vListInsertEnd>
    224e:	05 c0       	rjmp	.+10     	; 0x225a <xTaskRemoveFromEventList+0x6c>
    2250:	b8 01       	movw	r22, r16
    2252:	8f e4       	ldi	r24, 0x4F	; 79
    2254:	98 e0       	ldi	r25, 0x08	; 8
    2256:	0e 94 60 06 	call	0xcc0	; 0xcc0 <vListInsertEnd>
    225a:	e0 91 b6 08 	lds	r30, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    225e:	f0 91 b7 08 	lds	r31, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    2262:	9e 89       	ldd	r25, Y+22	; 0x16
    2264:	86 89       	ldd	r24, Z+22	; 0x16
    2266:	89 17       	cp	r24, r25
    2268:	20 f4       	brcc	.+8      	; 0x2272 <xTaskRemoveFromEventList+0x84>
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	80 93 3e 08 	sts	0x083E, r24	; 0x80083e <xYieldPending>
    2270:	01 c0       	rjmp	.+2      	; 0x2274 <xTaskRemoveFromEventList+0x86>
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	df 91       	pop	r29
    2276:	cf 91       	pop	r28
    2278:	1f 91       	pop	r17
    227a:	0f 91       	pop	r16
    227c:	08 95       	ret

0000227e <vTaskSetTimeOutState>:
    227e:	20 91 3d 08 	lds	r18, 0x083D	; 0x80083d <xNumOfOverflows>
    2282:	fc 01       	movw	r30, r24
    2284:	20 83       	st	Z, r18
    2286:	20 91 42 08 	lds	r18, 0x0842	; 0x800842 <xTickCount>
    228a:	30 91 43 08 	lds	r19, 0x0843	; 0x800843 <xTickCount+0x1>
    228e:	32 83       	std	Z+2, r19	; 0x02
    2290:	21 83       	std	Z+1, r18	; 0x01
    2292:	08 95       	ret

00002294 <xTaskCheckForTimeOut>:
    2294:	cf 93       	push	r28
    2296:	df 93       	push	r29
    2298:	fc 01       	movw	r30, r24
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	f8 94       	cli
    229e:	0f 92       	push	r0
    22a0:	20 91 42 08 	lds	r18, 0x0842	; 0x800842 <xTickCount>
    22a4:	30 91 43 08 	lds	r19, 0x0843	; 0x800843 <xTickCount+0x1>
    22a8:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <xNumOfOverflows>
    22ac:	90 81       	ld	r25, Z
    22ae:	98 17       	cp	r25, r24
    22b0:	29 f0       	breq	.+10     	; 0x22bc <xTaskCheckForTimeOut+0x28>
    22b2:	81 81       	ldd	r24, Z+1	; 0x01
    22b4:	92 81       	ldd	r25, Z+2	; 0x02
    22b6:	28 17       	cp	r18, r24
    22b8:	39 07       	cpc	r19, r25
    22ba:	b0 f4       	brcc	.+44     	; 0x22e8 <xTaskCheckForTimeOut+0x54>
    22bc:	a1 81       	ldd	r26, Z+1	; 0x01
    22be:	b2 81       	ldd	r27, Z+2	; 0x02
    22c0:	eb 01       	movw	r28, r22
    22c2:	48 81       	ld	r20, Y
    22c4:	59 81       	ldd	r21, Y+1	; 0x01
    22c6:	c9 01       	movw	r24, r18
    22c8:	8a 1b       	sub	r24, r26
    22ca:	9b 0b       	sbc	r25, r27
    22cc:	84 17       	cp	r24, r20
    22ce:	95 07       	cpc	r25, r21
    22d0:	68 f4       	brcc	.+26     	; 0x22ec <xTaskCheckForTimeOut+0x58>
    22d2:	cf 01       	movw	r24, r30
    22d4:	a2 1b       	sub	r26, r18
    22d6:	b3 0b       	sbc	r27, r19
    22d8:	4a 0f       	add	r20, r26
    22da:	5b 1f       	adc	r21, r27
    22dc:	59 83       	std	Y+1, r21	; 0x01
    22de:	48 83       	st	Y, r20
    22e0:	0e 94 3f 11 	call	0x227e	; 0x227e <vTaskSetTimeOutState>
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	03 c0       	rjmp	.+6      	; 0x22ee <xTaskCheckForTimeOut+0x5a>
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	01 c0       	rjmp	.+2      	; 0x22ee <xTaskCheckForTimeOut+0x5a>
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	0f 90       	pop	r0
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	df 91       	pop	r29
    22f4:	cf 91       	pop	r28
    22f6:	08 95       	ret

000022f8 <vTaskMissedYield>:
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	80 93 3e 08 	sts	0x083E, r24	; 0x80083e <xYieldPending>
    22fe:	08 95       	ret

00002300 <xTaskGetSchedulerState>:
    2300:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <xSchedulerRunning>
    2304:	88 23       	and	r24, r24
    2306:	31 f0       	breq	.+12     	; 0x2314 <xTaskGetSchedulerState+0x14>
    2308:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <uxSchedulerSuspended>
    230c:	88 23       	and	r24, r24
    230e:	21 f0       	breq	.+8      	; 0x2318 <xTaskGetSchedulerState+0x18>
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	08 95       	ret
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	08 95       	ret
    2318:	82 e0       	ldi	r24, 0x02	; 2
    231a:	08 95       	ret

0000231c <vTaskPriorityInherit>:
    231c:	0f 93       	push	r16
    231e:	1f 93       	push	r17
    2320:	cf 93       	push	r28
    2322:	df 93       	push	r29
    2324:	fc 01       	movw	r30, r24
    2326:	89 2b       	or	r24, r25
    2328:	09 f4       	brne	.+2      	; 0x232c <vTaskPriorityInherit+0x10>
    232a:	55 c0       	rjmp	.+170    	; 0x23d6 <vTaskPriorityInherit+0xba>
    232c:	26 89       	ldd	r18, Z+22	; 0x16
    232e:	a0 91 b6 08 	lds	r26, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    2332:	b0 91 b7 08 	lds	r27, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    2336:	56 96       	adiw	r26, 0x16	; 22
    2338:	8c 91       	ld	r24, X
    233a:	28 17       	cp	r18, r24
    233c:	08 f0       	brcs	.+2      	; 0x2340 <vTaskPriorityInherit+0x24>
    233e:	4b c0       	rjmp	.+150    	; 0x23d6 <vTaskPriorityInherit+0xba>
    2340:	84 85       	ldd	r24, Z+12	; 0x0c
    2342:	95 85       	ldd	r25, Z+13	; 0x0d
    2344:	99 23       	and	r25, r25
    2346:	64 f0       	brlt	.+24     	; 0x2360 <vTaskPriorityInherit+0x44>
    2348:	a0 91 b6 08 	lds	r26, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    234c:	b0 91 b7 08 	lds	r27, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    2350:	56 96       	adiw	r26, 0x16	; 22
    2352:	3c 91       	ld	r19, X
    2354:	88 e0       	ldi	r24, 0x08	; 8
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	83 1b       	sub	r24, r19
    235a:	91 09       	sbc	r25, r1
    235c:	95 87       	std	Z+13, r25	; 0x0d
    235e:	84 87       	std	Z+12, r24	; 0x0c
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	c9 01       	movw	r24, r18
    2364:	88 0f       	add	r24, r24
    2366:	99 1f       	adc	r25, r25
    2368:	88 0f       	add	r24, r24
    236a:	99 1f       	adc	r25, r25
    236c:	88 0f       	add	r24, r24
    236e:	99 1f       	adc	r25, r25
    2370:	28 0f       	add	r18, r24
    2372:	39 1f       	adc	r19, r25
    2374:	22 59       	subi	r18, 0x92	; 146
    2376:	37 4f       	sbci	r19, 0xF7	; 247
    2378:	82 85       	ldd	r24, Z+10	; 0x0a
    237a:	93 85       	ldd	r25, Z+11	; 0x0b
    237c:	82 17       	cp	r24, r18
    237e:	93 07       	cpc	r25, r19
    2380:	19 f5       	brne	.+70     	; 0x23c8 <vTaskPriorityInherit+0xac>
    2382:	8f 01       	movw	r16, r30
    2384:	ef 01       	movw	r28, r30
    2386:	22 96       	adiw	r28, 0x02	; 2
    2388:	ce 01       	movw	r24, r28
    238a:	0e 94 b2 06 	call	0xd64	; 0xd64 <uxListRemove>
    238e:	e0 91 b6 08 	lds	r30, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    2392:	f0 91 b7 08 	lds	r31, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    2396:	86 89       	ldd	r24, Z+22	; 0x16
    2398:	f8 01       	movw	r30, r16
    239a:	86 8b       	std	Z+22, r24	; 0x16
    239c:	90 91 41 08 	lds	r25, 0x0841	; 0x800841 <uxTopReadyPriority>
    23a0:	98 17       	cp	r25, r24
    23a2:	10 f4       	brcc	.+4      	; 0x23a8 <vTaskPriorityInherit+0x8c>
    23a4:	80 93 41 08 	sts	0x0841, r24	; 0x800841 <uxTopReadyPriority>
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	9c 01       	movw	r18, r24
    23ac:	22 0f       	add	r18, r18
    23ae:	33 1f       	adc	r19, r19
    23b0:	22 0f       	add	r18, r18
    23b2:	33 1f       	adc	r19, r19
    23b4:	22 0f       	add	r18, r18
    23b6:	33 1f       	adc	r19, r19
    23b8:	82 0f       	add	r24, r18
    23ba:	93 1f       	adc	r25, r19
    23bc:	be 01       	movw	r22, r28
    23be:	82 59       	subi	r24, 0x92	; 146
    23c0:	97 4f       	sbci	r25, 0xF7	; 247
    23c2:	0e 94 60 06 	call	0xcc0	; 0xcc0 <vListInsertEnd>
    23c6:	07 c0       	rjmp	.+14     	; 0x23d6 <vTaskPriorityInherit+0xba>
    23c8:	a0 91 b6 08 	lds	r26, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    23cc:	b0 91 b7 08 	lds	r27, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    23d0:	56 96       	adiw	r26, 0x16	; 22
    23d2:	8c 91       	ld	r24, X
    23d4:	86 8b       	std	Z+22, r24	; 0x16
    23d6:	df 91       	pop	r29
    23d8:	cf 91       	pop	r28
    23da:	1f 91       	pop	r17
    23dc:	0f 91       	pop	r16
    23de:	08 95       	ret

000023e0 <xTaskPriorityDisinherit>:
    23e0:	0f 93       	push	r16
    23e2:	1f 93       	push	r17
    23e4:	cf 93       	push	r28
    23e6:	df 93       	push	r29
    23e8:	fc 01       	movw	r30, r24
    23ea:	89 2b       	or	r24, r25
    23ec:	79 f1       	breq	.+94     	; 0x244c <xTaskPriorityDisinherit+0x6c>
    23ee:	84 a1       	ldd	r24, Z+36	; 0x24
    23f0:	81 50       	subi	r24, 0x01	; 1
    23f2:	84 a3       	std	Z+36, r24	; 0x24
    23f4:	26 89       	ldd	r18, Z+22	; 0x16
    23f6:	93 a1       	ldd	r25, Z+35	; 0x23
    23f8:	29 17       	cp	r18, r25
    23fa:	51 f1       	breq	.+84     	; 0x2450 <xTaskPriorityDisinherit+0x70>
    23fc:	81 11       	cpse	r24, r1
    23fe:	2a c0       	rjmp	.+84     	; 0x2454 <xTaskPriorityDisinherit+0x74>
    2400:	ef 01       	movw	r28, r30
    2402:	8f 01       	movw	r16, r30
    2404:	0e 5f       	subi	r16, 0xFE	; 254
    2406:	1f 4f       	sbci	r17, 0xFF	; 255
    2408:	c8 01       	movw	r24, r16
    240a:	0e 94 b2 06 	call	0xd64	; 0xd64 <uxListRemove>
    240e:	8b a1       	ldd	r24, Y+35	; 0x23
    2410:	8e 8b       	std	Y+22, r24	; 0x16
    2412:	28 e0       	ldi	r18, 0x08	; 8
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	28 1b       	sub	r18, r24
    2418:	31 09       	sbc	r19, r1
    241a:	3d 87       	std	Y+13, r19	; 0x0d
    241c:	2c 87       	std	Y+12, r18	; 0x0c
    241e:	90 91 41 08 	lds	r25, 0x0841	; 0x800841 <uxTopReadyPriority>
    2422:	98 17       	cp	r25, r24
    2424:	10 f4       	brcc	.+4      	; 0x242a <xTaskPriorityDisinherit+0x4a>
    2426:	80 93 41 08 	sts	0x0841, r24	; 0x800841 <uxTopReadyPriority>
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	9c 01       	movw	r18, r24
    242e:	22 0f       	add	r18, r18
    2430:	33 1f       	adc	r19, r19
    2432:	22 0f       	add	r18, r18
    2434:	33 1f       	adc	r19, r19
    2436:	22 0f       	add	r18, r18
    2438:	33 1f       	adc	r19, r19
    243a:	82 0f       	add	r24, r18
    243c:	93 1f       	adc	r25, r19
    243e:	b8 01       	movw	r22, r16
    2440:	82 59       	subi	r24, 0x92	; 146
    2442:	97 4f       	sbci	r25, 0xF7	; 247
    2444:	0e 94 60 06 	call	0xcc0	; 0xcc0 <vListInsertEnd>
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	05 c0       	rjmp	.+10     	; 0x2456 <xTaskPriorityDisinherit+0x76>
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	03 c0       	rjmp	.+6      	; 0x2456 <xTaskPriorityDisinherit+0x76>
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	01 c0       	rjmp	.+2      	; 0x2456 <xTaskPriorityDisinherit+0x76>
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	df 91       	pop	r29
    2458:	cf 91       	pop	r28
    245a:	1f 91       	pop	r17
    245c:	0f 91       	pop	r16
    245e:	08 95       	ret

00002460 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    2460:	80 91 b6 08 	lds	r24, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    2464:	90 91 b7 08 	lds	r25, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    2468:	89 2b       	or	r24, r25
    246a:	39 f0       	breq	.+14     	; 0x247a <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    246c:	e0 91 b6 08 	lds	r30, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    2470:	f0 91 b7 08 	lds	r31, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
    2474:	84 a1       	ldd	r24, Z+36	; 0x24
    2476:	8f 5f       	subi	r24, 0xFF	; 255
    2478:	84 a3       	std	Z+36, r24	; 0x24
		}

		return pxCurrentTCB;
    247a:	80 91 b6 08 	lds	r24, 0x08B6	; 0x8008b6 <pxCurrentTCB>
    247e:	90 91 b7 08 	lds	r25, 0x08B7	; 0x8008b7 <pxCurrentTCB+0x1>
	}
    2482:	08 95       	ret

00002484 <prvInsertTimerInActiveList>:
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
	}
    2484:	fc 01       	movw	r30, r24
    2486:	73 83       	std	Z+3, r23	; 0x03
    2488:	62 83       	std	Z+2, r22	; 0x02
    248a:	91 87       	std	Z+9, r25	; 0x09
    248c:	80 87       	std	Z+8, r24	; 0x08
    248e:	46 17       	cp	r20, r22
    2490:	57 07       	cpc	r21, r23
    2492:	90 f0       	brcs	.+36     	; 0x24b8 <prvInsertTimerInActiveList+0x34>
    2494:	42 1b       	sub	r20, r18
    2496:	53 0b       	sbc	r21, r19
    2498:	84 85       	ldd	r24, Z+12	; 0x0c
    249a:	95 85       	ldd	r25, Z+13	; 0x0d
    249c:	48 17       	cp	r20, r24
    249e:	59 07       	cpc	r21, r25
    24a0:	e0 f4       	brcc	.+56     	; 0x24da <prvInsertTimerInActiveList+0x56>
    24a2:	bf 01       	movw	r22, r30
    24a4:	6e 5f       	subi	r22, 0xFE	; 254
    24a6:	7f 4f       	sbci	r23, 0xFF	; 255
    24a8:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <pxOverflowTimerList>
    24ac:	90 91 bf 08 	lds	r25, 0x08BF	; 0x8008bf <pxOverflowTimerList+0x1>
    24b0:	0e 94 81 06 	call	0xd02	; 0xd02 <vListInsert>
    24b4:	80 e0       	ldi	r24, 0x00	; 0
    24b6:	08 95       	ret
    24b8:	42 17       	cp	r20, r18
    24ba:	53 07       	cpc	r21, r19
    24bc:	18 f4       	brcc	.+6      	; 0x24c4 <prvInsertTimerInActiveList+0x40>
    24be:	62 17       	cp	r22, r18
    24c0:	73 07       	cpc	r23, r19
    24c2:	68 f4       	brcc	.+26     	; 0x24de <prvInsertTimerInActiveList+0x5a>
    24c4:	bf 01       	movw	r22, r30
    24c6:	6e 5f       	subi	r22, 0xFE	; 254
    24c8:	7f 4f       	sbci	r23, 0xFF	; 255
    24ca:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <pxCurrentTimerList>
    24ce:	90 91 c1 08 	lds	r25, 0x08C1	; 0x8008c1 <pxCurrentTimerList+0x1>
    24d2:	0e 94 81 06 	call	0xd02	; 0xd02 <vListInsert>
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	08 95       	ret
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	08 95       	ret
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	08 95       	ret

000024e2 <prvCheckForValidListAndQueue>:
    24e2:	0f b6       	in	r0, 0x3f	; 63
    24e4:	f8 94       	cli
    24e6:	0f 92       	push	r0
    24e8:	80 91 bc 08 	lds	r24, 0x08BC	; 0x8008bc <xTimerQueue>
    24ec:	90 91 bd 08 	lds	r25, 0x08BD	; 0x8008bd <xTimerQueue+0x1>
    24f0:	89 2b       	or	r24, r25
    24f2:	e9 f4       	brne	.+58     	; 0x252e <prvCheckForValidListAndQueue+0x4c>
    24f4:	8b ec       	ldi	r24, 0xCB	; 203
    24f6:	98 e0       	ldi	r25, 0x08	; 8
    24f8:	0e 94 4e 06 	call	0xc9c	; 0xc9c <vListInitialise>
    24fc:	82 ec       	ldi	r24, 0xC2	; 194
    24fe:	98 e0       	ldi	r25, 0x08	; 8
    2500:	0e 94 4e 06 	call	0xc9c	; 0xc9c <vListInitialise>
    2504:	8b ec       	ldi	r24, 0xCB	; 203
    2506:	98 e0       	ldi	r25, 0x08	; 8
    2508:	90 93 c1 08 	sts	0x08C1, r25	; 0x8008c1 <pxCurrentTimerList+0x1>
    250c:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <pxCurrentTimerList>
    2510:	82 ec       	ldi	r24, 0xC2	; 194
    2512:	98 e0       	ldi	r25, 0x08	; 8
    2514:	90 93 bf 08 	sts	0x08BF, r25	; 0x8008bf <pxOverflowTimerList+0x1>
    2518:	80 93 be 08 	sts	0x08BE, r24	; 0x8008be <pxOverflowTimerList>
    251c:	40 e0       	ldi	r20, 0x00	; 0
    251e:	65 e0       	ldi	r22, 0x05	; 5
    2520:	82 e0       	ldi	r24, 0x02	; 2
    2522:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <xQueueGenericCreate>
    2526:	90 93 bd 08 	sts	0x08BD, r25	; 0x8008bd <xTimerQueue+0x1>
    252a:	80 93 bc 08 	sts	0x08BC, r24	; 0x8008bc <xTimerQueue>
    252e:	0f 90       	pop	r0
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	08 95       	ret

00002534 <xTimerCreateTimerTask>:
    2534:	ef 92       	push	r14
    2536:	ff 92       	push	r15
    2538:	0f 93       	push	r16
    253a:	0e 94 71 12 	call	0x24e2	; 0x24e2 <prvCheckForValidListAndQueue>
    253e:	80 91 bc 08 	lds	r24, 0x08BC	; 0x8008bc <xTimerQueue>
    2542:	90 91 bd 08 	lds	r25, 0x08BD	; 0x8008bd <xTimerQueue+0x1>
    2546:	89 2b       	or	r24, r25
    2548:	91 f0       	breq	.+36     	; 0x256e <xTimerCreateTimerTask+0x3a>
    254a:	0f 2e       	mov	r0, r31
    254c:	fa eb       	ldi	r31, 0xBA	; 186
    254e:	ef 2e       	mov	r14, r31
    2550:	f8 e0       	ldi	r31, 0x08	; 8
    2552:	ff 2e       	mov	r15, r31
    2554:	f0 2d       	mov	r31, r0
    2556:	07 e0       	ldi	r16, 0x07	; 7
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	42 e3       	ldi	r20, 0x32	; 50
    255e:	50 e0       	ldi	r21, 0x00	; 0
    2560:	63 e5       	ldi	r22, 0x53	; 83
    2562:	71 e0       	ldi	r23, 0x01	; 1
    2564:	84 e7       	ldi	r24, 0x74	; 116
    2566:	93 e1       	ldi	r25, 0x13	; 19
    2568:	0e 94 67 0d 	call	0x1ace	; 0x1ace <xTaskCreate>
    256c:	01 c0       	rjmp	.+2      	; 0x2570 <xTimerCreateTimerTask+0x3c>
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	0f 91       	pop	r16
    2572:	ff 90       	pop	r15
    2574:	ef 90       	pop	r14
    2576:	08 95       	ret

00002578 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2578:	0f 93       	push	r16
    257a:	1f 93       	push	r17
    257c:	cf 93       	push	r28
    257e:	df 93       	push	r29
    2580:	00 d0       	rcall	.+0      	; 0x2582 <xTimerGenericCommand+0xa>
    2582:	00 d0       	rcall	.+0      	; 0x2584 <xTimerGenericCommand+0xc>
    2584:	1f 92       	push	r1
    2586:	cd b7       	in	r28, 0x3d	; 61
    2588:	de b7       	in	r29, 0x3e	; 62

	configASSERT( xTimer );

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    258a:	e0 91 bc 08 	lds	r30, 0x08BC	; 0x8008bc <xTimerQueue>
    258e:	f0 91 bd 08 	lds	r31, 0x08BD	; 0x8008bd <xTimerQueue+0x1>
    2592:	30 97       	sbiw	r30, 0x00	; 0
    2594:	71 f1       	breq	.+92     	; 0x25f2 <xTimerGenericCommand+0x7a>
    2596:	d9 01       	movw	r26, r18
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    2598:	69 83       	std	Y+1, r22	; 0x01
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    259a:	5b 83       	std	Y+3, r21	; 0x03
    259c:	4a 83       	std	Y+2, r20	; 0x02
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    259e:	9d 83       	std	Y+5, r25	; 0x05
    25a0:	8c 83       	std	Y+4, r24	; 0x04

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    25a2:	66 30       	cpi	r22, 0x06	; 6
    25a4:	ec f4       	brge	.+58     	; 0x25e0 <xTimerGenericCommand+0x68>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    25a6:	0e 94 80 11 	call	0x2300	; 0x2300 <xTaskGetSchedulerState>
    25aa:	82 30       	cpi	r24, 0x02	; 2
    25ac:	61 f4       	brne	.+24     	; 0x25c6 <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	a8 01       	movw	r20, r16
    25b2:	be 01       	movw	r22, r28
    25b4:	6f 5f       	subi	r22, 0xFF	; 255
    25b6:	7f 4f       	sbci	r23, 0xFF	; 255
    25b8:	80 91 bc 08 	lds	r24, 0x08BC	; 0x8008bc <xTimerQueue>
    25bc:	90 91 bd 08 	lds	r25, 0x08BD	; 0x8008bd <xTimerQueue+0x1>
    25c0:	0e 94 26 0b 	call	0x164c	; 0x164c <xQueueGenericSend>
    25c4:	17 c0       	rjmp	.+46     	; 0x25f4 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	40 e0       	ldi	r20, 0x00	; 0
    25ca:	50 e0       	ldi	r21, 0x00	; 0
    25cc:	be 01       	movw	r22, r28
    25ce:	6f 5f       	subi	r22, 0xFF	; 255
    25d0:	7f 4f       	sbci	r23, 0xFF	; 255
    25d2:	80 91 bc 08 	lds	r24, 0x08BC	; 0x8008bc <xTimerQueue>
    25d6:	90 91 bd 08 	lds	r25, 0x08BD	; 0x8008bd <xTimerQueue+0x1>
    25da:	0e 94 26 0b 	call	0x164c	; 0x164c <xQueueGenericSend>
    25de:	0a c0       	rjmp	.+20     	; 0x25f4 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	ad 01       	movw	r20, r26
    25e4:	be 01       	movw	r22, r28
    25e6:	6f 5f       	subi	r22, 0xFF	; 255
    25e8:	7f 4f       	sbci	r23, 0xFF	; 255
    25ea:	cf 01       	movw	r24, r30
    25ec:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <xQueueGenericSendFromISR>
    25f0:	01 c0       	rjmp	.+2      	; 0x25f4 <xTimerGenericCommand+0x7c>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    25f2:	80 e0       	ldi	r24, 0x00	; 0
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    25f4:	0f 90       	pop	r0
    25f6:	0f 90       	pop	r0
    25f8:	0f 90       	pop	r0
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	df 91       	pop	r29
    2600:	cf 91       	pop	r28
    2602:	1f 91       	pop	r17
    2604:	0f 91       	pop	r16
    2606:	08 95       	ret

00002608 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2608:	af 92       	push	r10
    260a:	bf 92       	push	r11
    260c:	cf 92       	push	r12
    260e:	df 92       	push	r13
    2610:	ef 92       	push	r14
    2612:	ff 92       	push	r15
    2614:	0f 93       	push	r16
    2616:	1f 93       	push	r17
    2618:	cf 93       	push	r28
    261a:	df 93       	push	r29
    261c:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    261e:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <xTaskGetTickCount>
    2622:	7c 01       	movw	r14, r24

	if( xTimeNow < xLastTime )
    2624:	80 91 b8 08 	lds	r24, 0x08B8	; 0x8008b8 <xLastTime.2361>
    2628:	90 91 b9 08 	lds	r25, 0x08B9	; 0x8008b9 <xLastTime.2361+0x1>
    262c:	e8 16       	cp	r14, r24
    262e:	f9 06       	cpc	r15, r25
    2630:	08 f0       	brcs	.+2      	; 0x2634 <prvSampleTimeNow+0x2c>
    2632:	48 c0       	rjmp	.+144    	; 0x26c4 <prvSampleTimeNow+0xbc>
    2634:	30 c0       	rjmp	.+96     	; 0x2696 <prvSampleTimeNow+0x8e>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2636:	05 80       	ldd	r0, Z+5	; 0x05
    2638:	f6 81       	ldd	r31, Z+6	; 0x06
    263a:	e0 2d       	mov	r30, r0
    263c:	a0 80       	ld	r10, Z
    263e:	b1 80       	ldd	r11, Z+1	; 0x01

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    2640:	c6 81       	ldd	r28, Z+6	; 0x06
    2642:	d7 81       	ldd	r29, Z+7	; 0x07
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2644:	8e 01       	movw	r16, r28
    2646:	0e 5f       	subi	r16, 0xFE	; 254
    2648:	1f 4f       	sbci	r17, 0xFF	; 255
    264a:	c8 01       	movw	r24, r16
    264c:	0e 94 b2 06 	call	0xd64	; 0xd64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2650:	e9 89       	ldd	r30, Y+17	; 0x11
    2652:	fa 89       	ldd	r31, Y+18	; 0x12
    2654:	ce 01       	movw	r24, r28
    2656:	09 95       	icall

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    2658:	8e 85       	ldd	r24, Y+14	; 0x0e
    265a:	81 30       	cpi	r24, 0x01	; 1
    265c:	e1 f4       	brne	.+56     	; 0x2696 <prvSampleTimeNow+0x8e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    265e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2660:	9d 85       	ldd	r25, Y+13	; 0x0d
    2662:	8a 0d       	add	r24, r10
    2664:	9b 1d       	adc	r25, r11
			if( xReloadTime > xNextExpireTime )
    2666:	a8 16       	cp	r10, r24
    2668:	b9 06       	cpc	r11, r25
    266a:	60 f4       	brcc	.+24     	; 0x2684 <prvSampleTimeNow+0x7c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    266c:	9b 83       	std	Y+3, r25	; 0x03
    266e:	8a 83       	std	Y+2, r24	; 0x02
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2670:	d9 87       	std	Y+9, r29	; 0x09
    2672:	c8 87       	std	Y+8, r28	; 0x08
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2674:	b8 01       	movw	r22, r16
    2676:	80 91 c0 08 	lds	r24, 0x08C0	; 0x8008c0 <pxCurrentTimerList>
    267a:	90 91 c1 08 	lds	r25, 0x08C1	; 0x8008c1 <pxCurrentTimerList+0x1>
    267e:	0e 94 81 06 	call	0xd02	; 0xd02 <vListInsert>
    2682:	09 c0       	rjmp	.+18     	; 0x2696 <prvSampleTimeNow+0x8e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2684:	00 e0       	ldi	r16, 0x00	; 0
    2686:	10 e0       	ldi	r17, 0x00	; 0
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	a5 01       	movw	r20, r10
    268e:	60 e0       	ldi	r22, 0x00	; 0
    2690:	ce 01       	movw	r24, r28
    2692:	0e 94 bc 12 	call	0x2578	; 0x2578 <xTimerGenericCommand>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2696:	e0 91 c0 08 	lds	r30, 0x08C0	; 0x8008c0 <pxCurrentTimerList>
    269a:	f0 91 c1 08 	lds	r31, 0x08C1	; 0x8008c1 <pxCurrentTimerList+0x1>
    269e:	80 81       	ld	r24, Z
    26a0:	81 11       	cpse	r24, r1
    26a2:	c9 cf       	rjmp	.-110    	; 0x2636 <prvSampleTimeNow+0x2e>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
    26a4:	80 91 be 08 	lds	r24, 0x08BE	; 0x8008be <pxOverflowTimerList>
    26a8:	90 91 bf 08 	lds	r25, 0x08BF	; 0x8008bf <pxOverflowTimerList+0x1>
    26ac:	90 93 c1 08 	sts	0x08C1, r25	; 0x8008c1 <pxCurrentTimerList+0x1>
    26b0:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <pxCurrentTimerList>
	pxOverflowTimerList = pxTemp;
    26b4:	f0 93 bf 08 	sts	0x08BF, r31	; 0x8008bf <pxOverflowTimerList+0x1>
    26b8:	e0 93 be 08 	sts	0x08BE, r30	; 0x8008be <pxOverflowTimerList>
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists();
		*pxTimerListsWereSwitched = pdTRUE;
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	f6 01       	movw	r30, r12
    26c0:	80 83       	st	Z, r24
    26c2:	02 c0       	rjmp	.+4      	; 0x26c8 <prvSampleTimeNow+0xc0>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    26c4:	f6 01       	movw	r30, r12
    26c6:	10 82       	st	Z, r1
	}

	xLastTime = xTimeNow;
    26c8:	f0 92 b9 08 	sts	0x08B9, r15	; 0x8008b9 <xLastTime.2361+0x1>
    26cc:	e0 92 b8 08 	sts	0x08B8, r14	; 0x8008b8 <xLastTime.2361>

	return xTimeNow;
}
    26d0:	c7 01       	movw	r24, r14
    26d2:	df 91       	pop	r29
    26d4:	cf 91       	pop	r28
    26d6:	1f 91       	pop	r17
    26d8:	0f 91       	pop	r16
    26da:	ff 90       	pop	r15
    26dc:	ef 90       	pop	r14
    26de:	df 90       	pop	r13
    26e0:	cf 90       	pop	r12
    26e2:	bf 90       	pop	r11
    26e4:	af 90       	pop	r10
    26e6:	08 95       	ret

000026e8 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    26e8:	cf 93       	push	r28
    26ea:	df 93       	push	r29
    26ec:	00 d0       	rcall	.+0      	; 0x26ee <prvTimerTask+0x6>
    26ee:	00 d0       	rcall	.+0      	; 0x26f0 <prvTimerTask+0x8>
    26f0:	00 d0       	rcall	.+0      	; 0x26f2 <prvTimerTask+0xa>
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    26f6:	ce 01       	movw	r24, r28
    26f8:	01 96       	adiw	r24, 0x01	; 1
    26fa:	4c 01       	movw	r8, r24
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    26fc:	44 24       	eor	r4, r4
    26fe:	43 94       	inc	r4
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    2700:	d1 2c       	mov	r13, r1
    2702:	e1 2c       	mov	r14, r1
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2704:	f1 2c       	mov	r15, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2706:	58 2e       	mov	r5, r24
    2708:	c9 2c       	mov	r12, r9
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    270a:	e0 91 c0 08 	lds	r30, 0x08C0	; 0x8008c0 <pxCurrentTimerList>
    270e:	f0 91 c1 08 	lds	r31, 0x08C1	; 0x8008c1 <pxCurrentTimerList+0x1>
	if( *pxListWasEmpty == pdFALSE )
    2712:	80 81       	ld	r24, Z
    2714:	88 23       	and	r24, r24
    2716:	09 f4       	brne	.+2      	; 0x271a <prvTimerTask+0x32>
    2718:	c3 c0       	rjmp	.+390    	; 0x28a0 <prvTimerTask+0x1b8>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    271a:	05 80       	ldd	r0, Z+5	; 0x05
    271c:	f6 81       	ldd	r31, Z+6	; 0x06
    271e:	e0 2d       	mov	r30, r0
    2720:	a0 80       	ld	r10, Z
    2722:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    2724:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2728:	c4 01       	movw	r24, r8
    272a:	0e 94 04 13 	call	0x2608	; 0x2608 <prvSampleTimeNow>
    272e:	8c 01       	movw	r16, r24
		if( xTimerListsWereSwitched == pdFALSE )
    2730:	89 81       	ldd	r24, Y+1	; 0x01
    2732:	81 11       	cpse	r24, r1
    2734:	47 c0       	rjmp	.+142    	; 0x27c4 <prvTimerTask+0xdc>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2736:	0a 15       	cp	r16, r10
    2738:	1b 05       	cpc	r17, r11
    273a:	98 f1       	brcs	.+102    	; 0x27a2 <prvTimerTask+0xba>
			{
				( void ) xTaskResumeAll();
    273c:	0e 94 77 0f 	call	0x1eee	; 0x1eee <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    2740:	e0 91 c0 08 	lds	r30, 0x08C0	; 0x8008c0 <pxCurrentTimerList>
    2744:	f0 91 c1 08 	lds	r31, 0x08C1	; 0x8008c1 <pxCurrentTimerList+0x1>
    2748:	05 80       	ldd	r0, Z+5	; 0x05
    274a:	f6 81       	ldd	r31, Z+6	; 0x06
    274c:	e0 2d       	mov	r30, r0
    274e:	66 80       	ldd	r6, Z+6	; 0x06
    2750:	77 80       	ldd	r7, Z+7	; 0x07

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2752:	c3 01       	movw	r24, r6
    2754:	02 96       	adiw	r24, 0x02	; 2
    2756:	0e 94 b2 06 	call	0xd64	; 0xd64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    275a:	d3 01       	movw	r26, r6
    275c:	1e 96       	adiw	r26, 0x0e	; 14
    275e:	8c 91       	ld	r24, X
    2760:	1e 97       	sbiw	r26, 0x0e	; 14
    2762:	81 30       	cpi	r24, 0x01	; 1
    2764:	b1 f4       	brne	.+44     	; 0x2792 <prvTimerTask+0xaa>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2766:	1c 96       	adiw	r26, 0x0c	; 12
    2768:	6d 91       	ld	r22, X+
    276a:	7c 91       	ld	r23, X
    276c:	1d 97       	sbiw	r26, 0x0d	; 13
    276e:	6a 0d       	add	r22, r10
    2770:	7b 1d       	adc	r23, r11
    2772:	95 01       	movw	r18, r10
    2774:	a8 01       	movw	r20, r16
    2776:	c3 01       	movw	r24, r6
    2778:	0e 94 42 12 	call	0x2484	; 0x2484 <prvInsertTimerInActiveList>
    277c:	88 23       	and	r24, r24
    277e:	49 f0       	breq	.+18     	; 0x2792 <prvTimerTask+0xaa>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2780:	0d 2d       	mov	r16, r13
    2782:	1e 2d       	mov	r17, r14
    2784:	2d 2d       	mov	r18, r13
    2786:	3e 2d       	mov	r19, r14
    2788:	a5 01       	movw	r20, r10
    278a:	6f 2d       	mov	r22, r15
    278c:	c3 01       	movw	r24, r6
    278e:	0e 94 bc 12 	call	0x2578	; 0x2578 <xTimerGenericCommand>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2792:	d3 01       	movw	r26, r6
    2794:	51 96       	adiw	r26, 0x11	; 17
    2796:	ed 91       	ld	r30, X+
    2798:	fc 91       	ld	r31, X
    279a:	52 97       	sbiw	r26, 0x12	; 18
    279c:	c3 01       	movw	r24, r6
    279e:	09 95       	icall
    27a0:	71 c0       	rjmp	.+226    	; 0x2884 <prvTimerTask+0x19c>
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
		if( xTimerListsWereSwitched == pdFALSE )
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    27a2:	4f 2d       	mov	r20, r15
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    27a4:	b5 01       	movw	r22, r10
    27a6:	60 1b       	sub	r22, r16
    27a8:	71 0b       	sbc	r23, r17
    27aa:	80 91 bc 08 	lds	r24, 0x08BC	; 0x8008bc <xTimerQueue>
    27ae:	90 91 bd 08 	lds	r25, 0x08BD	; 0x8008bd <xTimerQueue+0x1>
    27b2:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <vQueueWaitForMessageRestricted>

				if( xTaskResumeAll() == pdFALSE )
    27b6:	0e 94 77 0f 	call	0x1eee	; 0x1eee <xTaskResumeAll>
    27ba:	81 11       	cpse	r24, r1
    27bc:	63 c0       	rjmp	.+198    	; 0x2884 <prvTimerTask+0x19c>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
    27be:	0e 94 7e 07 	call	0xefc	; 0xefc <vPortYield>
    27c2:	60 c0       	rjmp	.+192    	; 0x2884 <prvTimerTask+0x19c>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    27c4:	0e 94 77 0f 	call	0x1eee	; 0x1eee <xTaskResumeAll>
    27c8:	5d c0       	rjmp	.+186    	; 0x2884 <prvTimerTask+0x19c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	88 23       	and	r24, r24
    27ce:	0c f4       	brge	.+2      	; 0x27d2 <prvTimerTask+0xea>
    27d0:	59 c0       	rjmp	.+178    	; 0x2884 <prvTimerTask+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    27d2:	ac 80       	ldd	r10, Y+4	; 0x04
    27d4:	bd 80       	ldd	r11, Y+5	; 0x05

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    27d6:	f5 01       	movw	r30, r10
    27d8:	82 85       	ldd	r24, Z+10	; 0x0a
    27da:	93 85       	ldd	r25, Z+11	; 0x0b
    27dc:	89 2b       	or	r24, r25
    27de:	21 f0       	breq	.+8      	; 0x27e8 <prvTimerTask+0x100>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    27e0:	c5 01       	movw	r24, r10
    27e2:	02 96       	adiw	r24, 0x02	; 2
    27e4:	0e 94 b2 06 	call	0xd64	; 0xd64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    27e8:	ce 01       	movw	r24, r28
    27ea:	06 96       	adiw	r24, 0x06	; 6
    27ec:	0e 94 04 13 	call	0x2608	; 0x2608 <prvSampleTimeNow>

			switch( xMessage.xMessageID )
    27f0:	e9 81       	ldd	r30, Y+1	; 0x01
    27f2:	0e 2f       	mov	r16, r30
    27f4:	ee 0f       	add	r30, r30
    27f6:	11 0b       	sbc	r17, r17
    27f8:	22 0b       	sbc	r18, r18
    27fa:	33 0b       	sbc	r19, r19
    27fc:	0a 30       	cpi	r16, 0x0A	; 10
    27fe:	11 05       	cpc	r17, r1
    2800:	08 f0       	brcs	.+2      	; 0x2804 <prvTimerTask+0x11c>
    2802:	40 c0       	rjmp	.+128    	; 0x2884 <prvTimerTask+0x19c>
    2804:	f8 01       	movw	r30, r16
    2806:	e2 5c       	subi	r30, 0xC2	; 194
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	0c 94 86 14 	jmp	0x290c	; 0x290c <__tablejump2__>
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    280e:	2a 81       	ldd	r18, Y+2	; 0x02
    2810:	3b 81       	ldd	r19, Y+3	; 0x03
    2812:	d5 01       	movw	r26, r10
    2814:	1c 96       	adiw	r26, 0x0c	; 12
    2816:	6d 91       	ld	r22, X+
    2818:	7c 91       	ld	r23, X
    281a:	1d 97       	sbiw	r26, 0x0d	; 13
    281c:	62 0f       	add	r22, r18
    281e:	73 1f       	adc	r23, r19
    2820:	ac 01       	movw	r20, r24
    2822:	c5 01       	movw	r24, r10
    2824:	0e 94 42 12 	call	0x2484	; 0x2484 <prvInsertTimerInActiveList>
    2828:	88 23       	and	r24, r24
    282a:	61 f1       	breq	.+88     	; 0x2884 <prvTimerTask+0x19c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    282c:	d5 01       	movw	r26, r10
    282e:	51 96       	adiw	r26, 0x11	; 17
    2830:	ed 91       	ld	r30, X+
    2832:	fc 91       	ld	r31, X
    2834:	52 97       	sbiw	r26, 0x12	; 18
    2836:	c5 01       	movw	r24, r10
    2838:	09 95       	icall
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    283a:	f5 01       	movw	r30, r10
    283c:	86 85       	ldd	r24, Z+14	; 0x0e
    283e:	81 30       	cpi	r24, 0x01	; 1
    2840:	09 f5       	brne	.+66     	; 0x2884 <prvTimerTask+0x19c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2842:	4a 81       	ldd	r20, Y+2	; 0x02
    2844:	5b 81       	ldd	r21, Y+3	; 0x03
    2846:	84 85       	ldd	r24, Z+12	; 0x0c
    2848:	95 85       	ldd	r25, Z+13	; 0x0d
    284a:	48 0f       	add	r20, r24
    284c:	59 1f       	adc	r21, r25
    284e:	0d 2d       	mov	r16, r13
    2850:	1e 2d       	mov	r17, r14
    2852:	2d 2d       	mov	r18, r13
    2854:	3e 2d       	mov	r19, r14
    2856:	6f 2d       	mov	r22, r15
    2858:	c5 01       	movw	r24, r10
    285a:	0e 94 bc 12 	call	0x2578	; 0x2578 <xTimerGenericCommand>
    285e:	12 c0       	rjmp	.+36     	; 0x2884 <prvTimerTask+0x19c>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2860:	6a 81       	ldd	r22, Y+2	; 0x02
    2862:	7b 81       	ldd	r23, Y+3	; 0x03
    2864:	d5 01       	movw	r26, r10
    2866:	1d 96       	adiw	r26, 0x0d	; 13
    2868:	7c 93       	st	X, r23
    286a:	6e 93       	st	-X, r22
    286c:	1c 97       	sbiw	r26, 0x0c	; 12
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    286e:	68 0f       	add	r22, r24
    2870:	79 1f       	adc	r23, r25
    2872:	9c 01       	movw	r18, r24
    2874:	ac 01       	movw	r20, r24
    2876:	c5 01       	movw	r24, r10
    2878:	0e 94 42 12 	call	0x2484	; 0x2484 <prvInsertTimerInActiveList>
    287c:	03 c0       	rjmp	.+6      	; 0x2884 <prvTimerTask+0x19c>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
    287e:	c5 01       	movw	r24, r10
    2880:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <vPortFree>
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2884:	2f 2d       	mov	r18, r15
    2886:	4d 2d       	mov	r20, r13
    2888:	5e 2d       	mov	r21, r14
    288a:	65 2d       	mov	r22, r5
    288c:	7c 2d       	mov	r23, r12
    288e:	80 91 bc 08 	lds	r24, 0x08BC	; 0x8008bc <xTimerQueue>
    2892:	90 91 bd 08 	lds	r25, 0x08BD	; 0x8008bd <xTimerQueue+0x1>
    2896:	0e 94 1b 0c 	call	0x1836	; 0x1836 <xQueueGenericReceive>
    289a:	81 11       	cpse	r24, r1
    289c:	96 cf       	rjmp	.-212    	; 0x27ca <prvTimerTask+0xe2>
    289e:	35 cf       	rjmp	.-406    	; 0x270a <prvTimerTask+0x22>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    28a0:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    28a4:	c4 01       	movw	r24, r8
    28a6:	0e 94 04 13 	call	0x2608	; 0x2608 <prvSampleTimeNow>
    28aa:	8c 01       	movw	r16, r24
		if( xTimerListsWereSwitched == pdFALSE )
    28ac:	89 81       	ldd	r24, Y+1	; 0x01
    28ae:	81 11       	cpse	r24, r1
    28b0:	89 cf       	rjmp	.-238    	; 0x27c4 <prvTimerTask+0xdc>
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    28b2:	e0 91 be 08 	lds	r30, 0x08BE	; 0x8008be <pxOverflowTimerList>
    28b6:	f0 91 bf 08 	lds	r31, 0x08BF	; 0x8008bf <pxOverflowTimerList+0x1>
    28ba:	44 2d       	mov	r20, r4
    28bc:	80 81       	ld	r24, Z
    28be:	81 11       	cpse	r24, r1
    28c0:	4f 2d       	mov	r20, r15
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    28c2:	ad 2c       	mov	r10, r13
    28c4:	be 2c       	mov	r11, r14
    28c6:	6e cf       	rjmp	.-292    	; 0x27a4 <prvTimerTask+0xbc>

000028c8 <__udivmodsi4>:
    28c8:	a1 e2       	ldi	r26, 0x21	; 33
    28ca:	1a 2e       	mov	r1, r26
    28cc:	aa 1b       	sub	r26, r26
    28ce:	bb 1b       	sub	r27, r27
    28d0:	fd 01       	movw	r30, r26
    28d2:	0d c0       	rjmp	.+26     	; 0x28ee <__udivmodsi4_ep>

000028d4 <__udivmodsi4_loop>:
    28d4:	aa 1f       	adc	r26, r26
    28d6:	bb 1f       	adc	r27, r27
    28d8:	ee 1f       	adc	r30, r30
    28da:	ff 1f       	adc	r31, r31
    28dc:	a2 17       	cp	r26, r18
    28de:	b3 07       	cpc	r27, r19
    28e0:	e4 07       	cpc	r30, r20
    28e2:	f5 07       	cpc	r31, r21
    28e4:	20 f0       	brcs	.+8      	; 0x28ee <__udivmodsi4_ep>
    28e6:	a2 1b       	sub	r26, r18
    28e8:	b3 0b       	sbc	r27, r19
    28ea:	e4 0b       	sbc	r30, r20
    28ec:	f5 0b       	sbc	r31, r21

000028ee <__udivmodsi4_ep>:
    28ee:	66 1f       	adc	r22, r22
    28f0:	77 1f       	adc	r23, r23
    28f2:	88 1f       	adc	r24, r24
    28f4:	99 1f       	adc	r25, r25
    28f6:	1a 94       	dec	r1
    28f8:	69 f7       	brne	.-38     	; 0x28d4 <__udivmodsi4_loop>
    28fa:	60 95       	com	r22
    28fc:	70 95       	com	r23
    28fe:	80 95       	com	r24
    2900:	90 95       	com	r25
    2902:	9b 01       	movw	r18, r22
    2904:	ac 01       	movw	r20, r24
    2906:	bd 01       	movw	r22, r26
    2908:	cf 01       	movw	r24, r30
    290a:	08 95       	ret

0000290c <__tablejump2__>:
    290c:	ee 0f       	add	r30, r30
    290e:	ff 1f       	adc	r31, r31
    2910:	05 90       	lpm	r0, Z+
    2912:	f4 91       	lpm	r31, Z
    2914:	e0 2d       	mov	r30, r0
    2916:	09 94       	ijmp

00002918 <malloc>:
    2918:	0f 93       	push	r16
    291a:	1f 93       	push	r17
    291c:	cf 93       	push	r28
    291e:	df 93       	push	r29
    2920:	82 30       	cpi	r24, 0x02	; 2
    2922:	91 05       	cpc	r25, r1
    2924:	10 f4       	brcc	.+4      	; 0x292a <malloc+0x12>
    2926:	82 e0       	ldi	r24, 0x02	; 2
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	e0 91 d6 08 	lds	r30, 0x08D6	; 0x8008d6 <__flp>
    292e:	f0 91 d7 08 	lds	r31, 0x08D7	; 0x8008d7 <__flp+0x1>
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	a0 e0       	ldi	r26, 0x00	; 0
    2938:	b0 e0       	ldi	r27, 0x00	; 0
    293a:	30 97       	sbiw	r30, 0x00	; 0
    293c:	19 f1       	breq	.+70     	; 0x2984 <malloc+0x6c>
    293e:	40 81       	ld	r20, Z
    2940:	51 81       	ldd	r21, Z+1	; 0x01
    2942:	02 81       	ldd	r16, Z+2	; 0x02
    2944:	13 81       	ldd	r17, Z+3	; 0x03
    2946:	48 17       	cp	r20, r24
    2948:	59 07       	cpc	r21, r25
    294a:	c8 f0       	brcs	.+50     	; 0x297e <malloc+0x66>
    294c:	84 17       	cp	r24, r20
    294e:	95 07       	cpc	r25, r21
    2950:	69 f4       	brne	.+26     	; 0x296c <malloc+0x54>
    2952:	10 97       	sbiw	r26, 0x00	; 0
    2954:	31 f0       	breq	.+12     	; 0x2962 <malloc+0x4a>
    2956:	12 96       	adiw	r26, 0x02	; 2
    2958:	0c 93       	st	X, r16
    295a:	12 97       	sbiw	r26, 0x02	; 2
    295c:	13 96       	adiw	r26, 0x03	; 3
    295e:	1c 93       	st	X, r17
    2960:	27 c0       	rjmp	.+78     	; 0x29b0 <malloc+0x98>
    2962:	00 93 d6 08 	sts	0x08D6, r16	; 0x8008d6 <__flp>
    2966:	10 93 d7 08 	sts	0x08D7, r17	; 0x8008d7 <__flp+0x1>
    296a:	22 c0       	rjmp	.+68     	; 0x29b0 <malloc+0x98>
    296c:	21 15       	cp	r18, r1
    296e:	31 05       	cpc	r19, r1
    2970:	19 f0       	breq	.+6      	; 0x2978 <malloc+0x60>
    2972:	42 17       	cp	r20, r18
    2974:	53 07       	cpc	r21, r19
    2976:	18 f4       	brcc	.+6      	; 0x297e <malloc+0x66>
    2978:	9a 01       	movw	r18, r20
    297a:	bd 01       	movw	r22, r26
    297c:	ef 01       	movw	r28, r30
    297e:	df 01       	movw	r26, r30
    2980:	f8 01       	movw	r30, r16
    2982:	db cf       	rjmp	.-74     	; 0x293a <malloc+0x22>
    2984:	21 15       	cp	r18, r1
    2986:	31 05       	cpc	r19, r1
    2988:	f9 f0       	breq	.+62     	; 0x29c8 <malloc+0xb0>
    298a:	28 1b       	sub	r18, r24
    298c:	39 0b       	sbc	r19, r25
    298e:	24 30       	cpi	r18, 0x04	; 4
    2990:	31 05       	cpc	r19, r1
    2992:	80 f4       	brcc	.+32     	; 0x29b4 <malloc+0x9c>
    2994:	8a 81       	ldd	r24, Y+2	; 0x02
    2996:	9b 81       	ldd	r25, Y+3	; 0x03
    2998:	61 15       	cp	r22, r1
    299a:	71 05       	cpc	r23, r1
    299c:	21 f0       	breq	.+8      	; 0x29a6 <malloc+0x8e>
    299e:	fb 01       	movw	r30, r22
    29a0:	93 83       	std	Z+3, r25	; 0x03
    29a2:	82 83       	std	Z+2, r24	; 0x02
    29a4:	04 c0       	rjmp	.+8      	; 0x29ae <malloc+0x96>
    29a6:	90 93 d7 08 	sts	0x08D7, r25	; 0x8008d7 <__flp+0x1>
    29aa:	80 93 d6 08 	sts	0x08D6, r24	; 0x8008d6 <__flp>
    29ae:	fe 01       	movw	r30, r28
    29b0:	32 96       	adiw	r30, 0x02	; 2
    29b2:	44 c0       	rjmp	.+136    	; 0x2a3c <malloc+0x124>
    29b4:	fe 01       	movw	r30, r28
    29b6:	e2 0f       	add	r30, r18
    29b8:	f3 1f       	adc	r31, r19
    29ba:	81 93       	st	Z+, r24
    29bc:	91 93       	st	Z+, r25
    29be:	22 50       	subi	r18, 0x02	; 2
    29c0:	31 09       	sbc	r19, r1
    29c2:	39 83       	std	Y+1, r19	; 0x01
    29c4:	28 83       	st	Y, r18
    29c6:	3a c0       	rjmp	.+116    	; 0x2a3c <malloc+0x124>
    29c8:	20 91 d4 08 	lds	r18, 0x08D4	; 0x8008d4 <__brkval>
    29cc:	30 91 d5 08 	lds	r19, 0x08D5	; 0x8008d5 <__brkval+0x1>
    29d0:	23 2b       	or	r18, r19
    29d2:	41 f4       	brne	.+16     	; 0x29e4 <malloc+0xcc>
    29d4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    29d8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    29dc:	30 93 d5 08 	sts	0x08D5, r19	; 0x8008d5 <__brkval+0x1>
    29e0:	20 93 d4 08 	sts	0x08D4, r18	; 0x8008d4 <__brkval>
    29e4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    29e8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    29ec:	21 15       	cp	r18, r1
    29ee:	31 05       	cpc	r19, r1
    29f0:	41 f4       	brne	.+16     	; 0x2a02 <malloc+0xea>
    29f2:	2d b7       	in	r18, 0x3d	; 61
    29f4:	3e b7       	in	r19, 0x3e	; 62
    29f6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    29fa:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    29fe:	24 1b       	sub	r18, r20
    2a00:	35 0b       	sbc	r19, r21
    2a02:	e0 91 d4 08 	lds	r30, 0x08D4	; 0x8008d4 <__brkval>
    2a06:	f0 91 d5 08 	lds	r31, 0x08D5	; 0x8008d5 <__brkval+0x1>
    2a0a:	e2 17       	cp	r30, r18
    2a0c:	f3 07       	cpc	r31, r19
    2a0e:	a0 f4       	brcc	.+40     	; 0x2a38 <malloc+0x120>
    2a10:	2e 1b       	sub	r18, r30
    2a12:	3f 0b       	sbc	r19, r31
    2a14:	28 17       	cp	r18, r24
    2a16:	39 07       	cpc	r19, r25
    2a18:	78 f0       	brcs	.+30     	; 0x2a38 <malloc+0x120>
    2a1a:	ac 01       	movw	r20, r24
    2a1c:	4e 5f       	subi	r20, 0xFE	; 254
    2a1e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a20:	24 17       	cp	r18, r20
    2a22:	35 07       	cpc	r19, r21
    2a24:	48 f0       	brcs	.+18     	; 0x2a38 <malloc+0x120>
    2a26:	4e 0f       	add	r20, r30
    2a28:	5f 1f       	adc	r21, r31
    2a2a:	50 93 d5 08 	sts	0x08D5, r21	; 0x8008d5 <__brkval+0x1>
    2a2e:	40 93 d4 08 	sts	0x08D4, r20	; 0x8008d4 <__brkval>
    2a32:	81 93       	st	Z+, r24
    2a34:	91 93       	st	Z+, r25
    2a36:	02 c0       	rjmp	.+4      	; 0x2a3c <malloc+0x124>
    2a38:	e0 e0       	ldi	r30, 0x00	; 0
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	cf 01       	movw	r24, r30
    2a3e:	df 91       	pop	r29
    2a40:	cf 91       	pop	r28
    2a42:	1f 91       	pop	r17
    2a44:	0f 91       	pop	r16
    2a46:	08 95       	ret

00002a48 <free>:
    2a48:	cf 93       	push	r28
    2a4a:	df 93       	push	r29
    2a4c:	00 97       	sbiw	r24, 0x00	; 0
    2a4e:	09 f4       	brne	.+2      	; 0x2a52 <free+0xa>
    2a50:	81 c0       	rjmp	.+258    	; 0x2b54 <free+0x10c>
    2a52:	fc 01       	movw	r30, r24
    2a54:	32 97       	sbiw	r30, 0x02	; 2
    2a56:	13 82       	std	Z+3, r1	; 0x03
    2a58:	12 82       	std	Z+2, r1	; 0x02
    2a5a:	a0 91 d6 08 	lds	r26, 0x08D6	; 0x8008d6 <__flp>
    2a5e:	b0 91 d7 08 	lds	r27, 0x08D7	; 0x8008d7 <__flp+0x1>
    2a62:	10 97       	sbiw	r26, 0x00	; 0
    2a64:	81 f4       	brne	.+32     	; 0x2a86 <free+0x3e>
    2a66:	20 81       	ld	r18, Z
    2a68:	31 81       	ldd	r19, Z+1	; 0x01
    2a6a:	82 0f       	add	r24, r18
    2a6c:	93 1f       	adc	r25, r19
    2a6e:	20 91 d4 08 	lds	r18, 0x08D4	; 0x8008d4 <__brkval>
    2a72:	30 91 d5 08 	lds	r19, 0x08D5	; 0x8008d5 <__brkval+0x1>
    2a76:	28 17       	cp	r18, r24
    2a78:	39 07       	cpc	r19, r25
    2a7a:	51 f5       	brne	.+84     	; 0x2ad0 <free+0x88>
    2a7c:	f0 93 d5 08 	sts	0x08D5, r31	; 0x8008d5 <__brkval+0x1>
    2a80:	e0 93 d4 08 	sts	0x08D4, r30	; 0x8008d4 <__brkval>
    2a84:	67 c0       	rjmp	.+206    	; 0x2b54 <free+0x10c>
    2a86:	ed 01       	movw	r28, r26
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	ce 17       	cp	r28, r30
    2a8e:	df 07       	cpc	r29, r31
    2a90:	40 f4       	brcc	.+16     	; 0x2aa2 <free+0x5a>
    2a92:	4a 81       	ldd	r20, Y+2	; 0x02
    2a94:	5b 81       	ldd	r21, Y+3	; 0x03
    2a96:	9e 01       	movw	r18, r28
    2a98:	41 15       	cp	r20, r1
    2a9a:	51 05       	cpc	r21, r1
    2a9c:	f1 f0       	breq	.+60     	; 0x2ada <free+0x92>
    2a9e:	ea 01       	movw	r28, r20
    2aa0:	f5 cf       	rjmp	.-22     	; 0x2a8c <free+0x44>
    2aa2:	d3 83       	std	Z+3, r29	; 0x03
    2aa4:	c2 83       	std	Z+2, r28	; 0x02
    2aa6:	40 81       	ld	r20, Z
    2aa8:	51 81       	ldd	r21, Z+1	; 0x01
    2aaa:	84 0f       	add	r24, r20
    2aac:	95 1f       	adc	r25, r21
    2aae:	c8 17       	cp	r28, r24
    2ab0:	d9 07       	cpc	r29, r25
    2ab2:	59 f4       	brne	.+22     	; 0x2aca <free+0x82>
    2ab4:	88 81       	ld	r24, Y
    2ab6:	99 81       	ldd	r25, Y+1	; 0x01
    2ab8:	84 0f       	add	r24, r20
    2aba:	95 1f       	adc	r25, r21
    2abc:	02 96       	adiw	r24, 0x02	; 2
    2abe:	91 83       	std	Z+1, r25	; 0x01
    2ac0:	80 83       	st	Z, r24
    2ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ac6:	93 83       	std	Z+3, r25	; 0x03
    2ac8:	82 83       	std	Z+2, r24	; 0x02
    2aca:	21 15       	cp	r18, r1
    2acc:	31 05       	cpc	r19, r1
    2ace:	29 f4       	brne	.+10     	; 0x2ada <free+0x92>
    2ad0:	f0 93 d7 08 	sts	0x08D7, r31	; 0x8008d7 <__flp+0x1>
    2ad4:	e0 93 d6 08 	sts	0x08D6, r30	; 0x8008d6 <__flp>
    2ad8:	3d c0       	rjmp	.+122    	; 0x2b54 <free+0x10c>
    2ada:	e9 01       	movw	r28, r18
    2adc:	fb 83       	std	Y+3, r31	; 0x03
    2ade:	ea 83       	std	Y+2, r30	; 0x02
    2ae0:	49 91       	ld	r20, Y+
    2ae2:	59 91       	ld	r21, Y+
    2ae4:	c4 0f       	add	r28, r20
    2ae6:	d5 1f       	adc	r29, r21
    2ae8:	ec 17       	cp	r30, r28
    2aea:	fd 07       	cpc	r31, r29
    2aec:	61 f4       	brne	.+24     	; 0x2b06 <free+0xbe>
    2aee:	80 81       	ld	r24, Z
    2af0:	91 81       	ldd	r25, Z+1	; 0x01
    2af2:	84 0f       	add	r24, r20
    2af4:	95 1f       	adc	r25, r21
    2af6:	02 96       	adiw	r24, 0x02	; 2
    2af8:	e9 01       	movw	r28, r18
    2afa:	99 83       	std	Y+1, r25	; 0x01
    2afc:	88 83       	st	Y, r24
    2afe:	82 81       	ldd	r24, Z+2	; 0x02
    2b00:	93 81       	ldd	r25, Z+3	; 0x03
    2b02:	9b 83       	std	Y+3, r25	; 0x03
    2b04:	8a 83       	std	Y+2, r24	; 0x02
    2b06:	e0 e0       	ldi	r30, 0x00	; 0
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	12 96       	adiw	r26, 0x02	; 2
    2b0c:	8d 91       	ld	r24, X+
    2b0e:	9c 91       	ld	r25, X
    2b10:	13 97       	sbiw	r26, 0x03	; 3
    2b12:	00 97       	sbiw	r24, 0x00	; 0
    2b14:	19 f0       	breq	.+6      	; 0x2b1c <free+0xd4>
    2b16:	fd 01       	movw	r30, r26
    2b18:	dc 01       	movw	r26, r24
    2b1a:	f7 cf       	rjmp	.-18     	; 0x2b0a <free+0xc2>
    2b1c:	8d 91       	ld	r24, X+
    2b1e:	9c 91       	ld	r25, X
    2b20:	11 97       	sbiw	r26, 0x01	; 1
    2b22:	9d 01       	movw	r18, r26
    2b24:	2e 5f       	subi	r18, 0xFE	; 254
    2b26:	3f 4f       	sbci	r19, 0xFF	; 255
    2b28:	82 0f       	add	r24, r18
    2b2a:	93 1f       	adc	r25, r19
    2b2c:	20 91 d4 08 	lds	r18, 0x08D4	; 0x8008d4 <__brkval>
    2b30:	30 91 d5 08 	lds	r19, 0x08D5	; 0x8008d5 <__brkval+0x1>
    2b34:	28 17       	cp	r18, r24
    2b36:	39 07       	cpc	r19, r25
    2b38:	69 f4       	brne	.+26     	; 0x2b54 <free+0x10c>
    2b3a:	30 97       	sbiw	r30, 0x00	; 0
    2b3c:	29 f4       	brne	.+10     	; 0x2b48 <free+0x100>
    2b3e:	10 92 d7 08 	sts	0x08D7, r1	; 0x8008d7 <__flp+0x1>
    2b42:	10 92 d6 08 	sts	0x08D6, r1	; 0x8008d6 <__flp>
    2b46:	02 c0       	rjmp	.+4      	; 0x2b4c <free+0x104>
    2b48:	13 82       	std	Z+3, r1	; 0x03
    2b4a:	12 82       	std	Z+2, r1	; 0x02
    2b4c:	b0 93 d5 08 	sts	0x08D5, r27	; 0x8008d5 <__brkval+0x1>
    2b50:	a0 93 d4 08 	sts	0x08D4, r26	; 0x8008d4 <__brkval>
    2b54:	df 91       	pop	r29
    2b56:	cf 91       	pop	r28
    2b58:	08 95       	ret

00002b5a <do_rand>:
    2b5a:	8f 92       	push	r8
    2b5c:	9f 92       	push	r9
    2b5e:	af 92       	push	r10
    2b60:	bf 92       	push	r11
    2b62:	cf 92       	push	r12
    2b64:	df 92       	push	r13
    2b66:	ef 92       	push	r14
    2b68:	ff 92       	push	r15
    2b6a:	cf 93       	push	r28
    2b6c:	df 93       	push	r29
    2b6e:	ec 01       	movw	r28, r24
    2b70:	68 81       	ld	r22, Y
    2b72:	79 81       	ldd	r23, Y+1	; 0x01
    2b74:	8a 81       	ldd	r24, Y+2	; 0x02
    2b76:	9b 81       	ldd	r25, Y+3	; 0x03
    2b78:	61 15       	cp	r22, r1
    2b7a:	71 05       	cpc	r23, r1
    2b7c:	81 05       	cpc	r24, r1
    2b7e:	91 05       	cpc	r25, r1
    2b80:	21 f4       	brne	.+8      	; 0x2b8a <do_rand+0x30>
    2b82:	64 e2       	ldi	r22, 0x24	; 36
    2b84:	79 ed       	ldi	r23, 0xD9	; 217
    2b86:	8b e5       	ldi	r24, 0x5B	; 91
    2b88:	97 e0       	ldi	r25, 0x07	; 7
    2b8a:	2d e1       	ldi	r18, 0x1D	; 29
    2b8c:	33 ef       	ldi	r19, 0xF3	; 243
    2b8e:	41 e0       	ldi	r20, 0x01	; 1
    2b90:	50 e0       	ldi	r21, 0x00	; 0
    2b92:	0e 94 19 16 	call	0x2c32	; 0x2c32 <__divmodsi4>
    2b96:	49 01       	movw	r8, r18
    2b98:	5a 01       	movw	r10, r20
    2b9a:	9b 01       	movw	r18, r22
    2b9c:	ac 01       	movw	r20, r24
    2b9e:	a7 ea       	ldi	r26, 0xA7	; 167
    2ba0:	b1 e4       	ldi	r27, 0x41	; 65
    2ba2:	0e 94 38 16 	call	0x2c70	; 0x2c70 <__muluhisi3>
    2ba6:	6b 01       	movw	r12, r22
    2ba8:	7c 01       	movw	r14, r24
    2baa:	ac ee       	ldi	r26, 0xEC	; 236
    2bac:	b4 ef       	ldi	r27, 0xF4	; 244
    2bae:	a5 01       	movw	r20, r10
    2bb0:	94 01       	movw	r18, r8
    2bb2:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__mulohisi3>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	8c 0d       	add	r24, r12
    2bbc:	9d 1d       	adc	r25, r13
    2bbe:	ae 1d       	adc	r26, r14
    2bc0:	bf 1d       	adc	r27, r15
    2bc2:	b7 ff       	sbrs	r27, 7
    2bc4:	03 c0       	rjmp	.+6      	; 0x2bcc <do_rand+0x72>
    2bc6:	01 97       	sbiw	r24, 0x01	; 1
    2bc8:	a1 09       	sbc	r26, r1
    2bca:	b0 48       	sbci	r27, 0x80	; 128
    2bcc:	88 83       	st	Y, r24
    2bce:	99 83       	std	Y+1, r25	; 0x01
    2bd0:	aa 83       	std	Y+2, r26	; 0x02
    2bd2:	bb 83       	std	Y+3, r27	; 0x03
    2bd4:	9f 77       	andi	r25, 0x7F	; 127
    2bd6:	df 91       	pop	r29
    2bd8:	cf 91       	pop	r28
    2bda:	ff 90       	pop	r15
    2bdc:	ef 90       	pop	r14
    2bde:	df 90       	pop	r13
    2be0:	cf 90       	pop	r12
    2be2:	bf 90       	pop	r11
    2be4:	af 90       	pop	r10
    2be6:	9f 90       	pop	r9
    2be8:	8f 90       	pop	r8
    2bea:	08 95       	ret

00002bec <rand_r>:
    2bec:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <do_rand>
    2bf0:	08 95       	ret

00002bf2 <rand>:
    2bf2:	86 e0       	ldi	r24, 0x06	; 6
    2bf4:	91 e0       	ldi	r25, 0x01	; 1
    2bf6:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <do_rand>
    2bfa:	08 95       	ret

00002bfc <srand>:
    2bfc:	a0 e0       	ldi	r26, 0x00	; 0
    2bfe:	b0 e0       	ldi	r27, 0x00	; 0
    2c00:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    2c04:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    2c08:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    2c0c:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    2c10:	08 95       	ret

00002c12 <memcpy>:
    2c12:	fb 01       	movw	r30, r22
    2c14:	dc 01       	movw	r26, r24
    2c16:	02 c0       	rjmp	.+4      	; 0x2c1c <memcpy+0xa>
    2c18:	01 90       	ld	r0, Z+
    2c1a:	0d 92       	st	X+, r0
    2c1c:	41 50       	subi	r20, 0x01	; 1
    2c1e:	50 40       	sbci	r21, 0x00	; 0
    2c20:	d8 f7       	brcc	.-10     	; 0x2c18 <memcpy+0x6>
    2c22:	08 95       	ret

00002c24 <memset>:
    2c24:	dc 01       	movw	r26, r24
    2c26:	01 c0       	rjmp	.+2      	; 0x2c2a <memset+0x6>
    2c28:	6d 93       	st	X+, r22
    2c2a:	41 50       	subi	r20, 0x01	; 1
    2c2c:	50 40       	sbci	r21, 0x00	; 0
    2c2e:	e0 f7       	brcc	.-8      	; 0x2c28 <memset+0x4>
    2c30:	08 95       	ret

00002c32 <__divmodsi4>:
    2c32:	05 2e       	mov	r0, r21
    2c34:	97 fb       	bst	r25, 7
    2c36:	1e f4       	brtc	.+6      	; 0x2c3e <__divmodsi4+0xc>
    2c38:	00 94       	com	r0
    2c3a:	0e 94 30 16 	call	0x2c60	; 0x2c60 <__negsi2>
    2c3e:	57 fd       	sbrc	r21, 7
    2c40:	07 d0       	rcall	.+14     	; 0x2c50 <__divmodsi4_neg2>
    2c42:	0e 94 64 14 	call	0x28c8	; 0x28c8 <__udivmodsi4>
    2c46:	07 fc       	sbrc	r0, 7
    2c48:	03 d0       	rcall	.+6      	; 0x2c50 <__divmodsi4_neg2>
    2c4a:	4e f4       	brtc	.+18     	; 0x2c5e <__divmodsi4_exit>
    2c4c:	0c 94 30 16 	jmp	0x2c60	; 0x2c60 <__negsi2>

00002c50 <__divmodsi4_neg2>:
    2c50:	50 95       	com	r21
    2c52:	40 95       	com	r20
    2c54:	30 95       	com	r19
    2c56:	21 95       	neg	r18
    2c58:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5a:	4f 4f       	sbci	r20, 0xFF	; 255
    2c5c:	5f 4f       	sbci	r21, 0xFF	; 255

00002c5e <__divmodsi4_exit>:
    2c5e:	08 95       	ret

00002c60 <__negsi2>:
    2c60:	90 95       	com	r25
    2c62:	80 95       	com	r24
    2c64:	70 95       	com	r23
    2c66:	61 95       	neg	r22
    2c68:	7f 4f       	sbci	r23, 0xFF	; 255
    2c6a:	8f 4f       	sbci	r24, 0xFF	; 255
    2c6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c6e:	08 95       	ret

00002c70 <__muluhisi3>:
    2c70:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__umulhisi3>
    2c74:	a5 9f       	mul	r26, r21
    2c76:	90 0d       	add	r25, r0
    2c78:	b4 9f       	mul	r27, r20
    2c7a:	90 0d       	add	r25, r0
    2c7c:	a4 9f       	mul	r26, r20
    2c7e:	80 0d       	add	r24, r0
    2c80:	91 1d       	adc	r25, r1
    2c82:	11 24       	eor	r1, r1
    2c84:	08 95       	ret

00002c86 <__mulshisi3>:
    2c86:	b7 ff       	sbrs	r27, 7
    2c88:	0c 94 38 16 	jmp	0x2c70	; 0x2c70 <__muluhisi3>

00002c8c <__mulohisi3>:
    2c8c:	0e 94 38 16 	call	0x2c70	; 0x2c70 <__muluhisi3>
    2c90:	82 1b       	sub	r24, r18
    2c92:	93 0b       	sbc	r25, r19
    2c94:	08 95       	ret

00002c96 <__umulhisi3>:
    2c96:	a2 9f       	mul	r26, r18
    2c98:	b0 01       	movw	r22, r0
    2c9a:	b3 9f       	mul	r27, r19
    2c9c:	c0 01       	movw	r24, r0
    2c9e:	a3 9f       	mul	r26, r19
    2ca0:	70 0d       	add	r23, r0
    2ca2:	81 1d       	adc	r24, r1
    2ca4:	11 24       	eor	r1, r1
    2ca6:	91 1d       	adc	r25, r1
    2ca8:	b2 9f       	mul	r27, r18
    2caa:	70 0d       	add	r23, r0
    2cac:	81 1d       	adc	r24, r1
    2cae:	11 24       	eor	r1, r1
    2cb0:	91 1d       	adc	r25, r1
    2cb2:	08 95       	ret

00002cb4 <_exit>:
    2cb4:	f8 94       	cli

00002cb6 <__stop_program>:
    2cb6:	ff cf       	rjmp	.-2      	; 0x2cb6 <__stop_program>
